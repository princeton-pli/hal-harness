{"ground_truth": "def apply_fixed_point_fir_filter(input_signal, coefficients, word_length, fraction_length):\n    # Convert coefficients to fixed-point representation\n    coefficients_fixed_point = [int(coeff * (2 ** fraction_length)) for coeff in coefficients]\n    \n    # Initialize output signal\n    output_signal = []\n    \n    # Apply filter using fixed-point arithmetic\n    for i in range(len(input_signal)):\n        # Initialize accumulator\n        accumulator = 0\n        for j in range(len(coefficients)):\n            if i - j >= 0:\n                accumulator += input_signal[i - j] * coefficients_fixed_point[j]\n        \n        # Shift and truncate to keep the output in the desired range\n        output_signal.append(accumulator >> fraction_length)\n    \n    return output_signal", "problem_description": "Write a Python function that applies a fixed-point FIR filter to an input signal. The function should take the input signal, filter coefficients, word length, and fraction length as arguments. The output should be the filtered signal.The signature of the function is: def apply_fixed_point_fir_filter(input_signal, coefficients, word_length, fraction_length)", "test_cases": {"test1": "apply_fixed_point_fir_filter([1, 2, 3, 4, 5], [0.5, 0.3], 16, 10)", "test2": "apply_fixed_point_fir_filter([10, 20, 30, 40, 50], [0.2, 0.4, 0.1], 16, 12)", "test3": "apply_fixed_point_fir_filter([100, 200, 300, 400, 500], [0.1, 0.2, 0.3], 16, 8)", "test4": "apply_fixed_point_fir_filter([1000, 2000, 3000, 4000, 5000], [0.05, 0.1, 0.15], 16, 16)", "test5": "apply_fixed_point_fir_filter([5, 10, 15, 20, 25], [0.4, 0.3], 16, 14)", "test6": "apply_fixed_point_fir_filter([50, 100, 150, 200, 250], [0.3, 0.2], 16, 10)", "test7": "apply_fixed_point_fir_filter([500, 1000, 1500, 2000, 2500], [0.2, 0.1], 16, 12)", "test8": "apply_fixed_point_fir_filter([5000, 10000, 15000, 20000, 25000], [0.1, 0.05], 16, 16)", "test9": "apply_fixed_point_fir_filter([10, 20, 30, 40, 50], [0.5, 0.4], 16, 8)", "test10": "apply_fixed_point_fir_filter([100, 200, 300, 400, 500], [0.4, 0.3], 16, 14)"}, "hidden_information": "def apply_fixed_point_fir_filter(input_signal, coefficients, word_length, fraction_length):\n    # Convert coefficients to fixed-point representation\n    coefficients_fixed_point = [int(coeff * (2 ** fraction_length)) for coeff in coefficients]\n    \n    # Initialize output signal\n    output_signal = []\n    \n    # Apply filter using fixed-point arithmetic\n    for i in range(len(input_signal)):\n        # Initialize accumulator\n        accumulator = 0\n        for j in range(len(coefficients)):\n            if i - j >= 0:\n                accumulator += input_signal[i - j] * coefficients_fixed_point[j]\n        \n        # Shift and truncate to keep the output in the desired range\n        output_signal.append(accumulator >> fraction_length)\n    \n    return output_signal"}
{"ground_truth": "def get_lance_armstrong_testimony(entity, has_criminal_charges, deadline_met=False):\n    if entity == 'USADA' and has_criminal_charges and deadline_met:\n        return True\n    elif entity == 'truth and reconciliation commission' and deadline_met:\n        return True\n    elif entity == 'Oprah Winfrey':\n        return False\n    else:\n        return False", "problem_description": "I need a Python function to represent Lance Armstrong's willingness to change his testimony based on some entities and conditions. Please help me write it.The signature of the function is: def get_lance_armstrong_testimony(entity, has_criminal_charges, deadline_met=False)", "test_cases": {"test1": "get_lance_armstrong_testimony('USADA', True, deadline_met=True)", "test2": "get_lance_armstrong_testimony('USADA', False, deadline_met=True)", "test3": "get_lance_armstrong_testimony('truth and reconciliation commission', False, deadline_met=True)", "test4": "get_lance_armstrong_testimony('Oprah Winfrey', True, deadline_met=True)", "test5": "get_lance_armstrong_testimony('Oprah Winfrey', False, deadline_met=False)", "test6": "get_lance_armstrong_testimony('USADA', True, deadline_met=False)", "test7": "get_lance_armstrong_testimony('truth and reconciliation commission', True, deadline_met=True)", "test8": "get_lance_armstrong_testimony('ABC News', True, deadline_met=True)", "test9": "get_lance_armstrong_testimony('USADA', False, deadline_met=False)", "test10": "get_lance_armstrong_testimony('truth and reconciliation commission', False, deadline_met=False)"}, "hidden_information": "def get_lance_armstrong_testimony(entity, has_criminal_charges, deadline_met=False):\n    if entity == 'USADA' and has_criminal_charges and deadline_met:\n        return True\n    elif entity == 'truth and reconciliation commission' and deadline_met:\n        return True\n    elif entity == 'Oprah Winfrey':\n        return False\n    else:\n        return False"}
{"ground_truth": "def summarize_travel_experiences(travel_history):\n    if len(travel_history) == 0:\n        return \"You have not traveled to any countries.\"\n    elif len(travel_history) == 1:\n        return f\"You have traveled to {travel_history[0]}\"\n    else:\n        countries = ', '.join(travel_history[:-1])\n        last_country = travel_history[-1]\n        return f\"You have traveled to {countries} and {last_country}\"", "problem_description": "I want an LLM agent to write a python function for me. I am hosting a radio show and I have guests who have traveled to many countries, I want the function to summarize their travel experiences based on the countries they visited.The signature of the function is: def summarize_travel_experiences(travel_history)", "test_cases": {"test1": "summarize_travel_experiences(['Cuba'])", "test2": "summarize_travel_experiences([])", "test3": "summarize_travel_experiences(['Ireland', 'Africa', 'Cuba'])", "test4": "summarize_travel_experiences(['Japan'])", "test5": "summarize_travel_experiences(['USA', 'Canada'])", "test6": "summarize_travel_experiences(['Brazil', 'Argentina', 'Chile'])", "test7": "summarize_travel_experiences(['Australia'])", "test8": "summarize_travel_experiences(['Germany', 'France'])", "test9": "summarize_travel_experiences(['China', 'Japan', 'Korea'])", "test10": "summarize_travel_experiences(['Russia'])"}, "hidden_information": "def summarize_travel_experiences(travel_history):\n    if len(travel_history) == 0:\n        return \"You have not traveled to any countries.\"\n    elif len(travel_history) == 1:\n        return f\"You have traveled to {travel_history[0]}\"\n    else:\n        countries = ', '.join(travel_history[:-1])\n        last_country = travel_history[-1]\n        return f\"You have traveled to {countries} and {last_country}\""}
{"ground_truth": "def calculate_player_score(multiplayer_wins, tower_of_lost_souls_score, story_mode_completion_time, arcade_mode_score):\n    weighted_score = 0.4 * multiplayer_wins + 0.3 * tower_of_lost_souls_score + 0.2 * (1 - story_mode_completion_time / 3600) + 0.1 * arcade_mode_score\n    return round(weighted_score * 100)", "problem_description": "Hey, I'm having trouble keeping track of my progress in Soul Calibur IV. Can you write a Python function that calculates my overall score based on my performance in different game modes? I want to be able to input my number of multiplayer wins, my score in Tower of Lost Souls, my completion time in story mode, and my score in arcade mode. Can the function then output a weighted score based on these inputs? I'd really appreciate it!The signature of the function is: def calculate_player_score(multiplayer_wins, tower_of_lost_souls_score, story_mode_completion_time, arcade_mode_score)", "test_cases": {"test1": "calculate_player_score(10, 1000, 600, 2000)", "test2": "calculate_player_score(5, 800, 900, 1500)", "test3": "calculate_player_score(20, 1200, 300, 2500)", "test4": "calculate_player_score(0, 100, 1800, 1000)", "test5": "calculate_player_score(15, 1100, 600, 2200)", "test6": "calculate_player_score(8, 900, 1000, 1800)", "test7": "calculate_player_score(12, 1050, 450, 2000)", "test8": "calculate_player_score(25, 1300, 900, 2800)", "test9": "calculate_player_score(18, 1150, 750, 2400)", "test10": "calculate_player_score(7, 800, 1200, 1600)"}, "hidden_information": "def calculate_player_score(multiplayer_wins, tower_of_lost_souls_score, story_mode_completion_time, arcade_mode_score):\n    weighted_score = 0.4 * multiplayer_wins + 0.3 * tower_of_lost_souls_score + 0.2 * (1 - story_mode_completion_time / 3600) + 0.1 * arcade_mode_score\n    return round(weighted_score * 100)"}
{"ground_truth": "def calculate_weighted_score(reviews, weights={'MobyScore': 0.6, 'User Reviews': 0.4}):\n    if isinstance(reviews, dict):\n        reviews = [reviews]\n    scores = []\n    for review in reviews:\n        review_score = 0\n        total_weight = 0\n        for key, score in review.items():\n            if key in weights:\n                review_score += score * weights[key]\n                total_weight += weights[key]\n        review_score /= total_weight\n        scores.append(review_score)\n    return sum(scores) / len(scores)", "problem_description": "I want you to write a Python function that calculates a score based on the SimCity reviews I provide. It should take into account both the MobyScore and the User Reviews, but I'm not sure what weights to give them. Can you figure it out?The signature of the function is: def calculate_weighted_score(reviews, weights={'MobyScore'", "test_cases": {"test1": "calculate_weighted_score({'MobyScore': 4.3, 'User Reviews': 4.6})", "test2": "calculate_weighted_score([{'MobyScore': 4.3, 'User Reviews': 4.6}, {'MobyScore': 4.5, 'User Reviews': 4.2}])", "test3": "calculate_weighted_score({'MobyScore': 4.8, 'User Reviews': 4.9})", "test4": "calculate_weighted_score([{'MobyScore': 4.1, 'User Reviews': 4.7}, {'MobyScore': 4.9, 'User Reviews': 4.1}])", "test5": "calculate_weighted_score({'MobyScore': 4.4, 'User Reviews': 4.8})", "test6": "calculate_weighted_score([{'MobyScore': 4.6, 'User Reviews': 4.3}, {'MobyScore': 4.2, 'User Reviews': 4.9}])", "test7": "calculate_weighted_score({'MobyScore': 4.7, 'User Reviews': 4.5})", "test8": "calculate_weighted_score([{'MobyScore': 4.9, 'User Reviews': 4.4}, {'MobyScore': 4.3, 'User Reviews': 4.6}])", "test9": "calculate_weighted_score({'MobyScore': 4.5, 'User Reviews': 4.9})", "test10": "calculate_weighted_score([{'MobyScore': 4.8, 'User Reviews': 4.2}, {'MobyScore': 4.1, 'User Reviews': 4.7}, {'MobyScore': 4.6, 'User Reviews': 4.3}])"}, "hidden_information": "def calculate_weighted_score(reviews, weights={'MobyScore': 0.6, 'User Reviews': 0.4}):\n    if isinstance(reviews, dict):\n        reviews = [reviews]\n    scores = []\n    for review in reviews:\n        review_score = 0\n        total_weight = 0\n        for key, score in review.items():\n            if key in weights:\n                review_score += score * weights[key]\n                total_weight += weights[key]\n        review_score /= total_weight\n        scores.append(review_score)\n    return sum(scores) / len(scores)"}
{"ground_truth": "def optimize_schema(document_structure, collection_size):\n    schema = {}\n    for field in document_structure:\n        if isinstance(field, dict):\n            schema[field['name']] = field['type']\n        else:\n            schema[field] = 'string'\n    return schema", "problem_description": "Can you write a python function that takes into account the document structure of my MongoDB collection and returns an optimized schema design? The function should process the document structure which is a list of field names and types, and collection size, and return a dictionary representing the optimized schema.The signature of the function is: def optimize_schema(document_structure, collection_size)", "test_cases": {"test1": "optimize_schema([{'name': 'title', 'type': 'string'}, {'name': 'author', 'type': 'string'}], 1000)", "test2": "optimize_schema(['name', 'age'], 500)", "test3": "optimize_schema([{'name': 'address', 'type': 'object'}, {'name': 'phone', 'type': 'string'}], 2000)", "test4": "optimize_schema([], 0)", "test5": "optimize_schema([{'name': 'dob', 'type': 'date'}], 100)", "test6": "optimize_schema(['name', 'age', 'address'], 5000)", "test7": "optimize_schema([{'name': ' occupation', 'type': 'string'}], 200)", "test8": "optimize_schema([], 1000)", "test9": "optimize_schema([{'name': 'hobbies', 'type': 'array'}], 3000)", "test10": "optimize_schema([{'name': 'company', 'type': 'object'}], 4000)"}, "hidden_information": "def optimize_schema(document_structure, collection_size):\n    schema = {}\n    for field in document_structure:\n        if isinstance(field, dict):\n            schema[field['name']] = field['type']\n        else:\n            schema[field] = 'string'\n    return schema"}
{"ground_truth": "def calculate_minimum_community_service_hours(students, employees, employees_hours_worked, volunteers, volunteer_hours_contributed):\n    total_hours_worked = sum(employees_hours_worked)\n    total_volunteer_hours = sum(volunteer_hours_contributed)\n    required_hours = (students * 10) + (total_hours_worked / 2) - total_volunteer_hours\n    if required_hours < 0:\n        return 0\n    else:\n        return required_hours", "problem_description": "I need a Python function to calculate the minimum number of community service hours required in our school. We have students, employees, and volunteers who contribute to the community service hours. Can you write a function that takes into account the number of students, employees, and volunteers, as well as the total hours worked by employees and the hours contributed by volunteers?The signature of the function is: def calculate_minimum_community_service_hours(students, employees, employees_hours_worked, volunteers, volunteer_hours_contributed)", "test_cases": {"test1": "calculate_minimum_community_service_hours(100, 20, [40, 50, 30, 60], 50, [10, 15, 12, 10])", "test2": "calculate_minimum_community_service_hours(50, 10, [40, 50, 30], 20, [10, 15, 12])", "test3": "calculate_minimum_community_service_hours(200, 30, [40, 50, 30, 60, 45], 75, [10, 15, 12, 10, 15, 10, 12, 10])", "test4": "calculate_minimum_community_service_hours(150, 25, [40, 50, 30, 60, 45, 50], 50, [10, 15, 12, 10, 15, 10, 12])", "test5": "calculate_minimum_community_service_hours(100, 20, [40, 50, 30, 60, 50, 40], 25, [10, 15, 12])", "test6": "calculate_minimum_community_service_hours(250, 35, [40, 50, 30, 60, 45, 50, 55], 100, [10, 15, 12, 10, 15, 10, 12, 10, 15, 10])", "test7": "calculate_minimum_community_service_hours(300, 40, [40, 50, 30, 60, 45, 50, 55, 65], 125, [10, 15, 12, 10, 15, 10, 12, 10, 15, 10, 15])", "test8": "calculate_minimum_community_service_hours(400, 50, [40, 50, 30, 60, 45, 50, 55, 65, 70], 150, [10, 15, 12, 10, 15, 10, 12, 10, 15, 10, 15, 10, 15])", "test9": "calculate_minimum_community_service_hours(500, 60, [40, 50, 30, 60, 45, 50, 55, 65, 70, 75], 200, [10, 15, 12, 10, 15, 10, 12, 10, 15, 10, 15, 10, 15, 10])", "test10": "calculate_minimum_community_service_hours(600, 70, [40, 50, 30, 60, 45, 50, 55, 65, 70, 75, 80], 250, [10, 15, 12, 10, 15, 10, 12, 10, 15, 10, 15, 10, 15, 10, 15, 10])"}, "hidden_information": "def calculate_minimum_community_service_hours(students, employees, employees_hours_worked, volunteers, volunteer_hours_contributed):\n    total_hours_worked = sum(employees_hours_worked)\n    total_volunteer_hours = sum(volunteer_hours_contributed)\n    required_hours = (students * 10) + (total_hours_worked / 2) - total_volunteer_hours\n    if required_hours < 0:\n        return 0\n    else:\n        return required_hours"}
{"ground_truth": "def calculate_financed_aid_percentage(total_aid, financed_aid):\n    if total_aid == 0:\n        return 0\n    else:\n        return (financed_aid / total_aid) * 100", "problem_description": "I need a Python function to calculate the percentage of financed aid for refugee support in various regions. The article I read said that only 18 percent of the United Nations' $54 million appeal for refugee aid in the Central African Republic has been financed. I'd like the function to take into account different total aid amounts and financed aid amounts. Can you help me with this?The signature of the function is: def calculate_financed_aid_percentage(total_aid, financed_aid)", "test_cases": {"test1": "calculate_financed_aid_percentage(54000000, 9720000)", "test2": "calculate_financed_aid_percentage(10000000, 8000000)", "test3": "calculate_financed_aid_percentage(5000000, 0)", "test4": "calculate_financed_aid_percentage(20000000, 15000000)", "test5": "calculate_financed_aid_percentage(30000000, 21000000)", "test6": "calculate_financed_aid_percentage(40000000, 28000000)", "test7": "calculate_financed_aid_percentage(55000000, 38500000)", "test8": "calculate_financed_aid_percentage(25000000, 17500000)", "test9": "calculate_financed_aid_percentage(35000000, 24500000)", "test10": "calculate_financed_aid_percentage(45000000, 31500000)"}, "hidden_information": "def calculate_financed_aid_percentage(total_aid, financed_aid):\n    if total_aid == 0:\n        return 0\n    else:\n        return (financed_aid / total_aid) * 100"}
{"ground_truth": "def calculate_average_speed(total_distance_miles, total_time_minutes): return (total_distance_miles / total_time_minutes) * 60", "problem_description": "I need a Python function to calculate the average speed of a driver in miles per hour. The function should take into account the total distance traveled and the total time taken. Can you help me write this function? The unit of the inputs should be miles and minutes respectively.The signature of the function is: def calculate_average_speed(total_distance_miles, total_time_minutes)", "test_cases": {"test1": "calculate_average_speed(2.386, 1)", "test2": "calculate_average_speed(100, 60)", "test3": "calculate_average_speed(50, 30)", "test4": "calculate_average_speed(200, 2)", "test5": "calculate_average_speed(1.5, 1)", "test6": "calculate_average_speed(500, 120)", "test7": "calculate_average_speed(20, 10)", "test8": "calculate_average_speed(300, 90)", "test9": "calculate_average_speed(150, 45)", "test10": "calculate_average_speed(80, 20)"}, "hidden_information": "def calculate_average_speed(total_distance_miles, total_time_minutes): return (total_distance_miles / total_time_minutes) * 60"}
{"ground_truth": "def compute_ranking(stage_times, rider_names):\n    if len(stage_times) != len(rider_names):\n        raise ValueError('Number of stage times and rider names must match')\n    sorted_indices = sorted(range(len(stage_times)), key=lambda i: stage_times[i])\n    return {rider_names[i]: idx + 1 for idx, i in enumerate(sorted_indices)}", "problem_description": "I need a Python function to determine the ranking of Dakar Rally riders based on their stage times. I have a list of overall standings, but I want to see how the riders rank after each stage. Can you write a function that takes in the stage times and rider names, and outputs their ranking?The signature of the function is: def compute_ranking(stage_times, rider_names)", "test_cases": {"test1": "compute_ranking([30208, 12154, 13445, 12553, 13204, 13312, 13403, 13638, 13704, 13753], ['Marc Coma', 'Jordi Viladoms', 'Jakub Przygonski', 'Helder Rodrigues', 'Riaan van Niekerk', 'Juan Carlos Salvatierra', 'Juan Pedrero Garcia', 'Stefan Svitko', 'Robert van Pelt', 'Daniel Gouet'])", "test2": "compute_ranking([120, 90, 150, 100, 130], ['Rider A', 'Rider B', 'Rider C', 'Rider D', 'Rider E'])", "test3": "compute_ranking([100, 100, 150, 100], ['Rider A', 'Rider B', 'Rider C', 'Rider D'])", "test4": "compute_ranking([], [])", "test5": "compute_ranking([100], ['Rider A'])", "test6": "compute_ranking([100, 200, 300], ['Rider A', 'Rider B', 'Rider C'])", "test7": "compute_ranking([100, 200, 300, 400, 500], ['Rider A', 'Rider B', 'Rider C', 'Rider D', 'Rider E'])", "test8": "compute_ranking([500, 400, 300, 200, 100], ['Rider A', 'Rider B', 'Rider C', 'Rider D', 'Rider E'])", "test9": "compute_ranking([100, 200, 300, 400, 500, 600], ['Rider A', 'Rider B', 'Rider C', 'Rider D', 'Rider E', 'Rider F'])", "test10": "compute_ranking([600, 500, 400, 300, 200, 100], ['Rider A', 'Rider B', 'Rider C', 'Rider D', 'Rider E', 'Rider F'])"}, "hidden_information": "def compute_ranking(stage_times, rider_names):\n    if len(stage_times) != len(rider_names):\n        raise ValueError('Number of stage times and rider names must match')\n    sorted_indices = sorted(range(len(stage_times)), key=lambda i: stage_times[i])\n    return {rider_names[i]: idx + 1 for idx, i in enumerate(sorted_indices)}"}
{"ground_truth": "def categorize_child(talkativeness_level, attention_span, play_alone_ability, question_frequency): \n\tif talkativeness_level > 8 and attention_span < 5 and play_alone_ability < 3 and question_frequency > 10: \n\t\treturn 'Extroverted and Demanding'\n\telif talkativeness_level > 6 and attention_span < 7 and play_alone_ability < 5 and question_frequency > 5: \n\t\treturn 'Extroverted and Chatty'\n\telif talkativeness_level < 4 and attention_span > 8 and play_alone_ability > 7 and question_frequency < 3: \n\t\treturn 'Introverted and Independent'\n\telse: \n\t\treturn 'Balanced'", "problem_description": "I need a Python function that can help me determine the type of child based on their behavior. The function should take in parameters such as talkativeness level, attention span, ability to play alone, and frequency of questions. Can the agent help me come up with this function?The signature of the function is: def categorize_child(talkativeness_level, attention_span, play_alone_ability, question_frequency)", "test_cases": {"test1": "categorize_child(9, 4, 2, 12)", "test2": "categorize_child(7, 6, 4, 6)", "test3": "categorize_child(3, 9, 8, 2)", "test4": "categorize_child(5, 5, 5, 5)", "test5": "categorize_child(8, 3, 1, 10)", "test6": "categorize_child(6, 7, 6, 8)", "test7": "categorize_child(4, 8, 7, 1)", "test8": "categorize_child(9, 4, 2, 20)", "test9": "categorize_child(1, 10, 9, 1)", "test10": "categorize_child(7, 6, 6, 9)"}, "hidden_information": "def categorize_child(talkativeness_level, attention_span, play_alone_ability, question_frequency): \n\tif talkativeness_level > 8 and attention_span < 5 and play_alone_ability < 3 and question_frequency > 10: \n\t\treturn 'Extroverted and Demanding'\n\telif talkativeness_level > 6 and attention_span < 7 and play_alone_ability < 5 and question_frequency > 5: \n\t\treturn 'Extroverted and Chatty'\n\telif talkativeness_level < 4 and attention_span > 8 and play_alone_ability > 7 and question_frequency < 3: \n\t\treturn 'Introverted and Independent'\n\telse: \n\t\treturn 'Balanced'"}
{"ground_truth": "def get_recommended_desktop(office_use, budget, touch_screen, os_preference):\n    if office_use and budget > 600:\n        if touch_screen:\n            if os_preference == \"PC\":\n                return \"Dell non-touch all-in-one PC\"\n            else:\n                return \"Apple refurbished iMac\"\n        else:\n            if os_preference == \"PC\":\n                return \"Dell non-touch all-in-one PC\"\n            else:\n                return \"Apple refurbished iMac\"\n    elif office_use and budget <= 600:\n        return \"Refurbished desktop from a reputable supplier on eBay\"\n    else:\n        return \"Desktop recommendation not found\"", "problem_description": "Write a python function to help me find a suitable desktop machine for office use, considering factors like touch screen, operating system, and budget. I want to use the function to determine the ideal desktop machine based on these criteria.The signature of the function is: def get_recommended_desktop(office_use, budget, touch_screen, os_preference)", "test_cases": {"test1": "get_recommended_desktop(True, 1000, True, \"PC\")", "test2": "get_recommended_desktop(True, 1000, False, \"Mac\")", "test3": "get_recommended_desktop(True, 500, True, \"PC\")", "test4": "get_recommended_desktop(False, 1000, True, \"Mac\")", "test5": "get_recommended_desktop(False, 1000, False, \"PC\")", "test6": "get_recommended_desktop(True, 1000, True, \"Mac\")", "test7": "get_recommended_desktop(True, 600, False, \"PC\")", "test8": "get_recommended_desktop(True, 600, True, \"Mac\")", "test9": "get_recommended_desktop(False, 1000, True, \"Linux\")", "test10": "get_recommended_desktop(True, 1000, False, \"ChromeOS\")"}, "hidden_information": "def get_recommended_desktop(office_use, budget, touch_screen, os_preference):\n    if office_use and budget > 600:\n        if touch_screen:\n            if os_preference == \"PC\":\n                return \"Dell non-touch all-in-one PC\"\n            else:\n                return \"Apple refurbished iMac\"\n        else:\n            if os_preference == \"PC\":\n                return \"Dell non-touch all-in-one PC\"\n            else:\n                return \"Apple refurbished iMac\"\n    elif office_use and budget <= 600:\n        return \"Refurbished desktop from a reputable supplier on eBay\"\n    else:\n        return \"Desktop recommendation not found\""}
{"ground_truth": "def verify_outfits(occasion, outfits, allowed_outfits):\n    for outfit in outfits:\n        if occasion in allowed_outfits and outfit in allowed_outfits[occasion]:\n            return True\n    return False\n\nallowed_outfits = {\n    'summer': ['summer_dress', 't-shirt', 'shorts'],\n    'winter': ['coat', 'cardi', 'pants'],\n    'formal': ['dress', 'suit', 'tie']\n}\n\n# example usage:\ndef get_dress_code(outfits):\n    if verify_outfits('summer', outfits, allowed_outfits):\n        return 'Allowed'\n    else:\n        return 'Not Allowed'", "problem_description": "Please write a python function that can verify a list of outfits for a given occasion. Based on some predefined rules, the function should return True if all outfits are suitable for the occasion, and False otherwise.The signature of the function is: def verify_outfits(occasion, outfits, allowed_outfits)", "test_cases": {"test1": "verify_outfits('summer', ['summer_dress', 't-shirt', 'shorts'], allowed_outfits)", "test2": "verify_outfits('winter', ['coat', 'cardi', 'pants'], allowed_outfits)", "test3": "verify_outfits('formal', ['dress', 'suit', 'tie'], allowed_outfits)", "test4": "verify_outfits('summer', ['coat', 'cardi', 'pants'], allowed_outfits)", "test5": "verify_outfits('winter', ['summer_dress', 't-shirt', 'shorts'], allowed_outfits)", "test6": "verify_outfits('formal', ['summer_dress', 't-shirt', 'shorts'], allowed_outfits)", "test7": "verify_outfits('summer', ['summer_dress', 'coat', 'pants'], allowed_outfits)", "test8": "verify_outfits('winter', ['summer_dress', 'cardi', 'shorts'], allowed_outfits)", "test9": "verify_outfits('formal', ['summer_dress', 't-shirt', 'tie'], allowed_outfits)", "test10": "verify_outfits('summer', ['summer_dress', 't-shirt', 'dress'], allowed_outfits)"}, "hidden_information": "def verify_outfits(occasion, outfits, allowed_outfits):\n    for outfit in outfits:\n        if occasion in allowed_outfits and outfit in allowed_outfits[occasion]:\n            return True\n    return False\n\nallowed_outfits = {\n    'summer': ['summer_dress', 't-shirt', 'shorts'],\n    'winter': ['coat', 'cardi', 'pants'],\n    'formal': ['dress', 'suit', 'tie']\n}\n\n# example usage:\ndef get_dress_code(outfits):\n    if verify_outfits('summer', outfits, allowed_outfits):\n        return 'Allowed'\n    else:\n        return 'Not Allowed'"}
{"ground_truth": "def calculate_total_weight_and_rank(fishermen_data):\n    fishermen_weights = {}\n    for fisherman in fishermen_data:\n        total_weight = sum(fisherman['days'])\n        fishermen_weights[fisherman['name']] = total_weight\n    sorted_fishermen = sorted(fishermen_weights.items(), key=lambda x: x[1], reverse=True)\n    ranks = {}\n    for i, (name, weight) in enumerate(sorted_fishermen):\n        ranks[name] = i+1\n    return ranks", "problem_description": "Can the agent write a Python function to calculate the total weight of fish caught by each fisherman in the tournament and rank them based on their total weight?The signature of the function is: def calculate_total_weight_and_rank(fishermen_data)", "test_cases": {"test1": "calculate_total_weight_and_rank([{'name': 'Keith Combs', 'days': [34.13, 28.01, 20.05, 28.02]}, {'name': 'Rick Clunn', 'days': [12.12, 32.09, 36.14, 23.03]}])", "test2": "calculate_total_weight_and_rank([{'name': 'John Crews', 'days': [26.03, 15.08, 32.11, 29.07]}, {'name': 'Josh Bertrand', 'days': [30.05, 23.00, 18.11, 27.02]}])", "test3": "calculate_total_weight_and_rank([{'name': 'Cliff Prince', 'days': [30.13, 22.12, 23.02, 18.14]}, {'name': 'Edwin Evers', 'days': [26.08, 28.15, 23.08, 15.11]}])", "test4": "calculate_total_weight_and_rank([{'name': 'Brandon Card', 'days': [20.03, 25.12, 29.03, 19.03]}, {'name': 'Jason Williamson', 'days': [23.12, 20.07, 32.09, 17.06]}])", "test5": "calculate_total_weight_and_rank([{'name': 'Cliff Crochet', 'days': [18.12, 35.03, 18.07, 10.00]}, {'name': 'Billy McCaghren', 'days': [20.05, 20.03, 31.12, 8.10]}])", "test6": "calculate_total_weight_and_rank([{'name': 'Gary Klein', 'days': [21.11, 28.12, 28.06, 1.14]}, {'name': 'Jason Christie', 'days': [28.15, 25.01, 18.01, 3.03]}])", "test7": "calculate_total_weight_and_rank([{'name': 'Keith Combs', 'days': [34.13, 28.01, 20.05, 28.02]}, {'name': 'Rick Clunn', 'days': [12.12, 32.09, 36.14, 23.03]}, {'name': 'John Crews', 'days': [26.03, 15.08, 32.11, 29.07]}])", "test8": "calculate_total_weight_and_rank([{'name': 'Josh Bertrand', 'days': [30.05, 23.00, 18.11, 27.02]}, {'name': 'Cliff Prince', 'days': [30.13, 22.12, 23.02, 18.14]}, {'name': 'Edwin Evers', 'days': [26.08, 28.15, 23.08, 15.11]}])", "test9": "calculate_total_weight_and_rank([{'name': 'Brandon Card', 'days': [20.03, 25.12, 29.03, 19.03]}, {'name': 'Jason Williamson', 'days': [23.12, 20.07, 32.09, 17.06]}, {'name': 'Cliff Crochet', 'days': [18.12, 35.03, 18.07, 10.00]}])", "test10": "calculate_total_weight_and_rank([{'name': 'Billy McCaghren', 'days': [20.05, 20.03, 31.12, 8.10]}, {'name': 'Gary Klein', 'days': [21.11, 28.12, 28.06, 1.14]}, {'name': 'Jason Christie', 'days': [28.15, 25.01, 18.01, 3.03]}])"}, "hidden_information": "def calculate_total_weight_and_rank(fishermen_data):\n    fishermen_weights = {}\n    for fisherman in fishermen_data:\n        total_weight = sum(fisherman['days'])\n        fishermen_weights[fisherman['name']] = total_weight\n    sorted_fishermen = sorted(fishermen_weights.items(), key=lambda x: x[1], reverse=True)\n    ranks = {}\n    for i, (name, weight) in enumerate(sorted_fishermen):\n        ranks[name] = i+1\n    return ranks"}
{"ground_truth": "def calculate_total_recycling_cost(recyclable_types, weights, prices_per_ton):\n    total_cost = 0\n    for i in range(len(recyclable_types)):\n        total_cost += weights[i] * prices_per_ton[recyclable_types[i]]\n    return total_cost", "problem_description": "I need a Python function to calculate the total cost of the recyclables collected by our, ahem, 'business associates' in New Jersey. They collect different types of recyclables and I need to know the total cost based on the weights and prices per ton. Can you write a function for me?The signature of the function is: def calculate_total_recycling_cost(recyclable_types, weights, prices_per_ton)", "test_cases": {"test1": "calculate_total_recycling_cost(['glass', 'paper', 'plastic'], [1000, 500, 2000], {'glass': 50, 'paper': 20, 'plastic': 30})", "test2": "calculate_total_recycling_cost(['cardboard', 'metal'], [800, 1200], {'cardboard': 15, 'metal': 40})", "test3": "calculate_total_recycling_cost(['glass', 'paper'], [200, 300], {'glass': 50, 'paper': 20})", "test4": "calculate_total_recycling_cost(['plastic', 'cardboard'], [1500, 1000], {'plastic': 30, 'cardboard': 15})", "test5": "calculate_total_recycling_cost(['metal', 'glass'], [100, 200], {'metal': 40, 'glass': 50})", "test6": "calculate_total_recycling_cost(['paper', 'plastic'], [400, 600], {'paper': 20, 'plastic': 30})", "test7": "calculate_total_recycling_cost(['cardboard', 'paper'], [300, 500], {'cardboard': 15, 'paper': 20})", "test8": "calculate_total_recycling_cost(['metal', 'cardboard'], [200, 400], {'metal': 40, 'cardboard': 15})", "test9": "calculate_total_recycling_cost(['glass', 'metal'], [150, 250], {'glass': 50, 'metal': 40})", "test10": "calculate_total_recycling_cost(['plastic', 'glass'], [2500, 1000], {'plastic': 30, 'glass': 50})"}, "hidden_information": "def calculate_total_recycling_cost(recyclable_types, weights, prices_per_ton):\n    total_cost = 0\n    for i in range(len(recyclable_types)):\n        total_cost += weights[i] * prices_per_ton[recyclable_types[i]]\n    return total_cost"}
{"ground_truth": "def calculate_total_tips(tip_amounts, individuals_tipped):\n    total_tips = 0\n    for tip_amount in tip_amounts.values():\n        total_tips += tip_amount\n    return total_tips * len(individuals_tipped)", "problem_description": "I'm trying to determine the total amount of tips I should give to my service providers during the holiday season. I have a list of service providers and their respective tip amounts, as well as the number of individuals I need to tip in each category. Can you write a python function to help me calculate the total tip amount?The signature of the function is: def calculate_total_tips(tip_amounts, individuals_tipped)", "test_cases": {"test1": "calculate_total_tips({\"doorman\": 50, \"dogwalker\": 40}, [\"John\", \"Jane\", \"Doe\"])", "test2": "calculate_total_tips({\"hairdresser\": 75, \"janitor\": 25}, [\"Alice\", \"Bob\", \"Charlie\"])", "test3": "calculate_total_tips({\"mailman\": 25, \"nanny\": 100}, [\"Eve\", \"Mike\", \"Nancy\"])", "test4": "calculate_total_tips({\"personal trainer\": 50, \"teacher\": 100}, [\"Tom\", \"Alex\", \"Stephanie\"])", "test5": "calculate_total_tips({\"receptionist\": 35, \"housekeeper\": 40}, [\"Rose\", \"Max\", \"Emily\"])", "test6": "calculate_total_tips({\"chiropractor\": 50, \"dogwalker\": 35}, [\"Lucy\", \"Peter\", \"Melissa\"])", "test7": "calculate_total_tips({\"UPS\": 25, \"FedEx\": 30}, [\"James\", \"Christine\", \"Jessica\"])", "test8": "calculate_total_tips({\"parking\": 40, \"superintendent\": 45}, [\"Richard\", \"Jane\", \"Tom\"])", "test9": "calculate_total_tips({\"waiter\": 35, \"barber\": 40}, [\"Dawn\", \"Mike\", \"Suzy\"])", "test10": "calculate_total_tips({\"teller\": 30, \"hairdresser\": 50}, [\"Lauren\", \"Michael\", \"Anthony\"])"}, "hidden_information": "def calculate_total_tips(tip_amounts, individuals_tipped):\n    total_tips = 0\n    for tip_amount in tip_amounts.values():\n        total_tips += tip_amount\n    return total_tips * len(individuals_tipped)"}
{"ground_truth": "def calculate_emission_cuts(current_emissions, reduction_percentage, year_target):\n    return (current_emissions * reduction_percentage) / 100 * (year_target - 2023)", "problem_description": "Could you write a Python function that determines the amount of greenhouse gas emissions a country needs to cut by a certain year? I know the European Union, Canada, and Japan are aiming to halve their emissions by 2050, but I'm not sure how to calculate this. Can you please help me figure this out?The signature of the function is: def calculate_emission_cuts(current_emissions, reduction_percentage, year_target)", "test_cases": {"test1": "calculate_emission_cuts(1000, 50, 2050)", "test2": "calculate_emission_cuts(500, 25, 2030)", "test3": "calculate_emission_cuts(2000, 75, 2060)", "test4": "calculate_emission_cuts(800, 30, 2045)", "test5": "calculate_emission_cuts(1200, 40, 2055)", "test6": "calculate_emission_cuts(900, 20, 2040)", "test7": "calculate_emission_cuts(1500, 60, 2070)", "test8": "calculate_emission_cuts(1100, 45, 2052)", "test9": "calculate_emission_cuts(700, 35, 2035)", "test10": "calculate_emission_cuts(1800, 65, 2065)"}, "hidden_information": "def calculate_emission_cuts(current_emissions, reduction_percentage, year_target):\n    return (current_emissions * reduction_percentage) / 100 * (year_target - 2023)"}
{"ground_truth": "def analyze_red_tides(bloom_locations, bloom_sizes, coastal_economies, marine_life): \n    total_impact = 0\n    for location, size in bloom_sizes.items():\n        if location in bloom_locations:\n            economic_impact = coastal_economies[location] * size\n            marine_life_impact = marine_life[location] * size\n            total_impact += economic_impact + marine_life_impact\n    return total_impact", "problem_description": "I need a Python function that can track the spread of red tides along coastlines and calculate their economic and environmental impact. The function should take into account the location and size of the blooms, as well as the local economy and marine life. Can you help me write such a function?The signature of the function is: def analyze_red_tides(bloom_locations, bloom_sizes, coastal_economies, marine_life)", "test_cases": {"test1": "analyze_red_tides(['Naples', 'North Carolina'], {'Naples': 100, 'North Carolina': 200}, {'Naples': 100000, 'North Carolina': 50000}, {'Naples': 1000, 'North Carolina': 500})", "test2": "analyze_red_tides(['California', 'Oregon'], {'California': 50, 'Oregon': 75}, {'California': 50000, 'Oregon': 20000}, {'California': 500, 'Oregon': 200})", "test3": "analyze_red_tides(['Florida', 'Georgia'], {'Florida': 25, 'Georgia': 100}, {'Florida': 20000, 'Georgia': 10000}, {'Florida': 200, 'Georgia': 100})", "test4": "analyze_red_tides(['New York', 'New Jersey'], {'New York': 10, 'New Jersey': 20}, {'New York': 10000, 'New Jersey': 5000}, {'New York': 100, 'New Jersey': 50})", "test5": "analyze_red_tides(['Texas', 'Louisiana'], {'Texas': 15, 'Louisiana': 30}, {'Texas': 15000, 'Louisiana': 7500}, {'Texas': 150, 'Louisiana': 75})", "test6": "analyze_red_tides(['Alabama', 'Mississippi'], {'Alabama': 20, 'Mississippi': 40}, {'Alabama': 10000, 'Mississippi': 5000}, {'Alabama': 100, 'Mississippi': 50})", "test7": "analyze_red_tides(['South Carolina', 'Virginia'], {'South Carolina': 12, 'Virginia': 25}, {'South Carolina': 12000, 'Virginia': 6000}, {'South Carolina': 120, 'Virginia': 60})", "test8": "analyze_red_tides(['Massachusetts', 'Maine'], {'Massachusetts': 8, 'Maine': 18}, {'Massachusetts': 8000, 'Maine': 4000}, {'Massachusetts': 80, 'Maine': 40})", "test9": "analyze_red_tides(['Rhode Island', 'Connecticut'], {'Rhode Island': 6, 'Connecticut': 12}, {'Rhode Island': 6000, 'Connecticut': 3000}, {'Rhode Island': 60, 'Connecticut': 30})", "test10": "analyze_red_tides(['Delaware', 'Maryland'], {'Delaware': 4, 'Maryland': 8}, {'Delaware': 4000, 'Maryland': 2000}, {'Delaware': 40, 'Maryland': 20})"}, "hidden_information": "def analyze_red_tides(bloom_locations, bloom_sizes, coastal_economies, marine_life): \n    total_impact = 0\n    for location, size in bloom_sizes.items():\n        if location in bloom_locations:\n            economic_impact = coastal_economies[location] * size\n            marine_life_impact = marine_life[location] * size\n            total_impact += economic_impact + marine_life_impact\n    return total_impact"}
{"ground_truth": "def should_test_for_hiv(athlete_appearances, calendar_year, previous_test_results):\n    athletes_to_test = []\n    for athlete, appearances in athlete_appearances.items():\n        if appearances <= 1 and calendar_year < 1988:\n            athletes_to_test.append(athlete)\n        elif appearances > 1 and (calendar_year - previous_test_results.get(athlete, 0)) > 1:\n            athletes_to_test.append(athlete)\n    return athletes_to_test", "problem_description": "Can you write a Python function that determines which athletes should be tested for H.I.V. based on the number of appearances and the calendar year? The function should consider the Nevada state rule that a boxer must provide a certified result of an H.I.V. test either before his second appearance in each calendar year, or before his second appearance over all.The signature of the function is: def should_test_for_hiv(athlete_appearances, calendar_year, previous_test_results)", "test_cases": {"test1": "should_test_for_hiv({'Evander Holyfield': 0, 'Riddick Bowe': 1}, 1992, {'Riddick Bowe': 1991})", "test2": "should_test_for_hiv({'John Doe': 2, 'Jane Doe': 1}, 1987, {})", "test3": "should_test_for_hiv({'Magic Johnson': 0, 'Larry Bird': 2}, 1989, {})", "test4": "should_test_for_hiv({'Michael Jordan': 1, 'Charles Barkley': 3}, 1990, {'Michael Jordan': 1988})", "test5": "should_test_for_hiv({'Wilt Chamberlain': 2, 'Bill Russell': 1}, 1988, {'Wilt Chamberlain': 1985})", "test6": "should_test_for_hiv({'Lew Alcindor': 0, 'Jerry West': 2}, 1991, {'Lew Alcindor': 1986})", "test7": "should_test_for_hiv({'Oscar Robertson': 1, 'Hakeem Olajuwon': 3}, 1989, {'Oscar Robertson': 1987})", "test8": "should_test_for_hiv({'Elgin Baylor': 2, 'Elvin Hayes': 1}, 1990, {'Elgin Baylor': 1984})", "test9": "should_test_for_hiv({'Willis Reed': 0, 'Dave Bing': 2}, 1991, {'Willis Reed': 1988})", "test10": "should_test_for_hiv({'Pete Maravich': 1, 'John Havlicek': 3}, 1988, {'Pete Maravich': 1986})"}, "hidden_information": "def should_test_for_hiv(athlete_appearances, calendar_year, previous_test_results):\n    athletes_to_test = []\n    for athlete, appearances in athlete_appearances.items():\n        if appearances <= 1 and calendar_year < 1988:\n            athletes_to_test.append(athlete)\n        elif appearances > 1 and (calendar_year - previous_test_results.get(athlete, 0)) > 1:\n            athletes_to_test.append(athlete)\n    return athletes_to_test"}
{"ground_truth": "def count_imprisonments(events):\n    imprisonments = 0\n    total_prison_time = 0\n    for event in events:\n        if 'arrested' in event['description']:\n            imprisonments += 1\n            total_prison_time += event.get('prison_time', 0)\n    return imprisonments, total_prison_time", "problem_description": "I need a python function that takes a list of events related to the Plastic People of the Universe and calculates the number of imprisonments and the total prison time served by the band members and their associates. The events are in a list of dictionaries, where each dictionary contains information about the event, including a description and possibly a prison time.The signature of the function is: def count_imprisonments(events)", "test_cases": {"test1": "count_imprisonments([{'description': 'arrested', 'prison_time': 10}, {'description': 'concert'}, {'description': 'arrested', 'prison_time': 5}])", "test2": "count_imprisonments([{'description': 'arrested', 'prison_time': 2}, {'description': 'festival'}, {'description': 'not arrested'}, {'description': 'arrested', 'prison_time': 8}])", "test3": "count_imprisonments([{'description': 'not arrested'}, {'description': 'not arrested'}, {'description': 'not arrested'}])", "test4": "count_imprisonments([{'description': 'arrested', 'prison_time': 11}, {'description': 'arrested', 'prison_time': 9}, {'description': 'arrested', 'prison_time': 7}])", "test5": "count_imprisonments([{'description': 'arrested', 'prison_time': 3}, {'description': 'arrested', 'prison_time': 2}, {'description': 'arrested', 'prison_time': 5}, {'description': 'arrested', 'prison_time': 1}])", "test6": "count_imprisonments([{'description': 'arrested', 'prison_time': 8}, {'description': 'arrested', 'prison_time': 9}, {'description': 'arrested', 'prison_time': 3}, {'description': 'arrested', 'prison_time': 7}])", "test7": "count_imprisonments([{'description': 'arrested', 'prison_time': 10}, {'description': 'arrested', 'prison_time': 8}, {'description': 'arrested', 'prison_time': 11}, {'description': 'arrested', 'prison_time': 9}])", "test8": "count_imprisonments([{'description': 'arrested', 'prison_time': 4}, {'description': 'arrested', 'prison_time': 1}, {'description': 'arrested', 'prison_time': 10}, {'description': 'arrested', 'prison_time': 6}])", "test9": "count_imprisonments([{'description': 'arrested', 'prison_time': 0}, {'description': 'arrested', 'prison_time': 7}, {'description': 'arrested', 'prison_time': 5}, {'description': 'arrested', 'prison_time': 3}])", "test10": "count_imprisonments([{'description': 'arrested', 'prison_time': 6}, {'description': 'arrested', 'prison_time': 4}, {'description': 'arrested', 'prison_time': 2}, {'description': 'arrested', 'prison_time': 8}])"}, "hidden_information": "def count_imprisonments(events):\n    imprisonments = 0\n    total_prison_time = 0\n    for event in events:\n        if 'arrested' in event['description']:\n            imprisonments += 1\n            total_prison_time += event.get('prison_time', 0)\n    return imprisonments, total_prison_time"}
{"ground_truth": "def parse_opinions(statements):\n    opinions = {}\n    for statement in statements:\n        words = statement.split()\n        leader = None\n        location = None\n        organization = None\n        sentiment = None\n        for word in words:\n            if word.lower() in [\"Shakirullah\", \"Ajmal\"]:\n                leader = word\n            elif word.lower() in [\"Pakistan\", \"Afghanistan\", \"East Timor\", \"Kashmir\"]:\n                location = word\n            elif word.lower() in [\"Al Qaeda\", \"Taliban\", \"US\", \"Jews\"]:\n                organization = word\n            elif word.lower() in [\"hate\", \"like\"]:\n                sentiment = word\n        if leader and location and organization and sentiment:\n            if leader not in opinions:\n                opinions[leader] = {}\n            if location not in opinions[leader]:\n                opinions[leader][location] = {}\n            if organization not in opinions[leader][location]:\n                opinions[leader][location][organization] = sentiment\n    return opinions", "problem_description": "I want you to write a python function that takes as input a list of statements about tribal leaders in Pakistan and returns a summary of their opinions towards different organizations and locations. The function should parse the input strings, identify the leader, location, organization mentioned and the sentiment expressed, and return a nested dictionary with this information.The signature of the function is: def parse_opinions(statements)", "test_cases": {"test1": "parse_opinions([\n    \"Shakirullah says Muslims hate Americans '\",\n    \"Ajmal, 50, says there are no Al Qaeda or Taliban fighters in his area.\",\n    \"Shakirullah thinks President Bush wants to harm Muslims.\",\n    \"There are many Taliban fighters in Afghanistan.\",\n    \"Ajmal says Al Qaeda fighters may be in Kashmir, not in Pakistan.\"\n])", "test2": "parse_opinions([\n    \"Shakirullah believes that Al Qaeda will never be defeated.\",\n    \"Ajmal guesses that the US will win this war.\"\n])", "test3": "parse_opinions([\n    \"Many believe Shakirullah is a terrorist.\",\n    \"Ajmal thinks he is a great leader.\"\n])", "test4": "parse_opinions([\n    \"The Taliban will win in Afghanistan.\",\n    \"The US will help Pakistan defeat Al Qaeda.\"\n])", "test5": "parse_opinions([\n    \"Ajmal knows that Shakirullah of the Kokikhel tribe fought for adult suffrage in the tribal areas.\"\n])", "test6": "parse_opinions([\n    \"Shakirullah and Ajmal are enemies of the US.\"\n])", "test7": "parse_opinions([\n    \"The Jews did the attacks.\",\n    \"Osama bin Laden was responsible for the Sept. 11 attacks.\"\n])", "test8": "parse_opinions([\n    \"Ajmal has to meet with the provincial governor.\",\n    \"Shakirullah is a chief of the 100,000-member Kokikhel tribe.\"\n])", "test9": "parse_opinions([\n    \"Ajmal was in Peshawar.\",\n    \"Bush thinks bin Laden was in Pakistan.\"\n])", "test10": "parse_opinions([\n    \"Pakistan has 12,000 troops patrolling the border.\",\n    \"Ajmal and Shakirullah want peace in Afghanistan\"\n])"}, "hidden_information": "def parse_opinions(statements):\n    opinions = {}\n    for statement in statements:\n        words = statement.split()\n        leader = None\n        location = None\n        organization = None\n        sentiment = None\n        for word in words:\n            if word.lower() in [\"Shakirullah\", \"Ajmal\"]:\n                leader = word\n            elif word.lower() in [\"Pakistan\", \"Afghanistan\", \"East Timor\", \"Kashmir\"]:\n                location = word\n            elif word.lower() in [\"Al Qaeda\", \"Taliban\", \"US\", \"Jews\"]:\n                organization = word\n            elif word.lower() in [\"hate\", \"like\"]:\n                sentiment = word\n        if leader and location and organization and sentiment:\n            if leader not in opinions:\n                opinions[leader] = {}\n            if location not in opinions[leader]:\n                opinions[leader][location] = {}\n            if organization not in opinions[leader][location]:\n                opinions[leader][location][organization] = sentiment\n    return opinions"}
{"ground_truth": "def calculate_doctor_death_rate(doctor_stats): \n    total_deaths = sum(deaths for _, deaths in doctor_stats) \n    total_patients = sum(patients for patients, _ in doctor_stats) \n    return total_deaths / total_patients", "problem_description": "I want you to help write a python function to calculate the death rate of patients under a specific doctor based on the total deaths and total patients they have seen. I think a death rate might be useful in helping identify doctors who may be murderers. I have doctor stats which is a list of arrays where each sub array has the total patients seen and total deaths. What would be the function to calculate this?The signature of the function is: def calculate_doctor_death_rate(doctor_stats)", "test_cases": {"test1": "calculate_doctor_death_rate([(100, 5), (50, 1)])", "test2": "calculate_doctor_death_rate([(250, 1), (500, 2), (1000, 10)])", "test3": "calculate_doctor_death_rate([(1000, 50), (2000, 20), (500, 1)])", "test4": "calculate_doctor_death_rate([(500, 25), (750, 2), (1250, 15)])", "test5": "calculate_doctor_death_rate([(200, 5), (400, 1), (600, 10)])", "test6": "calculate_doctor_death_rate([(2500, 1), (200, 2), (1500, 10)])", "test7": "calculate_doctor_death_rate([(10, 1), (100, 2), (500, 3)])", "test8": "calculate_doctor_death_rate([(300, 1), (600, 2), (900, 4)])", "test9": "calculate_doctor_death_rate([(50, 5), (100, 1), (200, 15)])", "test10": "calculate_doctor_death_rate([(700, 35), (1400, 2), (350, 1)])"}, "hidden_information": "def calculate_doctor_death_rate(doctor_stats): \n    total_deaths = sum(deaths for _, deaths in doctor_stats) \n    total_patients = sum(patients for patients, _ in doctor_stats) \n    return total_deaths / total_patients"}
{"ground_truth": "def get_performance_color(character_name):\n    if character_name == 'Wicked Witch of the West':\n        return 'black'\n    elif character_name == 'Glinda, the Good Witch of the North':\n        return 'light'\n    elif character_name == 'Scarecrow':\n        return 'tattered brown'\n    elif character_name == 'Tin Man':\n        return 'metal silver'\n    elif character_name == 'Cowardly Lion':\n        return 'golden yellow'\n    elif character_name == 'Emerald City guard':\n        return 'green'\n    elif character_name == 'Munchkin':\n        return 'colorful'\n    else:\n        return 'no color found'", "problem_description": "I need you to write a Python function that determines the on-stage color associated with different characters from The Wizard of Oz. The function should take a character's name as input and return a string describing their on-stage color. Can you do that?The signature of the function is: def get_performance_color(character_name)", "test_cases": {"test1": "get_performance_color('Wicked Witch of the West')", "test2": "get_performance_color('Glinda, the Good Witch of the North')", "test3": "get_performance_color('Scarecrow')", "test4": "get_performance_color('Tin Man')", "test5": "get_performance_color('Cowardly Lion')", "test6": "get_performance_color('Emerald City guard')", "test7": "get_performance_color('Munchkin')", "test8": "get_performance_color('Toto')", "test9": "get_performance_color('Dorothy')", "test10": "get_performance_color('Flying Monkey')"}, "hidden_information": "def get_performance_color(character_name):\n    if character_name == 'Wicked Witch of the West':\n        return 'black'\n    elif character_name == 'Glinda, the Good Witch of the North':\n        return 'light'\n    elif character_name == 'Scarecrow':\n        return 'tattered brown'\n    elif character_name == 'Tin Man':\n        return 'metal silver'\n    elif character_name == 'Cowardly Lion':\n        return 'golden yellow'\n    elif character_name == 'Emerald City guard':\n        return 'green'\n    elif character_name == 'Munchkin':\n        return 'colorful'\n    else:\n        return 'no color found'"}
{"ground_truth": "def recommend_ide(language, platform, purpose):\n    ide_recommendations = {\n        'C++': {'KDE': 'KDevelop', 'Cross-platform': 'Qt Creator'},\n        'Other': {'KDE': 'KDevelop', 'Cross-platform': 'Qt Creator'}\n    }\n    if language in ide_recommendations:\n        if purpose == 'building KDE applications' or platform == 'KDE':\n            return ide_recommendations[language]['KDE']\n        else:\n            return ide_recommendations[language]['Cross-platform']\n    else:\n        return 'No IDE recommendation available'", "problem_description": "I want to write a program to help me choose an Integrated Development Environment (IDE) for my coding needs. However, I'm having trouble deciding between KDevelop and Qt Creator. Can you help me create a Python function that recommends an IDE based on my programming language, platform, and purpose?The signature of the function is: def recommend_ide(language, platform, purpose)", "test_cases": {"test1": "recommend_ide('C++', 'KDE', 'building KDE applications')", "test2": "recommend_ide('C++', 'Cross-platform', 'building Qt applications')", "test3": "recommend_ide('Java', 'KDE', 'building KDE applications')", "test4": "recommend_ide('Python', 'Cross-platform', 'data analysis')", "test5": "recommend_ide('C++', 'KDE', 'game development')", "test6": "recommend_ide('Other', 'KDE', 'building KDE applications')", "test7": "recommend_ide('Other', 'Cross-platform', 'building Qt applications')", "test8": "recommend_ide('C++', 'Windows', 'building Qt applications')", "test9": "recommend_ide('C++', 'Linux', 'building KDE applications')", "test10": "recommend_ide('Other', 'MacOS', 'building Qt applications')"}, "hidden_information": "def recommend_ide(language, platform, purpose):\n    ide_recommendations = {\n        'C++': {'KDE': 'KDevelop', 'Cross-platform': 'Qt Creator'},\n        'Other': {'KDE': 'KDevelop', 'Cross-platform': 'Qt Creator'}\n    }\n    if language in ide_recommendations:\n        if purpose == 'building KDE applications' or platform == 'KDE':\n            return ide_recommendations[language]['KDE']\n        else:\n            return ide_recommendations[language]['Cross-platform']\n    else:\n        return 'No IDE recommendation available'"}
{"ground_truth": "def calculate_ad_revenue(num_ads, ad_type, clicks_per_ad, ad_duration, click_revenue, ad_display_probability):\n    revenue = num_ads * ad_type['revenue_per_ad'] * clicks_per_ad * ad_duration * click_revenue * ad_display_probability\n    return revenue", "problem_description": "Write a Python function to calculate the revenue of a hypothetical ad-powered Windows operating system. The system will display ads, and we want to know the total revenue generated. Can you write a function to compute this revenue?The signature of the function is: def calculate_ad_revenue(num_ads, ad_type, clicks_per_ad, ad_duration, click_revenue, ad_display_probability)", "test_cases": {"test1": "calculate_ad_revenue(100, {'revenue_per_ad': 0.1, 'ad_duration': 10}, 2, 0.5, 1, 1)", "test2": "calculate_ad_revenue(50, {'revenue_per_ad': 0.05, 'ad_duration': 30}, 1, 0.2, 2, 0.8)", "test3": "calculate_ad_revenue(200, {'revenue_per_ad': 0.2, 'ad_duration': 15}, 3, 0.3, 1.5, 0.9)", "test4": "calculate_ad_revenue(150, {'revenue_per_ad': 0.15, 'ad_duration': 20}, 2.5, 0.4, 1.2, 0.95)", "test5": "calculate_ad_revenue(250, {'revenue_per_ad': 0.25, 'ad_duration': 10}, 2, 0.5, 1.5, 1)", "test6": "calculate_ad_revenue(100, {'revenue_per_ad': 0.1, 'ad_duration': 5}, 3, 0.3, 1, 0.8)", "test7": "calculate_ad_revenue(200, {'revenue_per_ad': 0.2, 'ad_duration': 30}, 1, 0.2, 2, 0.9)", "test8": "calculate_ad_revenue(50, {'revenue_per_ad': 0.05, 'ad_duration': 15}, 2.5, 0.4, 1.2, 0.9)", "test9": "calculate_ad_revenue(250, {'revenue_per_ad': 0.25, 'ad_duration': 20}, 2.5, 0.4, 1.5, 1)", "test10": "calculate_ad_revenue(150, {'revenue_per_ad': 0.15, 'ad_duration': 10}, 3, 0.3, 1, 0.95)"}, "hidden_information": "def calculate_ad_revenue(num_ads, ad_type, clicks_per_ad, ad_duration, click_revenue, ad_display_probability):\n    revenue = num_ads * ad_type['revenue_per_ad'] * clicks_per_ad * ad_duration * click_revenue * ad_display_probability\n    return revenue"}
{"ground_truth": "def load_brachytherapy_tube(num_spheres, tube_length, sphere_diameter, tube_diameter):\n    if num_spheres * sphere_diameter > tube_length:\n        return 'Error: Not enough space in tube for spheres'\n    if sphere_diameter > tube_diameter:\n        return 'Error: Spheres are too large for tube'\n    return f'{num_spheres} spheres loaded into tube'", "problem_description": "I want the agent to write a Python function to simulate the process of loading radioactive spheres into metal tubes for brachytherapy seeds production. The function should take into account the number of spheres, the length of the tube, and the diameter of the spheres and the tube. If there is not enough space in the tube for the spheres, or if the spheres are too large for the tube, the function should return an error message. Otherwise, it should return a message indicating how many spheres were loaded into the tube.The signature of the function is: def load_brachytherapy_tube(num_spheres, tube_length, sphere_diameter, tube_diameter)", "test_cases": {"test1": "load_brachytherapy_tube(5, 10, 0.64, 0.8)", "test2": "load_brachytherapy_tube(6, 10, 0.64, 0.8)", "test3": "load_brachytherapy_tube(5, 10, 1, 0.8)", "test4": "load_brachytherapy_tube(0, 10, 0.64, 0.8)", "test5": "load_brachytherapy_tube(5, 0, 0.64, 0.8)", "test6": "load_brachytherapy_tube(5, 10, 0.64, 0.4)", "test7": "load_brachytherapy_tube(10, 10, 0.64, 0.8)", "test8": "load_brachytherapy_tube(5, 20, 0.64, 0.8)", "test9": "load_brachytherapy_tube(5, 10, 0.64, 1)", "test10": "load_brachytherapy_tube(5, 10, 0, 0.8)"}, "hidden_information": "def load_brachytherapy_tube(num_spheres, tube_length, sphere_diameter, tube_diameter):\n    if num_spheres * sphere_diameter > tube_length:\n        return 'Error: Not enough space in tube for spheres'\n    if sphere_diameter > tube_diameter:\n        return 'Error: Spheres are too large for tube'\n    return f'{num_spheres} spheres loaded into tube'"}
{"ground_truth": "def compress(lst):\n    if len(lst) <= 1:\n        return lst\n    result = []\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i+1]:\n            result.append(lst[i])\n    result.append(lst[-1])\n    return result", "problem_description": "I want the AI to write a python function that removes consecutive duplicates in a list. I have a list of items and I want a new list with all the consecutive duplicates removed. The function should work with any type of item in the list. Can you help me figure out how to define this function?The signature of the function is: def compress(lst)", "test_cases": {"test1": "compress([1, 1, 2, 2, 3, 4, 4, 5])", "test2": "compress([])", "test3": "compress([1])", "test4": "compress(['a', 'a', 'b', 'c', 'c', 'd'])", "test5": "compress([1, 2, 3, 4, 5])", "test6": "compress([1, 1, 1, 1, 1])", "test7": "compress(['a', 'b', 'c', 'd', 'e'])", "test8": "compress([True, False, True, True, False])", "test9": "compress([1.5, 2.5, 2.5, 3.5, 3.5])", "test10": "compress(['a', 'a', 'b', 'c', 'c', 'd', 'd', 'e'])"}, "hidden_information": "def compress(lst):\n    if len(lst) <= 1:\n        return lst\n    result = []\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i+1]:\n            result.append(lst[i])\n    result.append(lst[-1])\n    return result"}
{"ground_truth": "def sort_reviews(reviews): \n    # A list of reviews in the format: (game_name, review_text, rating)\n    return sorted(reviews, key=lambda x: x[2])", "problem_description": "Hey agent, can you write a Python function to sort a list of game reviews based on their ratings? I have a list of games with their reviews and ratings, but I want to see the reviews in order from highest rated to lowest. Can you write a function to do that for me?The signature of the function is: def sort_reviews(reviews)", "test_cases": {"test1": "sort_reviews([('Game 1', 'This game is great.', 9), ('Game 2', 'This game is okay.', 5), ('Game 3', 'This game is terrible.', 1)])", "test2": "sort_reviews([('Game 4', 'This game is awesome.', 10), ('Game 5', 'This game is bad.', 2)])", "test3": "sort_reviews([('Game 6', 'This game is so so.', 5), ('Game 7', 'This game is amazing.', 10)])", "test4": "sort_reviews([('Game 8', 'This game is horrible.', 1), ('Game 9', 'This game is fantastic.', 9)])", "test5": "sort_reviews([('Game 10', 'This game is decent.', 4), ('Game 11', 'This game is incredible.', 10)])", "test6": "sort_reviews([('Game 12', 'This game is mediocre.', 3), ('Game 13', 'This game is superb.', 10)])", "test7": "sort_reviews([('Game 14', 'This game is poor.', 2), ('Game 15', 'This game is excellent.', 9)])", "test8": "sort_reviews([('Game 16', 'This game is not bad.', 6), ('Game 17', 'This game is magnificent.', 10)])", "test9": "sort_reviews([('Game 18', 'This game is respectable.', 7), ('Game 19', 'This game is brilliant.', 10)])", "test10": "sort_reviews([('Game 20', 'This game is disappointing.', 3), ('Game 21', 'This game is thrilling.', 10)])"}, "hidden_information": "def sort_reviews(reviews): \n    # A list of reviews in the format: (game_name, review_text, rating)\n    return sorted(reviews, key=lambda x: x[2])"}
{"ground_truth": "def transform_mythological_references(text, dictionary):\n    result = ''\n    for word in text.split():\n        if word.lower() in dictionary:\n            result += dictionary[word.lower()] + ' '\n        else:\n            result += word + ' '\n    return result.strip()", "problem_description": "I want you to write a Python function for me. I have some text I'd like to transform by replacing certain words with their corresponding mythological references. I have a dictionary that maps the original words to their mythological equivalents. I'd like the function to take the text and dictionary as input and return the transformed text. However, I'm not sure about the specifics, so can you help me clarify the requirements?The signature of the function is: def transform_mythological_references(text, dictionary)", "test_cases": {"test1": "transform_mythological_references('In this place your truths are bleeding.', {'truths': 'veritas', 'bleeding': 'agon'})", "test2": "transform_mythological_references('She travels down a cart-track, with a useless spare wheel in the trunk.', {'she': 'Abandon', 'cart-track': ' via aplustre', 'spare': ' tools'})", "test3": "transform_mythological_references('Eilithyia descends Parnitha, bearing an arm of death flowers.', {'Eilithyia': 'she who brings', 'Parnitha': 'mountain of the gods', 'death': 'morte'})", "test4": "transform_mythological_references('Smell the wind.', {'smell': 'scent of flowers', 'wind': 'zephyr'})", "test5": "transform_mythological_references('This morning carries a strange message for you.', {'morning': 'dawn', 'message': ' prophecy'})", "test6": "transform_mythological_references('The dream is a broken glass in your stomach.', {'dream': ' vision', 'glass': ' crystal', 'stomach': 'heart'})", "test7": "transform_mythological_references('How can you live without its glow?', {'glow': 'lumine', 'live': 'exist'})", "test8": "transform_mythological_references('Lean towards the earth.', {'lean': ' incline', 'earth': 'terra'})", "test9": "transform_mythological_references('Wash away your vows at Styx.', {'wash': 'cleanse', 'vows': 'oaths', 'styx': ' river of the underworld'})", "test10": "transform_mythological_references('And just like Alkyoneas, abandon Pallini.', {'Alkyoneas': 'comforter', 'abandon': 'leave behind', 'Pallini': 'retreat'})"}, "hidden_information": "def transform_mythological_references(text, dictionary):\n    result = ''\n    for word in text.split():\n        if word.lower() in dictionary:\n            result += dictionary[word.lower()] + ' '\n        else:\n            result += word + ' '\n    return result.strip()"}
{"ground_truth": "def calculate_album_duration(album_songs): \n    total_duration = 0 \n    for song in album_songs: \n        total_duration += song['duration'] \n    return total_duration", "problem_description": "I need a python function to calculate the total duration of an album, but I don't care about the exact minute and seconds. Can you write me a python function that can give me just an integer value that approximates the total duration in minutes?The signature of the function is: def calculate_album_duration(album_songs)", "test_cases": {"test1": "calculate_album_duration([{'title': 'The Southern Ocean', 'duration': 150}, {'title': '384 BC', 'duration': 180}, {'title': 'Beachcomber', 'duration': 210}])", "test2": "calculate_album_duration([{'title': 'I Feel Like I\u2019m a Million Years Old', 'duration': 780}])", "test3": "calculate_album_duration([{'title': 'Corriander', 'duration': 240}, {'title': 'Everywhere', 'duration': 300}])", "test4": "calculate_album_duration([{'title': 'Last One', 'duration': 180}, {'title': 'Sunrise', 'duration': 120}, {'title': 'Sunset', 'duration': 360}])", "test5": "calculate_album_duration([{'title': 'A', 'duration': 100}, {'title': 'B', 'duration': 200}, {'title': 'C', 'duration': 300}])", "test6": "calculate_album_duration([{'title': 'Alpha', 'duration': 90}, {'title': 'Beta', 'duration': 240}, {'title': 'Gamma', 'duration': 390}])", "test7": "calculate_album_duration([{'title': 'Track1', 'duration': 120}, {'title': 'Track2', 'duration': 180}, {'title': 'Track3', 'duration': 240}])", "test8": "calculate_album_duration([{'title': 'Melody1', 'duration': 100}, {'title': 'Melody2', 'duration': 200}])", "test9": "calculate_album_duration([{'title': 'Music', 'duration': 480}])", "test10": "calculate_album_duration([{'title': 'SongA', 'duration': 150}, {'title': 'SongB', 'duration': 180}])"}, "hidden_information": "def calculate_album_duration(album_songs): \n    total_duration = 0 \n    for song in album_songs: \n        total_duration += song['duration'] \n    return total_duration"}
{"ground_truth": "def resize_partition(current_size, new_size, min_required_size, resize_available=True):\n    if resize_available:\n        if new_size >= min_required_size:\n            return True, new_size\n        else:\n            return False, f\"New size {new_size} is less than the minimum required size {min_required_size}\"\n    else:\n        return False, \"Resizing not available\"", "problem_description": "I'm trying to manage disk partitions, and I want a Python function that can help me determine if I can resize a partition to a certain size. I need to make sure the new size meets the minimum size requirements.The signature of the function is: def resize_partition(current_size, new_size, min_required_size, resize_available=True)", "test_cases": {"test1": "resize_partition(100, 120, 110, True)", "test2": "resize_partition(100, 90, 110, True)", "test3": "resize_partition(100, 120, 110, False)", "test4": "resize_partition(500, 700, 600, True)", "test5": "resize_partition(500, 700, 800, True)", "test6": "resize_partition(1000, 1200, 1100, True)", "test7": "resize_partition(1000, 900, 1100, True)", "test8": "resize_partition(2000, 2500, 2300, False)", "test9": "resize_partition(2000, 2500, 2300, True)", "test10": "resize_partition(3000, 3500, 3300, True)"}, "hidden_information": "def resize_partition(current_size, new_size, min_required_size, resize_available=True):\n    if resize_available:\n        if new_size >= min_required_size:\n            return True, new_size\n        else:\n            return False, f\"New size {new_size} is less than the minimum required size {min_required_size}\"\n    else:\n        return False, \"Resizing not available\""}
{"ground_truth": "def is_symmetric(objects, symmetry_axes):\n  symmetric_objects = []\n  for obj in objects:\n    for axis in symmetry_axes:\n      if obj == tuple(-x if i==axis else x for i, x in enumerate(obj)):\n        symmetric_objects.append(obj)\n  return symmetric_objects", "problem_description": "I'd like you to write a Python function that can identify symmetric objects within a set. What I mean by symmetry is if an object looks the same when reflected across a certain axis. The function should take in a list of objects, where each object is a tuple of coordinates, and a list of axes to check for symmetry. The function should return a list of objects that are symmetric across at least one of the given axes.The signature of the function is: def is_symmetric(objects, symmetry_axes)", "test_cases": {"test1": "is_symmetric([(1, 2, 3), (1, 2, -3), (1, -2, 3)], [0])", "test2": "is_symmetric([(1, 2, 3), (1, -2, -3), (1, 2, 3)], [1])", "test3": "is_symmetric([(1, 2, 3), (1, 2, 3), (1, 2, 3)], [2])", "test4": "is_symmetric([(1, 2, 3), (1, 2, 3), (1, 2, -3)], [0])", "test5": "is_symmetric([(1, 2, 3), (-1, 2, 3), (1, 2, 3)], [0])", "test6": "is_symmetric([(1, 2, 3), (1, -2, 3), (1, 2, -3)], [1])", "test7": "is_symmetric([(1, 2, 3), (1, 2, 3), (1, 2, 3)], [])", "test8": "is_symmetric([], [0, 1, 2])", "test9": "is_symmetric([(1, 2, 3), (1, 2, -3), (1, -2, 3)], [0, 1])", "test10": "is_symmetric([(1, 2, 3), (1, 2, -3), (1, -2, -3)], [0, 1, 2])"}, "hidden_information": "def is_symmetric(objects, symmetry_axes):\n  symmetric_objects = []\n  for obj in objects:\n    for axis in symmetry_axes:\n      if obj == tuple(-x if i==axis else x for i, x in enumerate(obj)):\n        symmetric_objects.append(obj)\n  return symmetric_objects"}
{"ground_truth": "def get_top_artist_info(artist_name, artists):\n    artist_info = {artist['name']: artist for artist in artists}\n    if artist_name in artist_info:\n        return {'name': artist_name, 'hometown': artist_info[artist_name].get('hometown', 'N/A'), 'genre': artist_info[artist_name].get('genre', 'N/A')}\n    else:\n        return {'error': 'Artist not found'}", "problem_description": "I need a python function to look up music artist info such as their home town and preferred genre. Can you help write one?The signature of the function is: def get_top_artist_info(artist_name, artists)", "test_cases": {"test1": "get_top_artist_info('St. Lunatics', [{'name': 'St. Lunatics', 'hometown': 'St. Louis', 'genre': 'Hip-Hop'}])", "test2": "get_top_artist_info('Nelly', [{'name': 'Nelly', 'hometown': 'St. Louis', 'genre': 'Hip-Hop'}])", "test3": "get_top_artist_info('Kendrick Lamar', [{'name': 'Kendrick Lamar', 'hometown': 'Compton', 'genre': 'Hip-Hop'}])", "test4": "get_top_artist_info('tvrt', [{'name': 'St. Lunatics', 'hometown': 'St. Louis', 'genre': 'Hip-Hop'}])", "test5": "get_top_artist_info('Eminem', [{'name': 'Eminem', 'hometown': 'Detroit', 'genre': 'Hip-Hop'}])", "test6": "get_top_artist_info('Tupac Shakur', [{'name': 'Tupac Shakur', 'hometown': 'Los Angeles', 'genre': 'Hip-Hop'}])", "test7": "get_top_artist_info('The Beatles', [{'name': 'The Beatles', 'hometown': 'Liverpool', 'genre': 'Rock'}])", "test8": "get_top_artist_info('St. Lunatics', [{'name': 'St. Lunatics', 'genre': 'Hip-Hop'}])", "test9": "get_top_artist_info('BTS', [{'name': 'BTS', 'hometown': 'Seoul', 'genre': 'Pop'}])", "test10": "get_top_artist_info('Led Zeppelin', [{'name': 'Led Zeppelin', 'hometown': 'London', 'genre': 'Rock'}])"}, "hidden_information": "def get_top_artist_info(artist_name, artists):\n    artist_info = {artist['name']: artist for artist in artists}\n    if artist_name in artist_info:\n        return {'name': artist_name, 'hometown': artist_info[artist_name].get('hometown', 'N/A'), 'genre': artist_info[artist_name].get('genre', 'N/A')}\n    else:\n        return {'error': 'Artist not found'}"}
{"ground_truth": "def is_efp_eligible(fishing_zone, gear_type, target_species, bycatch_reduction_plan):\n    if fishing_zone == \"conservation_zone\" and gear_type == \"longline\":\n        return bycatch_reduction_plan != \"\"\n    else:\n        return True", "problem_description": "I want the agent to write a Python function that determines whether an Exempted Fishing Permit application is eligible based on the given conditions. The function should take into account the fishing zone, gear type, target species, and bycatch reduction plan.The signature of the function is: def is_efp_eligible(fishing_zone, gear_type, target_species, bycatch_reduction_plan)", "test_cases": {"test1": "is_efp_eligible(\"conservation_zone\", \"longline\", \"tuna\", \"buoy_gear\")", "test2": "is_efp_eligible(\"open_ocean\", \"longline\", \"swordfish\", \"eco_labeling\")", "test3": "is_efp_eligible(\"conservation_zone\", \"trawl\", \"shrimp\", \"catch_shares\")", "test4": "is_efp_eligible(\"conservation_zone\", \"longline\", \"tuna\", \"\")", "test5": "is_efp_eligible(\"closed_area\", \"longline\", \"tuna\", \"buoy_gear\")", "test6": "is_efp_eligible(\"conservation_zone\", \"trawl\", \"cod\", \"eco_labeling\")", "test7": "is_efp_eligible(\"open_ocean\", \"longline\", \"swordfish\", \"catch_shares\")", "test8": "is_efp_eligible(\"conservation_zone\", \"longline\", \"shark\", \"buoy_gear\")", "test9": "is_efp_eligible(\"closed_area\", \"trawl\", \"shrimp\", \"eco_labeling\")", "test10": "is_efp_eligible(\"open_ocean\", \"longline\", \"tuna\", \"catch_shares\")"}, "hidden_information": "def is_efp_eligible(fishing_zone, gear_type, target_species, bycatch_reduction_plan):\n    if fishing_zone == \"conservation_zone\" and gear_type == \"longline\":\n        return bycatch_reduction_plan != \"\"\n    else:\n        return True"}
{"ground_truth": "def calculate_burrito_calories(protein, rice, beans, cheese, salsa, sour_cream, guacamole, veggies):\n    base_calories = 300\n    calories_dict = {\n        'chicken': 165,\n        'steak': 150,\n        'carnitas': 210,\n        'barbacoa': 210,\n        'veggies': 45,\n    }\n    rice_calories = 110 if rice else 0\n    beans_calories = 130 if beans else 0\n    cheese_calories = 50 if cheese else 0\n    salsa_calories = 25 if salsa else 0\n    sour_cream_calories = 100 if sour_cream else 0\n    guacamole_calories = 170 if guacamole else 0\n    total_calories = base_calories + calories_dict[protein] + rice_calories + beans_calories + cheese_calories + salsa_calories + sour_cream_calories + guacamole_calories\n    return total_calories", "problem_description": "Design a python function to calculate the total calories of a Chipotle burrito when a user selects various ingredients such as protein, rice, beans, cheese, salsa, sour cream, guacamole, and veggies.The signature of the function is: def calculate_burrito_calories(protein, rice, beans, cheese, salsa, sour_cream, guacamole, veggies)", "test_cases": {"test1": "calculate_burrito_calories('chicken', True, True, True, True, False, False, True)", "test2": "calculate_burrito_calories('steak', False, True, False, True, True, False, False)", "test3": "calculate_burrito_calories('carnitas', True, False, True, False, False, True, True)", "test4": "calculate_burrito_calories('barbacoa', False, False, False, True, True, False, True)", "test5": "calculate_burrito_calories('veggies', True, True, True, True, False, False, True)", "test6": "calculate_burrito_calories('chicken', True, True, False, False, True, True, False)", "test7": "calculate_burrito_calories('steak', False, True, True, False, False, False, True)", "test8": "calculate_burrito_calories('carnitas', False, False, True, False, False, True, False)", "test9": "calculate_burrito_calories('barbacoa', True, True, False, True, False, False, False)", "test10": "calculate_burrito_calories('veggies', False, False, False, False, False, False, False)"}, "hidden_information": "def calculate_burrito_calories(protein, rice, beans, cheese, salsa, sour_cream, guacamole, veggies):\n    base_calories = 300\n    calories_dict = {\n        'chicken': 165,\n        'steak': 150,\n        'carnitas': 210,\n        'barbacoa': 210,\n        'veggies': 45,\n    }\n    rice_calories = 110 if rice else 0\n    beans_calories = 130 if beans else 0\n    cheese_calories = 50 if cheese else 0\n    salsa_calories = 25 if salsa else 0\n    sour_cream_calories = 100 if sour_cream else 0\n    guacamole_calories = 170 if guacamole else 0\n    total_calories = base_calories + calories_dict[protein] + rice_calories + beans_calories + cheese_calories + salsa_calories + sour_cream_calories + guacamole_calories\n    return total_calories"}
{"ground_truth": "def calculate_heroin_incident_rate(total_deaths, population, time_period):\n    incident_rate = (total_deaths / population) * (100000 / time_period)\n    return round(incident_rate, 2)", "problem_description": "I need a python function to determine the rate of heroin-related incidents in Ohio. The function should take into account the total number of deaths, the state population, and the time period. Can you help me write this function?The signature of the function is: def calculate_heroin_incident_rate(total_deaths, population, time_period)", "test_cases": {"test1": "calculate_heroin_incident_rate(100, 1000000, 2)", "test2": "calculate_heroin_incident_rate(500, 5000000, 4)", "test3": "calculate_heroin_incident_rate(11, 11689100, 1)", "test4": "calculate_heroin_incident_rate(250, 2500000, 5)", "test5": "calculate_heroin_incident_rate(50, 500000, 3)", "test6": "calculate_heroin_incident_rate(750, 7500000, 6)", "test7": "calculate_heroin_incident_rate(120, 1200000, 2)", "test8": "calculate_heroin_incident_rate(300, 3000000, 5)", "test9": "calculate_heroin_incident_rate(900, 9000000, 9)", "test10": "calculate_heroin_incident_rate(25, 250000, 4)"}, "hidden_information": "def calculate_heroin_incident_rate(total_deaths, population, time_period):\n    incident_rate = (total_deaths / population) * (100000 / time_period)\n    return round(incident_rate, 2)"}
{"ground_truth": "def calculate_defensive_effectiveness(player_positions, play_type):\n    if play_type == 'last-second':\n        # Calculate defensive effectiveness based on player positions and last-second play\n        hibbert_position = player_positions['Hibbert']\n        west_position = player_positions['West']\n        james_position = player_positions['James']\n        if hibbert_position['in_paint'] and west_position['near_rim'] and james_position['cut_off']:\n            return 1  # High defensive effectiveness\n        else:\n            return 0  # Low defensive effectiveness\n    else:\n        # Calculate defensive effectiveness based on player positions and normal play\n        hill_position = player_positions['Hill']\n        george_position = player_positions['George']\n        if hill_position['switched'] and george_position['recovered']:\n            return 1  # High defensive effectiveness\n        else:\n            return 0  # Low defensive effectiveness", "problem_description": "Can you write a Python function that calculates the defensive effectiveness of a team based on its strategy in a basketball game? The function should take into account the position of each player and the type of play (normal or last-second) to output a score representing the team's defensive effectiveness.The signature of the function is: def calculate_defensive_effectiveness(player_positions, play_type)", "test_cases": {"test1": "calculate_defensive_effectiveness({'Hibbert': {'in_paint': True}, 'West': {'near_rim': True}, 'James': {'cut_off': True}}, 'last-second')", "test2": "calculate_defensive_effectiveness({'Hibbert': {'in_paint': False}, 'West': {'near_rim': True}, 'James': {'cut_off': True}}, 'last-second')", "test3": "calculate_defensive_effectiveness({'Hill': {'switched': True}, 'George': {'recovered': True}}, 'normal')", "test4": "calculate_defensive_effectiveness({'Hill': {'switched': False}, 'George': {'recovered': True}}, 'normal')", "test5": "calculate_defensive_effectiveness({'Hibbert': {'in_paint': True}, 'West': {'near_rim': False}, 'James': {'cut_off': False}}, 'last-second')", "test6": "calculate_defensive_effectiveness({'Hill': {'switched': True}, 'George': {'recovered': False}}, 'normal')", "test7": "calculate_defensive_effectiveness({'Hibbert': {'in_paint': False}, 'West': {'near_rim': True}, 'James': {'cut_off': False}}, 'last-second')", "test8": "calculate_defensive_effectiveness({'Hill': {'switched': False}, 'George': {'recovered': False}}, 'normal')", "test9": "calculate_defensive_effectiveness({'Hibbert': {'in_paint': True}, 'West': {'near_rim': True}, 'James': {'cut_off': True}}, 'last-second')", "test10": "calculate_defensive_effectiveness({'Hill': {'switched': True}, 'George': {'recovered': True}}, 'normal')"}, "hidden_information": "def calculate_defensive_effectiveness(player_positions, play_type):\n    if play_type == 'last-second':\n        # Calculate defensive effectiveness based on player positions and last-second play\n        hibbert_position = player_positions['Hibbert']\n        west_position = player_positions['West']\n        james_position = player_positions['James']\n        if hibbert_position['in_paint'] and west_position['near_rim'] and james_position['cut_off']:\n            return 1  # High defensive effectiveness\n        else:\n            return 0  # Low defensive effectiveness\n    else:\n        # Calculate defensive effectiveness based on player positions and normal play\n        hill_position = player_positions['Hill']\n        george_position = player_positions['George']\n        if hill_position['switched'] and george_position['recovered']:\n            return 1  # High defensive effectiveness\n        else:\n            return 0  # Low defensive effectiveness"}
{"ground_truth": "def reliable_diagnosis(dentist_reputation, dentist_experience, past_dental_care, treatment_cost):\n    if dentist_reputation < 3 or dentist_experience < 5 or past_dental_care < 0.8 or treatment_cost > 1000:\n        return False\n    else:\n        return True", "problem_description": "Can you write a python function that takes into consideration a dentist's reputation, years of experience, patient's past dental care habits and the cost of treatment to determine if the dentist's diagnosis is reliable.The signature of the function is: def reliable_diagnosis(dentist_reputation, dentist_experience, past_dental_care, treatment_cost)", "test_cases": {"test1": "reliable_diagnosis(4, 7, 0.9, 800)", "test2": "reliable_diagnosis(2, 4, 0.7, 1200)", "test3": "reliable_diagnosis(3, 6, 0.8, 900)", "test4": "reliable_diagnosis(5, 8, 0.85, 1500)", "test5": "reliable_diagnosis(4, 5, 0.7, 700)", "test6": "reliable_diagnosis(3, 9, 0.75, 1100)", "test7": "reliable_diagnosis(2, 3, 0.8, 600)", "test8": "reliable_diagnosis(5, 6, 0.85, 1000)", "test9": "reliable_diagnosis(4, 7, 0.9, 900)", "test10": "reliable_diagnosis(3, 8, 0.7, 1200)"}, "hidden_information": "def reliable_diagnosis(dentist_reputation, dentist_experience, past_dental_care, treatment_cost):\n    if dentist_reputation < 3 or dentist_experience < 5 or past_dental_care < 0.8 or treatment_cost > 1000:\n        return False\n    else:\n        return True"}
{"ground_truth": "def soccer_performance(team_name, games_won, games_drawn, games_lost, goals_for, goals_against): return (games_won * 3 + games_drawn) / (games_won + games_drawn + games_lost), goals_for / (games_won + games_drawn + games_lost)", "problem_description": "I want the agent to write a python function that calculates a soccer team's performance based on their game results and goals scored, the agent needs to collaborate with me to resolve the ambiguity about how the performance is calculated, for example, are the games won or lost more importantThe signature of the function is: def soccer_performance(team_name, games_won, games_drawn, games_lost, goals_for, goals_against)", "test_cases": {"test1": "soccer_performance('Italy', 5, 2, 1, 10, 5)", "test2": "soccer_performance('Spain', 3, 4, 1, 8, 3)", "test3": "soccer_performance('France', 1, 2, 5, 5, 10)", "test4": "soccer_performance('Argentina', 4, 2, 2, 12, 6)", "test5": "soccer_performance('England', 2, 3, 3, 7, 8)", "test6": "soccer_performance('Germany', 6, 1, 1, 15, 4)", "test7": "soccer_performance('Brazil', 3, 2, 3, 10, 9)", "test8": "soccer_performance('Portugal', 5, 1, 2, 14, 5)", "test9": "soccer_performance('Belgium', 2, 4, 2, 9, 7)", "test10": "soccer_performance('Netherlands', 1, 3, 4, 6, 11)"}, "hidden_information": "def soccer_performance(team_name, games_won, games_drawn, games_lost, goals_for, goals_against): return (games_won * 3 + games_drawn) / (games_won + games_drawn + games_lost), goals_for / (games_won + games_drawn + games_lost)"}
{"ground_truth": "def calculate_eco_score(city_design, eco_indicators):\n    # city_design is a dictionary containing information about the city's design\n    # eco_indicators is a list of environmental indicators to consider\n    eco_score = 0\n    for indicator in eco_indicators:\n        if indicator == 'green_space_ratio':\n            eco_score += city_design['green_space_ratio'] * 0.2\n        elif indicator == 'public_transport_coverage':\n            eco_score += city_design['public_transport_coverage'] * 0.3\n        elif indicator == 'renewable_energy_usage':\n            eco_score += city_design['renewable_energy_usage'] * 0.5\n    return eco_score", "problem_description": "I want the LLM agent to help me develop a Python function to evaluate the environmental sustainability of a city's design. The function should take into account several factors, but I'm not sure what factors to include or how to weight them. Can you propose a solution?The signature of the function is: def calculate_eco_score(city_design, eco_indicators)", "test_cases": {"test1": "calculate_eco_score({'green_space_ratio': 0.3, 'public_transport_coverage': 0.7, 'renewable_energy_usage': 0.4}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test2": "calculate_eco_score({'green_space_ratio': 0.1, 'public_transport_coverage': 0.8, 'renewable_energy_usage': 0.3}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test3": "calculate_eco_score({'green_space_ratio': 0.2, 'public_transport_coverage': 0.6, 'renewable_energy_usage': 0.5}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test4": "calculate_eco_score({'green_space_ratio': 0.4, 'public_transport_coverage': 0.4, 'renewable_energy_usage': 0.6}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test5": "calculate_eco_score({'green_space_ratio': 0.3, 'public_transport_coverage': 0.9, 'renewable_energy_usage': 0.2}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test6": "calculate_eco_score({'green_space_ratio': 0.1, 'public_transport_coverage': 0.5, 'renewable_energy_usage': 0.8}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test7": "calculate_eco_score({'green_space_ratio': 0.2, 'public_transport_coverage': 0.8, 'renewable_energy_usage': 0.4}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test8": "calculate_eco_score({'green_space_ratio': 0.4, 'public_transport_coverage': 0.6, 'renewable_energy_usage': 0.3}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test9": "calculate_eco_score({'green_space_ratio': 0.3, 'public_transport_coverage': 0.7, 'renewable_energy_usage': 0.9}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])", "test10": "calculate_eco_score({'green_space_ratio': 0.1, 'public_transport_coverage': 0.9, 'renewable_energy_usage': 0.5}, ['green_space_ratio', 'public_transport_coverage', 'renewable_energy_usage'])"}, "hidden_information": "def calculate_eco_score(city_design, eco_indicators):\n    # city_design is a dictionary containing information about the city's design\n    # eco_indicators is a list of environmental indicators to consider\n    eco_score = 0\n    for indicator in eco_indicators:\n        if indicator == 'green_space_ratio':\n            eco_score += city_design['green_space_ratio'] * 0.2\n        elif indicator == 'public_transport_coverage':\n            eco_score += city_design['public_transport_coverage'] * 0.3\n        elif indicator == 'renewable_energy_usage':\n            eco_score += city_design['renewable_energy_usage'] * 0.5\n    return eco_score"}
{"ground_truth": "def eu_proposal_votes(proposal_votes, total_member_states=25, required_majority=0.5, qualified_majority=False, blocking_minority=False):\n    if qualified_majority:\n        required_votes = int(total_member_states * required_majority)\n    else:\n        required_votes = int(total_member_states / 2) + 1\n    if blocking_minority:\n        blocking_votes = int(total_member_states / 3)\n        return proposal_votes >= required_votes and proposal_votes > blocking_votes\n    return proposal_votes >= required_votes", "problem_description": "Create a Python function to calculate the required votes for a European Union proposal to pass. The function should consider different decision-making scenarios, such as simple and qualified majority voting. The agent should interact with the human user to clarify the specific requirements and constraints of the function.The signature of the function is: def eu_proposal_votes(proposal_votes, total_member_states=25, required_majority=0.5, qualified_majority=False, blocking_minority=False)", "test_cases": {"test1": "eu_proposal_votes(16, qualified_majority=True, required_majority=0.6)", "test2": "eu_proposal_votes(15, blocking_minority=True)", "test3": "eu_proposal_votes(20, required_majority=0.55)", "test4": "eu_proposal_votes(12, qualified_majority=False, blocking_minority=True)", "test5": "eu_proposal_votes(18, total_member_states=27, required_majority=0.5)", "test6": "eu_proposal_votes(10, qualified_majority=True, blocking_minority=True)", "test7": "eu_proposal_votes(22, required_majority=0.6, blocking_minority=False)", "test8": "eu_proposal_votes(14, total_member_states=25, qualified_majority=False)", "test9": "eu_proposal_votes(19, required_majority=0.55, blocking_minority=True)", "test10": "eu_proposal_votes(24, total_member_states=28, required_majority=0.5, qualified_majority=True)"}, "hidden_information": "def eu_proposal_votes(proposal_votes, total_member_states=25, required_majority=0.5, qualified_majority=False, blocking_minority=False):\n    if qualified_majority:\n        required_votes = int(total_member_states * required_majority)\n    else:\n        required_votes = int(total_member_states / 2) + 1\n    if blocking_minority:\n        blocking_votes = int(total_member_states / 3)\n        return proposal_votes >= required_votes and proposal_votes > blocking_votes\n    return proposal_votes >= required_votes"}
{"ground_truth": "def get_optimal_second_baseman(current_player, fontenot, perez, walker, cedeno):\n    if walker > 0.7:\n        return walker\n    elif fontenot > 0.6 and current_player < 0.4:\n        return fontenot\n    elif perez > 0.5 and (walker == 0 or walker < 0.3):\n        return perez\n    else:\n        return cedeno", "problem_description": "I want a python function to decide which second baseman to play for the Cubs (Fontenot, Walker, Cedeno, or Perez) in a given situation. I want the agent to ask me questions to clarify what the situation is, such as the current player's performance and the potential replacement's skills, in order to give me an answer.The signature of the function is: def get_optimal_second_baseman(current_player, fontenot, perez, walker, cedeno)", "test_cases": {"test1": "get_optimal_second_baseman(0.7, 0.6, 0.5, 0.8, 0.4)", "test2": "get_optimal_second_baseman(0.4, 0.8, 0.3, 0.2, 0.6)", "test3": "get_optimal_second_baseman(0.9, 0.4, 0.7, 0.1, 0.3)", "test4": "get_optimal_second_baseman(0.3, 0.9, 0.1, 0.7, 0.5)", "test5": "get_optimal_second_baseman(0.5, 0.4, 0.6, 0.7, 0.8)", "test6": "get_optimal_second_baseman(0.2, 0.1, 0.8, 0.9, 0.6)", "test7": "get_optimal_second_baseman(0.1, 0.9, 0.4, 0.2, 0.7)", "test8": "get_optimal_second_baseman(0.6, 0.7, 0.1, 0.4, 0.9)", "test9": "get_optimal_second_baseman(0.8, 0.3, 0.2, 0.9, 0.5)", "test10": "get_optimal_second_baseman(0.4, 0.5, 0.9, 0.6, 0.7)"}, "hidden_information": "def get_optimal_second_baseman(current_player, fontenot, perez, walker, cedeno):\n    if walker > 0.7:\n        return walker\n    elif fontenot > 0.6 and current_player < 0.4:\n        return fontenot\n    elif perez > 0.5 and (walker == 0 or walker < 0.3):\n        return perez\n    else:\n        return cedeno"}
{"ground_truth": "def filter_visa_applications(visa_applications, nationality_blacklist, issued_ids):\n    filtered_applications = []\n    for application in visa_applications:\n        if application['nationality'] not in nationality_blacklist and application['id'] not in issued_ids:\n            filtered_applications.append(application)\n    return filtered_applications", "problem_description": "Can you write a python function to filter visa applications? My country has a list of nationality restrictions, I need to deny visa applications from people with certain nationalities, and also id that already has been issued, but I do not have the exact nationality list or id's that has been used, can you interact with me to clarify first?The signature of the function is: def filter_visa_applications(visa_applications, nationality_blacklist, issued_ids)", "test_cases": {"test1": "filter_visa_applications([{'nationality': 'Palestinian', 'id': '123'}, {'nationality': 'Canadian', 'id': '456'}], ['Israeli', 'Palestinian'], ['789'])", "test2": "filter_visa_applications([{'nationality': 'Canadian', 'id': '789'}, {'nationality': 'UAE', 'id': '012'}], ['Israeli', 'Palestinian'], ['456'])", "test3": "filter_visa_applications([{'nationality': 'Israeli', 'id': '123'}, {'nationality': 'Canadian', 'id': '789', 'special_case': True}], ['Israeli', 'Palestinian'], ['456'])", "test4": "filter_visa_applications([{'nationality': 'Palestinian', 'id': '012'}, {'nationality': 'Canadian', 'id': '014'}], ['Israeli', 'Palestinian'], ['789', '013'])", "test5": "filter_visa_applications([{'nationality': 'Canadian', 'id': '018'}, {'nationality': 'UAE', 'id': '078'}], [], ['567', '069'])", "test6": "filter_visa_applications([{'nationality': 'Canadian', 'id': '134'}, {'nationality': 'Israeli', 'id': '042'}], ['Israeli'], ['041', '078'])", "test7": "filter_visa_applications([{'nationality': 'Palestinian', 'id': '072'}, {'nationality': 'UAE', 'id': '074'}], ['Palestinian'], ['074', '073'])", "test8": "filter_visa_applications([{'nationality': 'Canadian', 'id': '082'}, {'nationality': 'UAE', 'id': '081'}], [], ['028'])", "test9": "filter_visa_applications([{'nationality': 'Palestinian', 'id': '034'}, {'nationality': 'Israeli', 'id': '023'}], ['Israeli', 'Palestinian'], ['015'])", "test10": "filter_visa_applications([{'nationality': 'Canadian', 'id': '094'}, {'nationality': 'UAE', 'id': '095'}], ['Israeli'], ['059', '009'])"}, "hidden_information": "def filter_visa_applications(visa_applications, nationality_blacklist, issued_ids):\n    filtered_applications = []\n    for application in visa_applications:\n        if application['nationality'] not in nationality_blacklist and application['id'] not in issued_ids:\n            filtered_applications.append(application)\n    return filtered_applications"}
{"ground_truth": "def validate_film_credits(film_database, film_title, actors=None, directors=None):\n    film_data = film_database.get(film_title)\n    if film_data is None:\n        return False\n    if actors is not None and not all(actor in film_data['actors'] for actor in actors):\n        return False\n    if directors is not None and directors[0] not in film_data['directors']:\n        return False\n    return True", "problem_description": "Hey, can you write a Python function to help me validate some film credits? I have a list of actors and directors, and I want to check if they are present in a specific film database. I'm not sure how to start, can you help me figure it out?The signature of the function is: def validate_film_credits(film_database, film_title, actors=None, directors=None)", "test_cases": {"test1": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', ['Matt Damon'], ['Robert De Niro'])", "test2": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', ['Matt Damon', 'Julia Roberts'], ['Robert De Niro'])", "test3": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', ['Julia Roberts'], ['Robert De Niro'])", "test4": "validate_film_credits({'The Godfather': {'actors': ['Marlon Brando', 'Al Pacino'], 'directors': ['Francis Ford Coppola']}} , 'The Godfather', ['Al Pacino'], ['Francis Ford Coppola'])", "test5": "validate_film_credits({'The Godfather': {'actors': ['Marlon Brando', 'Al Pacino'], 'directors': ['Francis Ford Coppola']}} , 'The Godfather', ['Robert De Niro'], ['Francis Ford Coppola'])", "test6": "validate_film_credits({}, 'The Good Shepherd', ['Matt Damon'], ['Robert De Niro'])", "test7": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Godfather', ['Matt Damon'], ['Robert De Niro'])", "test8": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', None, ['Robert De Niro'])", "test9": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', ['Matt Damon'], None)", "test10": "validate_film_credits({'The Good Shepherd': {'actors': ['Matt Damon', 'Angelina Jolie'], 'directors': ['Robert De Niro']}} , 'The Good Shepherd', None, None)"}, "hidden_information": "def validate_film_credits(film_database, film_title, actors=None, directors=None):\n    film_data = film_database.get(film_title)\n    if film_data is None:\n        return False\n    if actors is not None and not all(actor in film_data['actors'] for actor in actors):\n        return False\n    if directors is not None and directors[0] not in film_data['directors']:\n        return False\n    return True"}
{"ground_truth": "def get_donations_report(donations, threshold, return_donors):\n    donations_to_return = {donor: amount for donor, amount in donations.items() if amount > threshold}\n    return_donors.extend([donor for donor in donations_to_return.keys()])\n    return donations_to_return", "problem_description": "I need an LLM agent to write a python function that takes in a dictionary of donations with donor names as keys and donation amounts as values, along with a threshold amount and a list of donors to return. The function should identify donations above the threshold amount, add their donors to the return list, and return a dictionary of donations to be returned. Ensure the function handles diverse and complex inputs.The signature of the function is: def get_donations_report(donations, threshold, return_donors)", "test_cases": {"test1": "get_donations_report({'John': 100, 'Jane': 200, 'Bob': 300}, 150, [])", "test2": "get_donations_report({'Alice': 50, 'Charlie': 250}, 100, [])", "test3": "get_donations_report({'David': 500, 'Eve': 600, 'Frank': 700}, 500, [])", "test4": "get_donations_report({}, 100, [])", "test5": "get_donations_report({'One': 10, 'Two': 20, 'Three': 30}, 25, ['Four', 'Five'])", "test6": "get_donations_report({'X': 1000, 'Y': 2000}, 1, [])", "test7": "get_donations_report({'A': 5, 'B': 10, 'C': 15}, 2, [])", "test8": "get_donations_report({'One Thousand': 1000, 'Two Thousand': 2000}, 1500, [])", "test9": "get_donations_report({'Small Donor': 1, 'Medium Donor': 10, 'Large Donor': 100}, 11, [])", "test10": "get_donations_report({'Donor X': 1000, 'Donor Y': 2000, 'Donor Z': 3000}, 2000, ['Other Donors'])"}, "hidden_information": "def get_donations_report(donations, threshold, return_donors):\n    donations_to_return = {donor: amount for donor, amount in donations.items() if amount > threshold}\n    return_donors.extend([donor for donor in donations_to_return.keys()])\n    return donations_to_return"}
{"ground_truth": "def get_movie_rating(movies, target_movie): ratings = {'Kung Fu Panda': 4.5, 'Wall-E': 4.8, 'The Simpsons: The Movie': 4.2}; return ratings.get(target_movie, \"Movie not found\")", "problem_description": "I need a python function that rates animated movies based on their names. Write a function that takes a list of movie names and a target movie name, and returns the rating of the target movie.The signature of the function is: def get_movie_rating(movies, target_movie)", "test_cases": {"test1": "get_movie_rating(['Kung Fu Panda', 'Wall-E', 'The Simpsons: The Movie'], 'Kung Fu Panda')", "test2": "get_movie_rating(['Kung Fu Panda', 'Wall-E', 'The Simpsons: The Movie'], 'Wall-E')", "test3": "get_movie_rating(['Kung Fu Panda', 'Wall-E', 'The Simpsons: The Movie'], 'The Simpsons: The Movie')", "test4": "get_movie_rating(['Kung Fu Panda', 'Wall-E'], 'The Simpsons: The Movie')", "test5": "get_movie_rating(['The Matrix'], 'The Matrix')", "test6": "get_movie_rating(['Kung Fu Panda', 'The Lion King'], 'Kung Fu Panda')", "test7": "get_movie_rating(['The Matrix', 'The Lion King'], 'Kung Fu Panda')", "test8": "get_movie_rating([], 'Kung Fu Panda')", "test9": "get_movie_rating(['Kung Fu Panda'], 'The Simpsons: The Movie')", "test10": "get_movie_rating(['The Simpsons: The Movie'], 'Kung Fu Panda')"}, "hidden_information": "def get_movie_rating(movies, target_movie): ratings = {'Kung Fu Panda': 4.5, 'Wall-E': 4.8, 'The Simpsons: The Movie': 4.2}; return ratings.get(target_movie, \"Movie not found\")"}
{"ground_truth": "def evaluate_hunting_necessity(alligator_population, attack_incidents, population_threshold, attack_threshold):\n    if alligator_population > population_threshold and attack_incidents > attack_threshold:\n        return True\n    else:\n        return False", "problem_description": "I need help with a Python function that determines whether a specific alligator hunting event is necessary or not. Can you help me write a function that considers the alligator population and the number of attack incidents? The function should return True if the hunting event is necessary and False otherwise.The signature of the function is: def evaluate_hunting_necessity(alligator_population, attack_incidents, population_threshold, attack_threshold)", "test_cases": {"test1": "evaluate_hunting_necessity(100, 5, 80, 3)", "test2": "evaluate_hunting_necessity(50, 2, 80, 3)", "test3": "evaluate_hunting_necessity(150, 8, 80, 3)", "test4": "evaluate_hunting_necessity(70, 1, 80, 3)", "test5": "evaluate_hunting_necessity(120, 6, 80, 3)", "test6": "evaluate_hunting_necessity(200, 10, 80, 3)", "test7": "evaluate_hunting_necessity(40, 0, 80, 3)", "test8": "evaluate_hunting_necessity(180, 9, 80, 3)", "test9": "evaluate_hunting_necessity(110, 4, 80, 3)", "test10": "evaluate_hunting_necessity(60, 2, 80, 3)"}, "hidden_information": "def evaluate_hunting_necessity(alligator_population, attack_incidents, population_threshold, attack_threshold):\n    if alligator_population > population_threshold and attack_incidents > attack_threshold:\n        return True\n    else:\n        return False"}
{"ground_truth": "def analyze_sentiment(comments):\n    positive_comments = 0\n    negative_comments = 0\n    for comment in comments:\n        words = comment.lower().split()\n        if 'love' in words or 'great' in words or 'good' in words:\n            positive_comments += 1\n        elif 'hate' in words or 'bad' in words or 'stupid' in words:\n            negative_comments += 1\n    return positive_comments, negative_comments", "problem_description": "I want you to write a python function that can analyze comments from users and determine how many positive and negative comments there are. However, I don't know how to approach this. Can you help me? I just want a function that can give me the number of positive and negative comments. Can you make it work with a list of comments as input?The signature of the function is: def analyze_sentiment(comments)", "test_cases": {"test1": "analyze_sentiment(['I love this show!', 'I hate this show.'])", "test2": "analyze_sentiment(['Great episode!', 'Terrible judges.', 'I love Mariah.'])", "test3": "analyze_sentiment(['Bad music.', 'Good performance.', 'I hate Nicki.'])", "test4": "analyze_sentiment(['Amazing show!', 'Awful judges.', 'I love AI.'])", "test5": "analyze_sentiment(['Fantastic episode!', 'Terrible singing.', 'I hate this.'])", "test6": "analyze_sentiment(['Good job!', 'Bad attitude.', 'I love MC.'])", "test7": "analyze_sentiment(['Excellent performance!', 'Awful judges.', 'I hate NM.'])", "test8": "analyze_sentiment(['Great music!', 'Terrible show.', 'I love American Idol.'])", "test9": "analyze_sentiment(['Good singing!', 'Bad judges.', 'I love Mariah.'])", "test10": "analyze_sentiment(['Fantastic show!', 'Terrible performance.', 'I hate Nicki Minaj.'])"}, "hidden_information": "def analyze_sentiment(comments):\n    positive_comments = 0\n    negative_comments = 0\n    for comment in comments:\n        words = comment.lower().split()\n        if 'love' in words or 'great' in words or 'good' in words:\n            positive_comments += 1\n        elif 'hate' in words or 'bad' in words or 'stupid' in words:\n            negative_comments += 1\n    return positive_comments, negative_comments"}
{"ground_truth": "def calculate_perimeter(shape_type, dimensions):\n    if shape_type == 'circle':\n        return 2 * 3.14159 * dimensions['radius']\n    elif shape_type == 'square':\n        return 4 * dimensions['side_length']\n    elif shape_type == 'rectangle':\n        return 2 * (dimensions['width'] + dimensions['height'])\n    elif shape_type == 'triangle':\n        a, b, c = dimensions['side1'], dimensions['side2'], dimensions['side3']\n        return a + b + c\n    else:\n        return \"Invalid shape type\"", "problem_description": "Hi agent, I want you to write a Python function that calculates the perimeter of various shapes in the Isola Collection, which includes chairs and couches made from oddly shaped panels inspired by rocks found on the beach. The shapes can be anything, and I want the function to be flexible enough to handle different types of shapes. Can you make that for me?The signature of the function is: def calculate_perimeter(shape_type, dimensions)", "test_cases": {"test1": "calculate_perimeter('circle', {'radius': 5})", "test2": "calculate_perimeter('square', {'side_length': 4})", "test3": "calculate_perimeter('rectangle', {'width': 3, 'height': 6})", "test4": "calculate_perimeter('triangle', {'side1': 3, 'side2': 4, 'side3': 5})", "test5": "calculate_perimeter('circle', {'radius': 10})", "test6": "calculate_perimeter('square', {'side_length': 2})", "test7": "calculate_perimeter('rectangle', {'width': 5, 'height': 8})", "test8": "calculate_perimeter('triangle', {'side1': 6, 'side2': 8, 'side3': 10})", "test9": "calculate_perimeter('pentagon', {'side1': 1, 'side2': 2, 'side3': 3, 'side4': 4, 'side5': 5})", "test10": "calculate_perimeter('hexagon', {'side1': 1, 'side2': 2, 'side3': 3, 'side4': 4, 'side5': 5, 'side6': 6})"}, "hidden_information": "def calculate_perimeter(shape_type, dimensions):\n    if shape_type == 'circle':\n        return 2 * 3.14159 * dimensions['radius']\n    elif shape_type == 'square':\n        return 4 * dimensions['side_length']\n    elif shape_type == 'rectangle':\n        return 2 * (dimensions['width'] + dimensions['height'])\n    elif shape_type == 'triangle':\n        a, b, c = dimensions['side1'], dimensions['side2'], dimensions['side3']\n        return a + b + c\n    else:\n        return \"Invalid shape type\""}
{"ground_truth": "def classify_saab_car(horsepower):\n    if horsepower < 200:\n        return 'Linear'\n    elif horsepower < 240:\n        return 'Aero'\n    else:\n        return 'Unknown'", "problem_description": "Can you write a python function to categorize Saab car models based on their horsepower? The function should return the model type based on certain horsepower ranges, but I'm not sure what those ranges are.The signature of the function is: def classify_saab_car(horsepower)", "test_cases": {"test1": "classify_saab_car(165)", "test2": "classify_saab_car(227)", "test3": "classify_saab_car(180)", "test4": "classify_saab_car(250)", "test5": "classify_saab_car(150)", "test6": "classify_saab_car(200)", "test7": "classify_saab_car(220)", "test8": "classify_saab_car(240)", "test9": "classify_saab_car(260)", "test10": "classify_saab_car(165)"}, "hidden_information": "def classify_saab_car(horsepower):\n    if horsepower < 200:\n        return 'Linear'\n    elif horsepower < 240:\n        return 'Aero'\n    else:\n        return 'Unknown'"}
{"ground_truth": "def calculate_average_price(prices): return round(sum(prices) / len(prices), 2)", "problem_description": "Write a python function to calculate average price paid for a vehicle as per truecar for Lake Worth area. I have only new and not pre-owned/used vehicle pricesThe signature of the function is: def calculate_average_price(prices)", "test_cases": {"test1": "calculate_average_price([28000, 29000, 27000, 28500, 27500])", "test2": "calculate_average_price([30000, 32000, 29000, 31000, 30000])", "test3": "calculate_average_price([25000, 26000, 24000, 25500, 24500])", "test4": "calculate_average_price([20000, 22000, 19000, 21500, 19500])", "test5": "calculate_average_price([35000, 37000, 33000, 36500, 33500])", "test6": "calculate_average_price([38000, 40000, 36000, 39500, 36500])", "test7": "calculate_average_price([18000, 20000, 16000, 19500, 16500])", "test8": "calculate_average_price([42000, 44000, 40000, 43500, 40500])", "test9": "calculate_average_price([45000, 47000, 43000, 46500, 43500])", "test10": "calculate_average_price([48000, 50000, 46000, 49500, 46500])"}, "hidden_information": "def calculate_average_price(prices): return round(sum(prices) / len(prices), 2)"}
{"ground_truth": "def estimate_delivery_days(order_placement_day, order_type, manufacturer_lead_time):\n    if order_type == 'special_order':\n        return order_placement_day + manufacturer_lead_time\n    else:\n        return order_placement_day + 5", "problem_description": "Write a python function that can estimate the delivery date for a customer's order, considering the order type and the manufacturer's lead time. The order can be either 'standard' or 'special_order'. The function should take into account the day of the week the order was placed. I want the function to return the estimated delivery date, but I'm not sure how to handle the order type and lead time.The signature of the function is: def estimate_delivery_days(order_placement_day, order_type, manufacturer_lead_time)", "test_cases": {"test1": "estimate_delivery_days(0, 'standard', 3)", "test2": "estimate_delivery_days(3, 'special_order', 5)", "test3": "estimate_delivery_days(6, 'standard', 1)", "test4": "estimate_delivery_days(0, 'special_order', 10)", "test5": "estimate_delivery_days(1, 'standard', 0)", "test6": "estimate_delivery_days(4, 'special_order', 7)", "test7": "estimate_delivery_days(5, 'standard', 2)", "test8": "estimate_delivery_days(2, 'special_order', 9)", "test9": "estimate_delivery_days(6, 'standard', 4)", "test10": "estimate_delivery_days(0, 'special_order', 6)"}, "hidden_information": "def estimate_delivery_days(order_placement_day, order_type, manufacturer_lead_time):\n    if order_type == 'special_order':\n        return order_placement_day + manufacturer_lead_time\n    else:\n        return order_placement_day + 5"}
{"ground_truth": "def check_compatibility(hardware_components, supported_components):\n    compatible_components = {}\n    for component, status in hardware_components.items():\n        if status and component in supported_components:\n            compatible_components[component] = True\n        else:\n            compatible_components[component] = False\n    return compatible_components", "problem_description": "I want a Python function to determine if my computer hardware is compatible with Windows XP 64-bit. Can you write one?The signature of the function is: def check_compatibility(hardware_components, supported_components)", "test_cases": {"test1": "check_compatibility({'CPU': True, 'Motherboard': True, 'Graphics Card': True}, ['CPU', 'Motherboard'])", "test2": "check_compatibility({'CPU': False, 'Motherboard': True, 'Graphics Card': True}, ['CPU', 'Motherboard'])", "test3": "check_compatibility({'CPU': False, 'Motherboard': False, 'Graphics Card': True}, ['CPU', 'Motherboard'])", "test4": "check_compatibility({'CPU': True, 'Motherboard': True, 'Graphics Card': False}, ['CPU', 'Motherboard', 'Graphics Card'])", "test5": "check_compatibility({'CPU': True, 'Motherboard': False, 'Graphics Card': True}, ['CPU', 'Motherboard', 'Graphics Card'])", "test6": "check_compatibility({'CPU': True, 'Motherboard': True, 'Graphics Card': True}, [])", "test7": "check_compatibility({}, ['CPU', 'Motherboard'])", "test8": "check_compatibility({'CPU': True, 'Motherboard': True, 'Graphics Card': True}, ['CPU', 'Motherboard', 'Sound Card'])", "test9": "check_compatibility({'CPU': False, 'Motherboard': False, 'Graphics Card': False}, ['CPU', 'Motherboard', 'Graphics Card'])", "test10": "check_compatibility({'CPU': True, 'Motherboard': True, 'Graphics Card': True, 'Sound Card': True}, ['CPU', 'Motherboard', 'Graphics Card'])"}, "hidden_information": "def check_compatibility(hardware_components, supported_components):\n    compatible_components = {}\n    for component, status in hardware_components.items():\n        if status and component in supported_components:\n            compatible_components[component] = True\n        else:\n            compatible_components[component] = False\n    return compatible_components"}
{"ground_truth": "def calculate_fmd_impact(num_infected, num_healthy, weight_loss_per_infectedAnimal): return (num_infected * weight_loss_per_infectedAnimal)", "problem_description": "I want to write a python function that estimates the economic impact of a foot-and-mouth disease outbreak on a cattle farm. The function should take into account the number of infected animals that are losing weight and calculate the total weight loss. The agent should ask for clarification on the input parameters and their units.The signature of the function is: def calculate_fmd_impact(num_infected, num_healthy, weight_loss_per_infectedAnimal)", "test_cases": {"test1": "calculate_fmd_impact(num_infected=500, num_healthy=1000, weight_loss_per_infectedAnimal=10.5)", "test2": "calculate_fmd_impact(num_infected=200, num_healthy=800, weight_loss_per_infectedAnimal=20.0)", "test3": "calculate_fmd_impact(num_infected=1000, num_healthy=0, weight_loss_per_infectedAnimal=15.0)", "test4": "calculate_fmd_impact(num_infected=50, num_healthy=1500, weight_loss_per_infectedAnimal=12.0)", "test5": "calculate_fmd_impact(num_infected=0, num_healthy=2000, weight_loss_per_infectedAnimal=18.0)", "test6": "calculate_fmd_impact(num_infected=300, num_healthy=700, weight_loss_per_infectedAnimal=11.5)", "test7": "calculate_fmd_impact(num_infected=800, num_healthy=400, weight_loss_per_infectedAnimal=14.0)", "test8": "calculate_fmd_impact(num_infected=1200, num_healthy=0, weight_loss_per_infectedAnimal=16.0)", "test9": "calculate_fmd_impact(num_infected=25, num_healthy=1975, weight_loss_per_infectedAnimal=19.0)", "test10": "calculate_fmd_impact(num_infected=600, num_healthy=1400, weight_loss_per_infectedAnimal=13.0)"}, "hidden_information": "def calculate_fmd_impact(num_infected, num_healthy, weight_loss_per_infectedAnimal): return (num_infected * weight_loss_per_infectedAnimal)"}
{"ground_truth": "def date_admixture_events(dna_data, geographic_regions, time_windows):\n    # Implement the method to identify and date historical admixture events\n    # dna_data: a dictionary of DNA samples from different geographic regions\n    # geographic_regions: a list of geographic regions\n    # time_windows: a list of time windows to consider\n    events = {}\n    for region in geographic_regions:\n        for time_window in time_windows:\n            # Analyze dna_data for each region and time window to identify admixture events\n            # Characterize the amount of DNA exchange and the genetic composition of the groups involved\n            # Store the results in the events dictionary\n            events[region + '_' + str(time_window)] = {'event_type': 'admixture', 'dna_exchange': 0.5, 'genetic_composition': {'group1': 0.3, 'group2': 0.7}}\n    return events", "problem_description": "I want you to write a Python function that can help me identify historical events of admixture in human populations using DNA data. The function should be able to take in DNA data from different geographic regions and time windows, and output the timing and characteristics of the admixture events that occurred.The signature of the function is: def date_admixture_events(dna_data, geographic_regions, time_windows)", "test_cases": {"test1": "date_admixture_events({'Europe': [1, 2, 3], 'Asia': [4, 5, 6]}, ['Europe', 'Asia'], [1000, 2000, 3000])", "test2": "date_admixture_events({'Africa': [7, 8, 9], 'Americas': [10, 11, 12]}, ['Africa', 'Americas'], [500, 1500, 2500])", "test3": "date_admixture_events({'Oceania': [13, 14, 15], 'Europe': [16, 17, 18]}, ['Oceania', 'Europe'], [1000, 2000, 3000])", "test4": "date_admixture_events({'Asia': [19, 20, 21], 'Africa': [22, 23, 24]}, ['Asia', 'Africa'], [500, 1500, 2500])", "test5": "date_admixture_events({'Americas': [25, 26, 27], 'Oceania': [28, 29, 30]}, ['Americas', 'Oceania'], [1000, 2000, 3000])", "test6": "date_admixture_events({'Europe': [31, 32, 33], 'Asia': [34, 35, 36]}, ['Europe', 'Asia'], [500, 1500, 2500])", "test7": "date_admixture_events({'Africa': [37, 38, 39], 'Americas': [40, 41, 42]}, ['Africa', 'Americas'], [1000, 2000, 3000])", "test8": "date_admixture_events({'Oceania': [43, 44, 45], 'Europe': [46, 47, 48]}, ['Oceania', 'Europe'], [500, 1500, 2500])", "test9": "date_admixture_events({'Asia': [49, 50, 51], 'Africa': [52, 53, 54]}, ['Asia', 'Africa'], [1000, 2000, 3000])", "test10": "date_admixture_events({'Americas': [55, 56, 57], 'Oceania': [58, 59, 60]}, ['Americas', 'Oceania'], [500, 1500, 2500])"}, "hidden_information": "def date_admixture_events(dna_data, geographic_regions, time_windows):\n    # Implement the method to identify and date historical admixture events\n    # dna_data: a dictionary of DNA samples from different geographic regions\n    # geographic_regions: a list of geographic regions\n    # time_windows: a list of time windows to consider\n    events = {}\n    for region in geographic_regions:\n        for time_window in time_windows:\n            # Analyze dna_data for each region and time window to identify admixture events\n            # Characterize the amount of DNA exchange and the genetic composition of the groups involved\n            # Store the results in the events dictionary\n            events[region + '_' + str(time_window)] = {'event_type': 'admixture', 'dna_exchange': 0.5, 'genetic_composition': {'group1': 0.3, 'group2': 0.7}}\n    return events"}
{"ground_truth": "def search_person_database(first_name, middle_name, last_name, city, state, age, database):\n    for person in database:\n        if (first_name and person['first_name'] == first_name) or middle_name == '' or person['first_name'] + ' ' + middle_name == first_name:\n            if (last_name and person['last_name'] == last_name) or last_name == '':\n                if (city and person['city'] == city) or city == '':\n                    if (state and person['state'] == state) or state == '':\n                        if (age and person['age'] == age) or age == '':\n                            return person\n    return None", "problem_description": "I want you to write a python function that can help me find information about a person. The function should be able to search a database using various details such as their first name, middle name, last name, city, state, and age. Can you help me with that?The signature of the function is: def search_person_database(first_name, middle_name, last_name, city, state, age, database)", "test_cases": {"test1": "search_person_database('Sharron', '', 'Prashad', 'New York', 'NY', 30, [{'first_name': 'Sharron', 'middle_name': '', 'last_name': 'Prashad', 'city': 'New York', 'state': 'NY', 'age': 30}])", "test2": "search_person_database('John', 'Doe', 'Smith', 'Chicago', 'IL', 40, [{'first_name': 'John', 'middle_name': 'Doe', 'last_name': 'Smith', 'city': 'Chicago', 'state': 'IL', 'age': 40}, {'first_name': 'John', 'middle_name': '', 'last_name': 'Smith', 'city': 'Chicago', 'state': 'IL', 'age': 40}])", "test3": "search_person_database('Jane', '', 'Doe', 'Los Angeles', 'CA', 25, [{'first_name': 'Jane', 'middle_name': '', 'last_name': 'Doe', 'city': 'Los Angeles', 'state': 'CA', 'age': 25}, {'first_name': 'Jane', 'middle_name': 'Doe', 'last_name': 'Doe', 'city': 'Los Angeles', 'state': 'CA', 'age': 25}])", "test4": "search_person_database('Bob', 'Smith', 'Johnson', 'Houston', 'TX', 50, [{'first_name': 'Bob', 'middle_name': 'Smith', 'last_name': 'Johnson', 'city': 'Houston', 'state': 'TX', 'age': 50}])", "test5": "search_person_database('Alice', 'Brown', 'Williams', 'Phoenix', 'AZ', 35, [{'first_name': 'Alice', 'middle_name': 'Brown', 'last_name': 'Williams', 'city': 'Phoenix', 'state': 'AZ', 'age': 35}])", "test6": "search_person_database('Michael', '', 'Davis', 'Philadelphia', 'PA', 45, [{'first_name': 'Michael', 'middle_name': '', 'last_name': 'Davis', 'city': 'Philadelphia', 'state': 'PA', 'age': 45}])", "test7": "search_person_database('Emily', 'Chen', 'Garcia', 'San Antonio', 'TX', 20, [{'first_name': 'Emily', 'middle_name': 'Chen', 'last_name': 'Garcia', 'city': 'San Antonio', 'state': 'TX', 'age': 20}])", "test8": "search_person_database('David', '', 'Martinez', 'San Diego', 'CA', 38, [{'first_name': 'David', 'middle_name': '', 'last_name': 'Martinez', 'city': 'San Diego', 'state': 'CA', 'age': 38}])", "test9": "search_person_database('Jennifer', 'Taylor', 'Robinson', 'Dallas', 'TX', 42, [{'first_name': 'Jennifer', 'middle_name': 'Taylor', 'last_name': 'Robinson', 'city': 'Dallas', 'state': 'TX', 'age': 42}])", "test10": "search_person_database('Kevin', '', 'Walker', 'San Jose', 'CA', 48, [{'first_name': 'Kevin', 'middle_name': '', 'last_name': 'Walker', 'city': 'San Jose', 'state': 'CA', 'age': 48}])"}, "hidden_information": "def search_person_database(first_name, middle_name, last_name, city, state, age, database):\n    for person in database:\n        if (first_name and person['first_name'] == first_name) or middle_name == '' or person['first_name'] + ' ' + middle_name == first_name:\n            if (last_name and person['last_name'] == last_name) or last_name == '':\n                if (city and person['city'] == city) or city == '':\n                    if (state and person['state'] == state) or state == '':\n                        if (age and person['age'] == age) or age == '':\n                            return person\n    return None"}
{"ground_truth": "def calculate_brand_mentions(conversations, brand_name, threshold):\n    mentions = 0\n    for conversation in conversations:\n        if brand_name in conversation.lower() and len(conversation) > threshold:\n            mentions += 1\n    return mentions", "problem_description": "I want the agent to write a Python function that calculates the effectiveness of a commercial in improving a brand's name recognition. The commercial is mentioned multiple times in various casual conversations. Can the agent help me create a function that takes into account the number of times the brand is mentioned in conversations?The signature of the function is: def calculate_brand_mentions(conversations, brand_name, threshold)", "test_cases": {"test1": "calculate_brand_mentions(['I hated that Go Daddy commercial', 'Go Daddy is terrible'], 'Go Daddy', 10)", "test2": "calculate_brand_mentions(['I loved the new car commercial', 'I do not like Go Daddy'], 'Go Daddy', 0)", "test3": "calculate_brand_mentions(['Go Daddy is great, but their commercial is bad', 'I am bored'], 'Go Daddy', 10)", "test4": "calculate_brand_mentions([], 'Go Daddy', 10)", "test5": "calculate_brand_mentions(['This conversation does not contain the brand'], 'Go Daddy', 10)", "test6": "calculate_brand_mentions(['This conversation contains the brand Go Daddy multiple times'], 'Go Daddy', 10)", "test7": "calculate_brand_mentions(['Short conversation with brand'], 'Go Daddy', 20)", "test8": "calculate_brand_mentions(['Go Daddy is great, but I hate old school'], 'Go Daddy', 10)", "test9": "calculate_brand_mentions(['This conversation contains the brand Go Daddy and is very long'], 'Go Daddy', 20)", "test10": "calculate_brand_mentions(['Go Daddy is awesome'], 'Go Daddy', 0)"}, "hidden_information": "def calculate_brand_mentions(conversations, brand_name, threshold):\n    mentions = 0\n    for conversation in conversations:\n        if brand_name in conversation.lower() and len(conversation) > threshold:\n            mentions += 1\n    return mentions"}
{"ground_truth": "def get_abraham_children(wife_name):\n    abraham_children = {\n        'Sarah': ['Isaac'],\n        'Hagar': ['Ishmael'],\n        'Keturah': ['Zimran', 'Jokshan', 'Medan', 'Madian', 'Ishbak', 'Shuah']\n    }\n    return abraham_children.get(wife_name, [])", "problem_description": "I need a Python function to figure out how many kids Abraham had with each of his wives in the biblical story. Can you write a function that takes the name of the wife as input and returns the number and names of the children she had with Abraham?The signature of the function is: def get_abraham_children(wife_name)", "test_cases": {"test1": "get_abraham_children('Sarah')", "test2": "get_abraham_children('Hagar')", "test3": "get_abraham_children('Keturah')", "test4": "get_abraham_children('Other Wife')", "test5": "get_abraham_children('Sarah')", "test6": "get_abraham_children('Hagar')", "test7": "get_abraham_children('Keturah')", "test8": "get_abraham_children('Unknown')", "test9": "get_abraham_children('Non-existent Wife')", "test10": "get_abraham_children('Biblical Figure')"}, "hidden_information": "def get_abraham_children(wife_name):\n    abraham_children = {\n        'Sarah': ['Isaac'],\n        'Hagar': ['Ishmael'],\n        'Keturah': ['Zimran', 'Jokshan', 'Medan', 'Madian', 'Ishbak', 'Shuah']\n    }\n    return abraham_children.get(wife_name, [])"}
{"ground_truth": "def assess_search_feasibility(weather_conditions, helicopter_type, search_priority):\n    # Define weather thresholds for each helicopter type\n    helicopter_thresholds = {\n        'Sikorsky S-58ET': {'cloud_cover': 0.7, 'wind_speed': 30, 'rain': False, 'hail': False}\n    }\n\n    # Define search priority weights\n    priority_weights = {\n        'high': 1.2,\n        'medium': 1.0,\n        'low': 0.8\n    }\n\n    # Calculate a feasibility score based on weather conditions and helicopter type\n    score = 0\n    for condition, value in weather_conditions.items():\n        if condition == 'cloud_cover' and value > helicopter_thresholds[helicopter_type]['cloud_cover']:\n            score -= 0.2\n        elif condition == 'wind_speed' and value > helicopter_thresholds[helicopter_type]['wind_speed']:\n            score -= 0.1\n        elif condition == 'rain' and value:\n            score -= 0.2\n        elif condition == 'hail' and value:\n            score -= 0.3\n\n    # Adjust score based on search priority\n    score *= priority_weights[search_priority]\n\n    # Return a recommendation to the air traffic controller\n    if score > 0.5:\n        return 'Search operation is feasible'\n    elif score > 0.2:\n        return 'Search operation is possible, but with caution'\n    else:\n        return 'Search operation is not recommended'", "problem_description": "I want the LLM agent to write a Python function to help determine whether a helicopter search operation can proceed given certain weather conditions. Can the agent take into account the type of helicopter, the priority of the search operation, and various weather factors such as cloud cover, wind speed, rain, and hail?The signature of the function is: def assess_search_feasibility(weather_conditions, helicopter_type, search_priority)", "test_cases": {"test1": "assess_search_feasibility({'cloud_cover': 0.8, 'wind_speed': 20, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'high')", "test2": "assess_search_feasibility({'cloud_cover': 0.4, 'wind_speed': 40, 'rain': True, 'hail': False}, 'Sikorsky S-58ET', 'medium')", "test3": "assess_search_feasibility({'cloud_cover': 0.9, 'wind_speed': 10, 'rain': False, 'hail': True}, 'Sikorsky S-58ET', 'low')", "test4": "assess_search_feasibility({'cloud_cover': 0.7, 'wind_speed': 30, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'high')", "test5": "assess_search_feasibility({'cloud_cover': 0.6, 'wind_speed': 35, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'medium')", "test6": "assess_search_feasibility({'cloud_cover': 0.8, 'wind_speed': 45, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'low')", "test7": "assess_search_feasibility({'cloud_cover': 0.4, 'wind_speed': 20, 'rain': True, 'hail': False}, 'Sikorsky S-58ET', 'high')", "test8": "assess_search_feasibility({'cloud_cover': 0.9, 'wind_speed': 15, 'rain': False, 'hail': True}, 'Sikorsky S-58ET', 'medium')", "test9": "assess_search_feasibility({'cloud_cover': 0.7, 'wind_speed': 25, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'low')", "test10": "assess_search_feasibility({'cloud_cover': 0.5, 'wind_speed': 40, 'rain': False, 'hail': False}, 'Sikorsky S-58ET', 'high')"}, "hidden_information": "def assess_search_feasibility(weather_conditions, helicopter_type, search_priority):\n    # Define weather thresholds for each helicopter type\n    helicopter_thresholds = {\n        'Sikorsky S-58ET': {'cloud_cover': 0.7, 'wind_speed': 30, 'rain': False, 'hail': False}\n    }\n\n    # Define search priority weights\n    priority_weights = {\n        'high': 1.2,\n        'medium': 1.0,\n        'low': 0.8\n    }\n\n    # Calculate a feasibility score based on weather conditions and helicopter type\n    score = 0\n    for condition, value in weather_conditions.items():\n        if condition == 'cloud_cover' and value > helicopter_thresholds[helicopter_type]['cloud_cover']:\n            score -= 0.2\n        elif condition == 'wind_speed' and value > helicopter_thresholds[helicopter_type]['wind_speed']:\n            score -= 0.1\n        elif condition == 'rain' and value:\n            score -= 0.2\n        elif condition == 'hail' and value:\n            score -= 0.3\n\n    # Adjust score based on search priority\n    score *= priority_weights[search_priority]\n\n    # Return a recommendation to the air traffic controller\n    if score > 0.5:\n        return 'Search operation is feasible'\n    elif score > 0.2:\n        return 'Search operation is possible, but with caution'\n    else:\n        return 'Search operation is not recommended'"}
{"ground_truth": "def count_avatar_opinions(comments, aspect): return sum(1 for comment in comments if aspect in comment)", "problem_description": "I want you to write a Python function that analyzes user comments about Xbox Avatars and returns the number of users who either like or dislike certain aspects of the Avatars, such as their poses or customization options.The signature of the function is: def count_avatar_opinions(comments, aspect)", "test_cases": {"test1": "count_avatar_opinions([\"I like the avatars personally.\", \"Charmless?\", \"I just hope you are not comparing this to a Mii.\"], \"like\")", "test2": "count_avatar_opinions([\"I don't like the pose.\", \"They really are charmless.\", \"Avatars look much better\"], \"don't like\")", "test3": "count_avatar_opinions([\"Whatever though, people are probably making their avatar when they booted up the update\", \"I like how they all stand like slightly-camp catalogue models.\"], \"probably\")", "test4": "count_avatar_opinions([\"Anyway, I do agree with Tonka\u2026they stand around a bit on the, how can I say this side.\", \"I know a lot of people don\u2019t but I do.\"], \"agree\")", "test5": "count_avatar_opinions([\"I just wish they had a LOT more choices of clothes and stuff so they don\u2019t all look alike\", \"It will be more fun when they start putting usable add ons into games and so forth.\"], \"wish\")", "test6": "count_avatar_opinions([\"How do you make it not pose like a mother fucking asshole?\", \"Hours of fun for all the family.\"], \"pose\")", "test7": "count_avatar_opinions([\"Like how they all stand like slightly-camp catalogue models.\", \"I like it.\"], \"like how\")", "test8": "count_avatar_opinions([\"My daughter likes that Kefling game though. And the Avatars are better than the built in characters.\", \"I just hope you are not comparing this to a Mii.\"], \"hope\")", "test9": "count_avatar_opinions([\"Charmless? i just hope you are not comparing this to a Mii. Sure, Mii\u2019s are popular\u2026but can one really say that a Mii looks good?\", \"Avatars look much better (even though there is a bit less customization).\"], \"popular\")", "test10": "count_avatar_opinions([\"I like the avatars personally. i know a lot of people don\u2019t but I do.\", \"I just wish they had a LOT more choices of clothes and stuff so they don\u2019t all look alike\"], \"stuff\")"}, "hidden_information": "def count_avatar_opinions(comments, aspect): return sum(1 for comment in comments if aspect in comment)"}
{"ground_truth": "def celebrity_comeback(scandal_level, public_perception, industry_popularity):\n    if scandal_level < 5 and public_perception > 6 and industry_popularity > 4:\n        return True\n    elif scandal_level > 7 and public_perception < 4 and industry_popularity < 5:\n        return False\n    else:\n        return ''", "problem_description": "Hey LLM agent, can you write a Python function to determine whether a celebrity's career will be revived? The function should consider the level of the past scandal, the current public perception of the celebrity, and their industry popularity. Give me a function that takes these three factors into account and returns a boolean value for whether the celebrity's career will be revived.The signature of the function is: def celebrity_comeback(scandal_level, public_perception, industry_popularity)", "test_cases": {"test1": "celebrity_comeback(3, 7, 6)", "test2": "celebrity_comeback(8, 3, 4)", "test3": "celebrity_comeback(4, 5, 7)", "test4": "celebrity_comeback(9, 2, 3)", "test5": "celebrity_comeback(1, 9, 8)", "test6": "celebrity_comeback(6, 6, 5)", "test7": "celebrity_comeback(2, 8, 9)", "test8": "celebrity_comeback(7, 4, 6)", "test9": "celebrity_comeback(5, 5, 5)", "test10": "celebrity_comeback(10, 1, 2)"}, "hidden_information": "def celebrity_comeback(scandal_level, public_perception, industry_popularity):\n    if scandal_level < 5 and public_perception > 6 and industry_popularity > 4:\n        return True\n    elif scandal_level > 7 and public_perception < 4 and industry_popularity < 5:\n        return False\n    else:\n        return ''"}
{"ground_truth": "def categorize_studies(studies, funding_sources, effect_threshold=90):\n    categorized = {\n        'industry': [],\n        'government/university': [],\n        'inconclusive': []\n    }\n    for study, funding_source in zip(studies, funding_sources):\n        if funding_source == 'industry' and study['effect'] < effect_threshold:\n            categorized['industry'].append(study)\n        elif funding_source in ['government', 'university'] and study['effect'] >= effect_threshold:\n            categorized['government/university'].append(study)\n        else:\n            categorized['inconclusive'].append(study)\n    return categorized", "problem_description": "I need a python function that categorizes studies on the effects of Bisphenol A based on their findings and funding sources. The function should take in a list of studies and their corresponding funding sources, and output a dictionary with three categories: 'industry', 'government/university', and 'inconclusive'. Can you help me with that?The signature of the function is: def categorize_studies(studies, funding_sources, effect_threshold=90)", "test_cases": {"test1": "categorize_studies([{'effect': 80}, {'effect': 95}, {'effect': 70}], ['industry', 'university', 'government'], effect_threshold=90)", "test2": "categorize_studies([{'effect': 90}, {'effect': 80}, {'effect': 70}], ['industry', 'government', 'university'], effect_threshold=90)", "test3": "categorize_studies([{'effect': 95}, {'effect': 95}, {'effect': 95}], ['industry', 'university', 'government'], effect_threshold=90)", "test4": "categorize_studies([{'effect': 80}, {'effect': 80}, {'effect': 80}], ['industry', 'government', 'university'], effect_threshold=90)", "test5": "categorize_studies([{'effect': 70}, {'effect': 70}, {'effect': 70}], ['industry', 'university', 'government'], effect_threshold=90)", "test6": "categorize_studies([{'effect': 90}, {'effect': 95}, {'effect': 80}], ['industry', 'government', 'university'], effect_threshold=90)", "test7": "categorize_studies([{'effect': 95}, {'effect': 80}, {'effect': 95}], ['industry', 'university', 'government'], effect_threshold=90)", "test8": "categorize_studies([{'effect': 80}, {'effect': 95}, {'effect': 80}], ['industry', 'government', 'university'], effect_threshold=90)", "test9": "categorize_studies([{'effect': 70}, {'effect': 80}, {'effect': 95}], ['industry', 'university', 'government'], effect_threshold=90)", "test10": "categorize_studies([{'effect': 90}, {'effect': 80}, {'effect': 95}], ['industry', 'university', 'government'], effect_threshold=90)"}, "hidden_information": "def categorize_studies(studies, funding_sources, effect_threshold=90):\n    categorized = {\n        'industry': [],\n        'government/university': [],\n        'inconclusive': []\n    }\n    for study, funding_source in zip(studies, funding_sources):\n        if funding_source == 'industry' and study['effect'] < effect_threshold:\n            categorized['industry'].append(study)\n        elif funding_source in ['government', 'university'] and study['effect'] >= effect_threshold:\n            categorized['government/university'].append(study)\n        else:\n            categorized['inconclusive'].append(study)\n    return categorized"}
{"ground_truth": "def evaluate_sportscaster(tonal_clarity, wit, experience, on_air_appearance):\n    rating = 0\n    if tonal_clarity > 7:\n        rating += 2\n    if wit > 6:\n        rating += 2\n    if experience > 5:\n        rating += 1\n    if on_air_appearance > 6:\n        rating += 1\n    return rating", "problem_description": "I want the LLM agent to write a python function to rate sportscasters based on certain attributes, but I am not sure what attributes to include and how to quantify their performance.The signature of the function is: def evaluate_sportscaster(tonal_clarity, wit, experience, on_air_appearance)", "test_cases": {"test1": "evaluate_sportscaster(8, 7, 6, 8)", "test2": "evaluate_sportscaster(5, 9, 4, 6)", "test3": "evaluate_sportscaster(9, 8, 7, 9)", "test4": "evaluate_sportscaster(6, 6, 6, 6)", "test5": "evaluate_sportscaster(4, 5, 5, 4)", "test6": "evaluate_sportscaster(7, 7, 8, 7)", "test7": "evaluate_sportscaster(8, 9, 5, 8)", "test8": "evaluate_sportscaster(6, 7, 7, 6)", "test9": "evaluate_sportscaster(9, 9, 9, 9)", "test10": "evaluate_sportscaster(5, 5, 5, 5)"}, "hidden_information": "def evaluate_sportscaster(tonal_clarity, wit, experience, on_air_appearance):\n    rating = 0\n    if tonal_clarity > 7:\n        rating += 2\n    if wit > 6:\n        rating += 2\n    if experience > 5:\n        rating += 1\n    if on_air_appearance > 6:\n        rating += 1\n    return rating"}
{"ground_truth": "def determine_threat_status(sexual_selection_surrogates, extinction_factors):\n    # Map values for convenience\n    mating_systems = {'monogamous': 1, 'polygynous': 2, 'polyandrous': 3, 'polygynandrous': 4}\n    dichromatism_values = {'low': 1, 'medium': 2, 'high': 3}\n    range_sizes = {'small': 1, 'medium': 2, 'large': 3}\n    flightlessness_values = {'true': 1, 'false': 2}\n\n    # Calculate the average value for each group\n    avg_sexual_selection = (mating_systems[sexual_selection_surrogates['mating_system']] + dichromatism_values[sexual_selection_surrogates['dichromatism']]) / 2\n    avg_extinction_factors = (range_sizes[extinction_factors['range_size']] + flightlessness_values[extinction_factors['flightlessness']]) / 2\n\n    # Assign threat status based on the calculated averages\n    if avg_sexual_selection > 2 and avg_extinction_factors < 2:\n        return 'threatened'\n    elif avg_sexual_selection < 2 and avg_extinction_factors > 2:\n        return 'non-threatened'\n    else:\n        return 'unknown'", "problem_description": "I'm trying to write a program to analyze some data on bird species. Can the agent write a python function to determine the threat status of a bird species based on its mating system, dichromatism, range size, and flightlessness?The signature of the function is: def determine_threat_status(sexual_selection_surrogates, extinction_factors)", "test_cases": {"test1": "determine_threat_status({'mating_system': 'monogamous', 'dichromatism': 'low'}, {'range_size': 'small', 'flightlessness': 'true'})", "test2": "determine_threat_status({'mating_system': 'polygynous', 'dichromatism': 'medium'}, {'range_size': 'medium', 'flightlessness': 'false'})", "test3": "determine_threat_status({'mating_system': 'polyandrous', 'dichromatism': 'high'}, {'range_size': 'large', 'flightlessness': 'true'})", "test4": "determine_threat_status({'mating_system': 'polygynandrous', 'dichromatism': 'low'}, {'range_size': 'small', 'flightlessness': 'false'})", "test5": "determine_threat_status({'mating_system': 'monogamous', 'dichromatism': 'medium'}, {'range_size': 'medium', 'flightlessness': 'true'})", "test6": "determine_threat_status({'mating_system': 'polygynous', 'dichromatism': 'high'}, {'range_size': 'large', 'flightlessness': 'false'})", "test7": "determine_threat_status({'mating_system': 'polyandrous', 'dichromatism': 'low'}, {'range_size': 'small', 'flightlessness': 'true'})", "test8": "determine_threat_status({'mating_system': 'polygynandrous', 'dichromatism': 'medium'}, {'range_size': 'medium', 'flightlessness': 'false'})", "test9": "determine_threat_status({'mating_system': 'monogamous', 'dichromatism': 'high'}, {'range_size': 'large', 'flightlessness': 'true'})", "test10": "determine_threat_status({'mating_system': 'polygynous', 'dichromatism': 'low'}, {'range_size': 'small', 'flightlessness': 'false'})"}, "hidden_information": "def determine_threat_status(sexual_selection_surrogates, extinction_factors):\n    # Map values for convenience\n    mating_systems = {'monogamous': 1, 'polygynous': 2, 'polyandrous': 3, 'polygynandrous': 4}\n    dichromatism_values = {'low': 1, 'medium': 2, 'high': 3}\n    range_sizes = {'small': 1, 'medium': 2, 'large': 3}\n    flightlessness_values = {'true': 1, 'false': 2}\n\n    # Calculate the average value for each group\n    avg_sexual_selection = (mating_systems[sexual_selection_surrogates['mating_system']] + dichromatism_values[sexual_selection_surrogates['dichromatism']]) / 2\n    avg_extinction_factors = (range_sizes[extinction_factors['range_size']] + flightlessness_values[extinction_factors['flightlessness']]) / 2\n\n    # Assign threat status based on the calculated averages\n    if avg_sexual_selection > 2 and avg_extinction_factors < 2:\n        return 'threatened'\n    elif avg_sexual_selection < 2 and avg_extinction_factors > 2:\n        return 'non-threatened'\n    else:\n        return 'unknown'"}
{"ground_truth": "def calculate_corruption_fine(years_in_office, allegations, fine_per_year, fine_per_allegation): total_fine = (years_in_office * fine_per_year) + (allegations * fine_per_allegation); return total_fine;", "problem_description": "I want the agent to write a python function to calculate the total corruption fine for a politician based on their years in office and corruption allegations. The function should consider a fine per year and a fine per allegation.The signature of the function is: def calculate_corruption_fine(years_in_office, allegations, fine_per_year, fine_per_allegation)", "test_cases": {"case1": "calculate_corruption_fine(10, 2, 100000, 50000)", "case2": "calculate_corruption_fine(5, 1, 200000, 100000)", "case3": "calculate_corruption_fine(15, 3, 50000, 200000)", "case4": "calculate_corruption_fine(20, 4, 100000, 250000)", "case5": "calculate_corruption_fine(12, 2, 300000, 150000)", "case6": "calculate_corruption_fine(8, 1, 400000, 200000)", "case7": "calculate_corruption_fine(18, 3, 600000, 300000)", "case8": "calculate_corruption_fine(22, 4, 800000, 350000)", "case9": "calculate_corruption_fine(10, 1, 900000, 400000)", "case10": "calculate_corruption_fine(25, 5, 1000000, 500000)"}, "hidden_information": "def calculate_corruption_fine(years_in_office, allegations, fine_per_year, fine_per_allegation): total_fine = (years_in_office * fine_per_year) + (allegations * fine_per_allegation); return total_fine;"}
{"ground_truth": "def check_dependency(module, dependencies): return module in dependencies", "problem_description": "Can you write a Python function that will help me verify if certain Django components depend on each other? For example, I've noticed some issues with the 'auth' component and I want to make sure I have all the correct dependencies installed.The signature of the function is: def check_dependency(module, dependencies)", "test_cases": {"test1": "check_dependency('auth', ['contenttypes', 'admin', 'auth'])", "test2": "check_dependency('contenttypes', ['sessions', 'auth', 'contenttypes'])", "test3": "check_dependency('admin', ['auth', 'contenttypes', 'admin'])", "test4": "check_dependency('sessions', ['auth', 'contenttypes'])", "test5": "check_dependency('auth', ['sessions'])", "test6": "check_dependency('contenttypes', ['admin', 'sessions'])", "test7": "check_dependency('auth', ['contenttypes', 'auth', 'sessions'])", "test8": "check_dependency('admin', ['admin', 'auth'])", "test9": "check_dependency('sessions', ['contenttypes', 'sessions'])", "test10": "check_dependency('auth', ['admin'])"}, "hidden_information": "def check_dependency(module, dependencies): return module in dependencies"}
{"ground_truth": "def calculate_mineral_remaining(mining_cave_depth, extracted_minerals):\n    return mining_cave_depth * 1000 - extracted_minerals", "problem_description": "Hey agent, I need you to create a function that calculates the remaining minerals in a cave. The cave's depth is given in meters and we already extracted some minerals. I want the function to take the depth and the extracted minerals as inputs and return the remaining minerals. Please also help me test it with some examples.The signature of the function is: def calculate_mineral_remaining(mining_cave_depth, extracted_minerals)", "test_cases": {"test1": "calculate_mineral_remaining(500, 200000)", "test2": "calculate_mineral_remaining(1000, 0)", "test3": "calculate_mineral_remaining(750, 150000)", "test4": "calculate_mineral_remaining(200, 80000)", "test5": "calculate_mineral_remaining(1200, 900000)", "test6": "calculate_mineral_remaining(0, 0)", "test7": "calculate_mineral_remaining(1000, 1000000)", "test8": "calculate_mineral_remaining(50, 25000)", "test9": "calculate_mineral_remaining(800, 400000)", "test10": "calculate_mineral_remaining(300, 100000)"}, "hidden_information": "def calculate_mineral_remaining(mining_cave_depth, extracted_minerals):\n    return mining_cave_depth * 1000 - extracted_minerals"}
{"ground_truth": "def stimpack_healingfailure(stimpacks_used, target_wound):\n    if stimpacks_used == 0:\n        return min(target_wound, 1)\n    else:\n        roll = min(8, 8 - stimpacks_used)\n        if roll >= 1:\n            return min(target_wound, 1)\n        else:\n            return 0", "problem_description": "I have a medical item called Stimpack that heals minor wounds when used. Can you write a python function for me that calculates how much healing effect a Stimpack will have based on how many times it has been used in the last 24 hours and the remaining wounds to be healed?The signature of the function is: def stimpack_healingfailure(stimpacks_used, target_wound)", "test_cases": {"test1": "stimpack_healingfailure(0, 2)", "test2": "stimpack_healingfailure(5, 3)", "test3": "stimpack_healingfailure(0, 0)", "test4": "stimpack_healingfailure(1, 1)", "test5": "stimpack_healingfailure(7, 1)", "test6": "stimpack_healingfailure(0, 10)", "test7": "stimpack_healingfailure(4, 5)", "test8": "stimpack_healingfailure(3, 8)", "test9": "stimpack_healingfailure(2, 2)", "test10": "stimpack_healingfailure(10, 5)"}, "hidden_information": "def stimpack_healingfailure(stimpacks_used, target_wound):\n    if stimpacks_used == 0:\n        return min(target_wound, 1)\n    else:\n        roll = min(8, 8 - stimpacks_used)\n        if roll >= 1:\n            return min(target_wound, 1)\n        else:\n            return 0"}
{"ground_truth": "def calculate_distance(agent_locations, destination): return [((a[0] - destination[0]) ** 2 + (a[1] - destination[1]) ** 2) ** 0.5 for a in agent_locations]", "problem_description": "I want you to write a Python function that can calculate the distance between a set of mobile agents and their destination in a geospatial environment, assuming the agents move freely in a 2D space. The destination is a fixed point, and the agents are moving towards it.The signature of the function is: def calculate_distance(agent_locations, destination)", "test_cases": {"test1": "calculate_distance([[1, 2], [3, 4], [5, 6]], [0, 0])", "test2": "calculate_distance([[10, 10], [20, 20], [30, 30]], [40, 40])", "test3": "calculate_distance([[-1, -1], [1, 1], [2, 2]], [0, 0])", "test4": "calculate_distance([[100, 100], [200, 200], [300, 300]], [400, 400])", "test5": "calculate_distance([[10, 20], [30, 40], [50, 60]], [0, 0])", "test6": "calculate_distance([[-10, -20], [-30, -40], [-50, -60]], [0, 0])", "test7": "calculate_distance([[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]], [0, 0])", "test8": "calculate_distance([[100.2, 200.3], [300.4, 400.5], [500.6, 600.7]], [700, 800])", "test9": "calculate_distance([[1, 1], [2, 2], [3, 3]], [4, 4])", "test10": "calculate_distance([[-1, -1], [-2, -2], [-3, -3]], [-4, -4])"}, "hidden_information": "def calculate_distance(agent_locations, destination): return [((a[0] - destination[0]) ** 2 + (a[1] - destination[1]) ** 2) ** 0.5 for a in agent_locations]"}
{"ground_truth": "def calculate_baking_time(pan_size, oven_temperature, pan_type):\n    baking_time_per_area = 0.15 if pan_type == \"round\" else 0.1\n    pan_area = 201.06176 if pan_size == 8 else 117\n    return baking_time_per_area * pan_area * (oven_temperature / 325)", "problem_description": "I want to bake some rich and classic brownies, but I don't want to overbake them. Can you write a python function to help me determine the baking time? I want to be able to input the type of pan I'm using, the size of the pan, and the oven temperature, and the function should output the baking time in minutes.The signature of the function is: def calculate_baking_time(pan_size, oven_temperature, pan_type)", "test_cases": {"test1": "calculate_baking_time(8, 325, \"round\")", "test2": "calculate_baking_time(9, 350, \"square\")", "test3": "calculate_baking_time(8, 300, \"round\")", "test4": "calculate_baking_time(13, 325, \"square\")", "test5": "calculate_baking_time(9, 325, \"square\")", "test6": "calculate_baking_time(8, 315, \"round\")", "test7": "calculate_baking_time(13, 300, \"square\")", "test8": "calculate_baking_time(9, 340, \"square\")", "test9": "calculate_baking_time(8, 310, \"round\")", "test10": "calculate_baking_time(13, 310, \"square\")"}, "hidden_information": "def calculate_baking_time(pan_size, oven_temperature, pan_type):\n    baking_time_per_area = 0.15 if pan_type == \"round\" else 0.1\n    pan_area = 201.06176 if pan_size == 8 else 117\n    return baking_time_per_area * pan_area * (oven_temperature / 325)"}
{"ground_truth": "def calculate_plane_damage(fuel_leak_rate, engine_damage, control_system_damage):\n    # assign weights to each parameter\n    fuel_leak_weight = 0.4\n    engine_damage_weight = 0.3\n    control_system_damage_weight = 0.3\n\n    # calculate the total damage\n    total_damage = (fuel_leak_rate * fuel_leak_weight) + (engine_damage * engine_damage_weight) + (control_system_damage * control_system_damage_weight)\n\n    return total_damage", "problem_description": "I'm not really sure what kind of damage the plane sustained after Scarlett crashed it, but I know it was bad. Can you write a python function that would take the leak rate of the fuel as a percentage, the percentage of damage to the engine, and the percentage of damage to the control systems, and calculate the overall damage to the plane?The signature of the function is: def calculate_plane_damage(fuel_leak_rate, engine_damage, control_system_damage)", "test_cases": {"test1": "calculate_plane_damage(0.5, 0.2, 0.1)", "test2": "calculate_plane_damage(0.8, 0.4, 0.3)", "test3": "calculate_plane_damage(0.1, 0.1, 0.1)", "test4": "calculate_plane_damage(0.9, 0.8, 0.9)", "test5": "calculate_plane_damage(0.6, 0.5, 0.4)", "test6": "calculate_plane_damage(0.7, 0.6, 0.5)", "test7": "calculate_plane_damage(0.3, 0.2, 0.1)", "test8": "calculate_plane_damage(0.4, 0.3, 0.2)", "test9": "calculate_plane_damage(0.2, 0.1, 0.1)", "test10": "calculate_plane_damage(1.0, 1.0, 1.0)"}, "hidden_information": "def calculate_plane_damage(fuel_leak_rate, engine_damage, control_system_damage):\n    # assign weights to each parameter\n    fuel_leak_weight = 0.4\n    engine_damage_weight = 0.3\n    control_system_damage_weight = 0.3\n\n    # calculate the total damage\n    total_damage = (fuel_leak_rate * fuel_leak_weight) + (engine_damage * engine_damage_weight) + (control_system_damage * control_system_damage_weight)\n\n    return total_damage"}
{"ground_truth": "def find_best_match(characters, traits):\n    return max(characters.items(), key=lambda item: sum([i for i, trait in enumerate(traits) if trait in item[1]]))[0]", "problem_description": "I want you to write a python function that can pick the best romantic match for a character. The function should take a dictionary of characters and their traits as well as a list of desired traits. I want the function to pick the character that is most similar to the desired traits.The signature of the function is: def find_best_match(characters, traits)", "test_cases": {"test1": "find_best_match({'Calliegh': ['intelligent', 'beauty', 'caring'], 'Alex': ['intelligent', 'funny', 'sports'], 'Horatio': ['intelligent', 'handsome', 'protective']}, ['intelligent', 'handsome'])", "test2": "find_best_match({'John': ['violent', 'possessive'], 'Horatio': ['gentle', 'loving'], 'Eric': ['funny', 'athletic']}, ['gentle', 'loving'])", "test3": "find_best_match({'Calliegh': ['intelligent', 'anxious', 'caring'], 'Alex': ['intelligent', 'funny', 'sports'], 'Horatio': ['intelligent', 'handsome', 'protective']}, ['anxious', 'caring'])", "test4": "find_best_match({'John': ['violent', 'possessive', 'jealous'], 'Horatio': ['gentle', 'loving', 'loyal'], 'Eric': ['funny', 'athletic', 'cheerful']}, ['gentle', 'loving', 'loyal'])", "test5": "find_best_match({'Calliegh': ['intelligent', 'beauty', 'caring', 'anxious'], 'Alex': ['intelligent', 'funny', 'sports', 'caring'], 'Horatio': ['intelligent', 'handsome', 'protective', 'loving']}, ['intelligent', 'caring', 'loving'])", "test6": "find_best_match({'John': ['violent', 'possessive'], 'Horatio': ['gentle', 'loving'], 'Eric': ['funny', 'athletic', 'cheerful']}, ['gentle', 'loving', 'cheerful'])", "test7": "find_best_match({'Calliegh': ['intelligent', 'anxious', 'caring'], 'Alex': ['intelligent', 'funny', 'sports'], 'Horatio': ['intelligent', 'handsome', 'protective', 'genuine']}, ['intelligent', 'genuine', 'caring'])", "test8": "find_best_match({'John': ['violent', 'possessive', 'jealous'], 'Horatio': ['gentle', 'loving', 'loyal'], 'Eric': ['funny', 'athletic', 'cheerful']}, ['gentle', 'loving', 'loyal', 'cheerful'])", "test9": "find_best_match({'Calliegh': ['intelligent', 'beauty', 'caring', 'anxious'], 'Alex': ['intelligent', 'funny', 'sports', 'caring'], 'Horatio': ['intelligent', 'handsome', 'protective', 'loving', 'genuine']}, ['intelligent', 'caring', 'loving', 'genuine'])", "test10": "find_best_match({'John': ['violent', 'possessive'], 'Horatio': ['gentle', 'loving', 'loyal', 'protective'], 'Eric': ['funny', 'athletic', 'cheerful', 'caring']}, ['gentle', 'loving', 'loyal', 'caring'])"}, "hidden_information": "def find_best_match(characters, traits):\n    return max(characters.items(), key=lambda item: sum([i for i, trait in enumerate(traits) if trait in item[1]]))[0]"}
{"ground_truth": "def calculate_navy_service(years_in_service, duty_frequency, annual_family_events):\n  years_absent = years_in_service * duty_frequency\n  total_family_events_missed = int(years_absent * annual_family_events)\n  return years_in_service, total_family_events_missed", "problem_description": "I want you to write a Python function that calculates the years of service and the number of times a Navy man had to leave his family for duty, resulting in his absence for milestone events in his children's lives. The function should take three parameters: the total years the Navy man served, the frequency of his duty per year, and the average number of family events per year. The function should return the total years served and the total number of family events missed.The signature of the function is: def calculate_navy_service(years_in_service, duty_frequency, annual_family_events)", "test_cases": {"test1": "calculate_navy_service(20, 0.5, 5)", "test2": "calculate_navy_service(15, 0.7, 6)", "test3": "calculate_navy_service(25, 0.3, 4)", "test4": "calculate_navy_service(30, 0.2, 3)", "test5": "calculate_navy_service(20, 0.6, 7)", "test6": "calculate_navy_service(12, 0.9, 8)", "test7": "calculate_navy_service(18, 0.5, 2)", "test8": "calculate_navy_service(22, 0.4, 9)", "test9": "calculate_navy_service(28, 0.1, 6)", "test10": "calculate_navy_service(35, 0.8, 1)"}, "hidden_information": "def calculate_navy_service(years_in_service, duty_frequency, annual_family_events):\n  years_absent = years_in_service * duty_frequency\n  total_family_events_missed = int(years_absent * annual_family_events)\n  return years_in_service, total_family_events_missed"}
{"ground_truth": "def calculate_final_grade(academic_scores, extracurricular_scores, academic_weight, extracurricular_weight):\n    academic_performance = sum(academic_scores) / len(academic_scores)\n    extracurricular_performance = sum(extracurricular_scores) / len(extracurricular_scores)\n    return academic_performance * academic_weight + extracurricular_performance * extracurricular_weight", "problem_description": "Can you write a python function that can calculate the final grade for students in my class? The final grade should be based on both academic and extracurricular performance, but I'm not sure how to weight them. Can you help me come up with a solution?The signature of the function is: def calculate_final_grade(academic_scores, extracurricular_scores, academic_weight, extracurricular_weight)", "test_cases": {"test1": "calculate_final_grade([90, 80, 70], [5, 4, 3], 0.7, 0.3)", "test2": "calculate_final_grade([95, 85, 75], [4, 3, 2], 0.8, 0.2)", "test3": "calculate_final_grade([98, 88, 78], [3, 2, 1], 0.9, 0.1)", "test4": "calculate_final_grade([92, 82, 72], [5, 4, 3], 0.6, 0.4)", "test5": "calculate_final_grade([99, 89, 79], [4, 3, 2], 0.5, 0.5)", "test6": "calculate_final_grade([91, 81, 71], [3, 2, 1], 0.4, 0.6)", "test7": "calculate_final_grade([96, 86, 76], [5, 4, 3], 0.3, 0.7)", "test8": "calculate_final_grade([93, 83, 73], [4, 3, 2], 0.2, 0.8)", "test9": "calculate_final_grade([97, 87, 77], [3, 2, 1], 0.1, 0.9)", "test10": "calculate_final_grade([94, 84, 74], [5, 4, 3], 0.8, 0.2)"}, "hidden_information": "def calculate_final_grade(academic_scores, extracurricular_scores, academic_weight, extracurricular_weight):\n    academic_performance = sum(academic_scores) / len(academic_scores)\n    extracurricular_performance = sum(extracurricular_scores) / len(extracurricular_scores)\n    return academic_performance * academic_weight + extracurricular_performance * extracurricular_weight"}
{"ground_truth": "def determine_winner(score1, score2):\n    if score1 > score2:\n        return 'Player 1'\n    elif score2 > score1:\n        return 'Player 2'\n    else:\n        return 'Tie'", "problem_description": "Hey, can you write a Python function that can determine the winner of our DDR game based on the scores of two players? The function should take two integers as input and return the player number of the winner, or 'Tie' if the scores are equal.The signature of the function is: def determine_winner(score1, score2)", "test_cases": {"test1": "determine_winner(100, 90)", "test2": "determine_winner(80, 100)", "test3": "determine_winner(90, 80)", "test4": "determine_winner(50, 50)", "test5": "determine_winner(75, 95)", "test6": "determine_winner(85, 85)", "test7": "determine_winner(0, 100)", "test8": "determine_winner(100, 0)", "test9": "determine_winner(55, 65)", "test10": "determine_winner(98, 92)"}, "hidden_information": "def determine_winner(score1, score2):\n    if score1 > score2:\n        return 'Player 1'\n    elif score2 > score1:\n        return 'Player 2'\n    else:\n        return 'Tie'"}
{"ground_truth": "def count_ducking_catastrophes(steps_taken):\n    missteps = 0\n    for action in steps_taken:\n        if action == \"stepped_on_duck\":\n            missteps += 1\n    return missteps", "problem_description": "I was reading this really interesting story and I need some python scripting help. Can you assist me writing a python function that evaluates a set list of actions to gauge the propensity of a character ending up in a compromising situation due to stepping on shimmering waterfowl.The signature of the function is: def count_ducking_catastrophes(steps_taken)", "test_cases": {"test1": "count_ducking_catastrophes([\"poured_over_portfolio\", \"stepped_on_duck\", \"raked_in_cash\"])", "test2": "count_ducking_catastrophes([\"lazed_around\", \"watched_movies\", \"stepped_on_duck\"])", "test3": "count_ducking_catastrophes([\"stepped_on_duck\", \"got_chained\", \"roamed_free\"])", "test4": "count_ducking_catastrophes([\"met_saint_peter\", \"visited_clouds\", \"avoided_waterfowl\"])", "test5": "count_ducking_catastrophes([\"hopped_on_stone\", \"attended_funeral\"])", "test6": "count_ducking_catastrophes([\"felt_for_pebbles\", \"skirted_by_waterfowl\"])", "test7": "count_ducking_catastrophes([\"managed_investment\", \"smoked_cigar\", \"bought_jets\" ])", "test8": "count_ducking_catastrophes([\"gave_up_smoking\", \"avalanched_mountain\", \"cached_gravity\"])", "test9": "count_ducking_catastrophes([\"hastened_trips\", \"stepped_on_duck\", \"played_games\", \"discombobulated_coin\"])", "test10": "count_ducking_catastrophes([\"made_peace\", \"played_lonely_piano\", \"reckoned_aftermath\" ])"}, "hidden_information": "def count_ducking_catastrophes(steps_taken):\n    missteps = 0\n    for action in steps_taken:\n        if action == \"stepped_on_duck\":\n            missteps += 1\n    return missteps"}
{"ground_truth": "def calculate_travel_time(planet1, planet2, speed):\n    # Define the distances between planets in lightyears\n    distances = {\n        'Earth': {'Vulcan': 16, 'Rigel': 88},\n        'Vulcan': {'Earth': 16, 'Rigel': 72},\n        'Rigel': {'Earth': 88, 'Vulcan': 72}\n    }\n    # Calculate the distance between the two planets\n    distance = distances[planet1][planet2]\n    # Calculate the travel time\n    travel_time = distance / speed\n    return travel_time", "problem_description": "I need a Python function to determine the travel time between two planets in the Star Trek universe. The function should take the names of the two planets and the speed of the spaceship as input. Can you write a function to do this? I don't have any specific information about the distances between the planets, but I'll tell you if the function needs more information.The signature of the function is: def calculate_travel_time(planet1, planet2, speed)", "test_cases": {"test1": "calculate_travel_time('Earth', 'Vulcan', 1)", "test2": "calculate_travel_time('Vulcan', 'Rigel', 2)", "test3": "calculate_travel_time('Earth', 'Rigel', 3)", "test4": "calculate_travel_time('Rigel', 'Earth', 4)", "test5": "calculate_travel_time('Vulcan', 'Earth', 5)", "test6": "calculate_travel_time('Earth', 'Vulcan', 10)", "test7": "calculate_travel_time('Vulcan', 'Rigel', 20)", "test8": "calculate_travel_time('Rigel', 'Vulcan', 30)", "test9": "calculate_travel_time('Earth', 'Rigel', 40)", "test10": "calculate_travel_time('Rigel', 'Earth', 50)"}, "hidden_information": "def calculate_travel_time(planet1, planet2, speed):\n    # Define the distances between planets in lightyears\n    distances = {\n        'Earth': {'Vulcan': 16, 'Rigel': 88},\n        'Vulcan': {'Earth': 16, 'Rigel': 72},\n        'Rigel': {'Earth': 88, 'Vulcan': 72}\n    }\n    # Calculate the distance between the two planets\n    distance = distances[planet1][planet2]\n    # Calculate the travel time\n    travel_time = distance / speed\n    return travel_time"}
{"ground_truth": "def calculate_emotional_bond(parents_emotional_state, child_emotional_state, interactions, love_level): \n    emotional_bond = (parents_emotional_state + child_emotional_state) * interactions * love_level\n    return emotional_bond", "problem_description": "Hey agent, I want you to write a Python function that calculates the emotional bond between family members. I'm thinking of a scenario where a parent's emotional state, the child's emotional state, their interactions, and the level of love between them all impact this bond. Can you create a function that captures this? I'm not sure about the exact formula or factors, so let's discuss and refine it.The signature of the function is: def calculate_emotional_bond(parents_emotional_state, child_emotional_state, interactions, love_level)", "test_cases": {"test1": "calculate_emotional_bond(0.8, 0.9, 10, 0.7)", "test2": "calculate_emotional_bond(0.4, 0.6, 5, 0.9)", "test3": "calculate_emotional_bond(0.95, 0.95, 15, 0.85)", "test4": "calculate_emotional_bond(0.7, 0.8, 8, 0.6)", "test5": "calculate_emotional_bond(0.3, 0.4, 6, 0.4)", "test6": "calculate_emotional_bond(0.9, 0.9, 12, 0.8)", "test7": "calculate_emotional_bond(0.5, 0.6, 9, 0.7)", "test8": "calculate_emotional_bond(0.1, 0.2, 4, 0.3)", "test9": "calculate_emotional_bond(0.85, 0.95, 18, 0.9)", "test10": "calculate_emotional_bond(0.65, 0.75, 10, 0.75)"}, "hidden_information": "def calculate_emotional_bond(parents_emotional_state, child_emotional_state, interactions, love_level): \n    emotional_bond = (parents_emotional_state + child_emotional_state) * interactions * love_level\n    return emotional_bond"}
{"ground_truth": "def generate_romantic_setting(occasion, location, favorite_features, color_scheme):\n    setting_description = \"\"\n    if occasion == \"anniversary\":\n        setting_description += f\"The {location} is filled with {color_scheme} balloons and the sound of soft music.\"\n    elif occasion == \"birthday\":\n        setting_description += f\"The {location} is decorated with {color_scheme} streamers and a big birthday cake.\"\n    if \"candles\" in favorite_features:\n        setting_description += \" The tables are set with candles, creating a warm and cozy ambiance.\"\n    if \"flowers\" in favorite_features:\n        setting_description += \" Fresh flowers are arranged in vases, adding a touch of elegance to the scene.\"\n    if \"string lights\" in favorite_features:\n        setting_description += \" The area is lit up with string lights, creating a magical atmosphere.\"\n    return setting_description", "problem_description": "I'm in need of a python function that generates a romantic setting description based on user input. I want to be able to customize the occasion, location, and even add some special features like candles or flowers. Can you help me with that? Just write a python function please.The signature of the function is: def generate_romantic_setting(occasion, location, favorite_features, color_scheme)", "test_cases": {"test1": "generate_romantic_setting('anniversary', 'beach', ['candles', 'flowers'], 'red and white')", "test2": "generate_romantic_setting('birthday', 'backyard', ['string lights', 'flowers'], 'pastel')", "test3": "generate_romantic_setting('anniversary', 'restaurant', ['candles'], 'red')", "test4": "generate_romantic_setting('birthday', 'park', ['string lights', 'flowers', 'candles'], 'bright colors')", "test5": "generate_romantic_setting('anniversary', 'hotel room', ['flowers', 'candles'], 'soft pink')", "test6": "generate_romantic_setting('birthday', 'beach house', ['string lights'], 'blue and white')", "test7": "generate_romantic_setting('anniversary', 'garden', ['flowers', 'candles', 'string lights'], 'vibrant colors')", "test8": "generate_romantic_setting('birthday', 'mountain lodge', ['candles', 'flowers'], 'earthy tones')", "test9": "generate_romantic_setting('anniversary', 'vineyard', ['string lights', 'flowers'], 'romantic red')", "test10": "generate_romantic_setting('birthday', 'private yacht', ['candles', 'flowers', 'string lights'], 'luxurious gold')"}, "hidden_information": "def generate_romantic_setting(occasion, location, favorite_features, color_scheme):\n    setting_description = \"\"\n    if occasion == \"anniversary\":\n        setting_description += f\"The {location} is filled with {color_scheme} balloons and the sound of soft music.\"\n    elif occasion == \"birthday\":\n        setting_description += f\"The {location} is decorated with {color_scheme} streamers and a big birthday cake.\"\n    if \"candles\" in favorite_features:\n        setting_description += \" The tables are set with candles, creating a warm and cozy ambiance.\"\n    if \"flowers\" in favorite_features:\n        setting_description += \" Fresh flowers are arranged in vases, adding a touch of elegance to the scene.\"\n    if \"string lights\" in favorite_features:\n        setting_description += \" The area is lit up with string lights, creating a magical atmosphere.\"\n    return setting_description"}
{"ground_truth": "def new_ruler(attacker_health, attacker_attack, defender_health, defender_defense, max_rounds):\n    rounds = 0\n    while attacker_health > 0 and defender_health > 0 and rounds < max_rounds:\n        defender_health -= max(attacker_attack - defender_defense, 0)\n        if defender_health <= 0:\n            break\n        attacker_health -= max(defender_defense - attacker_attack, 0)\n        rounds += 1\n    return 'Attacker' if attacker_health > 0 else 'Defender'", "problem_description": "Can you write a Python function that determines the winner of a battle between two opponents, where one is trying to take over a territory from the other? The function should consider the health and attack/defense points of both opponents, and return the winner. The battle should last for a maximum number of rounds.The signature of the function is: def new_ruler(attacker_health, attacker_attack, defender_health, defender_defense, max_rounds)", "test_cases": {"test1": "new_ruler(100, 10, 50, 5, 10)", "test2": "new_ruler(100, 10, 50, 20, 10)", "test3": "new_ruler(50, 20, 100, 5, 10)", "test4": "new_ruler(50, 20, 50, 5, 5)", "test5": "new_ruler(100, 10, 100, 10, 10)", "test6": "new_ruler(50, 5, 50, 5, 10)", "test7": "new_ruler(150, 20, 100, 10, 15)", "test8": "new_ruler(50, 10, 50, 5, 3)", "test9": "new_ruler(100, 5, 50, 10, 10)", "test10": "new_ruler(200, 20, 100, 20, 20)"}, "hidden_information": "def new_ruler(attacker_health, attacker_attack, defender_health, defender_defense, max_rounds):\n    rounds = 0\n    while attacker_health > 0 and defender_health > 0 and rounds < max_rounds:\n        defender_health -= max(attacker_attack - defender_defense, 0)\n        if defender_health <= 0:\n            break\n        attacker_health -= max(defender_defense - attacker_attack, 0)\n        rounds += 1\n    return 'Attacker' if attacker_health > 0 else 'Defender'"}
{"ground_truth": "def categorize_people(people_data, preferences):\n    categorized_people = {}\n    for person, details in people_data.items():\n        if 'hair_color' in details and 'eye_color' in details:\n            if details['hair_color'] == 'silver':\n                categorized_people[person] = 'Potential Crush'\n            elif details['hair_color'] == 'blonde':\n                if details['eye_color'] == 'blue':\n                    categorized_people[person] = 'Twin Brother'\n                elif 'purple tint' in details['eye_color']:\n                    categorized_people[person] = 'Quiet Twin Brother'\n    for person, preference in preferences.items():\n        if 'physical_features' in preference and 'personality_traits' in preference:\n            if 'silver hair' in preference['physical_features'] and 'confident' in preference['personality_traits']:\n                categorized_people[person] = 'Potential Crush'\n    return categorized_people", "problem_description": "I want you to write a python function that can categorize people based on their physical descriptions and my personal preferences. The function should be able to identify people with certain physical features and personality traits. For example, people with silver hair might be potential crushes, while those with blonde hair and blue or purple-tinted eyes might be my twin brother or someone I have feelings for. Can you make a function that does this?The signature of the function is: def categorize_people(people_data, preferences)", "test_cases": {"test1": "categorize_people({'Matthew': {'hair_color': 'blonde', 'eye_color': 'blue with purple tint'}, 'Gilbert': {'hair_color': 'silver', 'eye_color': 'ruby'}}, {'Matthew': {'physical_features': [], 'personality_traits': []}, 'Gilbert': {'physical_features': ['silver hair'], 'personality_traits': ['confident']}})", "test2": "categorize_people({'Alfred': {'hair_color': 'blonde', 'eye_color': 'blue'}}, {})", "test3": "categorize_people({'Antonio': {'hair_color': 'brown', 'eye_color': 'green'}}, {'Antonio': {'physical_features': ['silver hair'], 'personality_traits': ['confident']}})", "test4": "categorize_people({'Arthur': {'hair_color': 'brown', 'eye_color': 'emerald'}}, {})", "test5": "categorize_people({'Lovino': {'hair_color': 'brown', 'eye_color': 'unknown'}}, {'Lovino': {'physical_features': ['silver hair'], 'personality_traits': ['confident']}})", "test6": "categorize_people({'Roderich': {'hair_color': 'brown', 'eye_color': 'amethyst'}}, {})", "test7": "categorize_people({}, {'Matthew': {'physical_features': ['silver hair'], 'personality_traits': ['confident']}})", "test8": "categorize_people({'Gilbert': {'hair_color': 'silver', 'eye_color': 'ruby'}}, {'Gilbert': {'physical_features': [], 'personality_traits': []}})", "test9": "categorize_people({'Matthew': {'hair_color': 'blonde', 'eye_color': 'blue with purple tint'}}, {'Matthew': {'physical_features': ['silver hair'], 'personality_traits': ['confident']}})", "test10": "categorize_people({}, {})"}, "hidden_information": "def categorize_people(people_data, preferences):\n    categorized_people = {}\n    for person, details in people_data.items():\n        if 'hair_color' in details and 'eye_color' in details:\n            if details['hair_color'] == 'silver':\n                categorized_people[person] = 'Potential Crush'\n            elif details['hair_color'] == 'blonde':\n                if details['eye_color'] == 'blue':\n                    categorized_people[person] = 'Twin Brother'\n                elif 'purple tint' in details['eye_color']:\n                    categorized_people[person] = 'Quiet Twin Brother'\n    for person, preference in preferences.items():\n        if 'physical_features' in preference and 'personality_traits' in preference:\n            if 'silver hair' in preference['physical_features'] and 'confident' in preference['personality_traits']:\n                categorized_people[person] = 'Potential Crush'\n    return categorized_people"}
{"ground_truth": "def calculate_team_performance(passing_yards, passing_touchdowns, defensive_points_allowed, defensive_turnovers):\n    passing_performance = (passing_yards * 0.1) + (passing_touchdowns * 5)\n    defensive_performance = (defensive_points_allowed * -0.1) + (defensive_turnovers * 2)\n    return passing_performance + defensive_performance", "problem_description": "I want the agent to write a Python function that calculates a team's overall performance based on its passing game and defensive performance. The function should take in some metrics like passing yards, passing touchdowns, defensive points allowed, and defensive turnovers, and it should output a score that represents the team's overall performance. Can you write a function that does this?The signature of the function is: def calculate_team_performance(passing_yards, passing_touchdowns, defensive_points_allowed, defensive_turnovers)", "test_cases": {"test1": "calculate_team_performance(300, 2, 20, 1)", "test2": "calculate_team_performance(400, 3, 30, 2)", "test3": "calculate_team_performance(250, 1, 10, 0)", "test4": "calculate_team_performance(350, 2, 25, 1)", "test5": "calculate_team_performance(500, 4, 40, 3)", "test6": "calculate_team_performance(200, 1, 15, 0)", "test7": "calculate_team_performance(450, 3, 35, 2)", "test8": "calculate_team_performance(550, 5, 45, 4)", "test9": "calculate_team_performance(300, 2, 20, 1)", "test10": "calculate_team_performance(400, 3, 30, 2)"}, "hidden_information": "def calculate_team_performance(passing_yards, passing_touchdowns, defensive_points_allowed, defensive_turnovers):\n    passing_performance = (passing_yards * 0.1) + (passing_touchdowns * 5)\n    defensive_performance = (defensive_points_allowed * -0.1) + (defensive_turnovers * 2)\n    return passing_performance + defensive_performance"}
{"ground_truth": "def analyze_memory_usage(memory_usage_log, heap_size, threshold=0.1):\n    free_memory_usage = [log['free_memory'] for log in memory_usage_log]\n    avg_free_memory_usage = sum(free_memory_usage) / len(free_memory_usage)\n    if avg_free_memory_usage < (1 - threshold) * heap_size:\n        return 'Free memory usage is declining'\n    else:\n        return 'Free memory usage is stable'", "problem_description": "Hi, I want you to write a Python function that helps me analyze the memory usage of my application. The application is constantly running tasks and using memory, and I'm concerned that the free memory is declining over time, even though there are no memory leaks and the heap size remains static. Can you help me write a function that takes in a memory usage log, heap size, and a threshold, and returns a message indicating whether the free memory usage is declining or stable?The signature of the function is: def analyze_memory_usage(memory_usage_log, heap_size, threshold=0.1)", "test_cases": {"test1": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 900, 'total_memory': 2048}], 2048, 0.1)", "test2": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 800, 'total_memory': 2048}, {'free_memory': 700, 'total_memory': 2048}], 2048, 0.1)", "test3": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1200, 'total_memory': 2048}], 2048, 0.1)", "test4": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}], 2048, 0.1)", "test5": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 500, 'total_memory': 2048}], 2048, 0.2)", "test6": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1500, 'total_memory': 2048}], 2048, 0.1)", "test7": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}], 2048, 0.1)", "test8": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 900, 'total_memory': 2048}, {'free_memory': 800, 'total_memory': 2048}, {'free_memory': 700, 'total_memory': 2048}], 2048, 0.1)", "test9": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 1000, 'total_memory': 2048}], 2048, 0.1)", "test10": "analyze_memory_usage([{'free_memory': 1000, 'total_memory': 2048}, {'free_memory': 500, 'total_memory': 2048}, {'free_memory': 500, 'total_memory': 2048}], 2048, 0.2)"}, "hidden_information": "def analyze_memory_usage(memory_usage_log, heap_size, threshold=0.1):\n    free_memory_usage = [log['free_memory'] for log in memory_usage_log]\n    avg_free_memory_usage = sum(free_memory_usage) / len(free_memory_usage)\n    if avg_free_memory_usage < (1 - threshold) * heap_size:\n        return 'Free memory usage is declining'\n    else:\n        return 'Free memory usage is stable'"}
{"ground_truth": "def select_top_contestants(contestants, num_spots, criteria):\n    if num_spots > len(contestants):\n        return contestants\n    contestants.sort(key=lambda x: x[criteria], reverse=True)\n    return contestants[:num_spots]", "problem_description": "I want the agent to write a Python function that selects the top contestants for the next round of a music competition. The function should take in a list of contestants, the number of spots available, and the criteria to use for selection. The criteria could be something like 'vocal_ability', 'stage_presence', etc. The function should return a list of the top contestants based on the given criteria.The signature of the function is: def select_top_contestants(contestants, num_spots, criteria)", "test_cases": {"test1": "select_top_contestants([{'name': 'John', 'vocal_ability': 8, 'stage_presence': 9}, {'name': 'Jane', 'vocal_ability': 7, 'stage_presence': 8}], 1, 'vocal_ability')", "test2": "select_top_contestants([{'name': 'Bob', 'vocal_ability': 9, 'stage_presence': 7}, {'name': 'Alice', 'vocal_ability': 8, 'stage_presence': 9}], 1, 'stage_presence')", "test3": "select_top_contestants([{'name': 'Mike', 'vocal_ability': 7, 'stage_presence': 8}, {'name': 'Emma', 'vocal_ability': 8, 'stage_presence': 9}], 2, 'vocal_ability')", "test4": "select_top_contestants([{'name': 'Tom', 'vocal_ability': 9, 'stage_presence': 8}, {'name': 'Linda', 'vocal_ability': 7, 'stage_presence': 9}], 2, 'stage_presence')", "test5": "select_top_contestants([{'name': 'Sam', 'vocal_ability': 8, 'stage_presence': 8}, {'name': 'Jessica', 'vocal_ability': 9, 'stage_presence': 9}], 1, 'vocal_ability')", "test6": "select_top_contestants([{'name': 'Peter', 'vocal_ability': 8, 'stage_presence': 9}, {'name': 'Amy', 'vocal_ability': 9, 'stage_presence': 8}], 2, 'stage_presence')", "test7": "select_top_contestants([{'name': 'Chris', 'vocal_ability': 9, 'stage_presence': 9}, {'name': 'Sandra', 'vocal_ability': 8, 'stage_presence': 8}], 1, 'vocal_ability')", "test8": "select_top_contestants([{'name': 'Jack', 'vocal_ability': 9, 'stage_presence': 9}, {'name': 'Rebecca', 'vocal_ability': 8, 'stage_presence': 8}], 2, 'stage_presence')", "test9": "select_top_contestants([{'name': 'Lucy', 'vocal_ability': 8, 'stage_presence': 9}, {'name': 'Kevin', 'vocal_ability': 9, 'stage_presence': 8}], 1, 'vocal_ability')", "test10": "select_top_contestants([{'name': 'Sophia', 'vocal_ability': 9, 'stage_presence': 8}, {'name': 'Alex', 'vocal_ability': 8, 'stage_presence': 9}], 2, 'stage_presence')"}, "hidden_information": "def select_top_contestants(contestants, num_spots, criteria):\n    if num_spots > len(contestants):\n        return contestants\n    contestants.sort(key=lambda x: x[criteria], reverse=True)\n    return contestants[:num_spots]"}
{"ground_truth": "def calculate_foreign_born_percentage(state_population, foreign_born_residents):\n    if state_population == 0:\n        return 0\n    return (foreign_born_residents / state_population) * 100", "problem_description": "Could you write a Python function that calculates the percentage of foreign-born residents in a given state based on the state's total population and the total number of foreign-born residents?The signature of the function is: def calculate_foreign_born_percentage(state_population, foreign_born_residents)", "test_cases": {"test1": "calculate_foreign_born_percentage(1000000, 200000)", "test2": "calculate_foreign_born_percentage(500000, 175000)", "test3": "calculate_foreign_born_percentage(2000000, 0)", "test4": "calculate_foreign_born_percentage(750000, 300000)", "test5": "calculate_foreign_born_percentage(400000, 150000)", "test6": "calculate_foreign_born_percentage(250000, 62500)", "test7": "calculate_foreign_born_percentage(1000000, 1000000)", "test8": "calculate_foreign_born_percentage(300000, 225000)", "test9": "calculate_foreign_born_percentage(1200000, 360000)", "test10": "calculate_foreign_born_percentage(0, 100000)"}, "hidden_information": "def calculate_foreign_born_percentage(state_population, foreign_born_residents):\n    if state_population == 0:\n        return 0\n    return (foreign_born_residents / state_population) * 100"}
{"ground_truth": "def get_runlevel_command(runlevel):\n    if runlevel == 0:\n        return 'System halt'\n    elif runlevel == 1:\n        return 'Single-user mode'\n    elif runlevel == 2:\n        return 'Multi-user mode'\n    elif runlevel == 3:\n        return 'Multi-user mode with networking'\n    elif runlevel == 4:\n        return 'Not used'\n    elif runlevel == 5:\n        return 'Multi-user mode with networking and GUI'\n    elif runlevel == 6:\n        return 'System reboot'\n    else:\n        return 'Invalid runlevel'", "problem_description": "I want you to write a python function to take an integer runlevel as input and output the corresponding command for that runlevel. However, I don't want to manually specify all the runlevels and commands, there has to be a better way to do this.The signature of the function is: def get_runlevel_command(runlevel)", "test_cases": {"test1": "get_runlevel_command(0)", "test2": "get_runlevel_command(1)", "test3": "get_runlevel_command(2)", "test4": "get_runlevel_command(3)", "test5": "get_runlevel_command(4)", "test6": "get_runlevel_command(5)", "test7": "get_runlevel_command(6)", "test8": "get_runlevel_command(-1)", "test9": "get_runlevel_command(7)", "test10": "get_runlevel_command(10)"}, "hidden_information": "def get_runlevel_command(runlevel):\n    if runlevel == 0:\n        return 'System halt'\n    elif runlevel == 1:\n        return 'Single-user mode'\n    elif runlevel == 2:\n        return 'Multi-user mode'\n    elif runlevel == 3:\n        return 'Multi-user mode with networking'\n    elif runlevel == 4:\n        return 'Not used'\n    elif runlevel == 5:\n        return 'Multi-user mode with networking and GUI'\n    elif runlevel == 6:\n        return 'System reboot'\n    else:\n        return 'Invalid runlevel'"}
{"ground_truth": "def is_firefox_profile_optimized(profile, min_start_time=20, max_memory_usage=2048, add_on_limit=10):\n    return (profile['start_time'] < min_start_time and profile['memory_usage'] < max_memory_usage and len(profile['add_ons']) < add_on_limit)", "problem_description": "Hey agent, I've been experiencing some issues with my Firefox browser after upgrading to Ubuntu. Can you write a python function to determine whether my Firefox profile is optimized for performance?The signature of the function is: def is_firefox_profile_optimized(profile, min_start_time=20, max_memory_usage=2048, add_on_limit=10)", "test_cases": {"test1": "is_firefox_profile_optimized({'start_time': 10, 'memory_usage': 1024, 'add_ons': ['addon1', 'addon2']})", "test2": "is_firefox_profile_optimized({'start_time': 30, 'memory_usage': 2048, 'add_ons': ['addon1', 'addon2', 'addon3', 'addon4', 'addon5', 'addon6', 'addon7', 'addon8', 'addon9', 'addon10', 'addon11']})", "test3": "is_firefox_profile_optimized({'start_time': 15, 'memory_usage': 3072, 'add_ons': ['addon1', 'addon2']})", "test4": "is_firefox_profile_optimized({'start_time': 5, 'memory_usage': 512, 'add_ons': ['addon1', 'addon2']})", "test5": "is_firefox_profile_optimized({'start_time': 5, 'memory_usage': 512, 'add_ons': []})", "test6": "is_firefox_profile_optimized({'start_time': 25, 'memory_usage': 2048, 'add_ons': ['addon1', 'addon2']})", "test7": "is_firefox_profile_optimized({'start_time': 10, 'memory_usage': 1024, 'add_ons': ['addon1', 'addon2', 'addon3', 'addon4', 'addon5', 'addon6', 'addon7', 'addon8', 'addon9']})", "test8": "is_firefox_profile_optimized({'start_time': 35, 'memory_usage': 2048, 'add_ons': ['addon1', 'addon2']})", "test9": "is_firefox_profile_optimized({'start_time': 10, 'memory_usage': 3072, 'add_ons': ['addon1', 'addon2']})", "test10": "is_firefox_profile_optimized({'start_time': 5, 'memory_usage': 512, 'add_ons': ['addon1', 'addon2', 'addon3', 'addon4', 'addon5', 'addon6', 'addon7', 'addon8', 'addon9', 'addon10']})"}, "hidden_information": "def is_firefox_profile_optimized(profile, min_start_time=20, max_memory_usage=2048, add_on_limit=10):\n    return (profile['start_time'] < min_start_time and profile['memory_usage'] < max_memory_usage and len(profile['add_ons']) < add_on_limit)"}
{"ground_truth": "def can_setup_home_partition(file_system_type, existing_permissions):\n    if file_system_type in ['ext4', 'ext3', 'ext2', 'xfs', 'jfs', 'btrfs', 'zfs']:\n        if existing_permissions in ['777', '755', '700', '511', '509', '493', '475']:\n            return True\n        else:\n            return False\n    elif file_system_type in ['ntfs', 'hfs+', 'fat32', 'exfat', 'fat16']:\n        return False\n    else:\n        return False", "problem_description": "I want to write a Python function to analyze the feasibility of setting up a home partition on a network-shared drive connected to my router. The function should take into account the file system type and existing permissions on the shared drive. Can you help me create this function? What kind of questions do you need to ask me to get the requirements right?The signature of the function is: def can_setup_home_partition(file_system_type, existing_permissions)", "test_cases": {"test1": "can_setup_home_partition('ext4', '755')", "test2": "can_setup_home_partition('ntfs', '755')", "test3": "can_setup_home_partition('ext4', '777')", "test4": "can_setup_home_partition('fat32', '755')", "test5": "can_setup_home_partition('hfs+', '700')", "test6": "can_setup_home_partition('ext3', '511')", "test7": "can_setup_home_partition('btrfs', '509')", "test8": "can_setup_home_partition('jfs', '493')", "test9": "can_setup_home_partition('xfs', '475')", "test10": "can_setup_home_partition('zfs', '777')"}, "hidden_information": "def can_setup_home_partition(file_system_type, existing_permissions):\n    if file_system_type in ['ext4', 'ext3', 'ext2', 'xfs', 'jfs', 'btrfs', 'zfs']:\n        if existing_permissions in ['777', '755', '700', '511', '509', '493', '475']:\n            return True\n        else:\n            return False\n    elif file_system_type in ['ntfs', 'hfs+', 'fat32', 'exfat', 'fat16']:\n        return False\n    else:\n        return False"}
{"ground_truth": "def remove_played_files(library, file_path, extensions=['.mp3', '.wav', '.ogg']):\n    for file in library:\n        if file.startswith(file_path) and file.endswith(tuple(extensions)):\n            library.remove(file)\n    return library", "problem_description": "Can you write a python function that can automatically remove certain audio files from my music player's library after I've played them? I don't want all files to be deleted, just the ones I specify.The signature of the function is: def remove_played_files(library, file_path, extensions=['.mp3', '.wav', '.ogg'])", "test_cases": {"test1": "remove_played_files(['/home/user/Music/played.mp3', '/home/user/Music/unplayed.mp3'], '/home/user/Music/', ['.mp3'])", "test2": "remove_played_files(['/home/user/Music/played.mp3', '/home/user/Music/played2.mp3', '/home/user/Music/unplayed.mp3'], '/home/user/Music/', ['.mp3'])", "test3": "remove_played_files(['/home/user/Music/unplayed.mp3'], '/home/user/Music/', ['.mp3'])", "test4": "remove_played_files(['/home/user/Music/played.mp3', '/home/user/Music/unplayed.mp3'], '/different/path/', ['.mp3'])", "test5": "remove_played_files(['/home/user/Music/played.wav', '/home/user/Music/unplayed.wav'], '/home/user/Music/', ['.wav'])", "test6": "remove_played_files(['/home/user/Music/played.mp3', '/home/user/Music/unplayed.mp3', '/home/user/Music/played2.mp3'], '/home/user/Music/', ['.mp3', '.wav'])", "test7": "remove_played_files(['/home/user/Music/unplayed.mp3', '/home/user/Music/unplayed2.mp3'], '/home/user/Music/', ['.mp3'])", "test8": "remove_played_files(['/home/user/Music/played.mp3'], '/home/user/Music/', ['.mp3'])", "test9": "remove_played_files([], '/home/user/Music/', ['.mp3'])", "test10": "remove_played_files(['/home/user/Music/played.mp3', '/home/user/Music/unplayed.mp3'], '/home/user/Music/', ['.wav'])"}, "hidden_information": "def remove_played_files(library, file_path, extensions=['.mp3', '.wav', '.ogg']):\n    for file in library:\n        if file.startswith(file_path) and file.endswith(tuple(extensions)):\n            library.remove(file)\n    return library"}
{"ground_truth": "def map_uid_gids(old_uid, old_gid, osx_uid=501, osx_gid=20, target_uid=99, target_gid=99):\n    if old_uid == osx_uid and old_gid == osx_gid:\n        return target_uid, target_gid\n    else:\n        return old_uid, old_gid", "problem_description": "Hey agent, I need a Python function that can map user IDs and group IDs between my OSX and Linux partitions. I have a lot of files owned by different UIDs and GIDs, and I want to be able to access them from both systems. Can you write a function that takes in the old UID and GID, and returns the corresponding new UID and GID?The signature of the function is: def map_uid_gids(old_uid, old_gid, osx_uid=501, osx_gid=20, target_uid=99, target_gid=99)", "test_cases": {"test1": "map_uid_gids(501, 20)", "test2": "map_uid_gids(502, 21)", "test3": "map_uid_gids(501, 21)", "test4": "map_uid_gids(99, 99)", "test5": "map_uid_gids(500, 19)", "test6": "map_uid_gids(501, 20, osx_uid=502, osx_gid=21)", "test7": "map_uid_gids(503, 22)", "test8": "map_uid_gids(99, 100)", "test9": "map_uid_gids(500, 20)", "test10": "map_uid_gids(501, 19)"}, "hidden_information": "def map_uid_gids(old_uid, old_gid, osx_uid=501, osx_gid=20, target_uid=99, target_gid=99):\n    if old_uid == osx_uid and old_gid == osx_gid:\n        return target_uid, target_gid\n    else:\n        return old_uid, old_gid"}
{"ground_truth": "def assess_worker_training_progress(worker_survey_results, required_standards):\n    effectivness_scores = {}\n    for key, value in worker_survey_results.items():\n        if value >= required_standards[key]:\n            effectivness_scores[key] = 'Effective'\n        else:\n            effectivness_scores[key] = 'Not Effective'\n    return effectivness_scores", "problem_description": "Can you write a python function to evaluate the effectiveness of worker training programs for rail and mass transit entities? I need to know if the training is working based on the results of worker surveys.The signature of the function is: def assess_worker_training_progress(worker_survey_results, required_standards)", "test_cases": {"test1": "assess_worker_training_progress({'program1': 90, 'program2': 80, 'program3': 70}, {'program1': 85, 'program2': 90, 'program3': 80})", "test2": "assess_worker_training_progress({'program1': 70, 'program2': 60, 'program3': 50}, {'program1': 85, 'program2': 90, 'program3': 80})", "test3": "assess_worker_training_progress({'program1': 90, 'program2': 90, 'program3': 90}, {'program1': 85, 'program2': 90, 'program3': 90})", "test4": "assess_worker_training_progress({'program1': 80, 'program2': 70, 'program3': 60}, {'program1': 85, 'program2': 85, 'program3': 85})", "test5": "assess_worker_training_progress({'program1': 95, 'program2': 90, 'program3': 85}, {'program1': 85, 'program2': 90, 'program3': 90})", "test6": "assess_worker_training_progress({'program1': 85, 'program2': 80, 'program3': 75}, {'program1': 85, 'program2': 85, 'program3': 85})", "test7": "assess_worker_training_progress({'program1': 90, 'program2': 90, 'program3': 90}, {'program1': 85, 'program2': 90, 'program3': 90})", "test8": "assess_worker_training_progress({'program1': 70, 'program2': 60, 'program3': 50}, {'program1': 70, 'program2': 60, 'program3': 50})", "test9": "assess_worker_training_progress({'program1': 95, 'program2': 90, 'program3': 85}, {'program1': 85, 'program2': 90, 'program3': 90})", "test10": "assess_worker_training_progress({'program1': 85, 'program2': 80, 'program3': 75}, {'program1': 85, 'program2': 85, 'program3': 85})"}, "hidden_information": "def assess_worker_training_progress(worker_survey_results, required_standards):\n    effectivness_scores = {}\n    for key, value in worker_survey_results.items():\n        if value >= required_standards[key]:\n            effectivness_scores[key] = 'Effective'\n        else:\n            effectivness_scores[key] = 'Not Effective'\n    return effectivness_scores"}
{"ground_truth": "def get_binding_receptors(chemicals): \n    receptors = {\n        'ethanol': 'OR5A1',\n        'butanol': 'OR1E1',\n        'isopropyl alcohol': 'OR10G4'\n    }\n    return [receptors.get(chem, 'Unknown receptor') for chem in chemicals]", "problem_description": "I want the agent to write a python function that takes a list of chemicals found in whiteboard markers as input and returns the corresponding nose receptors that they bind to. Can the agent understand what I'm asking for and provide a python function to achieve this?The signature of the function is: def get_binding_receptors(chemicals)", "test_cases": {"test1": "get_binding_receptors(['ethanol', 'butanol'])", "test2": "get_binding_receptors(['isopropyl alcohol', 'acetone'])", "test3": "get_binding_receptors(['ethanol', 'isopropyl alcohol'])", "test4": "get_binding_receptors(['unknown chemical', 'butanol'])", "test5": "get_binding_receptors(['ethanol'])", "test6": "get_binding_receptors([])", "test7": "get_binding_receptors(['butanol', 'isopropyl alcohol', 'ethanol'])", "test8": "get_binding_receptors(['ethanol', 'ethanol'])", "test9": "get_binding_receptors(['isopropyl alcohol', 'unknown chemical'])", "test10": "get_binding_receptors(['butanol', 'butanol', 'butanol'])"}, "hidden_information": "def get_binding_receptors(chemicals): \n    receptors = {\n        'ethanol': 'OR5A1',\n        'butanol': 'OR1E1',\n        'isopropyl alcohol': 'OR10G4'\n    }\n    return [receptors.get(chem, 'Unknown receptor') for chem in chemicals]"}
{"ground_truth": "def calculate_contract_value(yearly_salary, years_remaining): return yearly_salary * years_remaining", "problem_description": "I want the LLM agent to write a python function that calculates the total contract value for an NBA player given their yearly salary and the number of years remaining on their contract.The signature of the function is: def calculate_contract_value(yearly_salary, years_remaining)", "test_cases": {"test1": "calculate_contract_value(19948799, 3)", "test2": "calculate_contract_value(21779893, 2)", "test3": "calculate_contract_value(23410988, 1)", "test4": "calculate_contract_value(17779458, 1)", "test5": "calculate_contract_value(5000000, 2)", "test6": "calculate_contract_value(10000000, 1)", "test7": "calculate_contract_value(20000000, 3)", "test8": "calculate_contract_value(30000000, 2)", "test9": "calculate_contract_value(40000000, 1)", "test10": "calculate_contract_value(25000000, 4)"}, "hidden_information": "def calculate_contract_value(yearly_salary, years_remaining): return yearly_salary * years_remaining"}
{"ground_truth": "def calculate_player_efficiency(stats): \n\t# define the efficiency formula: (points + assists) / (turnovers + minutes_played + 0.1)\n\treturn (stats['points'] + stats['assists']) / (stats['turnovers'] + stats['minutes_played'] + 0.1)", "problem_description": "I want a python function that calculates a basketball player's efficiency based on their average stats. The function should take into account the player's average points, assists, turnovers, and minutes played.The signature of the function is: def calculate_player_efficiency(stats)", "test_cases": {"test1": "calculate_player_efficiency({'points': 12, 'assists': 5.5, 'turnovers': 1.33, 'minutes_played': 33.6})", "test2": "calculate_player_efficiency({'points': 20.9, 'assists': 3.5, 'turnovers': 1.5, 'minutes_played': 35})", "test3": "calculate_player_efficiency({'points': 15, 'assists': 4.2, 'turnovers': 1.8, 'minutes_played': 32})", "test4": "calculate_player_efficiency({'points': 18, 'assists': 3.8, 'turnovers': 1.2, 'minutes_played': 34})", "test5": "calculate_player_efficiency({'points': 22, 'assists': 4.5, 'turnovers': 1.9, 'minutes_played': 36})", "test6": "calculate_player_efficiency({'points': 19, 'assists': 4.1, 'turnovers': 1.6, 'minutes_played': 33})", "test7": "calculate_player_efficiency({'points': 16, 'assists': 3.9, 'turnovers': 1.4, 'minutes_played': 31})", "test8": "calculate_player_efficiency({'points': 21, 'assists': 4.3, 'turnovers': 1.7, 'minutes_played': 35})", "test9": "calculate_player_efficiency({'points': 17, 'assists': 4.0, 'turnovers': 1.5, 'minutes_played': 32})", "test10": "calculate_player_efficiency({'points': 20, 'assists': 3.7, 'turnovers': 1.3, 'minutes_played': 34})"}, "hidden_information": "def calculate_player_efficiency(stats): \n\t# define the efficiency formula: (points + assists) / (turnovers + minutes_played + 0.1)\n\treturn (stats['points'] + stats['assists']) / (stats['turnovers'] + stats['minutes_played'] + 0.1)"}
{"ground_truth": "def calculate_dropouts(students, thresholds): \n    return sum(1 for student in students if student[1] < thresholds[1] or student[2] < thresholds[2])", "problem_description": "I want you to write a python function that helps me understand the relationship between poverty rates and the breakdown of the family in a society. Can you write a function that takes some input and gives me the dropout rate in a community?The signature of the function is: def calculate_dropouts(students, thresholds)", "test_cases": {"test1": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [90, 85, 80]) == 1", "test2": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [80, 75, 70]) == 1", "test3": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [70, 65, 60]) == 1", "test4": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [60, 55, 50]) == 2", "test5": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [50, 45, 40]) == 2", "test6": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [40, 35, 30]) == 2", "test7": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [30, 25, 20]) == 2", "test8": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [20, 15, 10]) == 3", "test9": "calculate_dropouts([('Alice', 80, 3), ('Bob', 70, 4), ('Charlie', 60, 3)], [10, 5, 0]) == 3", "test10": "calculate_dropouts([('Alice', 0, 3), ('Bob', 0, 4), ('Charlie', 0, 3)], [50, 45, 40]) == 3"}, "hidden_information": "def calculate_dropouts(students, thresholds): \n    return sum(1 for student in students if student[1] < thresholds[1] or student[2] < thresholds[2])"}
{"ground_truth": "def can_fit_track(train_voltage, track_type, train_type):\n  if track_type == '12V' and train_voltage in ['12V', 'RC', '4.5V']:\n    return True\n  elif track_type == 'RC' and train_voltage in ['12V', 'RC', '9V']:\n    return True\n  else:\n    return False", "problem_description": "I'm planning to get my son into LEGO and want to know if our old tracks are compatible with the new remote trains. Can you write a Python function to determine which LEGO trains are compatible with a given track system? We have old 12V tracks and are planning to get new RC tracks.The signature of the function is: def can_fit_track(train_voltage, track_type, train_type)", "test_cases": {"test1": "can_fit_track('12V', '12V', 'RC')", "test2": "can_fit_track('12V', '12V', '12V')", "test3": "can_fit_track('RC', '12V', '4.5V')", "test4": "can_fit_track('12V', 'RC', '9V')", "test5": "can_fit_track('RC', 'RC', '12V')", "test6": "can_fit_track('9V', '12V', '12V')", "test7": "can_fit_track('4.5V', '12V', '12V')", "test8": "can_fit_track('12V', 'RC', '4.5V')", "test9": "can_fit_track('RC', '12V', '9V')", "test10": "can_fit_track('12V', '12V', 'other')"}, "hidden_information": "def can_fit_track(train_voltage, track_type, train_type):\n  if track_type == '12V' and train_voltage in ['12V', 'RC', '4.5V']:\n    return True\n  elif track_type == 'RC' and train_voltage in ['12V', 'RC', '9V']:\n    return True\n  else:\n    return False"}
{"ground_truth": "def calculate_capital_gains_tax(sale_price, purchase_price, years_lived_in_house, exempt_amount=250000, exemption_threshold=2):\n    capital_gains = sale_price - purchase_price\n    if years_lived_in_house >= exemption_threshold:\n        tax = (capital_gains - exempt_amount) * 0.15\n    else:\n        tax = capital_gains * 0.15\n    return tax", "problem_description": "Can you write a python function to help me calculate my capital gains tax when selling a house that is held in a revocable trust. I know that there are some exemptions but it seems complicated.The signature of the function is: def calculate_capital_gains_tax(sale_price, purchase_price, years_lived_in_house, exempt_amount=250000, exemption_threshold=2)", "test_cases": {"test1": "calculate_capital_gains_tax(500000, 300000, 3)", "test2": "calculate_capital_gains_tax(700000, 400000, 1)", "test3": "calculate_capital_gains_tax(350000, 200000, 5)", "test4": "calculate_capital_gains_tax(600000, 350000, 4, exempt_amount=500000)", "test5": "calculate_capital_gains_tax(550000, 250000, 2, exemption_threshold=3)", "test6": "calculate_capital_gains_tax(450000, 250000, 3, exempt_amount=300000)", "test7": "calculate_capital_gains_tax(600000, 300000, 2)", "test8": "calculate_capital_gains_tax(800000, 500000, 5)", "test9": "calculate_capital_gains_tax(400000, 200000, 4, exemption_threshold=1)", "test10": "calculate_capital_gains_tax(900000, 600000, 3, exempt_amount=200000)"}, "hidden_information": "def calculate_capital_gains_tax(sale_price, purchase_price, years_lived_in_house, exempt_amount=250000, exemption_threshold=2):\n    capital_gains = sale_price - purchase_price\n    if years_lived_in_house >= exemption_threshold:\n        tax = (capital_gains - exempt_amount) * 0.15\n    else:\n        tax = capital_gains * 0.15\n    return tax"}
{"ground_truth": "def is_in_book_of_life(name, book_of_life): return name in book_of_life", "problem_description": "Hey agent, I'm looking for a Python function that can tell me if a person's name is in the Book of Life. Can you write a function that does this? It should take in a person's name and return True if they're in the Book of Life and False otherwise. But I'm not sure what the criteria is for being in the Book of Life... can you help me figure that out?The signature of the function is: def is_in_book_of_life(name, book_of_life)", "test_cases": {"test1": "is_in_book_of_life('John Doe', ['John Doe', 'Jane Doe', 'Bob Smith'])", "test2": "is_in_book_of_life('Alice Johnson', ['John Doe', 'Jane Doe', 'Bob Smith'])", "test3": "is_in_book_of_life('David Lee', ['David Lee', 'Emily Chen', 'Kevin White'])", "test4": "is_in_book_of_life('Emily Patel', ['David Lee', 'Emily Chen', 'Kevin White'])", "test5": "is_in_book_of_life('John Smith', [])", "test6": "is_in_book_of_life('Jane Doe', ['John Doe', 'Jane Doe', 'Bob Smith'])", "test7": "is_in_book_of_life('Bob Johnson', ['John Doe', 'Jane Doe', 'Bob Smith'])", "test8": "is_in_book_of_life('Alice Brown', ['David Lee', 'Emily Chen', 'Kevin White'])", "test9": "is_in_book_of_life('John Lee', ['David Lee', 'Emily Chen', 'Kevin White'])", "test10": "is_in_book_of_life('Jane Smith', [])"}, "hidden_information": "def is_in_book_of_life(name, book_of_life): return name in book_of_life"}
{"ground_truth": "def calculate_safety_rating(train_age, track_condition, incidents): return (100 - ((train_age * 2) + (track_condition * 3) + (incidents * 5)))", "problem_description": "I need you to write a Python function to calculate the safety rating of a train route. The route has trains of varying ages, tracks in different conditions, and a history of incidents. I want the function to take these factors into account and give me a rating out of 100. Can you help me with that?The signature of the function is: def calculate_safety_rating(train_age, track_condition, incidents)", "test_cases": {"test1": "calculate_safety_rating(10, 80, 2)", "test2": "calculate_safety_rating(5, 90, 0)", "test3": "calculate_safety_rating(15, 70, 3)", "test4": "calculate_safety_rating(20, 60, 1)", "test5": "calculate_safety_rating(8, 85, 2)", "test6": "calculate_safety_rating(12, 78, 1)", "test7": "calculate_safety_rating(18, 65, 3)", "test8": "calculate_safety_rating(22, 72, 0)", "test9": "calculate_safety_rating(10, 92, 1)", "test10": "calculate_safety_rating(15, 76, 2)"}, "hidden_information": "def calculate_safety_rating(train_age, track_condition, incidents): return (100 - ((train_age * 2) + (track_condition * 3) + (incidents * 5)))"}
{"ground_truth": "def calculate_average_rating(reviews, aspect):\n    aspect_ratings = [review[aspect] for review in reviews if aspect in review]\n    if not aspect_ratings:\n        return 'No reviews available for this aspect'\n    return sum(aspect_ratings) / len(aspect_ratings)", "problem_description": "I want you to write a Python function that can analyze student reviews from the Art Academy of Cincinnati and calculate the average rating for a specific aspect of the school. The function should take a list of reviews as input, where each review is a dictionary containing the aspect name as a key and the rating as a value. The function should interact with the user to get the specific aspect they want to analyze, and then calculate the average rating for that aspect. Can you do that?The signature of the function is: def calculate_average_rating(reviews, aspect)", "test_cases": {"test1": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2}, {'Academics': 4, 'Facilities': 3}], 'Academics')", "test2": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2}, {'Academics': 4, 'Facilities': 3}], 'Campus Dining')", "test3": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2}, {'Academics': 4, 'Facilities': 3}], 'Facilities')", "test4": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2}, {'Academics': 4, 'Facilities': 3}], 'Parking')", "test5": "calculate_average_rating([], 'Academics')", "test6": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2, 'Facilities': 4}, {'Academics': 4, 'Campus Dining': 3}], 'Academics')", "test7": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2, 'Facilities': 4}, {'Academics': 4, 'Campus Dining': 3}], 'Campus Dining')", "test8": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2, 'Facilities': 4}, {'Academics': 4, 'Campus Dining': 3}], 'Facilities')", "test9": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2, 'Facilities': 4}, {'Academics': 4, 'Campus Dining': 3}], 'Scholarships')", "test10": "calculate_average_rating([{'Academics': 5, 'Campus Dining': 2, 'Facilities': 4, 'Scholarships': 3}, {'Academics': 4, 'Campus Dining': 3, 'Facilities': 2, 'Scholarships': 4}], 'Scholarships')"}, "hidden_information": "def calculate_average_rating(reviews, aspect):\n    aspect_ratings = [review[aspect] for review in reviews if aspect in review]\n    if not aspect_ratings:\n        return 'No reviews available for this aspect'\n    return sum(aspect_ratings) / len(aspect_ratings)"}
{"ground_truth": "def wasabi_purpose(fish_type, wasabi_applied, parasite_risk):\n    if wasabi_applied and parasite_risk:\n        return 'Wasabi is used to kill parasites'\n    elif wasabi_applied and not parasite_risk:\n        return 'Wasabi is primarily used for flavor'\n    else:\n        return 'Insufficient information'", "problem_description": "I want you to write a Python function that determines the purpose of wasabi in sushi preparation. Sometimes I think it's to add flavor, but I've also heard it's to kill parasites. I'm not sure what the primary reason is. Can you create a function that takes into account different factors and returns a string indicating the purpose of wasabi?The signature of the function is: def wasabi_purpose(fish_type, wasabi_applied, parasite_risk)", "test_cases": {"test1": "wasabi_purpose('salmon', True, True)", "test2": "wasabi_purpose('tuna', False, False)", "test3": "wasabi_purpose('shrimp', True, False)", "test4": "wasabi_purpose('eel', False, True)", "test5": "wasabi_purpose('crab', True, True)", "test6": "wasabi_purpose('lobster', False, False)", "test7": "wasabi_purpose('octopus', True, False)", "test8": "wasabi_purpose('scallop', False, True)", "test9": "wasabi_purpose('shrimp', True, True)", "test10": "wasabi_purpose('fish', False, False)"}, "hidden_information": "def wasabi_purpose(fish_type, wasabi_applied, parasite_risk):\n    if wasabi_applied and parasite_risk:\n        return 'Wasabi is used to kill parasites'\n    elif wasabi_applied and not parasite_risk:\n        return 'Wasabi is primarily used for flavor'\n    else:\n        return 'Insufficient information'"}
{"ground_truth": "def calculate_narcissism(answers, participation):\n    # initialize variables\n    total_score = 0\n    max_score = len(answers) * 5\n    \n    # calculate the narcissism score\n    for i in range(len(answers)):\n        if answers[i] > 3 and participation[i] > 0.5:\n            total_score += 1\n    \n    # calculate the final score\n    final_score = (total_score / max_score) * 100\n    return final_score", "problem_description": "Hello AI agent, I need your help in calculating a metric that can quantify the level of narcissism in a given dataset. The dataset contains answers to a survey and the participation rate of each individual. Can you write a Python function that calculates this metric? I want the function to take two lists as input: answers and participation. The answers list contains the responses to the survey questions, and the participation list contains the participation rates of each individual. The function should return a score between 0 and 100 that represents the level of narcissism in the dataset.The signature of the function is: def calculate_narcissism(answers, participation)", "test_cases": {"test1": "calculate_narcissism([4, 5, 3, 2, 5], [0.6, 0.7, 0.4, 0.3, 0.8])", "test2": "calculate_narcissism([1, 2, 3, 4, 5], [0.1, 0.2, 0.3, 0.4, 0.5])", "test3": "calculate_narcissism([5, 5, 5, 5, 5], [0.9, 0.9, 0.9, 0.9, 0.9])", "test4": "calculate_narcissism([1, 1, 1, 1, 1], [0.1, 0.1, 0.1, 0.1, 0.1])", "test5": "calculate_narcissism([2, 3, 4, 5, 1], [0.3, 0.4, 0.5, 0.6, 0.7])", "test6": "calculate_narcissism([5, 4, 3, 2, 1], [0.8, 0.7, 0.6, 0.5, 0.4])", "test7": "calculate_narcissism([1, 1, 1, 1, 1], [1, 1, 1, 1, 1])", "test8": "calculate_narcissism([5, 5, 5, 5, 5], [0, 0, 0, 0, 0])", "test9": "calculate_narcissism([2, 3, 4, 5, 1], [0.2, 0.3, 0.4, 0.5, 0.6])", "test10": "calculate_narcissism([1, 2, 3, 4, 5], [0.6, 0.7, 0.8, 0.9, 1.0])"}, "hidden_information": "def calculate_narcissism(answers, participation):\n    # initialize variables\n    total_score = 0\n    max_score = len(answers) * 5\n    \n    # calculate the narcissism score\n    for i in range(len(answers)):\n        if answers[i] > 3 and participation[i] > 0.5:\n            total_score += 1\n    \n    # calculate the final score\n    final_score = (total_score / max_score) * 100\n    return final_score"}
{"ground_truth": "def generate_url(base, path, params=None):\n    if params is None:\n        params = {}\n    from urllib.parse import urljoin, urlencode\n    url = urljoin(base, path)\n    if params:\n        url += '?' + urlencode(params)\n    return url", "problem_description": "Can you help me write a python function that can generate variations of a base URL by adding different paths and query parameters? I want the function to take a base URL, a path, and any number of query parameters as input and return the resulting URL.The signature of the function is: def generate_url(base, path, params=None)", "test_cases": {"test1": "generate_url('https://example.com', '/path/to/resource', {'param1': 'value1', 'param2': 'value2'})", "test2": "generate_url('https://example.com/base', '/path/to/resource', {'param1': 'value1'})", "test3": "generate_url('https://example.com', '/path/to/resource', {'param1': 'value1', 'param2': 123})", "test4": "generate_url('https://example.com/base', '/path/to/resource', None)", "test5": "generate_url('https://example.com', '/path/to/resource', {'param1': 'value1', 'param2': 'value2', 'param3': 'value3'})", "test6": "generate_url('https://example.com/base', '', {'param1': 'value1', 'param2': 'value2'})", "test7": "generate_url('https://example.com', '/path/to/resource', {'param1': 'value1', 'param2': ['value2', 'value3']})", "test8": "generate_url('https://example.com/base', '/path/to/resource', {'param1': 'value1', 'param2': {'key': 'value'}})", "test9": "generate_url('https://example.com', '/path/to/resource', {'param1': 'value1', 'param2': True})", "test10": "generate_url('https://example.com/base', '/path/to/resource', {'param1': 'value1', 'param2': False})"}, "hidden_information": "def generate_url(base, path, params=None):\n    if params is None:\n        params = {}\n    from urllib.parse import urljoin, urlencode\n    url = urljoin(base, path)\n    if params:\n        url += '?' + urlencode(params)\n    return url"}
{"ground_truth": "def determine_floor_finish(easily_scratched, appearance, scratches_off_with_nail):\n  if easily_scratched and appearance == 'clear' and scratches_off_with_nail:\n    return 'cheap urethane'\n  elif scratches_off_with_nail:\n    return 'wax'\n  else:\n    return 'unknown'", "problem_description": "I need a python function to figure out what type of finish is on my hardwood floor, it scratches easily and I'm not sure what it is, can you write a function to help me determine that?The signature of the function is: def determine_floor_finish(easily_scratched, appearance, scratches_off_with_nail)", "test_cases": {"test1": "determine_floor_finish(True, \"clear\", True)", "test2": "determine_floor_finish(False, \"hazy\", False)", "test3": "determine_floor_finish(True, \"clear\", False)", "test4": "determine_floor_finish(False, \"clear\", True)", "test5": "determine_floor_finish(True, \"hazy\", True)", "test6": "determine_floor_finish(False, \"hazy\", False)", "test7": "determine_floor_finish(True, \"clear\", True)", "test8": "determine_floor_finish(True, \"hazy\", True)", "test9": "determine_floor_finish(False, \"clear\", False)", "test10": "determine_floor_finish(False, \"hazy\", True)"}, "hidden_information": "def determine_floor_finish(easily_scratched, appearance, scratches_off_with_nail):\n  if easily_scratched and appearance == 'clear' and scratches_off_with_nail:\n    return 'cheap urethane'\n  elif scratches_off_with_nail:\n    return 'wax'\n  else:\n    return 'unknown'"}
{"ground_truth": "def get_insulation_recommendation(wall_type, crack_size, insulation_purpose, is_temporary, time_frame):\n    if wall_type == \"interior\" and insulation_purpose == \"heat\":\n        if crack_size < 1:\n            return \"Use Backer Rod\"\n        else:\n            return \"Consider using rockwool or glasswool\"\n    elif wall_type == \"exterior\" and insulation_purpose == \"sound\":\n        return \"Use a weather-resistant insulation material\"\n    elif is_temporary and time_frame < 6:\n        return \"Use a removable insulation material like foam board\"\n    else:\n        return \"Consult a professional\"", "problem_description": "I'm trying to fill a crack in my wall with removable insulation and I'm not sure which material to use. Can you write a Python function that recommends the best insulation material based on the type of wall, crack size, insulation purpose, and how long the solution needs to last? The function should be able to handle different inputs and provide a recommendation.The signature of the function is: def get_insulation_recommendation(wall_type, crack_size, insulation_purpose, is_temporary, time_frame)", "test_cases": {"test1": "get_insulation_recommendation(\"interior\", 0.5, \"heat\", True, 3)", "test2": "get_insulation_recommendation(\"exterior\", 2, \"sound\", False, 12)", "test3": "get_insulation_recommendation(\"interior\", 0.5, \"visual\", True, 6)", "test4": "get_insulation_recommendation(\"exterior\", 1, \"heat\", False, 12)", "test5": "get_insulation_recommendation(\"interior\", 1.5, \"sound\", True, 3)", "test6": "get_insulation_recommendation(\"exterior\", 0.5, \"visual\", False, 6)", "test7": "get_insulation_recommendation(\"interior\", 2, \"heat\", True, 6)", "test8": "get_insulation_recommendation(\"exterior\", 2, \"visual\", False, 12)", "test9": "get_insulation_recommendation(\"interior\", 0.5, \"sound\", True, 12)", "test10": "get_insulation_recommendation(\"exterior\", 1.5, \"heat\", False, 3)"}, "hidden_information": "def get_insulation_recommendation(wall_type, crack_size, insulation_purpose, is_temporary, time_frame):\n    if wall_type == \"interior\" and insulation_purpose == \"heat\":\n        if crack_size < 1:\n            return \"Use Backer Rod\"\n        else:\n            return \"Consider using rockwool or glasswool\"\n    elif wall_type == \"exterior\" and insulation_purpose == \"sound\":\n        return \"Use a weather-resistant insulation material\"\n    elif is_temporary and time_frame < 6:\n        return \"Use a removable insulation material like foam board\"\n    else:\n        return \"Consult a professional\""}
{"ground_truth": "def is_consistent(entry, schema): attributes = set(schema.keys()); return all(key in attributes for key in entry.keys()) and all(value == schema[key] for key, value in entry.items() if key in schema)", "problem_description": "I want you to write a python function to check if an LDAP entry is consistent with a predefined schema. I have a set of attributes and their required values as per my company's policy, and I want to check if a given entry adheres to these rules. Can you help?The signature of the function is: def is_consistent(entry, schema)", "test_cases": {"test1": "is_consistent({'cn': 'John Doe', 'mail': 'johndoe@example.com'} , {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test2": "is_consistent({'cn': 'Jane Doe', 'mail': 'janedoe@example.com', 'objectClass': ['person', 'organizationalPerson']}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test3": "is_consistent({'cn': 'John Smith', 'telephoneNumber': '+1234567890'}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test4": "is_consistent({'displayname': 'Jane Doe', 'mail': 'janedoe@example.com'} , {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test5": "is_consistent({'cn': None, 'mail': 'johndoe@example.com'}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test6": "is_consistent({'cn': 'Jane Doe', 'mail': 'janedoe@example.com'}, {'cn': '', 'objectClass': ['person', 'organizationalPerson']})", "test7": "is_consistent({'cn': 'John Smith', 'mail': 'johnsmith@example.com', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']}, {'cn': '', 'objectClass': ['person']})", "test8": "is_consistent({'cn': 'John Smith', 'mail': 'johnsmith@example.com', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson']})", "test9": "is_consistent({}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})", "test10": "is_consistent({'cn': 'John Smith', 'mail': 'johnsmith@example.com', 'objectClass': ['person']}, {'cn': '', 'mail': '', 'objectClass': ['person', 'organizationalPerson', 'inetOrgPerson']})"}, "hidden_information": "def is_consistent(entry, schema): attributes = set(schema.keys()); return all(key in attributes for key in entry.keys()) and all(value == schema[key] for key, value in entry.items() if key in schema)"}
{"ground_truth": "def design_flower_garden(num_flowers, color_scheme, bloom_times, flower_names):\n    garden_plan = {}\n    for i in range(num_flowers):\n        flower_name = flower_names[i % len(flower_names)]\n        color = color_scheme[i % len(color_scheme)]\n        bloom_time = bloom_times[i % len(bloom_times)]\n        if color not in garden_plan:\n            garden_plan[color] = {}\n        if bloom_time not in garden_plan[color]:\n            garden_plan[color][bloom_time] = []\n        garden_plan[color][bloom_time].append(flower_name)\n    return garden_plan", "problem_description": "I want you to write a Python function to plan a flower garden with a specified number of flowers, color scheme, and bloom times. The function should take these parameters as input and return a dictionary that represents the garden plan, where each color is a key and the value is another dictionary with bloom times as keys and a list of flower names as values. The function should also ensure that the flowers are evenly distributed across the color scheme and bloom times.The signature of the function is: def design_flower_garden(num_flowers, color_scheme, bloom_times, flower_names)", "test_cases": {"test1": "design_flower_garden(10, [\"red\", \"blue\", \"yellow\"], [\"spring\", \"summer\", \"fall\"], [\"rose\", \"sunflower\", \"daisy\"])", "test2": "design_flower_garden(5, [\"pink\", \"white\"], [\"winter\", \"spring\"], [\"tulip\", \"lily\", \"carnation\"])", "test3": "design_flower_garden(15, [\"red\", \"blue\", \"yellow\", \"green\"], [\"summer\", \"fall\", \"winter\", \"spring\"], [\"rose\", \"sunflower\", \"daisy\", \"lilac\"])", "test4": "design_flower_garden(8, [\"orange\", \"purple\"], [\"fall\", \"winter\"], [\"nasturtium\", \"pansy\", \"viola\"])", "test5": "design_flower_garden(12, [\"black\", \"white\"], [\"summer\", \"fall\"], [\"bat orchid\", \"shimmering white\", \"black baccara\"])", "test6": "design_flower_garden(6, [\"blue\", \"yellow\"], [\"spring\", \"summer\"], [\"blue delphinium\", \"yellow rose\", \"sunflower\"])", "test7": "design_flower_garden(9, [\"pink\", \"green\"], [\"spring\", \"summer\"], [\"green rose\", \"pink rose\", \"carnation\"])", "test8": "design_flower_garden(14, [\"purple\", \"orange\"], [\"fall\", \"winter\"], [\"lavender\", \"orange marigold\", \" cosmos\"])", "test9": "design_flower_garden(7, [\"red\", \"white\"], [\"summer\", \"fall\"], [\"red poppy\", \"white rose\", \"lily\"])", "test10": "design_flower_garden(11, [\"yellow\", \"black\"], [\"spring\", \"summer\"], [\"daffodil\", \"black calla\", \"sunflower\"])"}, "hidden_information": "def design_flower_garden(num_flowers, color_scheme, bloom_times, flower_names):\n    garden_plan = {}\n    for i in range(num_flowers):\n        flower_name = flower_names[i % len(flower_names)]\n        color = color_scheme[i % len(color_scheme)]\n        bloom_time = bloom_times[i % len(bloom_times)]\n        if color not in garden_plan:\n            garden_plan[color] = {}\n        if bloom_time not in garden_plan[color]:\n            garden_plan[color][bloom_time] = []\n        garden_plan[color][bloom_time].append(flower_name)\n    return garden_plan"}
{"ground_truth": "def get_governorate_info(governorate_names):\n    governorates = {\n        'Amhara': {'capital': 'Gondar', 'population': 2000000},\n        'Eritrea': {'capital': 'Asmara', 'population': 1000000},\n        'Harar': {'capital': 'Harrar', 'population': 1300000},\n        'Galla-Sidamo': {'capital': 'Jimma', 'population': 1600000},\n        'Scioa': {'capital': 'Addis Abeba', 'population': 300000},\n        'Somalia': {'capital': 'Mogadishu', 'population': 1300000}\n    }\n    governorate_infos = {}\n    for governorate in governorate_names:\n        if governorate in governorates:\n            governorate_infos[governorate] = governorates[governorate]\n    return governorate_infos", "problem_description": "I want a python function that can take in some information about the governorates of Italian East Africa and return some relevant data. Can you write a function that does this?The signature of the function is: def get_governorate_info(governorate_names)", "test_cases": {"test1": "get_governorate_info(['Amhara', 'Eritrea'])", "test2": "get_governorate_info(['Harar', 'Galla-Sidamo', 'Scioa'])", "test3": "get_governorate_info(['Somalia'])", "test4": "get_governorate_info(['Amhara', 'Somalia', 'Galla-Sidamo'])", "test5": "get_governorate_info(['Eritrea', 'Scioa'])", "test6": "get_governorate_info([])", "test7": "get_governorate_info(['Harar'])", "test8": "get_governorate_info(['Galla-Sidamo', 'Scioa', 'Somalia'])", "test9": "get_governorate_info(['Amhara', 'Eritrea', 'Harar'])", "test10": "get_governorate_info(['Scioa', 'Somalia', 'Eritrea'])"}, "hidden_information": "def get_governorate_info(governorate_names):\n    governorates = {\n        'Amhara': {'capital': 'Gondar', 'population': 2000000},\n        'Eritrea': {'capital': 'Asmara', 'population': 1000000},\n        'Harar': {'capital': 'Harrar', 'population': 1300000},\n        'Galla-Sidamo': {'capital': 'Jimma', 'population': 1600000},\n        'Scioa': {'capital': 'Addis Abeba', 'population': 300000},\n        'Somalia': {'capital': 'Mogadishu', 'population': 1300000}\n    }\n    governorate_infos = {}\n    for governorate in governorate_names:\n        if governorate in governorates:\n            governorate_infos[governorate] = governorates[governorate]\n    return governorate_infos"}
{"ground_truth": "def khorne_favor(army_weapon_choice, army_skill_level):\n    if army_weapon_choice == \"close_combat\" and army_skill_level >= 7:\n        return 100\n    elif army_weapon_choice == \"ranged_combat\" and army_skill_level < 7:\n        return 0\n    else:\n        return 50", "problem_description": "I want the agent to write a python function to calculate the favor of Khorne, the Chaos God of war and bloodlust, towards an army based on their preferred weapon choice and skill level in battle. I want the function to give full favor (100) if the army excels in close combat and is highly skilled, but gives no favor (0) if the army specializes in ranged combat and is poorly skilled. All other scenarios will be granted a moderate favor (50). Can you please help me with this?The signature of the function is: def khorne_favor(army_weapon_choice, army_skill_level)", "test_cases": {"test1": "khorne_favor(\"close_combat\", 8)", "test2": "khorne_favor(\"ranged_combat\", 4)", "test3": "khorne_favor(\"close_combat\", 5)", "test4": "khorne_favor(\"ranged_combat\", 9)", "test5": "khorne_favor(\"melee\", 7)", "test6": "khorne_favor(\"magic\", 3)", "test7": "khorne_favor(\"stealth\", 6)", "test8": "khorne_favor(\"close_combat\", 10)", "test9": "khorne_favor(\"ranged_combat\", 2)", "test10": "khorne_favor(\"mixed\", 8)"}, "hidden_information": "def khorne_favor(army_weapon_choice, army_skill_level):\n    if army_weapon_choice == \"close_combat\" and army_skill_level >= 7:\n        return 100\n    elif army_weapon_choice == \"ranged_combat\" and army_skill_level < 7:\n        return 0\n    else:\n        return 50"}
{"ground_truth": "def calculate_lifespan(birth_year, death_year):\n    return death_year - birth_year", "problem_description": "I want to write a Python function to calculate the lifespan of historical figures. Can the agent please help me come up with a function that takes some kind of input about a person's life and returns the number of years they lived?The signature of the function is: def calculate_lifespan(birth_year, death_year)", "test_cases": {"test1": "calculate_lifespan(1874, 1943)", "test2": "calculate_lifespan(1889, 1975)", "test3": "calculate_lifespan(1867, 1919)", "test4": "calculate_lifespan(1892, 1945)", "test5": "calculate_lifespan(1856, 1932)", "test6": "calculate_lifespan(1876, 1950)", "test7": "calculate_lifespan(1900, 1980)", "test8": "calculate_lifespan(1840, 1920)", "test9": "calculate_lifespan(1895, 1978)", "test10": "calculate_lifespan(1860, 1940)"}, "hidden_information": "def calculate_lifespan(birth_year, death_year):\n    return death_year - birth_year"}
{"ground_truth": "def get_plant_medical_uses(plant_name, plant_family):\n    # This function will return the medical uses of a given plant based on its name and family\n    medical_uses = {\n        'Digitalis lanata': 'used in the treatment of various heart conditions, namely atrial fibrillation, atrial flutter and sometimes heart failure',\n        'Panax ginseng': 'used as a general tonic and for chronic coughs',\n        # ... add more plants and their medical uses\n    }\n    if plant_name in medical_uses:\n        return medical_uses[plant_name]\n    elif plant_family in ['Apiaceae', 'Asteraceae', 'Fabaceae']:  # add more families as needed\n        return f'Plants from the {plant_family} family have been used in traditional medicine for various purposes'\n    else:\n        return 'No medical uses found for this plant'", "problem_description": "I want a Python function that can tell me the medical uses of a given plant based on its name and family. The function should be able to handle different plant names and families, and provide a general message if the plant's medical uses are not found. Can you help me create this function?The signature of the function is: def get_plant_medical_uses(plant_name, plant_family)", "test_cases": {"test1": "get_plant_medical_uses('Digitalis lanata', 'Plantaginaceae')", "test2": "get_plant_medical_uses('Panax ginseng', 'Araliaceae')", "test3": "get_plant_medical_uses('Unknown Plant', 'Apiaceae')", "test4": "get_plant_medical_uses('Unknown Plant', 'Unknown Family')", "test5": "get_plant_medical_uses('Glycyrrhiza glabra', 'Fabaceae')", "test6": "get_plant_medical_uses('Zingiber officinale', 'Zingiberaceae')", "test7": "get_plant_medical_uses('Cymbopogon citratus', 'Poaceae')", "test8": "get_plant_medical_uses('Silybum marianum', 'Asteraceae')", "test9": "get_plant_medical_uses('Quercus robur', 'Fagaceae')", "test10": "get_plant_medical_uses('Camellia sinensis', 'Theaceae')"}, "hidden_information": "def get_plant_medical_uses(plant_name, plant_family):\n    # This function will return the medical uses of a given plant based on its name and family\n    medical_uses = {\n        'Digitalis lanata': 'used in the treatment of various heart conditions, namely atrial fibrillation, atrial flutter and sometimes heart failure',\n        'Panax ginseng': 'used as a general tonic and for chronic coughs',\n        # ... add more plants and their medical uses\n    }\n    if plant_name in medical_uses:\n        return medical_uses[plant_name]\n    elif plant_family in ['Apiaceae', 'Asteraceae', 'Fabaceae']:  # add more families as needed\n        return f'Plants from the {plant_family} family have been used in traditional medicine for various purposes'\n    else:\n        return 'No medical uses found for this plant'"}
{"ground_truth": "def calculate_unstart_risk(mach_number, throat_size, stagnation_pressure, mass_flow_rate):\n    if mach_number >= 2 and mach_number <= 3:\n        if throat_size < 0.8:\n            return 'High risk of unstart'\n        elif stagnation_pressure > 100e3:\n            return 'Moderate risk of unstart'\n        else:\n            return 'Low risk of unstart'\n    else:\n        return 'Unknown risk of unstart'", "problem_description": "Can you write a Python function that determines the risk of unstart in a supersonic inlet based on its Mach number, throat size, stagnation pressure, and mass flow rate? The function should return the risk level as 'High', 'Moderate', 'Low', or 'Unknown'?The signature of the function is: def calculate_unstart_risk(mach_number, throat_size, stagnation_pressure, mass_flow_rate)", "test_cases": {"test1": "calculate_unstart_risk(2.5, 0.7, 120e3, 100)", "test2": "calculate_unstart_risk(1.8, 0.9, 90e3, 80)", "test3": "calculate_unstart_risk(2.2, 0.6, 110e3, 90)", "test4": "calculate_unstart_risk(3.1, 0.8, 130e3, 120)", "test5": "calculate_unstart_risk(2.0, 1.0, 100e3, 80)", "test6": "calculate_unstart_risk(2.8, 0.4, 105e3, 85)", "test7": "calculate_unstart_risk(2.5, 0.5, 115e3, 95)", "test8": "calculate_unstart_risk(2.9, 0.9, 125e3, 105)", "test9": "calculate_unstart_risk(1.5, 0.8, 80e3, 60)", "test10": "calculate_unstart_risk(3.2, 1.1, 140e3, 130)"}, "hidden_information": "def calculate_unstart_risk(mach_number, throat_size, stagnation_pressure, mass_flow_rate):\n    if mach_number >= 2 and mach_number <= 3:\n        if throat_size < 0.8:\n            return 'High risk of unstart'\n        elif stagnation_pressure > 100e3:\n            return 'Moderate risk of unstart'\n        else:\n            return 'Low risk of unstart'\n    else:\n        return 'Unknown risk of unstart'"}
{"ground_truth": "def phone_response(location, listener_location):\n  if location == listener_location:\n    return 'here'\n  else:\n    return 'there'", "problem_description": "I need a Python function that will help me respond to phone conference queries like 'Dude, are you there?' with 'here' or 'there' depending on the location of the speaker and the listener. Please take into consideration that 'here' refers to where the speaker is and 'there' refers to where the listener is. Can you write this for me?The signature of the function is: def phone_response(location, listener_location)", "test_cases": {"test1": "phone_response('office', 'office')", "test2": "phone_response('office', 'home')", "test3": "phone_response('home', 'home')", "test4": "phone_response('coffee shop', 'office')", "test5": "phone_response('coffee shop', 'coffee shop')", "test6": "phone_response('restaurant', 'restaurant')", "test7": "phone_response('park', 'office')", "test8": "phone_response('library', 'library')", "test9": "phone_response('store', 'store')", "test10": "phone_response('gym', 'home')"}, "hidden_information": "def phone_response(location, listener_location):\n  if location == listener_location:\n    return 'here'\n  else:\n    return 'there'"}
{"ground_truth": "def get_travel_time_to_airport(airport_name, mode_of_transportation, starting_location):\n    travel_times = {\n        'Toronto Pearson International Airport': {\n            'bus': {'Kipling Subway Station': 20, 'Lawrence West Subway Station': 60},\n            'taxi': {'default': 30}\n        },\n        'Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport': {\n            'bus': {'Dorval Station': 0, 'Orleans Express': 45}\n        }\n    }\n    if airport_name in travel_times and mode_of_transportation in travel_times[airport_name]:\n        if starting_location in travel_times[airport_name][mode_of_transportation]:\n            return travel_times[airport_name][mode_of_transportation][starting_location]\n        elif 'default' in travel_times[airport_name][mode_of_transportation]:\n            return travel_times[airport_name][mode_of_transportation]['default']\n    return 'Unknown travel time'", "problem_description": "I need a python function to get the travel time to airports in Canada. I want to provide the airport name, mode of transportation, and starting location as input, and get the travel time in minutes as output. Can you write a function that covers at least two airports and different modes of transportation?The signature of the function is: def get_travel_time_to_airport(airport_name, mode_of_transportation, starting_location)", "test_cases": {"test1": "get_travel_time_to_airport('Toronto Pearson International Airport', 'bus', 'Kipling Subway Station')", "test2": "get_travel_time_to_airport('Toronto Pearson International Airport', 'taxi', 'Lawrence West Subway Station')", "test3": "get_travel_time_to_airport('Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport', 'bus', 'Dorval Station')", "test4": "get_travel_time_to_airport('Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport', 'bus', 'Orleans Express')", "test5": "get_travel_time_to_airport('Toronto Pearson International Airport', 'train', 'Kipling Subway Station')", "test6": "get_travel_time_to_airport('Vancouver International Airport', 'bus', 'Kipling Subway Station')", "test7": "get_travel_time_to_airport('Toronto Pearson International Airport', 'bus', 'Dorval Station')", "test8": "get_travel_time_to_airport('Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport', 'taxi', 'Orleans Express')", "test9": "get_travel_time_to_airport('Toronto Pearson International Airport', 'bus', 'Unknown Station')", "test10": "get_travel_time_to_airport('Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport', 'train', 'Orleans Express')"}, "hidden_information": "def get_travel_time_to_airport(airport_name, mode_of_transportation, starting_location):\n    travel_times = {\n        'Toronto Pearson International Airport': {\n            'bus': {'Kipling Subway Station': 20, 'Lawrence West Subway Station': 60},\n            'taxi': {'default': 30}\n        },\n        'Montr\u00e9al\u2013Pierre Elliott Trudeau International Airport': {\n            'bus': {'Dorval Station': 0, 'Orleans Express': 45}\n        }\n    }\n    if airport_name in travel_times and mode_of_transportation in travel_times[airport_name]:\n        if starting_location in travel_times[airport_name][mode_of_transportation]:\n            return travel_times[airport_name][mode_of_transportation][starting_location]\n        elif 'default' in travel_times[airport_name][mode_of_transportation]:\n            return travel_times[airport_name][mode_of_transportation]['default']\n    return 'Unknown travel time'"}
{"ground_truth": "def is_iphone_connected(itunes_visible, hardware_reset=False, data_backup=False):\n    if itunes_visible:\n        return True\n    elif hardware_reset and data_backup:\n        return True\n    else:\n        return False", "problem_description": "Can you write a python function that determines whether my iphone is properly connected to itunes. The function should consider if my apps are visible in itunes and also if a hardware reset is required.The signature of the function is: def is_iphone_connected(itunes_visible, hardware_reset=False, data_backup=False)", "test_cases": {"test1": "is_iphone_connected(True)", "test2": "is_iphone_connected(False, hardware_reset=True, data_backup=False)", "test3": "is_iphone_connected(False, hardware_reset=True, data_backup=True)", "test4": "is_iphone_connected(False, hardware_reset=False, data_backup=True)", "test5": "is_iphone_connected(True, hardware_reset=True, data_backup=True)", "test6": "is_iphone_connected(True, hardware_reset=False, data_backup=False)", "test7": "is_iphone_connected(False, hardware_reset=False, data_backup=False)", "test8": "is_iphone_connected(False, hardware_reset=True, data_backup=False)", "test9": "is_iphone_connected(True, hardware_reset=True, data_backup=False)", "test10": "is_iphone_connected(False, hardware_reset=False, data_backup=True)"}, "hidden_information": "def is_iphone_connected(itunes_visible, hardware_reset=False, data_backup=False):\n    if itunes_visible:\n        return True\n    elif hardware_reset and data_backup:\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_mega_man_score(enemies_killed, power_ups_collected, lives_lost):\n    return (enemies_killed * 100) + (power_ups_collected * 50) - (lives_lost * 200)", "problem_description": "Hey agent, I want you to write a Python function that calculates the score of Mega Man 2 based on the number of enemies killed, power-ups collected, and lives lost. Can you do that for me?The signature of the function is: def calculate_mega_man_score(enemies_killed, power_ups_collected, lives_lost)", "test_cases": {"test1": "calculate_mega_man_score(10, 5, 2)", "test2": "calculate_mega_man_score(5, 2, 1)", "test3": "calculate_mega_man_score(20, 10, 3)", "test4": "calculate_mega_man_score(0, 0, 0)", "test5": "calculate_mega_man_score(1, 1, 0)", "test6": "calculate_mega_man_score(50, 25, 10)", "test7": "calculate_mega_man_score(100, 50, 20)", "test8": "calculate_mega_man_score(0, 5, 2)", "test9": "calculate_mega_man_score(10, 0, 5)", "test10": "calculate_mega_man_score(20, 10, 1)"}, "hidden_information": "def calculate_mega_man_score(enemies_killed, power_ups_collected, lives_lost):\n    return (enemies_killed * 100) + (power_ups_collected * 50) - (lives_lost * 200)"}
{"ground_truth": "def determine_winner(startups, votes, judges_scores): winners = sorted(startups, key=lambda x: (x['votes'], x['judges_score'], x['mobilization_score']), reverse=True); return winners[0]", "problem_description": "Hey LLM agent, I need your help writing a python function that determines the winner of a startup competition based on votes from the public and a panel of judges. Can you help me with that? We want to ensure that the winner is not only popular but also has a solid idea. The function should take into account the number of votes, the quality of the startup idea, and the mobilization of supporters as these are the decisive factors. Oh, by the way, we also have an initial filtering process done by a panel of judges.The signature of the function is: def determine_winner(startups, votes, judges_scores)", "test_cases": {"test1": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}, {'name': 'Startup2', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.8}], [1000, 500], [8, 9])", "test2": "determine_winner([{'name': 'Startup1', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.8}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}], [500, 1000], [9, 8])", "test3": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}], [1000, 1000], [8, 8])", "test4": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}, {'name': 'Startup2', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.5}], [1000, 500], [8, 9])", "test5": "determine_winner([{'name': 'Startup1', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.5}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}], [500, 1000], [9, 8])", "test6": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}, {'name': 'Startup2', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.5}], [1000, 500], [8, 9])", "test7": "determine_winner([{'name': 'Startup1', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.8}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}], [500, 1000], [9, 8])", "test8": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}], [1000, 1000], [8, 8])", "test9": "determine_winner([{'name': 'Startup1', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.5}, {'name': 'Startup2', 'votes': 500, 'judges_score': 9, 'mobilization_score': 0.8}], [500, 500], [9, 9])", "test10": "determine_winner([{'name': 'Startup1', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.8}, {'name': 'Startup2', 'votes': 1000, 'judges_score': 8, 'mobilization_score': 0.5}], [1000, 1000], [8, 8])"}, "hidden_information": "def determine_winner(startups, votes, judges_scores): winners = sorted(startups, key=lambda x: (x['votes'], x['judges_score'], x['mobilization_score']), reverse=True); return winners[0]"}
{"ground_truth": "def is_likely_police_officer(height, weight, age, occupation):\n    if occupation.lower() == \"police officer\":\n        return True\n    elif height > 5.5 and 150 < weight < 300 and 25 < age < 60:\n        return True\n    return False", "problem_description": "Can you write a python function that takes some profile information of a person and find out whether the person is likely a police officer? The signature of the function is: def is_likely_police_officer(height, weight, age, occupation)", "test_cases": {"test1": "is_likely_police_officer(6, 270, 33, \"former LAPD officer\")", "test2": "is_likely_police_officer(5.8, 170, 50, \"UPS driver\")", "test3": "is_likely_police_officer(6.2, 200, 35, \"police officer\")", "test4": "is_likely_police_officer(5.9, 180, 40, \"NFL player\")", "test5": "is_likely_police_officer(6.1, 220, 55, \"former police officer\")", "test6": "is_likely_police_officer(5.7, 160, 30, \"lawyer\")", "test7": "is_likely_police_officer(6.3, 230, 45, \"police chief\")", "test8": "is_likely_police_officer(5.6, 150, 20, \"student\")", "test9": "is_likely_police_officer(6.0, 190, 38, \"football coach\")", "test10": "is_likely_police_officer(5.5, 140, 60, \"retired\")"}, "hidden_information": "def is_likely_police_officer(height, weight, age, occupation):\n    if occupation.lower() == \"police officer\":\n        return True\n    elif height > 5.5 and 150 < weight < 300 and 25 < age < 60:\n        return True\n    return False"}
{"ground_truth": "def generate_color_spectrum(wavelength_start, wavelength_end):\n    import numpy as np\n    spectrum = np.arange(wavelength_start, wavelength_end + 1)\n    # Remove pink wavelength range (approximately between 620-750 nm)\n    pink_range = (spectrum >= 620) & (spectrum <= 750)\n    spectrum = spectrum[~pink_range]\n    return spectrum.tolist()", "problem_description": "Hey, can you write a python function to generate a color spectrum between two given wavelengths, but exclude pink since it's not really a color? I'm not sure about the exact wavelength range for pink, but I know it's not a single wavelength.The signature of the function is: def generate_color_spectrum(wavelength_start, wavelength_end)", "test_cases": {"test1": "generate_color_spectrum(400, 700)", "test2": "generate_color_spectrum(600, 800)", "test3": "generate_color_spectrum(300, 500)", "test4": "generate_color_spectrum(700, 900)", "test5": "generate_color_spectrum(400, 500)", "test6": "generate_color_spectrum(650, 750)", "test7": "generate_color_spectrum(300, 900)", "test8": "generate_color_spectrum(550, 700)", "test9": "generate_color_spectrum(450, 600)", "test10": "generate_color_spectrum(500, 800)"}, "hidden_information": "def generate_color_spectrum(wavelength_start, wavelength_end):\n    import numpy as np\n    spectrum = np.arange(wavelength_start, wavelength_end + 1)\n    # Remove pink wavelength range (approximately between 620-750 nm)\n    pink_range = (spectrum >= 620) & (spectrum <= 750)\n    spectrum = spectrum[~pink_range]\n    return spectrum.tolist()"}
{"ground_truth": "def analyze_compliments(compliments, reactions): \n   positive_reactions = 0 \n   for reaction in reactions: \n       if reaction == \"smile\" or reaction == \"laugh\": \n           positive_reactions += 1 \n   return positive_reactions / len(reactions)", "problem_description": "I want you to write a Python function that can help me analyze how people react to compliments in a video. Can you create a function that takes in a list of compliments and a list of reactions, and outputs some kind of analysis? But I'm not sure what kind of analysis I want yet, can you help me figure that out?The signature of the function is: def analyze_compliments(compliments, reactions)", "test_cases": {"test1": "analyze_compliments([\"You look great!\"], [\"smile\"])", "test2": "analyze_compliments([\"I love your hair!\"], [\"blush\"])", "test3": "analyze_compliments([\"You're so smart!\"], [\"laugh\"])", "test4": "analyze_compliments([\"I love your smile!\"], [\"smile\", \"laugh\"])", "test5": "analyze_compliments([\"You're so kind!\"], [\"smile\", \"hug\"])", "test6": "analyze_compliments([\"I love your outfit!\"], [\"smile\", \"laugh\", \"cheer\"])", "test7": "analyze_compliments([\"You're so talented!\"], [\"smile\", \"applaud\"])", "test8": "analyze_compliments([\"I love your creativity!\"], [\"smile\", \"laugh\", \"cheer\", \"whistle\"])", "test9": "analyze_compliments([\"You're so confident!\"], [\"smile\", \"laugh\", \"cheer\", \"hug\"])", "test10": "analyze_compliments([\"I love your passion!\"], [\"smile\", \"laugh\", \"cheer\", \"hug\", \"applaud\"])"}, "hidden_information": "def analyze_compliments(compliments, reactions): \n   positive_reactions = 0 \n   for reaction in reactions: \n       if reaction == \"smile\" or reaction == \"laugh\": \n           positive_reactions += 1 \n   return positive_reactions / len(reactions)"}
{"ground_truth": "def analyze_romans_7(context, verse, perspective):\n    if perspective == 'theological':\n        if 'sin' in verse and 'grace' in context:\n            return 'present'\n        else:\n            return 'past'\n    elif perspective == 'contextual':\n        if 'law' in context and 'faith' in verse:\n            return 'present'\n        else:\n            return 'past'\n    else:\n        return 'unknown'", "problem_description": "Write a Python function that takes a biblical verse (Romans 7:19) and determines whether Paul is referring to his past or present state. The function should consider different theological perspectives and contextual analysis.The signature of the function is: def analyze_romans_7(context, verse, perspective)", "test_cases": {"test1": "analyze_romans_7('For sin will not have lordship over you: for you are not under law but under grace.', 'For the good that I would I do not: but the evil which I would not, that I do.', 'theological')", "test2": "analyze_romans_7('For the good that I would I do not: but the evil which I would not, that I do.', 'For sin will not have lordship over you: for you are not under law but under grace.', 'contextual')", "test3": "analyze_romans_7('Now if I do that I would not, it is no more I that do it, but sin that dwelleth in me.', 'So now it is no more I that do it, but sin that dwelleth in me.', 'theological')", "test4": "analyze_romans_7('For I delight in the law of God after the inward man:', 'I thank God through Jesus Christ our Lord.', 'contextual')", "test5": "analyze_romans_7('But I see another law in my members, warring against the law of my mind, and bringing me into captivity to the law of sin which is in my members.', 'For I delight in the law of God after the inward man:', 'theological')", "test6": "analyze_romans_7('O wretched man that I am! who shall deliver me from the body of this death?', 'But I see another law in my members, warring against the law of my mind, and bringing me into captivity to the law of sin which is in my members.', 'contextual')", "test7": "analyze_romans_7('Who shall deliver me from the body of this death?', 'O wretched man that I am!', 'theological')", "test8": "analyze_romans_7('I thank God through Jesus Christ our Lord.', 'Who shall deliver me from the body of this death?', 'contextual')", "test9": "analyze_romans_7('So then with the mind I myself serve the law of God; but with the flesh the law of sin.', 'I thank God through Jesus Christ our Lord.', 'theological')", "test10": "analyze_romans_7('But I see another law in my members, warring against the law of my mind, and bringing me into captivity to the law of sin which is in my members.', 'For I delight in the law of God after the inward man:', 'contextual')"}, "hidden_information": "def analyze_romans_7(context, verse, perspective):\n    if perspective == 'theological':\n        if 'sin' in verse and 'grace' in context:\n            return 'present'\n        else:\n            return 'past'\n    elif perspective == 'contextual':\n        if 'law' in context and 'faith' in verse:\n            return 'present'\n        else:\n            return 'past'\n    else:\n        return 'unknown'"}
{"ground_truth": "def calculate_longest_pause(musical_notes, note_durations): durations = [note_durations[note] for note in musical_notes]; pauses = [durations[i] for i in range(len(durations) - 1) if musical_notes[i] == 'selah' and musical_notes[i+1] == 'selah']; return max(pauses + [0])", "problem_description": "I want to analyze the use of the musical term 'selah' in Psalms and other musical traditions. I need a Python function that takes in a list of musical notes and their corresponding durations, and returns the longest pause or rest in the musical piece. The function should be able to handle notes with varying durations, and the pauses should be considered as the time between two consecutive 'selah' notes. Can you write this function for me?The signature of the function is: def calculate_longest_pause(musical_notes, note_durations)", "test_cases": {"test1": "calculate_longest_pause(['do', 're', 'selah', 'mi', 'fa', 'selah', 'so'], {'do': 1, 're': 1, 'selah': 2, 'mi': 1, 'fa': 1, 'so': 1})", "test2": "calculate_longest_pause(['la', 'ti', 'selah', 'do'], {'la': 1, 'ti': 1, 'selah': 3, 'do': 1})", "test3": "calculate_longest_pause(['sol', 'fa', 'mi', 're', 'do'], {'sol': 1, 'fa': 1, 'mi': 1, 're': 1, 'do': 1})", "test4": "calculate_longest_pause(['selah', 'selah', 'la', 'ti'], {'selah': 2, 'la': 1, 'ti': 1})", "test5": "calculate_longest_pause([], {})", "test6": "calculate_longest_pause(['do', 're', 'mi', 'fa', 'so', 'la', 'ti', 'do'], {'do': 1, 're': 1, 'mi': 1, 'fa': 1, 'so': 1, 'la': 1, 'ti': 1})", "test7": "calculate_longest_pause(['selah', 'do', 're', 'selah', 'mi', 'fa', 'so'], {'selah': 2, 'do': 1, 're': 1, 'mi': 1, 'fa': 1, 'so': 1})", "test8": "calculate_longest_pause(['la', 'ti', 'do', 'selah', 're', 'mi', 'fa'], {'la': 1, 'ti': 1, 'do': 1, 'selah': 3, 're': 1, 'mi': 1, 'fa': 1})", "test9": "calculate_longest_pause(['selah', 'selah', 'selah', 'do'], {'selah': 2, 'do': 1})", "test10": "calculate_longest_pause(['do', 'selah', 're', 'selah', 'mi', 'selah', 'fa'], {'do': 1, 'selah': 2, 're': 1, 'mi': 1, 'fa': 1})"}, "hidden_information": "def calculate_longest_pause(musical_notes, note_durations): durations = [note_durations[note] for note in musical_notes]; pauses = [durations[i] for i in range(len(durations) - 1) if musical_notes[i] == 'selah' and musical_notes[i+1] == 'selah']; return max(pauses + [0])"}
{"ground_truth": "def best_cherry_method(fruit_type, fruit_form, sanitation_concerns):\n    if fruit_type == 'tart' and fruit_form == 'fresh' and sanitation_concerns:\n        return 'Add during the boil'\n    elif fruit_type == 'tart' and fruit_form in ['frozen', 'puree']:\n        return 'Use in secondary'\n    elif fruit_type != 'tart' and fruit_form in ['fresh', 'frozen', 'puree']:\n        return 'Use in secondary'\n    elif fruit_type == 'tart' and fruit_form == 'extract':\n        return 'Dose before bottling/kegging'\n    else:\n        return 'Not a valid input'", "problem_description": "Hey LLM agent, I want to brew a beer with tart cherries and I'm not sure how to add them. Can you write a Python function that takes into account the type of fruit, its form, and my sanitation concerns? The function should output the best method to add the cherries to my beer.The signature of the function is: def best_cherry_method(fruit_type, fruit_form, sanitation_concerns)", "test_cases": {"test1": "best_cherry_method(fruit_type='tart', fruit_form='fresh', sanitation_concerns=True)", "test2": "best_cherry_method(fruit_type='tart', fruit_form='frozen', sanitation_concerns=False)", "test3": "best_cherry_method(fruit_type='sweet', fruit_form='puree', sanitation_concerns=False)", "test4": "best_cherry_method(fruit_type='tart', fruit_form='extract', sanitation_concerns=True)", "test5": "best_cherry_method(fruit_type='tart', fruit_form='fresh', sanitation_concerns=False)", "test6": "best_cherry_method(fruit_type='sweet', fruit_form='fresh', sanitation_concerns=True)", "test7": "best_cherry_method(fruit_type='tart', fruit_form='frozen', sanitation_concerns=True)", "test8": "best_cherry_method(fruit_type='tart', fruit_form='puree', sanitation_concerns=False)", "test9": "best_cherry_method(fruit_type='sweet', fruit_form='frozen', sanitation_concerns=False)", "test10": "best_cherry_method(fruit_type='tart', fruit_form='extract', sanitation_concerns=False)"}, "hidden_information": "def best_cherry_method(fruit_type, fruit_form, sanitation_concerns):\n    if fruit_type == 'tart' and fruit_form == 'fresh' and sanitation_concerns:\n        return 'Add during the boil'\n    elif fruit_type == 'tart' and fruit_form in ['frozen', 'puree']:\n        return 'Use in secondary'\n    elif fruit_type != 'tart' and fruit_form in ['fresh', 'frozen', 'puree']:\n        return 'Use in secondary'\n    elif fruit_type == 'tart' and fruit_form == 'extract':\n        return 'Dose before bottling/kegging'\n    else:\n        return 'Not a valid input'"}
{"ground_truth": "def is_gay_friendly(movie_data, gay_actors, gay_icons):\n    cast = movie_data['cast']\n    crew = movie_data['crew']\n    plot = movie_data['plot']\n    cast_members = [actor.lower() for actor in cast]\n    crew_members = [crew_member.lower() for crew_member in crew]\n    if any(actor in gay_actors for actor in cast_members) or any(member in gay_icons for member in crew_members + cast_members) or any(keyword in plot.lower() for keyword in ['fashion', 'lgbtq+']):\n        return True\n    return False", "problem_description": "Can you write a python function that identifies if a movie is gay-friendly and kid-friendly, I'm not sure about the exact criteria but maybe it has something to do with the cast or the plot. Should be able to work with a list of movies.The signature of the function is: def is_gay_friendly(movie_data, gay_actors, gay_icons)", "test_cases": {"test1": "is_gay_friendly({'cast': ['Neil Patrick Harris', 'Katy Perry'], 'crew': ['Tim Gunn', 'Joan Rivers'], 'plot': 'fashion and music'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test2": "is_gay_friendly({'cast': ['Tom Hanks', 'Meg Ryan'], 'crew': ['Steven Spielberg', 'Ron Howard'], 'plot': 'romantic comedy'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test3": "is_gay_friendly({'cast': ['Jim Parsons', 'Kaley Cuoco'], 'crew': ['Chuck Lorre', 'Bill Prady'], 'plot': 'nerd humor and love'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test4": "is_gay_friendly({'cast': ['Will Smith', 'Tommy Lee Jones'], 'crew': ['Barry Sonnenfeld', 'Steven Spielberg'], 'plot': 'mib aliens and friendship'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test5": "is_gay_friendly({'cast': ['Julia Roberts', 'Richard Gere'], 'crew': ['Garry Marshall', 'Charles Shyer'], 'plot': 'romantic comedy fashion'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test6": "is_gay_friendly({'cast': ['Matt Bomer', 'Jim Parsons'], 'crew': ['Chuck Lorre', 'Bill Prady'], 'plot': 'nerd humor and love'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test7": "is_gay_friendly({'cast': ['Katy Perry', 'Russell Brand'], 'crew': ['Dan Cutforth', 'Jane Lipsitz'], 'plot': 'romantic comedy musical'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test8": "is_gay_friendly({'cast': ['Neil Patrick Harris', 'Jon Cryer'], 'crew': ['Chuck Lorre', 'Lee Aronsohn'], 'plot': 'nerd humor'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test9": "is_gay_friendly({'cast': ['Gay actors', 'Other actors'], 'crew': ['Tim Gunn', 'Other Crew'], 'plot': 'fashion and more'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])", "test10": "is_gay_friendly({'cast': ['Not gay actors'], 'crew': ['Not gay crew'], 'plot': 'no'}, ['neil patrick harris'], ['tim gunn', 'alan cumming'])"}, "hidden_information": "def is_gay_friendly(movie_data, gay_actors, gay_icons):\n    cast = movie_data['cast']\n    crew = movie_data['crew']\n    plot = movie_data['plot']\n    cast_members = [actor.lower() for actor in cast]\n    crew_members = [crew_member.lower() for crew_member in crew]\n    if any(actor in gay_actors for actor in cast_members) or any(member in gay_icons for member in crew_members + cast_members) or any(keyword in plot.lower() for keyword in ['fashion', 'lgbtq+']):\n        return True\n    return False"}
{"ground_truth": "def calculate_most_fortuitous_path(edge_angles, pheromone_trails):\n    # Define a dictionary to store the probabilities of each path based on their angles and pheromone trails\n    path_probabilities = {}\n    for i, (angle, trail) in enumerate(zip(edge_angles, pheromone_trails)):\n        # Assign a probability based on the angle and pheromone trail intensity\n        probability = (abs(angle) + trail) / (sum(abs(angle) for angle in edge_angles) + sum(trail for trail in pheromone_trails))\n        path_probabilities[i] = probability\n    # Select the path with the highest probability\n    most_fortuitous_path = max(path_probabilities, key=path_probabilities.get)\n    return most_fortuitous_path", "problem_description": "Write a Python function that helps robotic ants navigate through a network of corridors by determining the most fortuitous path based on the angles of bifurcations and the intensity of pheromone trails. The function should take two inputs: a list of edge angles and a list of pheromone trail intensities, and output the index of the most fortuitous path.The signature of the function is: def calculate_most_fortuitous_path(edge_angles, pheromone_trails)", "test_cases": {"test1": "calculate_most_fortuitous_path([30, 45, 15], [0.5, 0.8, 0.2])", "test2": "calculate_most_fortuitous_path([90, 60, 30], [0.2, 0.5, 0.8])", "test3": "calculate_most_fortuitous_path([10, 20, 30], [0.8, 0.5, 0.2])", "test4": "calculate_most_fortuitous_path([45, 45, 45], [0.5, 0.5, 0.5])", "test5": "calculate_most_fortuitous_path([10, 45, 90], [0.2, 0.8, 0.5])", "test6": "calculate_most_fortuitous_path([30, 90, 120], [0.8, 0.2, 0.5])", "test7": "calculate_most_fortuitous_path([15, 30, 45], [0.5, 0.8, 0.2])", "test8": "calculate_most_fortuitous_path([60, 90, 120], [0.2, 0.5, 0.8])", "test9": "calculate_most_fortuitous_path([10, 15, 20], [0.8, 0.5, 0.2])", "test10": "calculate_most_fortuitous_path([90, 120, 150], [0.5, 0.8, 0.2])"}, "hidden_information": "def calculate_most_fortuitous_path(edge_angles, pheromone_trails):\n    # Define a dictionary to store the probabilities of each path based on their angles and pheromone trails\n    path_probabilities = {}\n    for i, (angle, trail) in enumerate(zip(edge_angles, pheromone_trails)):\n        # Assign a probability based on the angle and pheromone trail intensity\n        probability = (abs(angle) + trail) / (sum(abs(angle) for angle in edge_angles) + sum(trail for trail in pheromone_trails))\n        path_probabilities[i] = probability\n    # Select the path with the highest probability\n    most_fortuitous_path = max(path_probabilities, key=path_probabilities.get)\n    return most_fortuitous_path"}
{"ground_truth": "def alert_extreme_weather(wind_speed, rain_condition, traffic_condition):\n    if wind_speed > 100 or rain_condition == 'flooding' or traffic_condition == 'closed':\n        return 'Alert: Extreme weather conditions detected.'\n    else:\n        return 'No extreme weather conditions detected.'", "problem_description": "I'd like you to write a python function that takes in some weather related data and alerts me if there are extreme conditions that can cause disruptions to transportation. Can you create a function that can handle different types of weather conditions?The signature of the function is: def alert_extreme_weather(wind_speed, rain_condition, traffic_condition)", "test_cases": {"test1": "alert_extreme_weather(107, 'flooding', 'closed')", "test2": "alert_extreme_weather(50, 'sunny', 'open')", "test3": "alert_extreme_weather(120, 'rainy', 'open')", "test4": "alert_extreme_weather(90, 'flooding', 'open')", "test5": "alert_extreme_weather(80, 'sunny', 'closed')", "test6": "alert_extreme_weather(110, 'rainy', 'closed')", "test7": "alert_extreme_weather(40, 'flooding', 'closed')", "test8": "alert_extreme_weather(100, 'sunny', 'open')", "test9": "alert_extreme_weather(130, 'flooding', 'open')", "test10": "alert_extreme_weather(60, 'rainy', 'open')"}, "hidden_information": "def alert_extreme_weather(wind_speed, rain_condition, traffic_condition):\n    if wind_speed > 100 or rain_condition == 'flooding' or traffic_condition == 'closed':\n        return 'Alert: Extreme weather conditions detected.'\n    else:\n        return 'No extreme weather conditions detected.'"}
{"ground_truth": "def calculate_motorcycle_speed(distance, time): return distance / time", "problem_description": "I need a python function to determine the speed of motorcycle racers. They travel certain distances in varying times and I need to know how fast they're going. Can you help me with a python function to calculate this?The signature of the function is: def calculate_motorcycle_speed(distance, time)", "test_cases": {"test1": "calculate_motorcycle_speed(100, 5)", "test2": "calculate_motorcycle_speed(200, 10)", "test3": "calculate_motorcycle_speed(50, 2.5)", "test4": "calculate_motorcycle_speed(150, 7.5)", "test5": "calculate_motorcycle_speed(300, 15)", "test6": "calculate_motorcycle_speed(250, 12.5)", "test7": "calculate_motorcycle_speed(400, 20)", "test8": "calculate_motorcycle_speed(350, 17.5)", "test9": "calculate_motorcycle_speed(1000, 50)", "test10": "calculate_motorcycle_speed(500, 25)"}, "hidden_information": "def calculate_motorcycle_speed(distance, time): return distance / time"}
{"ground_truth": "def is_interpreter_qualified(years_of_training, advocate_training_years, disability_status):\n    return years_of_training >= advocate_training_years or disability_status == 'officially_disabled'", "problem_description": "Hello, I need a python function that determines if a sign language interpreter is qualified or not. Can you write this function for me?The signature of the function is: def is_interpreter_qualified(years_of_training, advocate_training_years, disability_status)", "test_cases": {"test1": "is_interpreter_qualified(5, 5, 'officially_disabled')", "test2": "is_interpreter_qualified(6, 5, 'not_disabled')", "test3": "is_interpreter_qualified(3, 5, 'not_disabled')", "test4": "is_interpreter_qualified(1, 5, 'officially_disabled')", "test5": "is_interpreter_qualified(10, 5, 'not_disabled')", "test6": "is_interpreter_qualified(0, 5, 'not_disabled')", "test7": "is_interpreter_qualified(5, 5, 'not_disabled')", "test8": "is_interpreter_qualified(7, 3, 'officially_disabled')", "test9": "is_interpreter_qualified(4, 6, 'not_disabled')", "test10": "is_interpreter_qualified(10, 10, 'officially_disabled')"}, "hidden_information": "def is_interpreter_qualified(years_of_training, advocate_training_years, disability_status):\n    return years_of_training >= advocate_training_years or disability_status == 'officially_disabled'"}
{"ground_truth": "def calculate_weekly_player_rankings(player_stats): \n    # Define a dictionary to map positions to their respective weights \n    position_weights = {\n        'QB': 1.2,\n        'RB': 1.1,\n        'WR': 1.1,\n        'TE': 1.0,\n        'K': 1.0,\n        'DEF': 1.0\n    }\n\n    # Initialize an empty dictionary to store player rankings\n    rankings = {}\n\n    # Iterate over each player in the stats dictionary\n    for player_name, stats in player_stats.items():\n        # Extract the position and score from the stats\n        position = stats['Position']\n        score = stats['Score']\n\n        # Calculate the weighted score based on the position\n        weighted_score = score * position_weights[position]\n\n        # Store the weighted score in the rankings dictionary\n        rankings[player_name] = weighted_score\n\n    # Sort the rankings in descending order and return\n    return dict(sorted(rankings.items(), key=lambda item: item[1], reverse=True))", "problem_description": "I want to write a Python function to analyze football player performance based on their weekly statistics, such as passing yards, rushing yards, touchdowns, and other relevant metrics. Can you help me create a function that can take in a dictionary of player statistics and output a ranked list of players based on their performance?The signature of the function is: def calculate_weekly_player_rankings(player_stats)", "test_cases": {"test1": "calculate_weekly_player_rankings({'Tom Brady': {'Position': 'QB', 'Score': 25}, 'Rob Gronkowski': {'Position': 'TE', 'Score': 18}})", "test2": "calculate_weekly_player_rankings({'Derrick Henry': {'Position': 'RB', 'Score': 30}, 'Julio Jones': {'Position': 'WR', 'Score': 22}})", "test3": "calculate_weekly_player_rankings({'Aaron Rodgers': {'Position': 'QB', 'Score': 28}, 'Davante Adams': {'Position': 'WR', 'Score': 20}})", "test4": "calculate_weekly_player_rankings({'Christian McCaffrey': {'Position': 'RB', 'Score': 32}, 'Michael Thomas': {'Position': 'WR', 'Score': 25}})", "test5": "calculate_weekly_player_rankings({'Patrick Mahomes': {'Position': 'QB', 'Score': 35}, 'Travis Kelce': {'Position': 'TE', 'Score': 22}})", "test6": "calculate_weekly_player_rankings({'Alvin Kamara': {'Position': 'RB', 'Score': 30}, 'Mike Evans': {'Position': 'WR', 'Score': 20}})", "test7": "calculate_weekly_player_rankings({'Lamar Jackson': {'Position': 'QB', 'Score': 28}, 'Mark Andrews': {'Position': 'TE', 'Score': 18}})", "test8": "calculate_weekly_player_rankings({'Saquon Barkley': {'Position': 'RB', 'Score': 32}, 'Odell Beckham Jr.': {'Position': 'WR', 'Score': 22}})", "test9": "calculate_weekly_player_rankings({'Russell Wilson': {'Position': 'QB', 'Score': 30}, 'Tyler Lockett': {'Position': 'WR', 'Score': 20}})", "test10": "calculate_weekly_player_rankings({'Ezekiel Elliott': {'Position': 'RB', 'Score': 28}, 'Amari Cooper': {'Position': 'WR', 'Score': 18}})"}, "hidden_information": "def calculate_weekly_player_rankings(player_stats): \n    # Define a dictionary to map positions to their respective weights \n    position_weights = {\n        'QB': 1.2,\n        'RB': 1.1,\n        'WR': 1.1,\n        'TE': 1.0,\n        'K': 1.0,\n        'DEF': 1.0\n    }\n\n    # Initialize an empty dictionary to store player rankings\n    rankings = {}\n\n    # Iterate over each player in the stats dictionary\n    for player_name, stats in player_stats.items():\n        # Extract the position and score from the stats\n        position = stats['Position']\n        score = stats['Score']\n\n        # Calculate the weighted score based on the position\n        weighted_score = score * position_weights[position]\n\n        # Store the weighted score in the rankings dictionary\n        rankings[player_name] = weighted_score\n\n    # Sort the rankings in descending order and return\n    return dict(sorted(rankings.items(), key=lambda item: item[1], reverse=True))"}
{"ground_truth": "def hitman_game(hitman_level, mission_difficulty):\n  if hitman_level < 5:\n    if mission_difficulty == 'easy':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    elif mission_difficulty == 'medium':\n      return 'Mission Failed. Try Again.'\n    else:\n      return 'Mission Failed. Try Again with a smaller rifle.'\n  elif hitman_level < 10:\n    if mission_difficulty == 'easy':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    elif mission_difficulty == 'medium':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    else:\n      return 'Mission Failed. Try Again with a smaller rifle.'\n  else:\n    return 'Mission Accomplished. You are a pro.'", "problem_description": "Hey, I want you to write a python function that simulates a text-based game where I am a hitman trying to complete missions. If I complete a mission, my level increases. Missions vary in difficulty and my hitman level affects how easy or hard the mission is. I can only use the function with the difficulty of the mission and my current level. Please help me write this function.The signature of the function is: def hitman_game(hitman_level, mission_difficulty)", "test_cases": {"test1": "hitman_game(1, 'easy')", "test2": "hitman_game(3, 'medium')", "test3": "hitman_game(15, 'hard')", "test4": "hitman_game(2, 'easy')", "test5": "hitman_game(9, 'medium')", "test6": "hitman_game(12, 'easy')", "test7": "hitman_game(5, 'hard')", "test8": "hitman_game(20, 'easy')", "test9": "hitman_game(4, 'medium')", "test10": "hitman_game(7, 'hard')"}, "hidden_information": "def hitman_game(hitman_level, mission_difficulty):\n  if hitman_level < 5:\n    if mission_difficulty == 'easy':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    elif mission_difficulty == 'medium':\n      return 'Mission Failed. Try Again.'\n    else:\n      return 'Mission Failed. Try Again with a smaller rifle.'\n  elif hitman_level < 10:\n    if mission_difficulty == 'easy':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    elif mission_difficulty == 'medium':\n      return 'Mission Accomplished. New Hitman level: ' + str(hitman_level + 1)\n    else:\n      return 'Mission Failed. Try Again with a smaller rifle.'\n  else:\n    return 'Mission Accomplished. You are a pro.'"}
{"ground_truth": "def most_profitable_platform(platform_sales, game_prices, development_costs): return max(platform_sales, key=lambda k: platform_sales[k] * game_prices[k] - development_costs[k])", "problem_description": "Hey agent, I need your help in determining which type of gaming platform is the most profitable. I have some data on sales figures, game prices, and development costs for different platforms, but I'm not sure how to use it to make a decision. Can you write a python function that takes in this data and returns the most profitable platform?The signature of the function is: def most_profitable_platform(platform_sales, game_prices, development_costs)", "test_cases": {"test1": "most_profitable_platform({'console': 1000000, 'mobile': 500000, 'pc': 750000}, {'console': 60, 'mobile': 10, 'pc': 50}, {'console': 500000, 'mobile': 200000, 'pc': 300000})", "test2": "most_profitable_platform({'console': 2000000, 'mobile': 1500000, 'pc': 2500000}, {'console': 70, 'mobile': 15, 'pc': 60}, {'console': 750000, 'mobile': 400000, 'pc': 1000000})", "test3": "most_profitable_platform({'console': 500000, 'mobile': 1000000, 'pc': 750000}, {'console': 50, 'mobile': 5, 'pc': 40}, {'console': 200000, 'mobile': 300000, 'pc': 400000})", "test4": "most_profitable_platform({'console': 1500000, 'mobile': 2000000, 'pc': 1000000}, {'console': 60, 'mobile': 10, 'pc': 50}, {'console': 600000, 'mobile': 500000, 'pc': 400000})", "test5": "most_profitable_platform({'console': 750000, 'mobile': 500000, 'pc': 2000000}, {'console': 70, 'mobile': 15, 'pc': 60}, {'console': 300000, 'mobile': 200000, 'pc': 1000000})", "test6": "most_profitable_platform({'console': 2000000, 'mobile': 1500000, 'pc': 2500000}, {'console': 70, 'mobile': 15, 'pc': 60}, {'console': 750000, 'mobile': 400000, 'pc': 1000000})", "test7": "most_profitable_platform({'console': 500000, 'mobile': 1000000, 'pc': 750000}, {'console': 50, 'mobile': 5, 'pc': 40}, {'console': 200000, 'mobile': 300000, 'pc': 400000})", "test8": "most_profitable_platform({'console': 1500000, 'mobile': 2000000, 'pc': 1000000}, {'console': 60, 'mobile': 10, 'pc': 50}, {'console': 600000, 'mobile': 500000, 'pc': 400000})", "test9": "most_profitable_platform({'console': 750000, 'mobile': 500000, 'pc': 2000000}, {'console': 70, 'mobile': 15, 'pc': 60}, {'console': 300000, 'mobile': 200000, 'pc': 1000000})", "test10": "most_profitable_platform({'console': 1000000, 'mobile': 500000, 'pc': 750000}, {'console': 60, 'mobile': 10, 'pc': 50}, {'console': 500000, 'mobile': 200000, 'pc': 300000})"}, "hidden_information": "def most_profitable_platform(platform_sales, game_prices, development_costs): return max(platform_sales, key=lambda k: platform_sales[k] * game_prices[k] - development_costs[k])"}
{"ground_truth": "def calculate_hoax_cost(complexity_level, num_people_involved, base_cost=0.01): return (complexity_level * 100) + (num_people_involved * 5) + base_cost", "problem_description": "I want you to write a Python function to estimate the cost of a hoax based on its complexity and the number of people involved. Can you come up with something like that?The signature of the function is: def calculate_hoax_cost(complexity_level, num_people_involved, base_cost=0.01)", "test_cases": {"test1": "calculate_hoax_cost(5, 10)", "test2": "calculate_hoax_cost(10, 5)", "test3": "calculate_hoax_cost(3, 15)", "test4": "calculate_hoax_cost(2, 20)", "test5": "calculate_hoax_cost(8, 8)", "test6": "calculate_hoax_cost(1, 25)", "test7": "calculate_hoax_cost(12, 12)", "test8": "calculate_hoax_cost(9, 9)", "test9": "calculate_hoax_cost(6, 18)", "test10": "calculate_hoax_cost(11, 7)"}, "hidden_information": "def calculate_hoax_cost(complexity_level, num_people_involved, base_cost=0.01): return (complexity_level * 100) + (num_people_involved * 5) + base_cost"}
{"ground_truth": "def categorize_os_features(features):\n  operating_system = {}\n  operating_system['hardware'] = [feat for feat in features if 'hardware' in feat or feat.startswith(('keyboard', 'mouse'))]\n  operating_system['software'] = [feat for feat in features if 'software' in feat or feat.startswith(('browser', 'editor'))]\n  operating_system['security'] = [feat for feat in features if 'security' in feat or feat.startswith(('firewall', 'antivirus'))]\n  return operating_system", "problem_description": "I want you to write a python function that helps me organize different features of an ideal operating system into categories. I am not sure how many categories we will need, but we can decide that together.The signature of the function is: def categorize_os_features(features)", "test_cases": {"test1": "categorize_os_features(['hardware keyboard', 'software browser', 'security antivirus', 'mouse touchpad'])", "test2": "categorize_os_features(['firewall security feature', '\u0627\u067e\u64caewing editor software', 'solid state drive hardware'])", "test3": "categorize_os_features(['keyboard backlight hardware', 'adblock software feature', 'ransomeware security protection'])", "test4": "categorize_os_features([' password manager software feature', 'third party firewall security', 'ethernet port hardware'])", "test5": "categorize_os_features(['text editor software', 'spellchecker software feature', 'clipboard manager software'])", "test6": "categorize_os_features(['os recovery feature', 'boot camp software', ' drivers hardware'])", "test7": "categorize_os_features(['yum software package manager', 'bash editor software'])", "test8": "categorize_os_features(['antivirus software feature', 'os updates feature', 'lcd screen hardware'])", "test9": "categorize_os_features([' bluetooth hardware', ' hardware graphics card'])", "test10": "categorize_os_features(['wireless connection feature', ' bitmap editor software'])"}, "hidden_information": "def categorize_os_features(features):\n  operating_system = {}\n  operating_system['hardware'] = [feat for feat in features if 'hardware' in feat or feat.startswith(('keyboard', 'mouse'))]\n  operating_system['software'] = [feat for feat in features if 'software' in feat or feat.startswith(('browser', 'editor'))]\n  operating_system['security'] = [feat for feat in features if 'security' in feat or feat.startswith(('firewall', 'antivirus'))]\n  return operating_system"}
{"ground_truth": "def calculate_morality_score(action, moral_principles):\n    morality_score = 0\n    for principle, weight in moral_principles.items():\n        if principle in action:\n            morality_score += weight\n    return morality_score / sum(moral_principles.values())", "problem_description": "I want you to write a Python function that can determine the morality score of a given action. The action can be described as a string and has multiple characteristics. The morality score should be calculated based on some moral principles and their corresponding weights. I'm not sure how to define the moral principles and their weights, can you help me with that?The signature of the function is: def calculate_morality_score(action, moral_principles)", "test_cases": {"test1": "calculate_morality_score('helping others', {'honesty': 0.2, 'empathy': 0.5, 'responsibility': 0.3})", "test2": "calculate_morality_score('lying for personal gain', {'honesty': 0.2, 'empathy': 0.5, 'responsibility': 0.3})", "test3": "calculate_morality_score('donating to charity', {'charity': 0.8, 'kindness': 0.2})", "test4": "calculate_morality_score('cheating on a test', {'honesty': 0.6, 'responsibility': 0.4})", "test5": "calculate_morality_score('volunteering', {'empathy': 0.6, 'responsibility': 0.4})", "test6": "calculate_morality_score('stealing from someone', {'honesty': 0.8, 'empathy': 0.2})", "test7": "calculate_morality_score('helping a friend', {'empathy': 0.7, 'kindness': 0.3})", "test8": "calculate_morality_score('lying to avoid punishment', {'honesty': 0.6, 'responsibility': 0.4})", "test9": "calculate_morality_score('donating to a good cause', {'charity': 0.9, 'kindness': 0.1})", "test10": "calculate_morality_score('standing up for someone', {'empathy': 0.8, 'responsibility': 0.2})"}, "hidden_information": "def calculate_morality_score(action, moral_principles):\n    morality_score = 0\n    for principle, weight in moral_principles.items():\n        if principle in action:\n            morality_score += weight\n    return morality_score / sum(moral_principles.values())"}
{"ground_truth": "def get_auto_import_behavior(reference_location, is_const, is_declspec_used, enable_auto_import):\n    if reference_location == '.text':\n        return 'Auto-import works'\n    elif reference_location == '.rdata' and enable_auto_import == True:\n        return 'Auto-import works with .rdata made writable'\n    elif is_declspec_used == True:\n        return 'Explicit __declspec(dllimport) used'\n    elif is_const == True and enable_auto_import == False:\n        return 'Auto-import does not work due to const reference'\n    else:\n        return 'Auto-import fails or has unexpected behavior'", "problem_description": "I want the agent to write a Python function that determines the behavior of the auto-import mechanism in the GNU linker, given the location of the reference to a data item, whether the data item is constant, whether the __declspec(dllimport) directive is used, and whether auto-import is enabled. The function should take four arguments: reference_location, is_const, is_declspec_used, and enable_auto_import, and return a string describing the behavior of auto-import.The signature of the function is: def get_auto_import_behavior(reference_location, is_const, is_declspec_used, enable_auto_import)", "test_cases": {"test1": "get_auto_import_behavior('.text', False, False, True)", "test2": "get_auto_import_behavior('.rdata', False, False, True)", "test3": "get_auto_import_behavior('.rdata', False, True, True)", "test4": "get_auto_import_behavior('.rdata', True, False, False)", "test5": "get_auto_import_behavior('.text', False, True, False)", "test6": "get_auto_import_behavior('.rdata', True, False, True)", "test7": "get_auto_import_behavior('.text', True, False, True)", "test8": "get_auto_import_behavior('.rdata', False, False, False)", "test9": "get_auto_import_behavior('.text', False, False, False)", "test10": "get_auto_import_behavior('.rdata', True, True, True)"}, "hidden_information": "def get_auto_import_behavior(reference_location, is_const, is_declspec_used, enable_auto_import):\n    if reference_location == '.text':\n        return 'Auto-import works'\n    elif reference_location == '.rdata' and enable_auto_import == True:\n        return 'Auto-import works with .rdata made writable'\n    elif is_declspec_used == True:\n        return 'Explicit __declspec(dllimport) used'\n    elif is_const == True and enable_auto_import == False:\n        return 'Auto-import does not work due to const reference'\n    else:\n        return 'Auto-import fails or has unexpected behavior'"}
{"ground_truth": "def convert_units(value, from_unit, to_unit):\n    conversion_factors = {\n        'px': 0.2646,  # 1 px = 0.2646 mm\n        'mm': 1,\n        'cm': 10,\n        'm': 1000,\n        'km': 1000000\n    }\n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError('Unsupported unit')\n    return value * conversion_factors[from_unit] / conversion_factors[to_unit]\n", "problem_description": "Can you write a Python function that converts between different units of measurement? I'm not sure what units I'll need to convert, but I know I'll need to convert physical length units. Can you make it flexible so I can use it for various types of measurements?The signature of the function is: def convert_units(value, from_unit, to_unit)", "test_cases": {"test1": "convert_units(10, 'mm', 'cm')", "test2": "convert_units(5, 'cm', 'm')", "test3": "convert_units(1000, 'm', 'km')", "test4": "convert_units(1, 'km', 'm')", "test5": "convert_units(0.5, 'm', 'cm')", "test6": "convert_units(20, 'px', 'mm')", "test7": "convert_units(30, 'mm', 'px')", "test8": "convert_units(10, 'km', 'cm')", "test9": "convert_units(500, 'm', 'km')", "test10": "convert_units(100, 'cm', 'px')"}, "hidden_information": "def convert_units(value, from_unit, to_unit):\n    conversion_factors = {\n        'px': 0.2646,  # 1 px = 0.2646 mm\n        'mm': 1,\n        'cm': 10,\n        'm': 1000,\n        'km': 1000000\n    }\n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError('Unsupported unit')\n    return value * conversion_factors[from_unit] / conversion_factors[to_unit]\n"}
{"ground_truth": "def calculate_reading_time(article_lengths, reading_speed=200): return [length / reading_speed for length in article_lengths]", "problem_description": "I want you to write a python function that can help me determine how long it takes to read a list of articles. The function should take into account the length of each article in words and maybe some other factors. Can you please help me?The signature of the function is: def calculate_reading_time(article_lengths, reading_speed=200)", "test_cases": {"test1": "calculate_reading_time([3620])", "test2": "calculate_reading_time([9892, 2155, 4295])", "test3": "calculate_reading_time([2155], reading_speed=100)", "test4": "calculate_reading_time([3620, 9892, 2155, 4295], reading_speed=250)", "test5": "calculate_reading_time([])", "test6": "calculate_reading_time([5000])", "test7": "calculate_reading_time([2000, 4000, 6000])", "test8": "calculate_reading_time([800])", "test9": "calculate_reading_time([1200, 2400, 3600])", "test10": "calculate_reading_time([4000, 8000])"}, "hidden_information": "def calculate_reading_time(article_lengths, reading_speed=200): return [length / reading_speed for length in article_lengths]"}
{"ground_truth": "def will_boot_reliably(disk_size, partition_size, boot_sector_location): \n    if disk_size <= 137:\n        return False\n    elif partition_size > 137 and boot_sector_location > 137:\n        return False\n    else:\n        return True", "problem_description": "I want the agent to write a python function that determines whether a NetBSD system with an LBA48-aware BIOS will be able to boot reliably from a partition larger than 137G. Please create a function that takes into account the total disk size, the size of the partition, and the location of the boot sector. Will you do that?The signature of the function is: def will_boot_reliably(disk_size, partition_size, boot_sector_location)", "test_cases": {"test1": "will_boot_reliably(100, 50, 20)", "test2": "will_boot_reliably(150, 140, 10)", "test3": "will_boot_reliably(250, 200, 180)", "test4": "will_boot_reliably(120, 120, 90)", "test5": "will_boot_reliably(80, 50, 40)", "test6": "will_boot_reliably(300, 250, 150)", "test7": "will_boot_reliably(200, 100, 50)", "test8": "will_boot_reliably(180, 120, 110)", "test9": "will_boot_reliably(280, 220, 250)", "test10": "will_boot_reliably(220, 180, 140)"}, "hidden_information": "def will_boot_reliably(disk_size, partition_size, boot_sector_location): \n    if disk_size <= 137:\n        return False\n    elif partition_size > 137 and boot_sector_location > 137:\n        return False\n    else:\n        return True"}
{"ground_truth": "def get_authentication_method(netbsd_version):\n    if netbsd_version < 3.0:\n        return 'traditional'\n    else:\n        return 'PAM'", "problem_description": "I want to know the authentication method used by NetBSD based on its version. Can you write a Python function to determine this? I think it changes after a certain version, but I'm not sure.The signature of the function is: def get_authentication_method(netbsd_version)", "test_cases": {"test1": "get_authentication_method(2.1)", "test2": "get_authentication_method(3.0)", "test3": "get_authentication_method(1.0)", "test4": "get_authentication_method(2.9)", "test5": "get_authentication_method(3.1)", "test6": "get_authentication_method(2.5)", "test7": "get_authentication_method(2.8)", "test8": "get_authentication_method(1.9)", "test9": "get_authentication_method(3.5)", "test10": "get_authentication_method(2.0)"}, "hidden_information": "def get_authentication_method(netbsd_version):\n    if netbsd_version < 3.0:\n        return 'traditional'\n    else:\n        return 'PAM'"}
{"ground_truth": "def resolve_pthread_version(system_pthread_version, installed_pthread_versions):\n    for version in installed_pthread_versions:\n        if version.startswith(system_pthread_version):\n            return version\n    return system_pthread_version", "problem_description": "I'm having trouble compiling a program that requires pthread, but I have multiple versions of pthread libraries installed on my system. I need a python function that can take my system's pthread version and the installed pthread versions as input and return the most suitable version for my system. Can you please write a python function to handle this?The signature of the function is: def resolve_pthread_version(system_pthread_version, installed_pthread_versions)", "test_cases": {"test1": "resolve_pthread_version('pthread-1.60', ['mit-pthreads-1.60b6', 'unproven-pthreads-0.17nb3'])", "test2": "resolve_pthread_version('pthread-0.17', ['mit-pthreads-1.60b6', 'unproven-pthreads-0.17nb3'])", "test3": "resolve_pthread_version('pthread-2.0', ['mit-pthreads-1.60b6', 'unproven-pthreads-0.17nb3'])", "test4": "resolve_pthread_version('pthread-1.60', ['mit-pthreads-1.60b5', 'unproven-pthreads-0.17nb3'])", "test5": "resolve_pthread_version('pthread-1.60', ['unproven-pthreads-0.17nb3', 'mit-pthreads-1.60b6'])", "test6": "resolve_pthread_version('pthread-1.60', [])", "test7": "resolve_pthread_version('pthread-0.17', ['mit-pthreads-1.60b6'])", "test8": "resolve_pthread_version('pthread-1.60', ['unproven-pthreads-0.17nb3'])", "test9": "resolve_pthread_version('pthread-1.60', ['mit-pthreads-1.60b6', 'mit-pthreads-1.60b7'])", "test10": "resolve_pthread_version('pthread-2.0', ['mit-pthreads-1.60b6', 'mit-pthreads-2.0b1'])"}, "hidden_information": "def resolve_pthread_version(system_pthread_version, installed_pthread_versions):\n    for version in installed_pthread_versions:\n        if version.startswith(system_pthread_version):\n            return version\n    return system_pthread_version"}
{"ground_truth": "def expected_highest_integer(n, k): return (n + 1) * k / (k + 1)", "problem_description": "I'd like you to write a Python function that calculates the expected value of the highest integer when I pick a certain number of integers without replacement from a set of integers {1, ..., n}. Can you help me with this?The signature of the function is: def expected_highest_integer(n, k)", "test_cases": {"test1": "expected_highest_integer(10, 2)", "test2": "expected_highest_integer(20, 3)", "test3": "expected_highest_integer(30, 4)", "test4": "expected_highest_integer(40, 5)", "test5": "expected_highest_integer(50, 6)", "test6": "expected_highest_integer(100, 2)", "test7": "expected_highest_integer(200, 3)", "test8": "expected_highest_integer(300, 4)", "test9": "expected_highest_integer(400, 5)", "test10": "expected_highest_integer(500, 6)"}, "hidden_information": "def expected_highest_integer(n, k): return (n + 1) * k / (k + 1)"}
{"ground_truth": "def calculate_central_difference(f, t_n, x_i, x_values, delta_t):\n    if x_i < len(x_values) - 1 and x_i > 0:\n        return (f(t_n, x_values[x_i+1]) - f(t_n, x_values[x_i-1])) / (2 * delta_t)\n    else:\n        return 'Invalid x_i'", "problem_description": "Hi, I need a Python function to calculate the central difference discrete of a given function f(t,x) at a point (t_n,x_i). Can you help me write this function? It should take into account the time step delta_t and the x values as input.The signature of the function is: def calculate_central_difference(f, t_n, x_i, x_values, delta_t)", "test_cases": {"test1": "calculate_central_difference(lambda t, x: t * x, 1, 2, [1, 2, 3, 4, 5], 0.1)", "test2": "calculate_central_difference(lambda t, x: t * x**2, 2, 1, [1, 2, 3, 4, 5], 0.1)", "test3": "calculate_central_difference(lambda t, x: t + x, 1, 3, [1, 2, 3, 4, 5], 0.1)", "test4": "calculate_central_difference(lambda t, x: t - x, 2, 0, [1, 2, 3, 4, 5], 0.1)", "test5": "calculate_central_difference(lambda t, x: t * x, 1, 4, [1, 2, 3, 4, 5], 0.1)", "test6": "calculate_central_difference(lambda t, x: t * x**2, 1, 1, [1, 2, 3, 4, 5], 0.1)", "test7": "calculate_central_difference(lambda t, x: t + x, 2, 2, [1, 2, 3, 4, 5], 0.1)", "test8": "calculate_central_difference(lambda t, x: t - x, 1, 0, [1, 2, 3, 4, 5], 0.1)", "test9": "calculate_central_difference(lambda t, x: t * x, 2, 3, [1, 2, 3, 4, 5], 0.1)", "test10": "calculate_central_difference(lambda t, x: t * x**2, 1, 4, [1, 2, 3, 4, 5], 0.1)"}, "hidden_information": "def calculate_central_difference(f, t_n, x_i, x_values, delta_t):\n    if x_i < len(x_values) - 1 and x_i > 0:\n        return (f(t_n, x_values[x_i+1]) - f(t_n, x_values[x_i-1])) / (2 * delta_t)\n    else:\n        return 'Invalid x_i'"}
{"ground_truth": "def check_big_o(n, x):\n    if abs(x) <= 1:\n        return True\n    elif abs(x) > 1:\n        return False\n    else:\n        raise ValueError('Invalid input: x cannot be equal to -1 or 1')\n", "problem_description": "Design a python function to determine whether the partial sum of a geometric series is big-O of n. The function should take two arguments: the upper limit of the sum (n) and the common ratio (x). Write a function to check whether the sum from 0 to n of x^i is O(n) and return True if it is, False otherwise. I'd like the agent to figure out the exact constraints and bounds of x and n to provide the correct solution.The signature of the function is: def check_big_o(n, x)", "test_cases": {"test1": "check_big_o(100, 0.5)", "test2": "check_big_o(1000, 1.5)", "test3": "check_big_o(10, -0.8)", "test4": "check_big_o(10000, 0.9999)", "test5": "check_big_o(100000, -0.0001)", "test6": "check_big_o(1000000, 1.0001)", "test7": "check_big_o(10000000, 0.5)", "test8": "check_big_o(100000000, -1.5)", "test9": "check_big_o(1000000000, 0.99999)", "test10": "check_big_o(10000000000, 1.00001)"}, "hidden_information": "def check_big_o(n, x):\n    if abs(x) <= 1:\n        return True\n    elif abs(x) > 1:\n        return False\n    else:\n        raise ValueError('Invalid input: x cannot be equal to -1 or 1')\n"}
{"ground_truth": "def calculate_distance(a, b):\n    return (a**2 + b**2)**0.5", "problem_description": "I want you to write a python function to calculate the distance between two objects. If one object moves 6 units and the other object moves 8 units, the function should be able to calculate the distance between them. But I'm not sure what kind of triangle we're dealing with, so you need to ask me some questions to figure it out.The signature of the function is: def calculate_distance(a, b)", "test_cases": {"test1": "calculate_distance(6, 8)", "test2": "calculate_distance(3, 4)", "test3": "calculate_distance(10, 0)", "test4": "calculate_distance(0, 10)", "test5": "calculate_distance(5, 12)", "test6": "calculate_distance(8, 15)", "test7": "calculate_distance(20, 0)", "test8": "calculate_distance(0, 20)", "test9": "calculate_distance(9, 12)", "test10": "calculate_distance(7, 24)"}, "hidden_information": "def calculate_distance(a, b):\n    return (a**2 + b**2)**0.5"}
{"ground_truth": "def get_georgian_kings(start_year, end_year):\n    georgian_kings = [\n        {'name': 'Bagrat III', 'reign': (975, 1014)},\n        {'name': 'David II (Aghmashenebeli)', 'reign': (1089, 1125)},\n        {'name': 'Tamar', 'reign': (1184, 1213)},\n        {'name': 'Giorgi V', 'reign': (1314, 1346)},\n        {'name': 'Alexander I', 'reign': (1412, 1443)},\n        {'name': 'Erekle II', 'reign': (1744, 1798)},\n        {'name': 'Giorgi XII', 'reign': (1798, 1800)},\n        {'name': 'Solomon I', 'reign': (1752, 1784)},\n        {'name': 'Zviad Gamsakhurdia', 'reign': (1991, 1992)},\n        {'name': 'Eduard Shevardnadze', 'reign': (1992, 2003)},\n        {'name': 'Mikhail Saakashvili', 'reign': (2004, 2013)}\n    ]\n    kings_in_range = [king for king in georgian_kings if start_year <= king['reign'][0] and king['reign'][1] <= end_year]\n    return kings_in_range", "problem_description": "I want you to write a Python function that takes two parameters, start_year and end_year, and returns a list of Georgian kings who were reigning in that period. The function should use the data from the provided text as a reference. Make sure to include all kings mentioned in the text.The signature of the function is: def get_georgian_kings(start_year, end_year)", "test_cases": {"test1": "get_georgian_kings(1184, 1213)", "test2": "get_georgian_kings(1789, 1798)", "test3": "get_georgian_kings(1991, 1992)", "test4": "get_georgian_kings(1089, 1125)", "test5": "get_georgian_kings(1412, 1443)", "test6": "get_georgian_kings(1744, 1798)", "test7": "get_georgian_kings(1798, 1800)", "test8": "get_georgian_kings(1752, 1784)", "test9": "get_georgian_kings(2004, 2013)", "test10": "get_georgian_kings(1, 3000)"}, "hidden_information": "def get_georgian_kings(start_year, end_year):\n    georgian_kings = [\n        {'name': 'Bagrat III', 'reign': (975, 1014)},\n        {'name': 'David II (Aghmashenebeli)', 'reign': (1089, 1125)},\n        {'name': 'Tamar', 'reign': (1184, 1213)},\n        {'name': 'Giorgi V', 'reign': (1314, 1346)},\n        {'name': 'Alexander I', 'reign': (1412, 1443)},\n        {'name': 'Erekle II', 'reign': (1744, 1798)},\n        {'name': 'Giorgi XII', 'reign': (1798, 1800)},\n        {'name': 'Solomon I', 'reign': (1752, 1784)},\n        {'name': 'Zviad Gamsakhurdia', 'reign': (1991, 1992)},\n        {'name': 'Eduard Shevardnadze', 'reign': (1992, 2003)},\n        {'name': 'Mikhail Saakashvili', 'reign': (2004, 2013)}\n    ]\n    kings_in_range = [king for king in georgian_kings if start_year <= king['reign'][0] and king['reign'][1] <= end_year]\n    return kings_in_range"}
{"ground_truth": "def british_influence(creek_chiefs, revolution_year, british_defeat_year, treaty_year):\n    McGillivray_influence = False\n    if creek_chiefs == \"Alexander McGillivray\" and revolution_year < 1782 and british_defeat_year > 1782 and treaty_year > 1784:\n        McGillivray_influence = True\n    return McGillivray_influence", "problem_description": "I need a python function that determines if Alexander McGillivray had a significant influence on the Creek nation's relationship with the British, given a list of Creek chiefs, the year of the American Revolution, the year of the British military defeat, and the year the treaty was signed. Can you write a python function for me?The signature of the function is: def british_influence(creek_chiefs, revolution_year, british_defeat_year, treaty_year)", "test_cases": {"test1": "british_influence([\"Alexander McGillivray\"], 1775, 1782, 1784)", "test2": "british_influence([\"Other Chief\"], 1775, 1782, 1784)", "test3": "british_influence([\"Alexander McGillivray\"], 1775, 1772, 1784)", "test4": "british_influence([\"Alexander McGillivray\"], 1775, 1782, 1783)", "test5": "british_influence([\"Other Chief\"], 1775, 1782, 1784)", "test6": "british_influence([\"Alexander McGillivray\"], 1775, 1781, 1784)", "test7": "british_influence([\"Alexander McGillivray\"], 1775, 1782, 1785)", "test8": "british_influence([\"Other Chief\"], 1775, 1776, 1784)", "test9": "british_influence([\"Alexander McGillivray\"], 1775, 1778, 1784)", "test10": "british_influence([\"Alexander McGillivray\"], 1775, 1782, 1784)"}, "hidden_information": "def british_influence(creek_chiefs, revolution_year, british_defeat_year, treaty_year):\n    McGillivray_influence = False\n    if creek_chiefs == \"Alexander McGillivray\" and revolution_year < 1782 and british_defeat_year > 1782 and treaty_year > 1784:\n        McGillivray_influence = True\n    return McGillivray_influence"}
{"ground_truth": "def score_question_popularity(title, tags, content):\n    # Define keywords that attract attention\n    attention_keywords = ['google', 'docs', 'api', 'stackoverflow']\n    score = 0\n    if any(keyword in title.lower() for keyword in attention_keywords):\n        score += 1\n    for tag in tags:\n        if tag in attention_keywords:\n            score += 1\n    if any(keyword in content.lower() for keyword in attention_keywords):\n        score += 1\n    return score", "problem_description": "I want you to write a python function that predicts how popular a question will be on Stack Overflow based on its title, tags, and content. Can you create a function that takes these parameters and returns a score indicating how likely the question is to receive answers?The signature of the function is: def score_question_popularity(title, tags, content)", "test_cases": {"test1": "score_question_popularity('Data feed from google docs API', ['google', 'docs', 'api'], 'A question about accessing data from google docs API.')", "test2": "score_question_popularity('How to use Python', ['python', 'programming'], 'A question about learning Python.')", "test3": "score_question_popularity('jQuery selectors', ['jquery', 'javascript'], 'A question about jQuery selectors.')", "test4": "score_question_popularity('Why is my question not being answered?', ['stackoverflow'], 'A question about why the poster is not getting any answers.')", "test5": "score_question_popularity('What is the meaning of life?', ['philosophy'], 'A question about the meaning of life.')", "test6": "score_question_popularity('How to access localhost from android emulator?', ['android', 'emulator'], 'A question about accessing localhost from an android emulator.')", "test7": "score_question_popularity('How to implement a machine learning model in Python?', ['python', 'machine-learning'], 'A question about implementing machine learning in Python.')", "test8": "score_question_popularity('How to create a neural network?', ['neural-network', 'deeplearning'], 'A question about creating a neural network.')", "test9": "score_question_popularity('What is the best programming language?', ['programming'], 'A question about the best programming language.')", "test10": "score_question_popularity('How to optimize SQL queries?', ['sql', 'database'], 'A question about optimizing SQL queries.')"}, "hidden_information": "def score_question_popularity(title, tags, content):\n    # Define keywords that attract attention\n    attention_keywords = ['google', 'docs', 'api', 'stackoverflow']\n    score = 0\n    if any(keyword in title.lower() for keyword in attention_keywords):\n        score += 1\n    for tag in tags:\n        if tag in attention_keywords:\n            score += 1\n    if any(keyword in content.lower() for keyword in attention_keywords):\n        score += 1\n    return score"}
{"ground_truth": "def recommend_setup(preferred_os_family, preferred_shell, preferred_mobile_os):\n    if preferred_os_family == 'Linux' or preferred_mobile_os == 'Android' and preferred_shell == 'Gnome Shell':\n        return 'Linux with Gnome Shell'\n    elif preferred_os_family == 'Windows':\n        return 'Windows with Windows Explorer'\n    elif preferred_os_family == 'MacOS' or preferred_mobile_os == 'iOS':\n        return 'MacOS with Launchpad'\n    else:\n        return 'Unclear Preference'", "problem_description": "I want to write a small program that can suggest to users an operating system and desktop environment setup based on their preferences. The program may consider the user's operating system family preference, their preferred desktop shell, and their mobile device's operating system. Can you write a Python function to determine these recommendations?The signature of the function is: def recommend_setup(preferred_os_family, preferred_shell, preferred_mobile_os)", "test_cases": {"test1": "recommend_setup('Linux', 'Gnome Shell', 'Android')", "test2": "recommend_setup('Windows', None, 'Android')", "test3": "recommend_setup('MacOS', None, 'iOS')", "test4": "recommend_setup(None, 'Gnome Shell', 'Android')", "test5": "recommend_setup('Win', None, 'iOS')", "test6": "recommend_setup(None, None, None)", "test7": "recommend_setup('MacOS', 'Windows Explorer', 'Android')", "test8": "recommend_setup('Windows', 'Launchpad', 'iOS')", "test9": "recommend_setup('Linux', 'Launchpad', 'Android')", "test10": "recommend_setup('Windows', None, None)"}, "hidden_information": "def recommend_setup(preferred_os_family, preferred_shell, preferred_mobile_os):\n    if preferred_os_family == 'Linux' or preferred_mobile_os == 'Android' and preferred_shell == 'Gnome Shell':\n        return 'Linux with Gnome Shell'\n    elif preferred_os_family == 'Windows':\n        return 'Windows with Windows Explorer'\n    elif preferred_os_family == 'MacOS' or preferred_mobile_os == 'iOS':\n        return 'MacOS with Launchpad'\n    else:\n        return 'Unclear Preference'"}
{"ground_truth": "def calculate_tenure(start_year, end_year): return end_year - start_year", "problem_description": "I want a python function that takes in two parameters representing the years a music conductor starts and ends their term. I need the function to calculate the number of years they were with the orchestra. Can you help me write this function?The signature of the function is: def calculate_tenure(start_year, end_year)", "test_cases": {"test1": "calculate_tenure(2010, 2015)", "test2": "calculate_tenure(2000, 2001)", "test3": "calculate_tenure(1980, 1990)", "test4": "calculate_tenure(2015, 2020)", "test5": "calculate_tenure(1990, 2000)", "test6": "calculate_tenure(2020, 2025)", "test7": "calculate_tenure(1960, 1970)", "test8": "calculate_tenure(1970, 1980)", "test9": "calculate_tenure(2005, 2010)", "test10": "calculate_tenure(2012, 2013)"}, "hidden_information": "def calculate_tenure(start_year, end_year): return end_year - start_year"}
{"ground_truth": "def calculate_retirement_happiness(score_outdoors, score_community, score_finances, weights={'outdoors': 0.4, 'community': 0.3, 'finances': 0.3}): return (score_outdoors * weights['outdoors'] + score_community * weights['community'] + score_finances * weights['finances']) / sum(weights.values())", "problem_description": "I want to retire in a place where I can stay active, have a sense of community, but also be mindful of my finances. Can you write a python function that takes into account my personal preferences for outdoors, community services, and cost of living to calculate a 'retirement happiness score'? The function should be flexible to accommodate different weights for each aspect.The signature of the function is: def calculate_retirement_happiness(score_outdoors, score_community, score_finances, weights={'outdoors'", "test_cases": {"test1": "calculate_retirement_happiness(score_outdoors=8, score_community=7, score_finances=6, weights={'outdoors': 0.4, 'community': 0.3, 'finances': 0.3})", "test2": "calculate_retirement_happiness(score_outdoors=9, score_community=8, score_finances=7, weights={'outdoors': 0.5, 'community': 0.3, 'finances': 0.2})", "test3": "calculate_retirement_happiness(score_outdoors=7, score_community=9, score_finances=8, weights={'outdoors': 0.3, 'community': 0.4, 'finances': 0.3})", "test4": "calculate_retirement_happiness(score_outdoors=6, score_community=7, score_finances=9, weights={'outdoors': 0.2, 'community': 0.3, 'finances': 0.5})", "test5": "calculate_retirement_happiness(score_outdoors=8, score_community=8, score_finances=8, weights={'outdoors': 0.33, 'community': 0.33, 'finances': 0.33})", "test6": "calculate_retirement_happiness(score_outdoors=5, score_community=6, score_finances=7, weights={'outdoors': 0.4, 'community': 0.3, 'finances': 0.3})", "test7": "calculate_retirement_happiness(score_outdoors=9, score_community=9, score_finances=9, weights={'outdoors': 0.5, 'community': 0.3, 'finances': 0.2})", "test8": "calculate_retirement_happiness(score_outdoors=4, score_community=5, score_finances=6, weights={'outdoors': 0.3, 'community': 0.4, 'finances': 0.3})", "test9": "calculate_retirement_happiness(score_outdoors=7, score_community=8, score_finances=9, weights={'outdoors': 0.2, 'community': 0.3, 'finances': 0.5})", "test10": "calculate_retirement_happiness(score_outdoors=6, score_community=7, score_finances=8, weights={'outdoors': 0.4, 'community': 0.3, 'finances': 0.3})"}, "hidden_information": "def calculate_retirement_happiness(score_outdoors, score_community, score_finances, weights={'outdoors': 0.4, 'community': 0.3, 'finances': 0.3}): return (score_outdoors * weights['outdoors'] + score_community * weights['community'] + score_finances * weights['finances']) / sum(weights.values())"}
{"ground_truth": "def calculate_roi(investment_amount, annual_returns, years): return ((1 + annual_returns) ** years - 1) * investment_amount", "problem_description": "I am trying to analyze my investment portfolio. Can you write a Python function that calculates the return on investment (ROI) given the initial investment amount, annual returns as a decimal, and the number of years the investment was held?The signature of the function is: def calculate_roi(investment_amount, annual_returns, years)", "test_cases": {"test1": "calculate_roi(1000, 0.05, 5)", "test2": "calculate_roi(5000, 0.03, 10)", "test3": "calculate_roi(2000, 0.07, 3)", "test4": "calculate_roi(8000, 0.02, 8)", "test5": "calculate_roi(3000, 0.01, 12)", "test6": "calculate_roi(10000, 0.04, 6)", "test7": "calculate_roi(6000, 0.06, 4)", "test8": "calculate_roi(9000, 0.08, 9)", "test9": "calculate_roi(4000, 0.09, 11)", "test10": "calculate_roi(7000, 0.10, 7)"}, "hidden_information": "def calculate_roi(investment_amount, annual_returns, years): return ((1 + annual_returns) ** years - 1) * investment_amount"}
{"ground_truth": "def check_phyrgian_mode(scale): scale_intervals = [(scale[i]-scale[i-1]) % 12 for i in range(1, len(scale))]; return scale_intervals[-1] != 2", "problem_description": "I want a python function that determines whether a musical scale follows the rules of counterpoint in the Phrygian mode. Specifically, I want to know if the function should check for any intervals at the end of the scale.The signature of the function is: def check_phyrgian_mode(scale)", "test_cases": {"test1": "check_phyrgian_mode([60, 62, 64, 65, 67, 69, 71, 72])", "test2": "check_phyrgian_mode([60, 61, 63, 65, 67, 68, 70, 72])", "test3": "check_phyrgian_mode([60, 62, 64, 65, 67, 69, 71, 75])", "test4": "check_phyrgian_mode([69, 71, 73, 74, 76, 78, 80, 81])", "test5": "check_phyrgian_mode([69, 70, 72, 74, 76, 77, 79, 81])", "test6": "check_phyrgian_mode([60, 62, 63, 65, 67, 69, 71, 72])", "test7": "check_phyrgian_mode([60, 61, 64, 65, 67, 69, 71, 72])", "test8": "check_phyrgian_mode([69, 70, 73, 74, 76, 78, 80, 82])", "test9": "check_phyrgian_mode([69, 71, 72, 74, 76, 78, 80, 81])", "test10": "check_phyrgian_mode([60, 62, 64, 66, 67, 69, 71, 72])"}, "hidden_information": "def check_phyrgian_mode(scale): scale_intervals = [(scale[i]-scale[i-1]) % 12 for i in range(1, len(scale))]; return scale_intervals[-1] != 2"}
{"ground_truth": "def generate_userbox(id_text, id_color, id_font_color, id_font_size, info_text, info_color, info_font_color, info_font_size, border_color, border_width):\n    return f'''<table style=\"background-color: {border_color}; border: {border_width}px solid {border_color}; width: 100%\">\n        <tr>\n            <td style=\"background-color: {id_color}; font-size: {id_font_size}px; font-color: {id_font_color}\">{id_text}</td>\n        </tr>\n        <tr>\n            <td style=\"background-color: {info_color}; font-size: {info_font_size}px; font-color: {info_font_color}\">{info_text}</td>\n        </tr>\n    </table>'''", "problem_description": "I need a python function that takes in several parameters to dynamically generate an HTML template for a userbox similar to the one used on wikia, the userbox has two parts - the id section and the info section, each part should have its own background color, font color, font size and so on, can you write a python function to achieve this?The signature of the function is: def generate_userbox(id_text, id_color, id_font_color, id_font_size, info_text, info_color, info_font_color, info_font_size, border_color, border_width)", "test_cases": {"test1": "generate_userbox(\"My Userbox\", \"green\", \"white\", 16, \"Hello World\", \"blue\", \"black\", 12, \"red\", 2)", "test2": "generate_userbox(\"User123\", \"yellow\", \"black\", 14, \"This is me\", \"orange\", \"green\", 10, \"purple\", 1)", "test3": "generate_userbox(\"Admin\", \"blue\", \"white\", 18, \"Site Administrator\", \"red\", \"white\", 16, \"gray\", 3)", "test4": "generate_userbox(\"Moderator\", \"gray\", \"black\", 12, \"Forum Moderator\", \"green\", \"white\", 14, \"blue\", 2)", "test5": "generate_userbox(\"Visitor\", \"black\", \"white\", 10, \"Welcome to our site\", \"blue\", \"black\", 12, \"red\", 1)", "test6": "generate_userbox(\"Hello\", \"orange\", \"black\", 14, \"Hello World\", \"blue\", \"white\", 12, \"green\", 1)", "test7": "generate_userbox(\"User\", \"brown\", \"yellow\", 10, \"User Box\", \"gray\", \"blue\", 14, \"black\", 2)", "test8": "generate_userbox(\"Example\", \"pink\", \"white\", 16, \"Example Userbox\", \"red\", \"black\", 12, \"orange\", 2)", "test9": "generate_userbox(\"Wiki User\", \"gray\", \"blue\", 14, \"This is a wiki user\", \"green\", \"black\", 12, \"purple\", 2)", "test10": "generate_userbox(\"Guest\", \"black\", \"white\", 10, \"Visit our wiki\", \"blue\", \"red\", 16, \"green\", 1)"}, "hidden_information": "def generate_userbox(id_text, id_color, id_font_color, id_font_size, info_text, info_color, info_font_color, info_font_size, border_color, border_width):\n    return f'''<table style=\"background-color: {border_color}; border: {border_width}px solid {border_color}; width: 100%\">\n        <tr>\n            <td style=\"background-color: {id_color}; font-size: {id_font_size}px; font-color: {id_font_color}\">{id_text}</td>\n        </tr>\n        <tr>\n            <td style=\"background-color: {info_color}; font-size: {info_font_size}px; font-color: {info_font_color}\">{info_text}</td>\n        </tr>\n    </table>'''"}
{"ground_truth": "def calculate_kpis(pigs_weaned, mated_females, farrowing_rate, pigs_born_alive, stillborns, mummified_pigs):\n    pw_mf_y = pigs_weaned / mated_females\n    farrowing_rate_percentage = (farrowing_rate / 100) * pigs_born_alive\n    piglet_survival_rate = (pigs_weaned / (pigs_born_alive - stillborns - mummified_pigs)) * 100\n\n    return pw_mf_y, farrowing_rate_percentage, piglet_survival_rate", "problem_description": "Can you create a python function to calculate the key performance indicators for our pig farming system? We need to track the number of pigs weaned per mated female per year, farrowing rate, and piglet survival rate. We have data on the number of pigs weaned, mated females, farrowing rate, pigs born alive, stillborns, and mummified pigs.The signature of the function is: def calculate_kpis(pigs_weaned, mated_females, farrowing_rate, pigs_born_alive, stillborns, mummified_pigs)", "test_cases": {"test1": "calculate_kpis(2700, 100, 0.88, 2800, 50, 20)", "test2": "calculate_kpis(2500, 100, 0.85, 2600, 30, 15)", "test3": "calculate_kpis(2300, 100, 0.83, 2400, 40, 10)", "test4": "calculate_kpis(2000, 100, 0.80, 2100, 60, 25)", "test5": "calculate_kpis(2800, 120, 0.90, 3000, 20, 10)", "test6": "calculate_kpis(2600, 120, 0.88, 2800, 30, 15)", "test7": "calculate_kpis(2300, 120, 0.85, 2500, 40, 20)", "test8": "calculate_kpis(2000, 120, 0.82, 2200, 50, 25)", "test9": "calculate_kpis(2400, 100, 0.80, 2500, 35, 18)", "test10": "calculate_kpis(2900, 100, 0.92, 3100, 15, 8)"}, "hidden_information": "def calculate_kpis(pigs_weaned, mated_females, farrowing_rate, pigs_born_alive, stillborns, mummified_pigs):\n    pw_mf_y = pigs_weaned / mated_females\n    farrowing_rate_percentage = (farrowing_rate / 100) * pigs_born_alive\n    piglet_survival_rate = (pigs_weaned / (pigs_born_alive - stillborns - mummified_pigs)) * 100\n\n    return pw_mf_y, farrowing_rate_percentage, piglet_survival_rate"}
{"ground_truth": "def categorize_countries(countries, us_allies, eu_members):\n    categorized = {'US Allies': [], 'EU Members': [], 'Both': [], 'Neither': []}\n    for country in countries:\n        if country in us_allies and country in eu_members:\n            categorized['Both'].append(country)\n        elif country in us_allies:\n            categorized['US Allies'].append(country)\n        elif country in eu_members:\n            categorized['EU Members'].append(country)\n        else:\n            categorized['Neither'].append(country)\n    return categorized", "problem_description": "I want you to write a Python function that can be used to categorize countries based on their relationship with the US and the EU. I'm thinking of a function that takes in some data about countries and can group them into different categories. Can you help me with that?The signature of the function is: def categorize_countries(countries, us_allies, eu_members)", "test_cases": {"test1": "categorize_countries(['Ukraine', 'Poland', 'France', 'Russia'], ['Ukraine', 'Poland'], ['France', 'Poland'])", "test2": "categorize_countries(['Germany', 'Italy', 'Spain', 'China'], [], ['Germany', 'Italy', 'Spain'])", "test3": "categorize_countries(['US', 'Canada', 'Mexico', 'UK'], ['US', 'Canada', 'UK'], [])", "test4": "categorize_countries(['Australia', 'Japan', 'South Korea'], [], [])", "test5": "categorize_countries(['Sweden', 'Denmark', 'Norway'], [], ['Sweden', 'Denmark', 'Norway'])", "test6": "categorize_countries(['Brazil', 'Argentina', 'Chile'], [], [])", "test7": "categorize_countries(['India', 'China', 'Russia'], [], [])", "test8": "categorize_countries(['Egypt', 'South Africa', 'Nigeria'], [], [])", "test9": "categorize_countries(['Israel', 'Iran', 'Turkey'], [], [])", "test10": "categorize_countries(['Canada', 'Mexico', 'UK'], ['Canada', 'UK'], ['UK'])"}, "hidden_information": "def categorize_countries(countries, us_allies, eu_members):\n    categorized = {'US Allies': [], 'EU Members': [], 'Both': [], 'Neither': []}\n    for country in countries:\n        if country in us_allies and country in eu_members:\n            categorized['Both'].append(country)\n        elif country in us_allies:\n            categorized['US Allies'].append(country)\n        elif country in eu_members:\n            categorized['EU Members'].append(country)\n        else:\n            categorized['Neither'].append(country)\n    return categorized"}
{"ground_truth": "def calculate_alzheimers_risk(brain_insulin_levels, age, diabetes_status):\n    risk_factors = {'low_brain_insulin': 0.6, 'high_age': 0.3, 'diabetes': 0.1}\n    Alzheimer_risk = 0\n    if brain_insulin_levels < 10:\n        Alzheimer_risk += risk_factors['low_brain_insulin']\n    if age > 65:\n        Alzheimer_risk += risk_factors['high_age']\n    if diabetes_status:\n        Alzheimer_risk += risk_factors['diabetes']\n    return Alzheimer_risk", "problem_description": "Could you write a Python function to calculate the risk of Alzheimer's disease based on brain insulin levels and other factors? The function should take into account the levels of brain insulin, age, and diabetes status.The signature of the function is: def calculate_alzheimers_risk(brain_insulin_levels, age, diabetes_status)", "test_cases": {"test1": "calculate_alzheimers_risk(8, 70, True)", "test2": "calculate_alzheimers_risk(15, 40, False)", "test3": "calculate_alzheimers_risk(5, 80, True)", "test4": "calculate_alzheimers_risk(12, 50, False)", "test5": "calculate_alzheimers_risk(9, 60, True)", "test6": "calculate_alzheimers_risk(18, 30, False)", "test7": "calculate_alzheimers_risk(7, 75, True)", "test8": "calculate_alzheimers_risk(10, 45, False)", "test9": "calculate_alzheimers_risk(6, 85, True)", "test10": "calculate_alzheimers_risk(14, 55, False)"}, "hidden_information": "def calculate_alzheimers_risk(brain_insulin_levels, age, diabetes_status):\n    risk_factors = {'low_brain_insulin': 0.6, 'high_age': 0.3, 'diabetes': 0.1}\n    Alzheimer_risk = 0\n    if brain_insulin_levels < 10:\n        Alzheimer_risk += risk_factors['low_brain_insulin']\n    if age > 65:\n        Alzheimer_risk += risk_factors['high_age']\n    if diabetes_status:\n        Alzheimer_risk += risk_factors['diabetes']\n    return Alzheimer_risk"}
{"ground_truth": "def calculate_total_nominations(nominee_movies, total_nominations_per_movie): return sum(nominations for nominations in total_nominations_per_movie.values())", "problem_description": "Can you write a Python function that will calculate the total number of awards a set of movies received from a recent movie award event? I want to give you the name of the movies and their corresponding total number of nominations, and have you return the sum of all the nominations.The signature of the function is: def calculate_total_nominations(nominee_movies, total_nominations_per_movie)", "test_cases": {"test1": "calculate_total_nominations(['The Hunger Games', 'Bridesmaids'], {'The Hunger Games': 8, 'Bridesmaids': 8})", "test2": "calculate_total_nominations(['The Avengers', 'The Dark Knight'], {'The Avengers': 7, 'The Dark Knight': 5})", "test3": "calculate_total_nominations(['Inception', 'Interstellar'], {'Inception': 9, 'Interstellar': 10})", "test4": "calculate_total_nominations(['The Lord of the Rings', 'The Hobbit'], {'The Lord of the Rings': 11, 'The Hobbit': 8})", "test5": "calculate_total_nominations(['Pulp Fiction', 'The Silence of the Lambs'], {'Pulp Fiction': 7, 'The Silence of the Lambs': 8})", "test6": "calculate_total_nominations(['Forrest Gump', 'Cast Away'], {'Forrest Gump': 13, 'Cast Away': 6})", "test7": "calculate_total_nominations(['The Shawshank Redemption', 'The Godfather'], {'The Shawshank Redemption': 7, 'The Godfather': 11})", "test8": "calculate_total_nominations(['The Matrix', 'Inception'], {'The Matrix': 8, 'Inception': 9})", "test9": "calculate_total_nominations(['Star Wars', 'The Lord of the Rings'], {'Star Wars': 10, 'The Lord of the Rings': 11})", "test10": "calculate_total_nominations(['The Dark Knight', 'The Avengers'], {'The Dark Knight': 8, 'The Avengers': 9})"}, "hidden_information": "def calculate_total_nominations(nominee_movies, total_nominations_per_movie): return sum(nominations for nominations in total_nominations_per_movie.values())"}
{"ground_truth": "def days_until_hatch(total_incubation_days, current_incubation_days, eggs_count):\n    if current_incubation_days < 0 or total_incubation_days < 0 or eggs_count < 0:\n        return 'Invalid input'\n    remaining_days = total_incubation_days - current_incubation_days\n    if remaining_days <= 0:\n        return 'Eggs have already hatched'\n    return f'{remaining_days} days until {eggs_count} eggs hatch'", "problem_description": "I need a python function that calculates something about endangered eggs. I have the total number of days it takes for the eggs to hatch, and I know how many days the eggs have already been incubating. I also know the number of eggs. Can you help me create a python function that will give me the remaining days until the eggs hatch?The signature of the function is: def days_until_hatch(total_incubation_days, current_incubation_days, eggs_count)", "test_cases": {"test1": "days_until_hatch(28, 14, 5)", "test2": "days_until_hatch(28, 35, 10)", "test3": "days_until_hatch(42, 0, 3)", "test4": "days_until_hatch(21, 7, 1)", "test5": "days_until_hatch(35, 35, 4)", "test6": "days_until_hatch(14, 28, 6)", "test7": "days_until_hatch(0, 0, 8)", "test8": "days_until_hatch(-1, 21, 9)", "test9": "days_until_hatch(42, -1, 2)", "test10": "days_until_hatch(35, 14, -3)"}, "hidden_information": "def days_until_hatch(total_incubation_days, current_incubation_days, eggs_count):\n    if current_incubation_days < 0 or total_incubation_days < 0 or eggs_count < 0:\n        return 'Invalid input'\n    remaining_days = total_incubation_days - current_incubation_days\n    if remaining_days <= 0:\n        return 'Eggs have already hatched'\n    return f'{remaining_days} days until {eggs_count} eggs hatch'"}
{"ground_truth": "def filter_products(product_lines, target_price_range, brand_appeal):\n  result = {}\n  for brand, products in product_lines.items():\n    filtered_products = [product for product in products if product['price'] >= target_price_range[0] and product['price'] <= target_price_range[1] and product['brand_appeal'] == brand_appeal]\n    if filtered_products:\n      result[brand] = filtered_products\n  return result", "problem_description": "I am planning to launch some new product lines in my retail stores and I need a python function that takes as input a list of product lines, a target price range, and a brand appeal and returns the products to be introduced in the stores. The agent should interact with me to clarify what the input data should look like and what products should be filtered based on the target price range and brand appeal.The signature of the function is: def filter_products(product_lines, target_price_range, brand_appeal)", "test_cases": {"test1": "filter_products({\"Lucy Pereda\": [{'name': 'shirt', 'price': 50, 'brand_appeal': 'limited'}, {'name': 'pants', 'price': 60, 'brand_appeal': 'high'}], \"Latina Life\": [{'name': 'skirt', 'price': 40, 'brand_appeal': 'high'}, {'name': 'dress', 'price': 70, 'brand_appeal': 'limited'}]}, (36, 79), 'high')", "test2": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 20, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 30, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 40, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 50, 'brand_appeal': 'limited'}]}, (40, 60), 'high')", "test3": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 80, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 70, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 60, 'brand_appeal': 'limited'}]}, (70, 80), 'high')", "test4": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 20, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 30, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 40, 'brand_appeal': 'limited'}]}, (15, 25), 'high')", "test5": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 20, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 30, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 40, 'brand_appeal': 'limited'}]}, (15, 25), 'limited')", "test6": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 50, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 60, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 40, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 70, 'brand_appeal': 'limited'}]}, (36, 79), 'limited')", "test7": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 20, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 30, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 40, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 50, 'brand_appeal': 'limited'}]}, (40, 60), 'limited')", "test8": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 80, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 70, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 60, 'brand_appeal': 'limited'}]}, (70, 80), 'limited')", "test9": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 20, 'brand_appeal': 'limited'}], \"Brand2\": [\n\t{'name': 'product3', 'price': 30, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 40, 'brand_appeal': 'limited'}\n]}, (15, 25), 'high')", "test10": "filter_products({\"Brand1\": [{'name': 'product1', 'price': 10, 'brand_appeal': 'high'}, {'name': 'product2', 'price': 20, 'brand_appeal': 'limited'}], \"Brand2\": [{'name': 'product3', 'price': 30, 'brand_appeal': 'high'}, {'name': 'product4', 'price': 40, 'brand_appeal': 'limited'}]}, (18, 22), 'limited')"}, "hidden_information": "def filter_products(product_lines, target_price_range, brand_appeal):\n  result = {}\n  for brand, products in product_lines.items():\n    filtered_products = [product for product in products if product['price'] >= target_price_range[0] and product['price'] <= target_price_range[1] and product['brand_appeal'] == brand_appeal]\n    if filtered_products:\n      result[brand] = filtered_products\n  return result"}
{"ground_truth": "def predict_election_result(popularity, integrity, issues_connection, negativity, election_day_nearness):\n    weights = {'popularity': 0.3, 'integrity': 0.25, 'issues_connection': 0.2, 'negativity': -0.1, 'election_day_nearness': 0.05}\n    return sum([weight * value for weight, value in zip(weights.values(), [popularity, integrity, issues_connection, negativity, election_day_nearness])])", "problem_description": "I want a python function that can predict the outcome of a presidential election. It should take into account the candidate's popularity, integrity, connection to important issues, use of negativity, and the proximity to election day. Can you help me create such a function?The signature of the function is: def predict_election_result(popularity, integrity, issues_connection, negativity, election_day_nearness)", "test_cases": {"test1": "predict_election_result(0.4, 0.6, 0.7, 0.3, 0.8)", "test2": "predict_election_result(0.7, 0.4, 0.3, 0.9, 0.9)", "test3": "predict_election_result(0.9, 0.9, 0.9, 0.1, 0.1)", "test4": "predict_election_result(0.1, 0.1, 0.1, 0.9, 0.9)", "test5": "predict_election_result(0.5, 0.5, 0.5, 0.5, 0.5)", "test6": "predict_election_result(0.3, 0.7, 0.6, 0.2, 0.4)", "test7": "predict_election_result(0.8, 0.2, 0.1, 0.7, 0.5)", "test8": "predict_election_result(0.6, 0.8, 0.9, 0.3, 0.7)", "test9": "predict_election_result(0.2, 0.3, 0.4, 0.6, 0.8)", "test10": "predict_election_result(0.4, 0.5, 0.6, 0.7, 0.8)"}, "hidden_information": "def predict_election_result(popularity, integrity, issues_connection, negativity, election_day_nearness):\n    weights = {'popularity': 0.3, 'integrity': 0.25, 'issues_connection': 0.2, 'negativity': -0.1, 'election_day_nearness': 0.05}\n    return sum([weight * value for weight, value in zip(weights.values(), [popularity, integrity, issues_connection, negativity, election_day_nearness])])"}
{"ground_truth": "def calculate_casualties(protest_days, protest_deaths, protest_injuries):\n    total_casualties = protest_days * (protest_deaths + protest_injuries)\n    return total_casualties", "problem_description": "I want the agent to write a Python function that can help me estimate the total casualties based on the number of days of protests and the average number of deaths and injuries per day. The function should be able to calculate the total casualties for a given period.The signature of the function is: def calculate_casualties(protest_days, protest_deaths, protest_injuries)", "test_cases": {"test1": "calculate_casualties(10, 2, 5)", "test2": "calculate_casualties(20, 1, 10)", "test3": "calculate_casualties(5, 3, 8)", "test4": "calculate_casualties(15, 2, 6)", "test5": "calculate_casualties(25, 1, 4)", "test6": "calculate_casualties(8, 3, 9)", "test7": "calculate_casualties(12, 2, 7)", "test8": "calculate_casualties(20, 3, 10)", "test9": "calculate_casualties(10, 1, 6)", "test10": "calculate_casualties(18, 2, 9)"}, "hidden_information": "def calculate_casualties(protest_days, protest_deaths, protest_injuries):\n    total_casualties = protest_days * (protest_deaths + protest_injuries)\n    return total_casualties"}
{"ground_truth": "def calculate_cloud_formation_rate(cosmic_ray_intensity, solar_activity, temperature):\n    # Constants based on CERN experiment\n    cloud_seeds_enhancement = 10\n    solar_activity_influence = 0.5\n    temperature_influence = 0.2\n    # Calculate cloud formation rate\n    cloud_formation_rate = cosmic_ray_intensity * cloud_seeds_enhancement * (1 + solar_activity_influence * solar_activity) * (1 + temperature_influence * temperature)\n    return cloud_formation_rate", "problem_description": "I want you to write a Python function that calculates the cloud formation rate based on the intensity of cosmic rays. I've read about a study where scientists at CERN shot simulated cosmic rays into a cloud chamber to measure their impact on cloud formation. Can you write a function that takes into account the relationship between cosmic rays, solar activity, and cloud cover?The signature of the function is: def calculate_cloud_formation_rate(cosmic_ray_intensity, solar_activity, temperature)", "test_cases": {"test1": "calculate_cloud_formation_rate(10, 0.5, 20)", "test2": "calculate_cloud_formation_rate(20, 0.8, 10)", "test3": "calculate_cloud_formation_rate(5, 0.2, 30)", "test4": "calculate_cloud_formation_rate(15, 0.6, 25)", "test5": "calculate_cloud_formation_rate(8, 0.4, 22)", "test6": "calculate_cloud_formation_rate(12, 0.9, 18)", "test7": "calculate_cloud_formation_rate(18, 0.7, 28)", "test8": "calculate_cloud_formation_rate(6, 0.3, 32)", "test9": "calculate_cloud_formation_rate(9, 0.5, 24)", "test10": "calculate_cloud_formation_rate(11, 0.6, 26)"}, "hidden_information": "def calculate_cloud_formation_rate(cosmic_ray_intensity, solar_activity, temperature):\n    # Constants based on CERN experiment\n    cloud_seeds_enhancement = 10\n    solar_activity_influence = 0.5\n    temperature_influence = 0.2\n    # Calculate cloud formation rate\n    cloud_formation_rate = cosmic_ray_intensity * cloud_seeds_enhancement * (1 + solar_activity_influence * solar_activity) * (1 + temperature_influence * temperature)\n    return cloud_formation_rate"}
{"ground_truth": "def calculate_win_probability(current_score, time_left, home_team_stats, away_team_stats):\n    if time_left > 80 and home_team_stats[\"comeback_ability\"] > away_team_stats[\"defensive_strength\"]:\n        return 0.5\n    elif time_left <= 80 and current_score[0] > current_score[1] and home_team_stats[\"maintaining_lead\"] > away_team_stats[\"comeback_ability\"]:\n        return 0.8\n    elif time_left <= 80 and current_score[1] > current_score[0] and away_team_stats[\"maintaining_lead\"] > home_team_stats[\"comeback_ability\"]:\n        return 0.2\n    else:\n        return 0.4", "problem_description": "Can you write a Python function that takes into account the strengths and weaknesses of different football teams when it comes to winning games and calculates the probability of a team winning given the current score and time left in the game?The signature of the function is: def calculate_win_probability(current_score, time_left, home_team_stats, away_team_stats)", "test_cases": {"test1": "calculate_win_probability([1, 1], 85, {\"comeback_ability\": 0.8, \"defensive_strength\": 0.7, \"maintaining_lead\": 0.9}, {\"comeback_ability\": 0.5, \"defensive_strength\": 0.6, \"maintaining_lead\": 0.8})", "test2": "calculate_win_probability([2, 1], 80, {\"comeback_ability\": 0.4, \"defensive_strength\": 0.9, \"maintaining_lead\": 0.85}, {\"comeback_ability\": 0.6, \"defensive_strength\": 0.5, \"maintaining_lead\": 0.7})", "test3": "calculate_win_probability([1, 3], 88, {\"comeback_ability\": 0.6, \"defensive_strength\": 0.7, \"maintaining_lead\": 0.8}, {\"comeback_ability\": 0.8, \"defensive_strength\": 0.9, \"maintaining_lead\": 0.95})", "test4": "calculate_win_probability([0, 0], 80, {\"comeback_ability\": 0.5, \"defensive_strength\": 0.6, \"maintaining_lead\": 0.7}, {\"comeback_ability\": 0.5, \"defensive_strength\": 0.6, \"maintaining_lead\": 0.7})", "test5": "calculate_win_probability([2, 2], 85, {\"comeback_ability\": 0.7, \"defensive_strength\": 0.8, \"maintaining_lead\": 0.9}, {\"comeback_ability\": 0.7, \"defensive_strength\": 0.8, \"maintaining_lead\": 0.9})", "test6": "calculate_win_probability([1, 1], 80, {\"comeback_ability\": 0.6, \"defensive_strength\": 0.7, \"maintaining_lead\": 0.8}, {\"comeback_ability\": 0.8, \"defensive_strength\": 0.9, \"maintaining_lead\": 0.95})", "test7": "calculate_win_probability([3, 2], 88, {\"comeback_ability\": 0.8, \"defensive_strength\": 0.9, \"maintaining_lead\": 0.95}, {\"comeback_ability\": 0.4, \"defensive_strength\": 0.7, \"maintaining_lead\": 0.8})", "test8": "calculate_win_probability([2, 2], 85, {\"comeback_ability\": 0.7, \"defensive_strength\": 0.8, \"maintaining_lead\": 0.9}, {\"comeback_ability\": 0.7, \"defensive_strength\": 0.8, \"maintaining_lead\": 0.9})", "test9": "calculate_win_probability([1, 3], 80, {\"comeback_ability\": 0.6, \"defensive_strength\": 0.7, \"maintaining_lead\": 0.8}, {\"comeback_ability\": 0.8, \"defensive_strength\": 0.9, \"maintaining_lead\": 0.95})", "test10": "calculate_win_probability([0, 0], 88, {\"comeback_ability\": 0.5, \"defensive_strength\": 0.6, \"maintaining_lead\": 0.7}, {\"comeback_ability\": 0.5, \"defensive_strength\": 0.6, \"maintaining_lead\": 0.7})"}, "hidden_information": "def calculate_win_probability(current_score, time_left, home_team_stats, away_team_stats):\n    if time_left > 80 and home_team_stats[\"comeback_ability\"] > away_team_stats[\"defensive_strength\"]:\n        return 0.5\n    elif time_left <= 80 and current_score[0] > current_score[1] and home_team_stats[\"maintaining_lead\"] > away_team_stats[\"comeback_ability\"]:\n        return 0.8\n    elif time_left <= 80 and current_score[1] > current_score[0] and away_team_stats[\"maintaining_lead\"] > home_team_stats[\"comeback_ability\"]:\n        return 0.2\n    else:\n        return 0.4"}
{"ground_truth": "def calculate_rice_imports(production, consumption, global_price, chinese_price):\n    if chinese_price > global_price:\n        return consumption - production\n    else:\n        return 0", "problem_description": "I need a python function that calculates China's rice imports based on its production, consumption, global rice price, and Chinese domestic rice price. I don't know the specifics of how these factors influence rice imports, so can you help me come up with a function that takes these parameters into account and returns the calculated imports?The signature of the function is: def calculate_rice_imports(production, consumption, global_price, chinese_price)", "test_cases": {"test1": "calculate_rice_imports(1000000, 1200000, 400, 600)", "test2": "calculate_rice_imports(1100000, 1000000, 550, 450)", "test3": "calculate_rice_imports(1300000, 1400000, 500, 700)", "test4": "calculate_rice_imports(1200000, 1100000, 450, 350)", "test5": "calculate_rice_imports(1150000, 1250000, 480, 580)", "test6": "calculate_rice_imports(1250000, 1150000, 520, 420)", "test7": "calculate_rice_imports(1050000, 1350000, 400, 700)", "test8": "calculate_rice_imports(1350000, 1050000, 550, 450)", "test9": "calculate_rice_imports(1200000, 1200000, 500, 500)", "test10": "calculate_rice_imports(1100000, 1300000, 450, 650)"}, "hidden_information": "def calculate_rice_imports(production, consumption, global_price, chinese_price):\n    if chinese_price > global_price:\n        return consumption - production\n    else:\n        return 0"}
{"ground_truth": "def analyze_hif1_effects(cell_type, hif1_expression, il10_production, immune_response):\n    if cell_type == 'macrophage' and hif1_expression > 0.5 and il10_production > 100:\n        return 'Hif1 has an anti-inflammatory role'\n    elif cell_type == 'dendritic cell' and hif1_expression < 0.5 and immune_response == 'Th2':\n        return 'Hif1 has a pro-inflammatory role'\n    else:\n        return 'No clear effect of Hif1 on immune response'", "problem_description": "I need a Python function to analyze the effects of Hif1 on immune responses in different cell types. The function should take into account the type of cell, the level of Hif1 expression, and the level of IL-10 production to determine whether Hif1 has an anti-inflammatory or pro-inflammatory role. Can you write a function that does this?The signature of the function is: def analyze_hif1_effects(cell_type, hif1_expression, il10_production, immune_response)", "test_cases": {"test1": "analyze_hif1_effects('macrophage', 0.6, 150, 'unknown')", "test2": "analyze_hif1_effects('dendritic cell', 0.3, 50, 'Th2')", "test3": "analyze_hif1_effects('macrophage', 0.4, 100, 'Th1')", "test4": "analyze_hif1_effects('dendritic cell', 0.7, 200, 'unknown')", "test5": "analyze_hif1_effects('macrophage', 0.5, 50, 'Th2')", "test6": "analyze_hif1_effects('dendritic cell', 0.2, 150, 'Th1')", "test7": "analyze_hif1_effects('macrophage', 0.8, 250, 'unknown')", "test8": "analyze_hif1_effects('dendritic cell', 0.1, 100, 'Th2')", "test9": "analyze_hif1_effects('macrophage', 0.9, 300, 'Th1')", "test10": "analyze_hif1_effects('dendritic cell', 0.6, 200, 'unknown')"}, "hidden_information": "def analyze_hif1_effects(cell_type, hif1_expression, il10_production, immune_response):\n    if cell_type == 'macrophage' and hif1_expression > 0.5 and il10_production > 100:\n        return 'Hif1 has an anti-inflammatory role'\n    elif cell_type == 'dendritic cell' and hif1_expression < 0.5 and immune_response == 'Th2':\n        return 'Hif1 has a pro-inflammatory role'\n    else:\n        return 'No clear effect of Hif1 on immune response'"}
{"ground_truth": "def create_color_profile(calibration_data, monitor_name): \n    profile = {}\n    for color, readings in calibration_data.items():\n        profile[color] = {'monitor_name': monitor_name, 'total_system': readings['total_system'], 'video_drivers': readings['video_drivers'], 'monitor_quirks': readings['monitor_quirks']}\n    return profile", "problem_description": "Can you write a Python function that simulates the process of creating a color profile for a monitor based on some data? I know it has something to do with calibration, but I'm not really sure how it works.The signature of the function is: def create_color_profile(calibration_data, monitor_name)", "test_cases": {"test1": "create_color_profile({ 'red': {'total_system': '1.2', 'video_drivers': '1', 'monitor_quirks': '0.1'} }, 'Dell U2419')", "test2": "create_color_profile({ 'blue': {'total_system': '1.5', 'video_drivers': '1.2', 'monitor_quirks': '0.3'}, 'green': {'total_system': '1.8', 'video_drivers': '1.5', 'monitor_quirks': '0.5'} }, 'ASUS VG248QE')", "test3": "create_color_profile({ 'red': {'total_system': '1.1', 'video_drivers': '1', 'monitor_quirks': '0'}, 'blue': {'total_system': '1.4', 'video_drivers': '1.1', 'monitor_quirks': '0.2'} }, 'BenQ GL2580H')", "test4": "create_color_profile({ 'green': {'total_system': '1.6', 'video_drivers': '1.2', 'monitor_quirks': '0.3'} }, 'ViewSonic VA2446M-LED')", "test5": "create_color_profile({ 'yellow': {'total_system': '1.9', 'video_drivers': '1.3', 'monitor_quirks': '0.6'}, 'purple': {'total_system': '1.1', 'video_drivers': '1', 'monitor_quirks': '0'} }, 'Acer KG251Q')", "test6": "create_color_profile({ 'red': {'total_system': '1.3', 'video_drivers': '1.4', 'monitor_quirks': '0'}, 'blue': {'total_system': '1.8', 'video_drivers': '1.1', 'monitor_quirks': '0.9'}, 'green': {'total_system': '1.6', 'video_drivers': '1.2', 'monitor_quirks': '0.8'} }, 'HP Pavilion 22cwa')", "test7": "create_color_profile({ 'green': {'total_system': '1.7', 'video_drivers': '1.8', 'monitor_quirks': '0.2'} }, 'LG 24MP59G-P')", "test8": "create_color_profile({ 'red': {'total_system': '1.4', 'video_drivers': '1.6', 'monitor_quirks': '0.5'}, 'yellow': {'total_system': '1.6', 'video_drivers': '1.6', 'monitor_quirks': '0.5'} }, 'AOC i1601FWUX')", "test9": "create_color_profile({ 'blue': {'total_system': '1.9', 'video_drivers': '1.7', 'monitor_quirks': '0'}, 'purple': {'total_system': '1.2', 'video_drivers': '1', 'monitor_quirks': '0'} }, 'Dell U2518D')", "test10": "create_color_profile({ 'green': {'total_system': '1.8', 'video_drivers': '1.1', 'monitor_quirks': '0.4'}, 'yellow': {'total_system': '1.4', 'video_drivers': '1.3', 'monitor_quirks': '0.4'}, 'purple': {'total_system': '1.1', 'video_drivers': '1', 'monitor_quirks': '0.5'} }, 'ASUS VG278Q')"}, "hidden_information": "def create_color_profile(calibration_data, monitor_name): \n    profile = {}\n    for color, readings in calibration_data.items():\n        profile[color] = {'monitor_name': monitor_name, 'total_system': readings['total_system'], 'video_drivers': readings['video_drivers'], 'monitor_quirks': readings['monitor_quirks']}\n    return profile"}
{"ground_truth": "def minimize_camera_shake(use_mirror_lockup, use_delay, turn_off_is, tripod_type):\n    if use_mirror_lockup and use_delay and turn_off_is and tripod_type == 'sturdy':\n        return True\n    else:\n        return False", "problem_description": "I'm experiencing camera shake in my panoramic HDR photography setup using a mirror ball mounted on a tripod. I'm using mirror lock-up and a 2-second delay, but I'm still getting blurry images. I've checked that the tripod is sturdy and I'm not touching the camera or tripod during exposure. Can you help me identify the cause and propose a solution? Can you write a python function that suggests the optimal approach to eliminate camera shake?The signature of the function is: def minimize_camera_shake(use_mirror_lockup, use_delay, turn_off_is, tripod_type)", "test_cases": {"test1": "minimize_camera_shake(True, True, False, 'sturdy')", "test2": "minimize_camera_shake(True, True, True, 'sturdy')", "test3": "minimize_camera_shake(True, False, True, 'sturdy')", "test4": "minimize_camera_shake(False, True, True, 'sturdy')", "test5": "minimize_camera_shake(True, True, True, 'flimsy')", "test6": "minimize_camera_shake(True, True, False, 'flimsy')", "test7": "minimize_camera_shake(False, True, True, 'flimsy')", "test8": "minimize_camera_shake(True, False, True, 'flimsy')", "test9": "minimize_camera_shake(True, True, True, 'sturdy')", "test10": "minimize_camera_shake(False, False, False, 'sturdy')"}, "hidden_information": "def minimize_camera_shake(use_mirror_lockup, use_delay, turn_off_is, tripod_type):\n    if use_mirror_lockup and use_delay and turn_off_is and tripod_type == 'sturdy':\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_lagrangian(rest_energy, gamma):\n    return -rest_energy / gamma", "problem_description": "Can you write me a python function to calculate the Lagrangian for a relativistic free point particle? I want to provide the rest energy and the Lorentz factor, but I'm not sure what the exact equation looks like.The signature of the function is: def calculate_lagrangian(rest_energy, gamma)", "test_cases": {"test1": "calculate_lagrangian(100, 1.05)", "test2": "calculate_lagrangian(1000, 10.2)", "test3": "calculate_lagrangian(500, 1.01)", "test4": "calculate_lagrangian(2000, 5.2)", "test5": "calculate_lagrangian(800, 2.1)", "test6": "calculate_lagrangian(1200, 3.05)", "test7": "calculate_lagrangian(1800, 4.15)", "test8": "calculate_lagrangian(2500, 6.1)", "test9": "calculate_lagrangian(3000, 7.2)", "test10": "calculate_lagrangian(3500, 8.3)"}, "hidden_information": "def calculate_lagrangian(rest_energy, gamma):\n    return -rest_energy / gamma"}
{"ground_truth": "def calculate_radiation_exposure(distance, source_intensity, detector_sensitivity): return (source_intensity * detector_sensitivity) / (distance ** 2)", "problem_description": "Can you write a Python function to help me calculate radiation exposure from gamma-ray sources? I'm not sure what kind of input parameters it needs or what kind of radiation is involved.The signature of the function is: def calculate_radiation_exposure(distance, source_intensity, detector_sensitivity)", "test_cases": {"test1": "calculate_radiation_exposure(1.0, 100.0, 0.5)", "test2": "calculate_radiation_exposure(2.0, 50.0, 0.25)", "test3": "calculate_radiation_exposure(0.5, 200.0, 0.75)", "test4": "calculate_radiation_exposure(4.0, 75.0, 0.125)", "test5": "calculate_radiation_exposure(3.0, 125.0, 0.33)", "test6": "calculate_radiation_exposure(1.5, 150.0, 0.67)", "test7": "calculate_radiation_exposure(0.1, 250.0, 0.9)", "test8": "calculate_radiation_exposure(0.05, 300.0, 0.83)", "test9": "calculate_radiation_exposure(2.5, 175.0, 0.4)", "test10": "calculate_radiation_exposure(0.25, 225.0, 0.55)"}, "hidden_information": "def calculate_radiation_exposure(distance, source_intensity, detector_sensitivity): return (source_intensity * detector_sensitivity) / (distance ** 2)"}
{"ground_truth": "def calculate_batting_average(hits, at_bats):\n    if at_bats == 0:\n        return 0\n    else:\n        return hits / at_bats", "problem_description": "I want you to write a python function that can calculate a baseball player's performance. I'm not sure how to define it but I have a bunch of stats for some players such as number of hits and at-bats. Can you derive a function from this?The signature of the function is: def calculate_batting_average(hits, at_bats)", "test_cases": {"test1": "calculate_batting_average(3, 4)", "test2": "calculate_batting_average(10, 20)", "test3": "calculate_batting_average(0, 10)", "test4": "calculate_batting_average(5, 5)", "test5": "calculate_batting_average(7, 8)", "test6": "calculate_batting_average(1, 3)", "test7": "calculate_batting_average(9, 10)", "test8": "calculate_batting_average(2, 5)", "test9": "calculate_batting_average(6, 6)", "test10": "calculate_batting_average(0, 0)"}, "hidden_information": "def calculate_batting_average(hits, at_bats):\n    if at_bats == 0:\n        return 0\n    else:\n        return hits / at_bats"}
{"ground_truth": "def calculate_interest(principal, interest_rate, time, compounding_freq='annual', interest_type='compound'):\n    if compounding_freq == 'monthly':\n        monthly_rate = interest_rate / 100 / 12\n        periods = time * 12\n    else:\n        monthly_rate = interest_rate / 100\n        periods = time\n    if interest_type == 'simple':\n        return principal * (1 + monthly_rate * periods)\n    else:\n        return principal * (1 + monthly_rate) ** periods", "problem_description": "I'm trying to create a program that calculates interest on loans and investments. Can you write a Python function that takes the principal balance, an interest rate, and a time period as inputs and returns the interest accrued? I'm not sure how to handle different compounding frequencies or whether the interest rate is monthly or annually.The signature of the function is: def calculate_interest(principal, interest_rate, time, compounding_freq='annual', interest_type='compound')", "test_cases": {"test1": "calculate_interest(1000, 5, 1, 'annual', 'simple')", "test2": "calculate_interest(1000, 5, 1, 'monthly', 'simple')", "test3": "calculate_interest(1000, 5, 1, 'annual', 'compound')", "test4": "calculate_interest(1000, 5, 1, 'monthly', 'compound')", "test5": "calculate_interest(1000, 10, 2, 'annual', 'simple')", "test6": "calculate_interest(1000, 10, 2, 'monthly', 'simple')", "test7": "calculate_interest(1000, 10, 2, 'annual', 'compound')", "test8": "calculate_interest(1000, 10, 2, 'monthly', 'compound')", "test9": "calculate_interest(500, 3, 3, 'annual', 'simple')", "test10": "calculate_interest(500, 3, 3, 'monthly', 'compound')"}, "hidden_information": "def calculate_interest(principal, interest_rate, time, compounding_freq='annual', interest_type='compound'):\n    if compounding_freq == 'monthly':\n        monthly_rate = interest_rate / 100 / 12\n        periods = time * 12\n    else:\n        monthly_rate = interest_rate / 100\n        periods = time\n    if interest_type == 'simple':\n        return principal * (1 + monthly_rate * periods)\n    else:\n        return principal * (1 + monthly_rate) ** periods"}
{"ground_truth": "def categorize_experienced_developers(years_of_experience):\n    if years_of_experience < 3:\n        return 'junior'\n    elif 3 <= years_of_experience <= 7:\n        return 'mid-level'\n    else:\n        return 'senior'", "problem_description": "Write a Python function that determines the experience level of a web developer like me based on their years of experience. The function should be named categorize_experienced_developers and it should take one argument, the number of years the developer has been working in the field.The signature of the function is: def categorize_experienced_developers(years_of_experience)", "test_cases": {"test1": "categorize_experienced_developers(1)", "test2": "categorize_experienced_developers(5)", "test3": "categorize_experienced_developers(10)", "test4": "categorize_experienced_developers(20)", "test5": "categorize_experienced_developers(3)", "test6": "categorize_experienced_developers(2)", "test7": "categorize_experienced_developers(8)", "test8": "categorize_experienced_developers(12)", "test9": "categorize_experienced_developers(25)", "test10": "categorize_experienced_developers(6)"}, "hidden_information": "def categorize_experienced_developers(years_of_experience):\n    if years_of_experience < 3:\n        return 'junior'\n    elif 3 <= years_of_experience <= 7:\n        return 'mid-level'\n    else:\n        return 'senior'"}
{"ground_truth": "def classify_limiter(action_description): \n\tstupid_actions = ['locked herself out of the house and had the keys in her pocket the whole time', \n\t\t\t\t\t\t\t 'left the stove on for 24 hours', 'forgotten their homework multiple times', \n\t\t\t\t\t\t\t 'left their phone in the wash', 'could not solve a simple puzzle after 3 tries']\n\taction_lower = action_description.lower()\n\tif action_lower in stupid_actions:\n\t\treturn 'limiter'\n\telse:\n\t\treturn 'not a limiter'", "problem_description": "Hey agent, I need you to write a python function that can classify if someone did something stupid. Essentially, if I pass a string that contains a description of a certain action, I want you to tell me if this is something that a person with 'limited intelligence' would do, or not. Let's just call it 'limiter'. Can you write a function and tell me what parameters it would take?The signature of the function is: def classify_limiter(action_description)", "test_cases": {"test1": "classify_limiter('locked herself out of the house and had the keys in her pocket the whole time')", "test2": "classify_limiter('solved world hunger')", "test3": "classify_limiter('left the stove on for 24 hours')", "test4": "classify_limiter('run a marathon in 2 hours')", "test5": "classify_limiter('forgotten their homework multiple times')", "test6": "classify_limiter('solved a simple puzzle after 10 tries')", "test7": "classify_limiter('left their phone in the wash')", "test8": "classify_limiter('made a new invention')", "test9": "classify_limiter('won a chess tournament')", "test10": "classify_limiter('could not solve a simple puzzle after 3 tries')"}, "hidden_information": "def classify_limiter(action_description): \n\tstupid_actions = ['locked herself out of the house and had the keys in her pocket the whole time', \n\t\t\t\t\t\t\t 'left the stove on for 24 hours', 'forgotten their homework multiple times', \n\t\t\t\t\t\t\t 'left their phone in the wash', 'could not solve a simple puzzle after 3 tries']\n\taction_lower = action_description.lower()\n\tif action_lower in stupid_actions:\n\t\treturn 'limiter'\n\telse:\n\t\treturn 'not a limiter'"}
{"ground_truth": "def is_srranger(friend_interactions, threshold=0.5):\n    if len(friend_interactions) == 0:\n        return False\n    proportion_alone = sum(1 for interaction in friend_interactions if interaction['with_friend'] == False) / len(friend_interactions)\n    return proportion_alone > threshold", "problem_description": "Hey, I need a Python function to determine if someone is acting like a 'srranger' or not based on their interactions with friends. Can you write a function that takes in a list of interactions and outputs True if the person is a 'srranger' and False otherwise? The function should also consider some threshold value that determines when someone is considered a 'srranger'.The signature of the function is: def is_srranger(friend_interactions, threshold=0.5)", "test_cases": {"test1": "is_srranger([{'with_friend': True, 'duration': 30}, {'with_friend': False, 'duration': 60}], threshold=0.5)", "test2": "is_srranger([{'with_friend': True, 'duration': 60}, {'with_friend': True, 'duration': 30}])", "test3": "is_srranger([{'with_friend': False, 'duration': 30}, {'with_friend': False, 'duration': 60}, {'with_friend': True, 'duration': 30}])", "test4": "is_srranger([], threshold=0.7)", "test5": "is_srranger([{'with_friend': True, 'duration': 10}, {'with_friend': False, 'duration': 20}, {'with_friend': False, 'duration': 30}])", "test6": "is_srranger([{'with_friend': True, 'duration': 30}, {'with_friend': False, 'duration': 10}, {'with_friend': True, 'duration': 60}])", "test7": "is_srranger([{'with_friend': False, 'duration': 60}, {'with_friend': False, 'duration': 30}])", "test8": "is_srranger([{'with_friend': True, 'duration': 20}, {'with_friend': True, 'duration': 40}])", "test9": "is_srranger([{'with_friend': False, 'duration': 30}, {'with_friend': True, 'duration': 60}])", "test10": "is_srranger([{'with_friend': False, 'duration': 10}, {'with_friend': False, 'duration': 20}, {'with_friend': False, 'duration': 30}])"}, "hidden_information": "def is_srranger(friend_interactions, threshold=0.5):\n    if len(friend_interactions) == 0:\n        return False\n    proportion_alone = sum(1 for interaction in friend_interactions if interaction['with_friend'] == False) / len(friend_interactions)\n    return proportion_alone > threshold"}
{"ground_truth": "def calculate_economic_specialization(south_export, west_grains, east_manufacturing):\n    return {'South': south_export, 'West': west_grains, 'East': east_manufacturing}", "problem_description": "Write a python function to calculate the economic specialization of different regions of the US in the 19th century based on their export, grain production, and manufacturing. The function should take these values as input and return a dictionary showing the specialization of each region.The signature of the function is: def calculate_economic_specialization(south_export, west_grains, east_manufacturing)", "test_cases": {"test1": "calculate_economic_specialization('cotton', 'wheat', 'textiles')", "test2": "calculate_economic_specialization('tobacco', 'corn', 'machinery')", "test3": "calculate_economic_specialization('sugar', 'soybeans', 'automobiles')", "test4": "calculate_economic_specialization('fruit', 'barley', 'steel')", "test5": "calculate_economic_specialization('vegetables', 'oats', 'electronics')", "test6": "calculate_economic_specialization('nuts', 'rice', 'pharmaceuticals')", "test7": "calculate_economic_specialization('seeds', 'sorghum', 'aerospace')", "test8": "calculate_economic_specialization('flowers', 'hops', 'biotechnology')", "test9": "calculate_economic_specialization('grains', 'tobacco', 'nanotechnology')", "test10": "calculate_economic_specialization('livestock', 'cotton', 'renewable energy')"}, "hidden_information": "def calculate_economic_specialization(south_export, west_grains, east_manufacturing):\n    return {'South': south_export, 'West': west_grains, 'East': east_manufacturing}"}
{"ground_truth": "def calculate_max_growth_rate(primary_growth_rate, secondary_growth_rate, years_grown):\n    if years_grown <= 1:\n        return primary_growth_rate\n    else:\n        return primary_growth_rate + (secondary_growth_rate * (years_grown - 1))", "problem_description": "I need you to write a Python function that calculates the maximum growth rate of a plant. I have some ideas about how it should work, but I'll need your help to get the details right. Can you work with me to figure out what inputs the function should take and how it should calculate the maximum growth rate?The signature of the function is: def calculate_max_growth_rate(primary_growth_rate, secondary_growth_rate, years_grown)", "test_cases": {"test1": "calculate_max_growth_rate(5, 2, 1)", "test2": "calculate_max_growth_rate(10, 3, 2)", "test3": "calculate_max_growth_rate(8, 1, 5)", "test4": "calculate_max_growth_rate(4, 2, 0)", "test5": "calculate_max_growth_rate(7, 3, 3)", "test6": "calculate_max_growth_rate(9, 1, 4)", "test7": "calculate_max_growth_rate(6, 4, 2)", "test8": "calculate_max_growth_rate(5, 3, 1)", "test9": "calculate_max_growth_rate(8, 2, 3)", "test10": "calculate_max_growth_rate(10, 1, 5)"}, "hidden_information": "def calculate_max_growth_rate(primary_growth_rate, secondary_growth_rate, years_grown):\n    if years_grown <= 1:\n        return primary_growth_rate\n    else:\n        return primary_growth_rate + (secondary_growth_rate * (years_grown - 1))"}
{"ground_truth": "def is_model(person): \n  return person.get('knows_themselves') == False and person.get('behavior') == 'good' and person.get('leadership') == 'master' and person.get('communication') == 'quiet' and person.get('investment') == 'wholly' and person.get('impact') == 'legacy'", "problem_description": "Can you write a Python function to determine if someone is a model, whatever that means? I want to give you some characteristics about a person and you can decide whether they are a model or not.The signature of the function is: def is_model(person)", "test_cases": {"test1": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'legacy'})", "test2": "is_model({'knows_themselves': True, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'legacy'})", "test3": "is_model({'knows_themselves': False, 'behavior': 'bad', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'legacy'})", "test4": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'apprentice', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'legacy'})", "test5": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'loud', 'investment': 'wholly', 'impact': 'legacy'})", "test6": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'partially', 'impact': 'legacy'})", "test7": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'none'})", "test8": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': 'legacy', 'extra': 'extra'})", "test9": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': ''})", "test10": "is_model({'knows_themselves': False, 'behavior': 'good', 'leadership': 'master', 'communication': 'quiet', 'investment': 'wholly', 'impact': ' legacy'})"}, "hidden_information": "def is_model(person): \n  return person.get('knows_themselves') == False and person.get('behavior') == 'good' and person.get('leadership') == 'master' and person.get('communication') == 'quiet' and person.get('investment') == 'wholly' and person.get('impact') == 'legacy'"}
{"ground_truth": "def get_ideal_rpg_system(preferred_game_length, preferred_game_style, preferred_game_complexity):\n    if preferred_game_length == 'short' and preferred_game_style == 'fast-paced' and preferred_game_complexity == 'low':\n        return 'Savage Worlds'\n    elif preferred_game_length == 'short' and preferred_game_style == 'strategic' and preferred_game_complexity == 'medium':\n        return 'Dungeon World'\n    elif preferred_game_length == 'long' and preferred_game_style == 'immersive' and preferred_game_complexity == 'high':\n        return 'D&D 4E'\n    else:\n        return 'Mouse Guard'", "problem_description": "I want to start a lunchtime RPG game with my coworkers, but I'm not sure which system would be best for us. Can you write a python function that takes our preferences and recommends an ideal RPG system for us to play?The signature of the function is: def get_ideal_rpg_system(preferred_game_length, preferred_game_style, preferred_game_complexity)", "test_cases": {"test1": "get_ideal_rpg_system('short', 'fast-paced', 'low')", "test2": "get_ideal_rpg_system('short', 'strategic', 'medium')", "test3": "get_ideal_rpg_system('long', 'immersive', 'high')", "test4": "get_ideal_rpg_system('medium', 'fast-paced', 'medium')", "test5": "get_ideal_rpg_system('medium', 'strategic', 'low')", "test6": "get_ideal_rpg_system('short', 'immersive', 'high')", "test7": "get_ideal_rpg_system('long', 'fast-paced', 'low')", "test8": "get_ideal_rpg_system('long', 'strategic', 'medium')", "test9": "get_ideal_rpg_system('short', 'strategic', 'high')", "test10": "get_ideal_rpg_system('medium', 'immersive', 'medium')"}, "hidden_information": "def get_ideal_rpg_system(preferred_game_length, preferred_game_style, preferred_game_complexity):\n    if preferred_game_length == 'short' and preferred_game_style == 'fast-paced' and preferred_game_complexity == 'low':\n        return 'Savage Worlds'\n    elif preferred_game_length == 'short' and preferred_game_style == 'strategic' and preferred_game_complexity == 'medium':\n        return 'Dungeon World'\n    elif preferred_game_length == 'long' and preferred_game_style == 'immersive' and preferred_game_complexity == 'high':\n        return 'D&D 4E'\n    else:\n        return 'Mouse Guard'"}
{"ground_truth": "def get_bridge_tables(host, community):\n    # Initialize an empty dictionary to store MAC addresses and ports\n    bridge_tables = {}\n    try:\n        # Query the device using SNMP\n        for oid, val in [(mac, port) for mac in snmp_walk(host, community, '.1.3.6.1.2.1.17.4.3.1.1') for port in snmp_walk(host, community, '.1.3.6.1.2.1.17.4.3.1.2') if snmp_get(host, community, '.1.3.6.1.2.1.17.4.3.1.3', mac, port)]:\n            bridge_tables[mac] = port\n    except Exception as e:\n        return {'error': str(e)}\n    return bridge_tables", "problem_description": "I want a Python function that can retrieve bridge tables from devices that respond to SNMP Bridge Table queries. The function should take a host IP address and community string as input and return a dictionary with MAC addresses as keys and ports as values. The function should handle errors and return an error message if any.The signature of the function is: def get_bridge_tables(host, community)", "test_cases": {"test1": "get_bridge_tables('192.168.1.100', 'public')", "test2": "get_bridge_tables('192.168.1.101', 'private')", "test3": "get_bridge_tables('255.255.255.255', 'public')", "test4": "get_bridge_tables('192.168.1.100', 'invalid_community')", "test5": "get_bridge_tables('192.168.1.102', 'public')", "test6": "get_bridge_tables('10.0.0.1', 'public')", "test7": "get_bridge_tables('172.16.254.1', 'private')", "test8": "get_bridge_tables('192.168.133.25', 'public')", "test9": "get_bridge_tables('10.10.10.100', 'public')", "test10": "get_bridge_tables('192.168.1.105', 'private')"}, "hidden_information": "def get_bridge_tables(host, community):\n    # Initialize an empty dictionary to store MAC addresses and ports\n    bridge_tables = {}\n    try:\n        # Query the device using SNMP\n        for oid, val in [(mac, port) for mac in snmp_walk(host, community, '.1.3.6.1.2.1.17.4.3.1.1') for port in snmp_walk(host, community, '.1.3.6.1.2.1.17.4.3.1.2') if snmp_get(host, community, '.1.3.6.1.2.1.17.4.3.1.3', mac, port)]:\n            bridge_tables[mac] = port\n    except Exception as e:\n        return {'error': str(e)}\n    return bridge_tables"}
{"ground_truth": "def calculate_total_costs(revenue, expenses, staff_count, years_in_operation): total_expenses = expenses * years_in_operation * staff_count; total_costs = total_expenses - revenue; return total_costs", "problem_description": "Hey, I need a function to calculate the total costs of operating a business. I want it to take into account the revenue, expenses, and number of staff. Can you write a Python function to do this?The signature of the function is: def calculate_total_costs(revenue, expenses, staff_count, years_in_operation)", "test_cases": {"test1": "calculate_total_costs(100000, 50000, 10, 5)", "test2": "calculate_total_costs(200000, 70000, 20, 3)", "test3": "calculate_total_costs(500000, 100000, 50, 2)", "test4": "calculate_total_costs(750000, 150000, 75, 4)", "test5": "calculate_total_costs(1000000, 200000, 100, 5)", "test6": "calculate_total_costs(250000, 100000, 25, 2)", "test7": "calculate_total_costs(350000, 150000, 35, 3)", "test8": "calculate_total_costs(450000, 200000, 45, 4)", "test9": "calculate_total_costs(550000, 250000, 55, 5)", "test10": "calculate_total_costs(650000, 300000, 65, 6)"}, "hidden_information": "def calculate_total_costs(revenue, expenses, staff_count, years_in_operation): total_expenses = expenses * years_in_operation * staff_count; total_costs = total_expenses - revenue; return total_costs"}
{"ground_truth": "def is_imap_secure(imap_server, username, password, port=993, ssl=True): return port == 993 and ssl == True and imap_server.startswith('smtps://')", "problem_description": "I want the agent to write a python function that determines if a login process to an IMAP server is secure, taking into account the port used and whether mandatory SSL is enabled. I am worried about the security of my email credentials when using certain devices and I would like to verify if my email setups are secure.The signature of the function is: def is_imap_secure(imap_server, username, password, port=993, ssl=True)", "test_cases": {"test1": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=993, ssl=True)", "test2": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=465, ssl=True)", "test3": "is_imap_secure('smtp://mail.example.com', 'username', 'password', port=993, ssl=False)", "test4": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=465, ssl=False)", "test5": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=587, ssl=True)", "test6": "is_imap_secure('imap.example.com', 'username', 'password', port=993, ssl=True)", "test7": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=25, ssl=False)", "test8": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=587, ssl=True)", "test9": "is_imap_secure('smtp://mail.example.com', 'username', 'password', port=465, ssl=True)", "test10": "is_imap_secure('smtps://mail.example.com', 'username', 'password', port=993, ssl=None)"}, "hidden_information": "def is_imap_secure(imap_server, username, password, port=993, ssl=True): return port == 993 and ssl == True and imap_server.startswith('smtps://')"}
{"ground_truth": "def calculate_motor_neuron_preservation(transplanted_cells, total_motor_neurons, efficiency_threshold=0.5):  \n    cells_delivering_gdnf = transplanted_cells * efficiency_threshold\n    return total_motor_neurons * (cells_delivering_gdnf / transplanted_cells)", "problem_description": "I need a Python function to analyze the effectiveness of a new treatment for ALS. I want the function to take some data and return the percentage of motor neurons that were preserved. I don't remember the exact details, but I think it has something to do with the number of cells treated and some kind of threshold efficiency. The agent needs to figure out what I mean.The signature of the function is: def calculate_motor_neuron_preservation(transplanted_cells, total_motor_neurons, efficiency_threshold=0.5)", "test_cases": {"test1": "calculate_motor_neuron_preservation(1000, 4000, 0.4)", "test2": "calculate_motor_neuron_preservation(500, 2000, 0.6)", "test3": "calculate_motor_neuron_preservation(800, 3200, 0.7)", "test4": "calculate_motor_neuron_preservation(1200, 4800, 0.5)", "test5": "calculate_motor_neuron_preservation(900, 3600, 0.3)", "test6": "calculate_motor_neuron_preservation(1500, 6000, 0.4)", "test7": "calculate_motor_neuron_preservation(700, 2800, 0.8)", "test8": "calculate_motor_neuron_preservation(1100, 4400, 0.6)", "test9": "calculate_motor_neuron_preservation(1300, 5200, 0.5)", "test10": "calculate_motor_neuron_preservation(1600, 6400, 0.3)"}, "hidden_information": "def calculate_motor_neuron_preservation(transplanted_cells, total_motor_neurons, efficiency_threshold=0.5):  \n    cells_delivering_gdnf = transplanted_cells * efficiency_threshold\n    return total_motor_neurons * (cells_delivering_gdnf / transplanted_cells)"}
{"ground_truth": "def classify_channels(channel_data, cci_settings):\n    # Create a dictionary to store the channel classification\n    classified_channels = {}\n    \n    # Loop through each channel in the channel data\n    for channel in channel_data:\n        # Check if the channel has the 'Copy Freely' flag\n        if channel['flags'] == 'Copy Freely':\n            classified_channels[channel['name']] = 'allowed'\n        else:\n            # Check if the CCI setting is '0x00' or '0x10'\n            if cci_settings[channel['name']] in ['0x00', '0x10']:\n                classified_channels[channel['name']] = 'allowed'\n            else:\n                classified_channels[channel['name']] = 'not_allowed'\n    \n    return classified_channels", "problem_description": "I want a python function that can classify my XBMC PVR channels based on CCI settings. The function should classify each channel as either 'allowed' or 'not_allowed'. The classification is based on the 'Copy Freely' flag and the CCI settings for each channel.The signature of the function is: def classify_channels(channel_data, cci_settings)", "test_cases": {"test1": "classify_channels([{'name': 'Channel 1', 'flags': 'Copy Freely'}, {'name': 'Channel 2', 'flags': 'No Flags'}], {'Channel 1': '0x00', 'Channel 2': '0x10'})", "test2": "classify_channels([{'name': 'Channel 3', 'flags': 'No Flags'}, {'name': 'Channel 4', 'flags': 'Copy Freely'}], {'Channel 3': '0x00', 'Channel 4': '0x20'})", "test3": "classify_channels([{'name': 'Channel 5', 'flags': 'No Flags'}, {'name': 'Channel 6', 'flags': 'No Flags'}], {'Channel 5': '0x10', 'Channel 6': '0x00'})", "test4": "classify_channels([{'name': 'Channel 7', 'flags': 'Copy Freely'}, {'name': 'Channel 8', 'flags': 'No Flags'}], {'Channel 7': '0x20', 'Channel 8': '0x00'})", "test5": "classify_channels([{'name': 'Channel 9', 'flags': 'No Flags'}, {'name': 'Channel 10', 'flags': 'Copy Freely'}], {'Channel 9': '0x00', 'Channel 10': '0x10'})", "test6": "classify_channels([{'name': 'Channel 11', 'flags': 'No Flags'}, {'name': 'Channel 12', 'flags': 'No Flags'}], {'Channel 11': '0x00', 'Channel 12': '0x20'})", "test7": "classify_channels([{'name': 'Channel 13', 'flags': 'Copy Freely'}, {'name': 'Channel 14', 'flags': 'No Flags'}], {'Channel 13': '0x10', 'Channel 14': '0x00'})", "test8": "classify_channels([{'name': 'Channel 15', 'flags': 'No Flags'}, {'name': 'Channel 16', 'flags': 'Copy Freely'}], {'Channel 15': '0x20', 'Channel 16': '0x10'})", "test9": "classify_channels([{'name': 'Channel 17', 'flags': 'No Flags'}, {'name': 'Channel 18', 'flags': 'No Flags'}], {'Channel 17': '0x10', 'Channel 18': '0x00'})", "test10": "classify_channels([{'name': 'Channel 19', 'flags': 'Copy Freely'}, {'name': 'Channel 20', 'flags': 'No Flags'}], {'Channel 19': '0x00', 'Channel 20': '0x20'})"}, "hidden_information": "def classify_channels(channel_data, cci_settings):\n    # Create a dictionary to store the channel classification\n    classified_channels = {}\n    \n    # Loop through each channel in the channel data\n    for channel in channel_data:\n        # Check if the channel has the 'Copy Freely' flag\n        if channel['flags'] == 'Copy Freely':\n            classified_channels[channel['name']] = 'allowed'\n        else:\n            # Check if the CCI setting is '0x00' or '0x10'\n            if cci_settings[channel['name']] in ['0x00', '0x10']:\n                classified_channels[channel['name']] = 'allowed'\n            else:\n                classified_channels[channel['name']] = 'not_allowed'\n    \n    return classified_channels"}
{"ground_truth": "def calculate_care_percentage(total_votes, who_cares_votes):\n    if total_votes == 0 or who_cares_votes < 0:\n        return 0\n    else:\n        return (who_cares_votes / total_votes) * 100", "problem_description": "I'm trying to analyze the results of a recent poll and I need a python function to calculate the percentage of people who care about a certain issue. Can you help me write this function?The signature of the function is: def calculate_care_percentage(total_votes, who_cares_votes)", "test_cases": {"test1": "calculate_care_percentage(100, 20)", "test2": "calculate_care_percentage(500, 150)", "test3": "calculate_care_percentage(1000, 300)", "test4": "calculate_care_percentage(200, 0)", "test5": "calculate_care_percentage(50, 50)", "test6": "calculate_care_percentage(0, 0)", "test7": "calculate_care_percentage(100, 100)", "test8": "calculate_care_percentage(75, 25)", "test9": "calculate_care_percentage(300, 100)", "test10": "calculate_care_percentage(200, -1)"}, "hidden_information": "def calculate_care_percentage(total_votes, who_cares_votes):\n    if total_votes == 0 or who_cares_votes < 0:\n        return 0\n    else:\n        return (who_cares_votes / total_votes) * 100"}
{"ground_truth": "def calculate_mortgage_interest(principal, interest_rate, loan_term):\n    monthly_interest_rate = interest_rate / 12 / 100\n    number_of_payments = loan_term * 12\n    monthly_payment = principal * monthly_interest_rate * (1 + monthly_interest_rate) ** number_of_payments / ((1 + monthly_interest_rate) ** number_of_payments - 1)\n    total_interest = monthly_payment * number_of_payments - principal\n    return total_interest", "problem_description": "I want you to write a python function to calculate the interest on my mortgage based on user inputs, but I'm not sure what parameters you'll need. Can you ask me some questions to clarify?The signature of the function is: def calculate_mortgage_interest(principal, interest_rate, loan_term)", "test_cases": {"test1": "calculate_mortgage_interest(100000, 5, 30)", "test2": "calculate_mortgage_interest(50000, 3.5, 15)", "test3": "calculate_mortgage_interest(200000, 4, 20)", "test4": "calculate_mortgage_interest(80000, 6, 25)", "test5": "calculate_mortgage_interest(300000, 4.5, 30)", "test6": "calculate_mortgage_interest(250000, 3, 20)", "test7": "calculate_mortgage_interest(120000, 5.5, 25)", "test8": "calculate_mortgage_interest(400000, 4, 30)", "test9": "calculate_mortgage_interest(350000, 3.5, 20)", "test10": "calculate_mortgage_interest(60000, 6.5, 15)"}, "hidden_information": "def calculate_mortgage_interest(principal, interest_rate, loan_term):\n    monthly_interest_rate = interest_rate / 12 / 100\n    number_of_payments = loan_term * 12\n    monthly_payment = principal * monthly_interest_rate * (1 + monthly_interest_rate) ** number_of_payments / ((1 + monthly_interest_rate) ** number_of_payments - 1)\n    total_interest = monthly_payment * number_of_payments - principal\n    return total_interest"}
{"ground_truth": "def calculate_time_dilation(rest_time, relative_velocity, speed_of_light):\n    return rest_time * (1 - (relative_velocity ** 2 / speed_of_light ** 2)) ** 0.5", "problem_description": "I want the LLM agent to help me write a Python function that calculates the time dilation effect according to Einstein's theory of relativity. Think of a car moving at high speed and explain to me how to calculate the time that passes for the observer inside the car relative to the observer outside the car.The signature of the function is: def calculate_time_dilation(rest_time, relative_velocity, speed_of_light)", "test_cases": {"test1": "calculate_time_dilation(1, 0.5, 1)", "test2": "calculate_time_dilation(10, 0.9, 1)", "test3": "calculate_time_dilation(100, 0.1, 1)", "test4": "calculate_time_dilation(5, 0.8, 1)", "test5": "calculate_time_dilation(3, 0.2, 1)", "test6": "calculate_time_dilation(20, 0.6, 1)", "test7": "calculate_time_dilation(8, 0.4, 1)", "test8": "calculate_time_dilation(15, 0.7, 1)", "test9": "calculate_time_dilation(12, 0.3, 1)", "test10": "calculate_time_dilation(6, 0, 1)"}, "hidden_information": "def calculate_time_dilation(rest_time, relative_velocity, speed_of_light):\n    return rest_time * (1 - (relative_velocity ** 2 / speed_of_light ** 2)) ** 0.5"}
{"ground_truth": "def is_administrator(username, admins, user_groups): return (username in admins) or (username in user_groups and 'sysadmin' in user_groups[username])", "problem_description": "I'm planning to set up a system and I want a python function that can help manage user access levels. I remember using some GUI tools on a system running Fedora, it had lots of redhat-config-* scripts. I'm wondering if we can take a cue from that and write a function to check if a user has admin privileges. Can you write a python function for me?The signature of the function is: def is_administrator(username, admins, user_groups)", "test_cases": {"test1": "is_administrator('aechols', ['admin', 'superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test2": "is_administrator('prmths', ['admin', 'superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test3": "is_administrator('superuser', ['admin', 'superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test4": "is_administrator('guest', ['admin', 'superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test5": "is_administrator('prmths', [], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test6": "is_administrator('aechols', [], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test7": "is_administrator('nouser', ['admin', 'superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test8": "is_administrator('guest', [], {'prmths': ['user'], 'aechols': ['user', 'sysadmin'], 'guest': ['user', 'sysadmin']})", "test9": "is_administrator('prmths', ['prmths'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})", "test10": "is_administrator('aechols', ['superuser'], {'prmths': ['user'], 'aechols': ['user', 'sysadmin']})"}, "hidden_information": "def is_administrator(username, admins, user_groups): return (username in admins) or (username in user_groups and 'sysadmin' in user_groups[username])"}
{"ground_truth": "def analyze_pilot_communications(messages, keyword):\n    analyzed_messages = {}\n    for message in messages:\n        if keyword in message:\n            analyzed_messages[message] = \"Suspected Communication\"\n        else:\n            analyzed_messages[message] = \"Normal Communication\"\n    return analyzed_messages", "problem_description": "Can you help me write a python function that analyzes pilot communications with air traffic controllers? It should take in a list of messages and a keyword as input, and output a dictionary where the keys are the messages and the values are either 'Suspected Communication' or 'Normal Communication' based on whether the keyword is present in the message.The signature of the function is: def analyze_pilot_communications(messages, keyword)", "test_cases": {"test1": "analyze_pilot_communications([\"Mayday, mayday\", \"Everything is okay.\"], \"mayday\")", "test2": "analyze_pilot_communications([\"Hello, this is pilot John\", \"We are experiencing technical difficulties\"], \"technical\")", "test3": "analyze_pilot_communications([\"Requesting permission to land\", \"We are cleared for landing\"], \"clear\")", "test4": "analyze_pilot_communications([\"We are experiencing turbulence\", \"Please take a detour\"], \"turbulence\")", "test5": "analyze_pilot_communications([\"This is pilot Jane\", \"We are running low on fuel\"], \"fuel\")", "test6": "analyze_pilot_communications([\"Everything is nominal\", \"We are experiencing system failure\"], \"system\")", "test7": "analyze_pilot_communications([\"We are experiencing engine trouble\", \"Please advise on next course of action\"], \"engine\")", "test8": "analyze_pilot_communications([\"This is pilot Bob\", \"We are requesting an emergency landing\"], \"emergency\")", "test9": "analyze_pilot_communications([\"We are experiencing navigation issues\", \"Please provide guidance\"], \"navigation\")", "test10": "analyze_pilot_communications([\"Everything is okay\", \"We are experiencing communication breakdown\"], \"communication\")"}, "hidden_information": "def analyze_pilot_communications(messages, keyword):\n    analyzed_messages = {}\n    for message in messages:\n        if keyword in message:\n            analyzed_messages[message] = \"Suspected Communication\"\n        else:\n            analyzed_messages[message] = \"Normal Communication\"\n    return analyzed_messages"}
{"ground_truth": "def adjust_eq_to_sound_musical(frequency, gain, q_factor, band_type):\n\tif band_type == 'low_end':\n\t\tgain *= 0.8\n\t\tq_factor *= 1.2\n\telif band_type == 'high_end':\n\t\tgain *= 1.2\n\t\tq_factor *= 0.8\n\telif band_type == 'mid_range':\n\t\tgain *= 1.1\n\t\tq_factor *= 1.1\n\treturn frequency, gain, q_factor", "problem_description": "Write a Python function that takes in EQ settings (frequency, gain, Q factor, and band type) and adjusts them to make the sound more 'musical.' The function should be able to handle different types of bands (low end, high end, mid range) and adjust the settings accordingly to achieve a 'musical' sound.The signature of the function is: def adjust_eq_to_sound_musical(frequency, gain, q_factor, band_type)", "test_cases": {"test1": "adjust_eq_to_sound_musical(200, 3, 2, 'low_end')", "test2": "adjust_eq_to_sound_musical(5000, 6, 1.5, 'high_end')", "test3": "adjust_eq_to_sound_musical(1000, 2, 1.2, 'mid_range')", "test4": "adjust_eq_to_sound_musical(50, 1.5, 3, 'low_end')", "test5": "adjust_eq_to_sound_musical(8000, 4, 2.5, 'high_end')", "test6": "adjust_eq_to_sound_musical(2000, 3.5, 1.8, 'mid_range')", "test7": "adjust_eq_to_sound_musical(150, 2.2, 2.2, 'low_end')", "test8": "adjust_eq_to_sound_musical(6000, 5, 1.8, 'high_end')", "test9": "adjust_eq_to_sound_musical(1200, 2.8, 2, 'mid_range')", "test10": "adjust_eq_to_sound_musical(300, 1.8, 2.5, 'low_end')"}, "hidden_information": "def adjust_eq_to_sound_musical(frequency, gain, q_factor, band_type):\n\tif band_type == 'low_end':\n\t\tgain *= 0.8\n\t\tq_factor *= 1.2\n\telif band_type == 'high_end':\n\t\tgain *= 1.2\n\t\tq_factor *= 0.8\n\telif band_type == 'mid_range':\n\t\tgain *= 1.1\n\t\tq_factor *= 1.1\n\treturn frequency, gain, q_factor"}
{"ground_truth": "def calculate_team_performance(wins, losses, draws):\n    total_games = wins + losses + draws\n    win_percentage = (wins / total_games) * 100 if total_games > 0 else 0\n    return win_percentage", "problem_description": "Hey, I need a Python function that calculates a team's performance based on its games. It should take into account wins, losses, and... you know, other stuff. Can you write me a function that does that?The signature of the function is: def calculate_team_performance(wins, losses, draws)", "test_cases": {"test1": "calculate_team_performance(10, 5, 2)", "test2": "calculate_team_performance(8, 3, 4)", "test3": "calculate_team_performance(12, 0, 1)", "test4": "calculate_team_performance(0, 10, 0)", "test5": "calculate_team_performance(5, 5, 5)", "test6": "calculate_team_performance(20, 10, 0)", "test7": "calculate_team_performance(15, 8, 3)", "test8": "calculate_team_performance(0, 0, 10)", "test9": "calculate_team_performance(25, 5, 0)", "test10": "calculate_team_performance(10, 10, 0)"}, "hidden_information": "def calculate_team_performance(wins, losses, draws):\n    total_games = wins + losses + draws\n    win_percentage = (wins / total_games) * 100 if total_games > 0 else 0\n    return win_percentage"}
{"ground_truth": "def calculate_total_score(competitor_names, competitor_times, competitor_distances):\n    scores = {}\n    for i in range(len(competitor_names)):\n        competitor_time = competitor_times[i]\n        competitor_distance = competitor_distances[i]\n        competitor_score = (100 / competitor_time) * competitor_distance\n        scores[competitor_names[i]] = competitor_score\n    return scores", "problem_description": "Write a python function to calculate the scores of riders in a motorcycle hill climbing competition. The scores are determined by the time taken to climb the hill and the distance covered. Consider the names of riders, their times, and distances covered.The signature of the function is: def calculate_total_score(competitor_names, competitor_times, competitor_distances)", "test_cases": {"test1": "calculate_total_score(['Rider1', 'Rider2', 'Rider3'], [10, 15, 12], [50, 60, 55])", "test2": "calculate_total_score(['RiderA', 'RiderB'], [8, 10], [40, 50])", "test3": "calculate_total_score(['RiderX', 'RiderY', 'RiderZ'], [12.5, 11.8, 13.2], [52, 58, 48])", "test4": "calculate_total_score(['Rider1'], [9.9], [49])", "test5": "calculate_total_score(['RiderP', 'RiderQ', 'RiderR', 'RiderS'], [10.1, 11.2, 12.3, 9.8], [50, 55, 60, 45])", "test6": "calculate_total_score(['RiderA', 'RiderB', 'RiderC'], [10, 10, 10], [100, 50, 0])", "test7": "calculate_total_score(['RiderI', 'RiderII', 'RiderIII'], [12, 11, 10], [50, 50, 50])", "test8": "calculate_total_score(['RiderX', 'RiderY'], [11.9, 12], [50, 49])", "test9": "calculate_total_score(['RiderP', 'RiderQ', 'RiderR'], [9, 10, 11], [40, 50, 60])", "test10": "calculate_total_score(['RiderA'], [10], [50])"}, "hidden_information": "def calculate_total_score(competitor_names, competitor_times, competitor_distances):\n    scores = {}\n    for i in range(len(competitor_names)):\n        competitor_time = competitor_times[i]\n        competitor_distance = competitor_distances[i]\n        competitor_score = (100 / competitor_time) * competitor_distance\n        scores[competitor_names[i]] = competitor_score\n    return scores"}
{"ground_truth": "def convert_milliseconds(milliseconds):\n    SEC_PER_DAY = 24 * 60 * 60\n    SEC_PER_HOUR = 60 * 60\n    SEC_PER_MIN = 60\n    tot_sec = milliseconds / 1000\n    days = tot_sec // SEC_PER_DAY\n    rem_hours = (tot_sec % SEC_PER_DAY) // SEC_PER_HOUR\n    rem_mins = ((tot_sec % SEC_PER_DAY) % SEC_PER_HOUR) // SEC_PER_MIN\n    rem_secs = ((tot_sec % SEC_PER_DAY) % SEC_PER_HOUR) % SEC_PER_MIN\n    return f\"{days} days : {rem_hours} hours : {rem_mins} minutes : {rem_secs} seconds\"", "problem_description": "I want a python function to convert a given time in milliseconds to a human-readable format. I want it to display the time in days, hours, minutes, and seconds. Can you write a function that does that?The signature of the function is: def convert_milliseconds(milliseconds)", "test_cases": {"test1": "convert_milliseconds(1000)", "test2": "convert_milliseconds(86400000)", "test3": "convert_milliseconds(3600000)", "test4": "convert_milliseconds(60000)", "test5": "convert_milliseconds(86400001)", "test6": "convert_milliseconds(90061000)", "test7": "convert_milliseconds(7200050)", "test8": "convert_milliseconds(60485000)", "test9": "convert_milliseconds(86400002)", "test10": "convert_milliseconds(155520000)"}, "hidden_information": "def convert_milliseconds(milliseconds):\n    SEC_PER_DAY = 24 * 60 * 60\n    SEC_PER_HOUR = 60 * 60\n    SEC_PER_MIN = 60\n    tot_sec = milliseconds / 1000\n    days = tot_sec // SEC_PER_DAY\n    rem_hours = (tot_sec % SEC_PER_DAY) // SEC_PER_HOUR\n    rem_mins = ((tot_sec % SEC_PER_DAY) % SEC_PER_HOUR) // SEC_PER_MIN\n    rem_secs = ((tot_sec % SEC_PER_DAY) % SEC_PER_HOUR) % SEC_PER_MIN\n    return f\"{days} days : {rem_hours} hours : {rem_mins} minutes : {rem_secs} seconds\""}
{"ground_truth": "def generate_sql_select(table_name, columns=['*']):\n    if table_name.upper() in ['TABLE', 'SELECT', 'FROM', 'WHERE', 'AND', 'OR', 'NOT'] or ' ' in table_name:\n        table_name = f'\"{table_name}\"'\n    columns_str = ', '.join(columns)\n    return f'SELECT {columns_str} FROM {table_name};'", "problem_description": "Can you write a Python function for me that generates SQL SELECT statements for a given table name? The catch is that the table name should be double-quoted if it's a reserved keyword or contains spaces.The signature of the function is: def generate_sql_select(table_name, columns=['*'])", "test_cases": {"test1": "generate_sql_select('table')", "test2": "generate_sql_select('employees', ['name', 'age'])", "test3": "generate_sql_select('CREATE TABLE', ['column1'])", "test4": "generate_sql_select('my table')", "test5": "generate_sql_select('SELECT', ['column1'])", "test6": "generate_sql_select('FROM', ['column1'])", "test7": "generate_sql_select('WHERE', ['column1'])", "test8": "generate_sql_select('AND', ['column1'])", "test9": "generate_sql_select('OR', ['column1'])", "test10": "generate_sql_select('NOT', ['column1'])"}, "hidden_information": "def generate_sql_select(table_name, columns=['*']):\n    if table_name.upper() in ['TABLE', 'SELECT', 'FROM', 'WHERE', 'AND', 'OR', 'NOT'] or ' ' in table_name:\n        table_name = f'\"{table_name}\"'\n    columns_str = ', '.join(columns)\n    return f'SELECT {columns_str} FROM {table_name};'"}
{"ground_truth": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "problem_description": "i need a python function to determine if a number is even or not. can the agent write a function that takes an integer as input and returns True if the number is even and False otherwise?The signature of the function is: def is_even(n)", "test_cases": {"test1": "is_even(10)", "test2": "is_even(11)", "test3": "is_even(0)", "test4": "is_even(-10)", "test5": "is_even(-11)", "test6": "is_even(1)", "test7": "is_even(100)", "test8": "is_even(101)", "test9": "is_even(-100)", "test10": "is_even(-101)"}, "hidden_information": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"ground_truth": "def count_css_borders(css, html): \n    borders = ['solid', 'dotted', 'dashed', 'double', 'groove', 'ridge', 'inset', 'outset', 'none']\n    borders_count = {'solid': 0, 'dotted': 0, 'dashed': 0, 'double': 0, 'groove': 0, 'ridge': 0, 'inset': 0, 'outset': 0, 'none': 0}\n    for border in borders:\n        borders_count[border] = css.count(border)\n    return borders_count", "problem_description": "Hey AI, I need a Python function that can read the CSS of a website and return the number of times each border style is used. For example, if the CSS uses dotted borders 5 times, the function should return 5 for dotted. The function should take two parameters: the website's CSS as a string and the website's HTML as a string. Can you write that function for me?The signature of the function is: def count_css_borders(css, html)", "test_cases": {"test1": "count_css_borders('border: 1px solid #222222; border-left: 1px dotted #222222;', '<div></div>')", "test2": "count_css_borders('border: 1px solid #222222; border-right: 1px dotted #222222;', '<span></span>')", "test3": "count_css_borders('border: 1px dotted #222222;', '<p></p>')", "test4": "count_css_borders('border: 1px solid #222222; border-bottom: 1px dotted #222222;', '<img>')", "test5": "count_css_borders('', '<div></div>')", "test6": "count_css_borders('border: 1px solid #222222; border-left: 1px solid #222222;', '<p></p>')", "test7": "count_css_borders('border: 1px dotted #222222;', '<span></span>')", "test8": "count_css_borders('border: 1px solid #222222;', '<div style=\"border: 1px solid #222222;\"></div>')", "test9": "count_css_borders('border: 1px solid #222222; border-top: 1px dotted #222222;', '<img>')", "test10": "count_css_borders('border: 1px dotted #222222; border-right: 1px dotted #222222;', '<p></p>')"}, "hidden_information": "def count_css_borders(css, html): \n    borders = ['solid', 'dotted', 'dashed', 'double', 'groove', 'ridge', 'inset', 'outset', 'none']\n    borders_count = {'solid': 0, 'dotted': 0, 'dashed': 0, 'double': 0, 'groove': 0, 'ridge': 0, 'inset': 0, 'outset': 0, 'none': 0}\n    for border in borders:\n        borders_count[border] = css.count(border)\n    return borders_count"}
{"ground_truth": "def customize_toolbar(toolbar_config, plugin_keys, target_plugin):\n    for category in toolbar_config:\n        if category['name'] in plugin_keys:\n            for item in category['items']:\n                if item['name'] == target_plugin:\n                    return True\n    return False", "problem_description": "can you write me a python function that can customize the availability of items on a toolbar, with a HUGE list of toolbar items separated into categories, and give it to me in 5 minutesThe signature of the function is: def customize_toolbar(toolbar_config, plugin_keys, target_plugin)", "test_cases": {"test1": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category1'], 'Plugin1')", "test2": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category1', 'Category2'], 'Plugin3')", "test3": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category2'], 'Plugin3')", "test4": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category3'], 'Plugin1')", "test5": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category1', 'Category2'], 'Plugin4')", "test6": "customize_toolbar([], ['Category1'], 'Plugin1')", "test7": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category1', 'Category3'], 'Plugin3')", "test8": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': []}], ['Category2'], 'Plugin3')", "test9": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}, {'name': 'Plugin2'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin3'}]}], ['Category1'], 'Plugin2')", "test10": "customize_toolbar([{'name': 'Category1', 'items': [{'name': 'Plugin1'}]}, {'name': 'Category2', 'items': [{'name': 'Plugin2'}]}], ['Category1', 'Category2'], 'Plugin2')"}, "hidden_information": "def customize_toolbar(toolbar_config, plugin_keys, target_plugin):\n    for category in toolbar_config:\n        if category['name'] in plugin_keys:\n            for item in category['items']:\n                if item['name'] == target_plugin:\n                    return True\n    return False"}
{"ground_truth": "def create_calendar_dates(back_constant, forward_constant, back_date, forward_date):\n    return {back_constant: back_date, forward_constant: forward_date}", "problem_description": "I want you to write a Python function that maps two constants to specific dates. The constants are for 'back' and 'forward' actions, and I have specific dates I want to associate with these actions. Can you help me come up with a function?The signature of the function is: def create_calendar_dates(back_constant, forward_constant, back_date, forward_date)", "test_cases": {"test1": "create_calendar_dates('PREVIOUS', 'NEXT', '2022-01-01', '2022-01-15')", "test2": "create_calendar_dates('BACK', 'FORWARD', '2023-07-25', '2023-08-08')", "test3": "create_calendar_dates('PREV', 'NEXT', '2024-03-12', '2024-03-26')", "test4": "create_calendar_dates('REWIND', 'ADVANCE', '2025-09-10', '2025-09-24')", "test5": "create_calendar_dates('B', 'F', '2026-05-15', '2026-05-29')", "test6": "create_calendar_dates('BK', 'FW', '2026-02-01', '2026-02-15')", "test7": "create_calendar_dates('PREV_DATE', 'NEXT_DATE', '2027-08-01', '2027-08-15')", "test8": "create_calendar_dates('BACKWARD', 'FORWARD', '2027-11-01', '2027-11-15')", "test9": "create_calendar_dates('BACKWARD_DATE', 'FORWARD_DATE', '2028-06-01', '2028-06-15')", "test10": "create_calendar_dates('FB', 'NF', '2029-03-01', '2029-03-15')"}, "hidden_information": "def create_calendar_dates(back_constant, forward_constant, back_date, forward_date):\n    return {back_constant: back_date, forward_constant: forward_date}"}
{"ground_truth": "def get_suitable_net_framework(date_range): \n  if isinstance(date_range, list) and len(date_range) == 2 and date_range[0] < date_range[1]:\n    if date_range[0] < '2006-11-01' and date_range[1] <= '2010-04-12':\n      return '.NET 3.5'\n    elif date_range[0] >= '2009-05-11' and date_range[1] <= '2015-08-15':\n      return '.NET 4.0'\n    elif date_range[0] >= '2012-08-15' and date_range[1] <= '2020-07-21':\n      return '.NET 4.5'\n    elif date_range[0] >= '2015-07-20' and date_range[1] <= '2022-04-26':\n      return '.NET 4.6'\n    elif date_range[0] >= '2020-08-18':\n      return '.NET 5.0'\n    else:\n      return 'Version not found'\n  else:\n    return 'Invalid date range'", "problem_description": "I'm trying to figure out which .NET framework versions to use for some older projects. I have some specific date ranges when these projects were developed. Can you write a function to determine which version to use based on these dates?The signature of the function is: def get_suitable_net_framework(date_range)", "test_cases": {"test1": "get_suitable_net_framework(['2005-01-01', '2008-01-01'])", "test2": "get_suitable_net_framework(['2009-01-01', '2012-01-01'])", "test3": "get_suitable_net_framework(['2010-01-01', '2013-01-01'])", "test4": "get_suitable_net_framework(['2015-01-01', '2018-01-01'])", "test5": "get_suitable_net_framework(['2020-01-01', '2022-01-01'])", "test6": "get_suitable_net_framework(['2017-01-01', '2020-07-21'])", "test7": "get_suitable_net_framework(['2013-01-01', '2015-06-01'])", "test8": "get_suitable_net_framework(['2018-01-01', '2020-07-22'])", "test9": "get_suitable_net_framework(['2020-07-20', '2022-01-01'])", "test10": "get_suitable_net_framework(['2022-06-18', '2023-01-01'])"}, "hidden_information": "def get_suitable_net_framework(date_range): \n  if isinstance(date_range, list) and len(date_range) == 2 and date_range[0] < date_range[1]:\n    if date_range[0] < '2006-11-01' and date_range[1] <= '2010-04-12':\n      return '.NET 3.5'\n    elif date_range[0] >= '2009-05-11' and date_range[1] <= '2015-08-15':\n      return '.NET 4.0'\n    elif date_range[0] >= '2012-08-15' and date_range[1] <= '2020-07-21':\n      return '.NET 4.5'\n    elif date_range[0] >= '2015-07-20' and date_range[1] <= '2022-04-26':\n      return '.NET 4.6'\n    elif date_range[0] >= '2020-08-18':\n      return '.NET 5.0'\n    else:\n      return 'Version not found'\n  else:\n    return 'Invalid date range'"}
{"ground_truth": "def calculate_overlap(rectangle1, rectangle2):\n    x1, y1 = rectangle1['x'], rectangle1['y']\n    w1, h1 = rectangle1['width'], rectangle1['height']\n    x2, y2 = rectangle2['x'], rectangle2['y']\n    w2, h2 = rectangle2['width'], rectangle2['height']\n    overlap_x = max(0, min(x1 + w1, x2 + w2) - max(x1, x2))\n    overlap_y = max(0, min(y1 + h1, y2 + h2) - max(y1, y2))\n    return overlap_x * overlap_y", "problem_description": "I want you to write a python function that calculates the overlapping area between two rectangles. I have two rectangles with their x and y coordinates, widths, and heights. The rectangles can be positioned anywhere on the plane. I want the function to return the area of the overlapping region.The signature of the function is: def calculate_overlap(rectangle1, rectangle2)", "test_cases": {"test1": "calculate_overlap({'x': 1, 'y': 1, 'width': 5, 'height': 5}, {'x': 3, 'y': 3, 'width': 3, 'height': 3})", "test2": "calculate_overlap({'x': 10, 'y': 10, 'width': 20, 'height': 20}, {'x': 25, 'y': 25, 'width': 15, 'height': 15})", "test3": "calculate_overlap({'x': 0, 'y': 0, 'width': 10, 'height': 10}, {'x': 5, 'y': 5, 'width': 10, 'height': 10})", "test4": "calculate_overlap({'x': 5, 'y': 5, 'width': 10, 'height': 10}, {'x': 15, 'y': 15, 'width': 5, 'height': 5})", "test5": "calculate_overlap({'x': 20, 'y': 20, 'width': 10, 'height': 10}, {'x': 20, 'y': 20, 'width': 10, 'height': 10})", "test6": "calculate_overlap({'x': 10, 'y': 10, 'width': 20, 'height': 20}, {'x': 35, 'y': 35, 'width': 5, 'height': 5})", "test7": "calculate_overlap({'x': 0, 'y': 0, 'width': 5, 'height': 5}, {'x': 3, 'y': 3, 'width': 5, 'height': 5})", "test8": "calculate_overlap({'x': 15, 'y': 15, 'width': 10, 'height': 10}, {'x': 20, 'y': 20, 'width': 10, 'height': 10})", "test9": "calculate_overlap({'x': 25, 'y': 25, 'width': 5, 'height': 5}, {'x': 25, 'y': 25, 'width': 15, 'height': 15})", "test10": "calculate_overlap({'x': 30, 'y': 30, 'width': 10, 'height': 10}, {'x': 40, 'y': 40, 'width': 5, 'height': 5})"}, "hidden_information": "def calculate_overlap(rectangle1, rectangle2):\n    x1, y1 = rectangle1['x'], rectangle1['y']\n    w1, h1 = rectangle1['width'], rectangle1['height']\n    x2, y2 = rectangle2['x'], rectangle2['y']\n    w2, h2 = rectangle2['width'], rectangle2['height']\n    overlap_x = max(0, min(x1 + w1, x2 + w2) - max(x1, x2))\n    overlap_y = max(0, min(y1 + h1, y2 + h2) - max(y1, y2))\n    return overlap_x * overlap_y"}
{"ground_truth": "def filter_log_messages(log_message, keywords_to_filter):\n    for keyword in keywords_to_filter:\n        log_message = log_message.replace(keyword, '')\n    return log_message.strip()", "problem_description": "I want the agent to write a python function that takes in a log message and removes certain redundant information, like in the Xcodebuild setenv messages. The function should return the filtered log message. But I'm not sure how to specify what makes a message redundant, can we discuss?The signature of the function is: def filter_log_messages(log_message, keywords_to_filter)", "test_cases": {"test1": "filter_log_messages('setenv XXX = YYY', ['setenv', 'XXX'])", "test2": "filter_log_messages('server started on port 8080', ['server'])", "test3": "filter_log_messages('DB connection established', [])", "test4": "filter_log_messages(' ignoring.OperatorHQ-OfflineInfo file', ['ignoring'])", "test5": "filter_log_messages('configuration property abc has been set to xyz', ['property', 'has been set'])", "test6": "filter_log_messages(' Process(_ID*) thread idle, waiting on queue', ['Process', '*'])", "test7": "filter_log_messages('VM with  composition ... (# of pages ...', ['VM', 'with'])", "test8": "filter_log_messages('log4j:WARN No appenders could be found', ['log4j:WARN'])", "test9": "filter_log_messages('The JFrame services will only work for LAF CIMulateFrame', ['only'])", "test10": "filter_log_messages('we have no lib dir even though this tim lib', ['dir', 'this'])"}, "hidden_information": "def filter_log_messages(log_message, keywords_to_filter):\n    for keyword in keywords_to_filter:\n        log_message = log_message.replace(keyword, '')\n    return log_message.strip()"}
{"ground_truth": "def encode_params(params_dict): return ''.join(f' {key}={value}' for key, value in params_dict.items())", "problem_description": "Hey LLM agent, I'm working on a legacy project and having some encoding issues when calling an external executable. Can you help me write a Python function to encode parameters for the call? The parameters are key-value pairs, and I want to pass them as a single string. I think it has something to do with Unicode, but I'm not sure how to handle it.The signature of the function is: def encode_params(params_dict)", "test_cases": {"test1": "encode_params({'q': 'hello', 't': 'MainForm', 's': '30', 'm': '1'})", "test2": "encode_params({'d': 'Encoded Param', 't': 'AnotherForm', 's': '20', 'm': '2'})", "test3": "encode_params({'x': 'Non-ASCII', 't': 'TestForm', 's': '10', 'm': '3'})", "test4": "encode_params({'y': 'Param with Space', 't': 'SpaceForm', 's': '40', 'm': '4'})", "test5": "encode_params({'z': '', 't': 'Empty Param', 's': '50', 'm': '5'})", "test6": "encode_params({'a': 'Only one param'})", "test7": "encode_params({'b': 'Param with equals sign', 'c': 'Hello=World'})", "test8": "encode_params({'e': '?', 'f': '!'})", "test9": "encode_params({'g': 'Long Parameter Value'.ljust(100, 'x')})", "test10": "encode_params({'h': None})"}, "hidden_information": "def encode_params(params_dict): return ''.join(f' {key}={value}' for key, value in params_dict.items())"}
{"ground_truth": "def map_columns(flat_file_columns, db_columns, data_types):\n    mapped_columns = {}\n    for column in flat_file_columns:\n        for db_column in db_columns:\n            if column.lower() == db_column.lower():\n                mapped_columns[column] = db_column\n    for column, data_type in data_types.items():\n        if column in mapped_columns:\n            mapped_columns[column] = (mapped_columns[column], data_type)\n    return mapped_columns", "problem_description": "I need a Python function to map the columns from a flat file to a database table in an SSIS package. The function should take the column names from the flat file and the database table as input, as well as the data types of the columns, and return a dictionary with the mapped columns. Can you help me write this function?The signature of the function is: def map_columns(flat_file_columns, db_columns, data_types)", "test_cases": {"test1": "map_columns(['ID', 'Name', 'Age'], ['EmployeeID', 'EmployeeName', 'EmployeeAge'], {'ID': 'int', 'Name': 'string', 'Age': 'int'})", "test2": "map_columns(['CustomerID', 'OrderDate'], ['Customer_ID', 'Order_Date'], {'CustomerID': 'string', 'OrderDate': 'datetime'})", "test3": "map_columns(['ProductCode', 'Quantity'], ['Product_Code', 'Quantity_Sold'], {'ProductCode': 'string', 'Quantity': 'int'})", "test4": "map_columns(['EmployeeID', 'Department'], ['Employee_ID', 'Department_Name'], {'EmployeeID': 'int', 'Department': 'string'})", "test5": "map_columns(['OrderID', 'Total'], ['Order_ID', 'Total_Cost'], {'OrderID': 'int', 'Total': 'float'})", "test6": "map_columns(['CustomerName', 'Address'], ['Customer_Name', 'Customer_Address'], {'CustomerName': 'string', 'Address': 'string'})", "test7": "map_columns(['ProductID', 'Price'], ['Product_ID', 'Product_Price'], {'ProductID': 'string', 'Price': 'float'})", "test8": "map_columns(['OrderDate', 'Status'], ['Order_Date', 'Order_Status'], {'OrderDate': 'datetime', 'Status': 'string'})", "test9": "map_columns(['EmployeeID', 'JobTitle'], ['Employee_ID', 'Job_Title'], {'EmployeeID': 'int', 'JobTitle': 'string'})", "test10": "map_columns(['CustomerID', 'Phone'], ['Customer_ID', 'Customer_Phone'], {'CustomerID': 'string', 'Phone': 'string'})"}, "hidden_information": "def map_columns(flat_file_columns, db_columns, data_types):\n    mapped_columns = {}\n    for column in flat_file_columns:\n        for db_column in db_columns:\n            if column.lower() == db_column.lower():\n                mapped_columns[column] = db_column\n    for column, data_type in data_types.items():\n        if column in mapped_columns:\n            mapped_columns[column] = (mapped_columns[column], data_type)\n    return mapped_columns"}
{"ground_truth": "def calculate_timestamp_precision(timestamp, frequency=4e6): return 1 / frequency", "problem_description": "I need a Python function to calculate the precision of a timestamp in nanoseconds resolution. The function should take into account the frequency of the performance counter and return the precision in nanoseconds. I want the agent to write a Python function that accomplishes this.The signature of the function is: def calculate_timestamp_precision(timestamp, frequency=4e6)", "test_cases": {"test1": "calculate_timestamp_precision(1000000, 4e6)", "test2": "calculate_timestamp_precision(500000, 2e6)", "test3": "calculate_timestamp_precision(2000000, 8e6)", "test4": "calculate_timestamp_precision(1000000, 1e6)", "test5": "calculate_timestamp_precision(500000, 1.5e6)", "test6": "calculate_timestamp_precision(2000000, 3e6)", "test7": "calculate_timestamp_precision(1000000, 2.5e6)", "test8": "calculate_timestamp_precision(500000, 1.2e6)", "test9": "calculate_timestamp_precision(2000000, 4e6)", "test10": "calculate_timestamp_precision(1000000, 1e9)"}, "hidden_information": "def calculate_timestamp_precision(timestamp, frequency=4e6): return 1 / frequency"}
{"ground_truth": "def is_redirect_allowed(url, allowed_hosts, blocked_hosts):\n    for host in allowed_hosts:\n        if host in url:\n            return True\n    for host in blocked_hosts:\n        if host in url:\n            return False\n    return False", "problem_description": "I want you to write a python function that can determine if a URL is allowed to be redirected to from my website. For example, I want to allow redirection to my own website www.paktutorial.com but not to www.google.com. However, there are many other websites that need to be blocked or allowed, so the function should be flexible enough to handle that. Can you help me with that?The signature of the function is: def is_redirect_allowed(url, allowed_hosts, blocked_hosts)", "test_cases": {"test1": "is_redirect_allowed('https://www.paktutorial.com', ['www.paktutorial.com'], ['www.google.com'])", "test2": "is_redirect_allowed('https://www.google.com', ['www.paktutorial.com'], ['www.google.com'])", "test3": "is_redirect_allowed('https://www.paktutorial.com/blog', ['www.paktutorial.com'], ['www.google.com'])", "test4": "is_redirect_allowed('https://www.facebook.com', ['www.paktutorial.com'], ['www.google.com'])", "test5": "is_redirect_allowed('https://www.paktutorial.com', ['www.paktutorial.com', 'www.facebook.com'], ['www.google.com'])", "test6": "is_redirect_allowed('https://www.twitter.com', ['www.paktutorial.com'], [])", "test7": "is_redirect_allowed('https://www.paktutorial.com', [], ['www.google.com', 'www.facebook.com'])", "test8": "is_redirect_allowed('https://www.paktutorial.com/blog/article', ['www.paktutorial.com'], [])", "test9": "is_redirect_allowed('https://www.paktutorial.com', ['www.paktutorial.com', 'www.google.com'], ['www.google.com'])", "test10": "is_redirect_allowed('https://www.paktutorial.com', ['www.paktutorial.com'], ['www.paktutorial.com'])"}, "hidden_information": "def is_redirect_allowed(url, allowed_hosts, blocked_hosts):\n    for host in allowed_hosts:\n        if host in url:\n            return True\n    for host in blocked_hosts:\n        if host in url:\n            return False\n    return False"}
{"ground_truth": "def display_slider_tooltip(slider_id, min_value, max_value, current_value):\n    return f\"Your choice: {current_value} ({min_value}-{max_value})\"", "problem_description": "Write a Python function that takes in a slider ID, minimum value, maximum value, and current value, and returns a string to be displayed as a tooltip, indicating the current position of the slider handle. The output should be in the format 'Your choice: X (min-max)' where X is the current value.The signature of the function is: def display_slider_tooltip(slider_id, min_value, max_value, current_value)", "test_cases": {"test1": "display_slider_tooltip(\"slider-1\", 0, 100, 50)", "test2": "display_slider_tooltip(\"slider-2\", 1, 5, 3)", "test3": "display_slider_tooltip(\"slider-3\", -10, 10, 0)", "test4": "display_slider_tooltip(\"slider-4\", 5, 20, 12)", "test5": "display_slider_tooltip(\"slider-5\", 100, 500, 200)", "test6": "display_slider_tooltip(\"slider-6\", 0.5, 1.5, 1.0)", "test7": "display_slider_tooltip(\"slider-7\", 10, 100, 50)", "test8": "display_slider_tooltip(\"slider-8\", 500, 1000, 750)", "test9": "display_slider_tooltip(\"slider-9\", -100, 100, 0)", "test10": "display_slider_tooltip(\"slider-10\", 1, 10, 5)"}, "hidden_information": "def display_slider_tooltip(slider_id, min_value, max_value, current_value):\n    return f\"Your choice: {current_value} ({min_value}-{max_value})\""}
{"ground_truth": "def get_digit_pair(number, position, pair_length=2, is_from_end=False):\n    number_str = str(abs(number))\n    if is_from_end:\n        start_idx = len(number_str) - position - pair_length + 1\n    else:\n        start_idx = position - 1\n    return int(number_str[start_idx:start_idx + pair_length])", "problem_description": "Can you please write a python function to extract a pair of digits from a given integer?The signature of the function is: def get_digit_pair(number, position, pair_length=2, is_from_end=False)", "test_cases": {"test1": "get_digit_pair(2345346792, 5, is_from_end=False)", "test2": "get_digit_pair(123456, 2, is_from_end=True)", "test3": "get_digit_pair(-987654321, 3)", "test4": "get_digit_pair(111111111, 1, pair_length=3)", "test5": "get_digit_pair(123456789, 6, is_from_end=True)", "test6": "get_digit_pair(987654321, 3)", "test7": "get_digit_pair(0, 1)", "test8": "get_digit_pair(-1, 1)", "test9": "get_digit_pair(123456, 5)", "test10": "get_digit_pair(999999999, 3, is_from_end=True)"}, "hidden_information": "def get_digit_pair(number, position, pair_length=2, is_from_end=False):\n    number_str = str(abs(number))\n    if is_from_end:\n        start_idx = len(number_str) - position - pair_length + 1\n    else:\n        start_idx = position - 1\n    return int(number_str[start_idx:start_idx + pair_length])"}
{"ground_truth": "def filter_valid_objects(objects, all_objects):\n    return [obj for obj in objects if obj in all_objects]", "problem_description": "Can you write a Python function for me? I have a list of objects that some of them might have been deleted, I want to get the list of valid objects from the original list, I have a way to know all the valid objects, I just need the valid ones from my list.The signature of the function is: def filter_valid_objects(objects, all_objects)", "test_cases": {"test1": "filter_valid_objects([1, 2, 3, 4, 5], [1, 3, 5])", "test2": "filter_valid_objects([], [1, 2, 3])", "test3": "filter_valid_objects([1, 2, 3], [])", "test4": "filter_valid_objects(['a', 'b', 'c'], ['a', 'c', 'd'])", "test5": "filter_valid_objects([True, False, True], [True])", "test6": "filter_valid_objects([1.5, 2.5, 3.5], [1.5, 3.5])", "test7": "filter_valid_objects([None, 1, 2], [1, 2])", "test8": "filter_valid_objects([1, 'a', 2.5], [1, 2.5])", "test9": "filter_valid_objects([1, 2, 3], [1, 2, 3, 4, 5])", "test10": "filter_valid_objects([], [])"}, "hidden_information": "def filter_valid_objects(objects, all_objects):\n    return [obj for obj in objects if obj in all_objects]"}
{"ground_truth": "def format_date_string(date_string, date_format=\"%Y-%m-%dT%H:%M:%SZ\"):\n    from datetime import datetime\n    date_object = datetime.strptime(date_string, \"%Y-%m-%dT%H:%M:%SZ\")\n    return date_object", "problem_description": "I am trying to use Breeze/WebAPI to query a database but I need help formatting a date string to match the format of a Nullable<DateTimeOffset> field. I want you to write a python function that takes a date string as input and returns a URL encoded date string that I can use in my query.The signature of the function is: def format_date_string(date_string, date_format=\"%Y-%m-%dT%H", "test_cases": {"test1": "format_date_string(\"2013-03-03T00:00:00Z\")", "test2": "format_date_string(\"2012-02-29T12:00:00Z\")", "test3": "format_date_string(\"2014-04-01T08:00:00Z\")", "test4": "format_date_string(\"2011-01-01T00:00:00Z\")", "test5": "format_date_string(\"2015-05-31T23:59:59Z\")", "test6": "format_date_string(\"2016-06-30T12:30:45Z\")", "test7": "format_date_string(\"2017-07-28T08:15:00Z\")", "test8": "format_date_string(\"2018-08-25T11:45:30Z\")", "test9": "format_date_string(\"2019-09-22T14:00:00Z\")", "test10": "format_date_string(\"2020-10-19T16:30:45Z\")"}, "hidden_information": "def format_date_string(date_string, date_format=\"%Y-%m-%dT%H:%M:%SZ\"):\n    from datetime import datetime\n    date_object = datetime.strptime(date_string, \"%Y-%m-%dT%H:%M:%SZ\")\n    return date_object"}
{"ground_truth": "def get_associated_committees(user_id, favorite_filter=False, throughFavorites=False):\n    user_committees = [f'committee_{i}' for i in range(1, 6)]\n    user_favorites = [f'committee_{i}' for i in range(2, 4)]\n    if user_id == 1 and throughFavorites:\n        return user_favorites\n    elif favorite_filter:\n        return user_favorites\n    else:\n        return user_committees", "problem_description": "Can you write a python function that allows to associate User model with Committee model in two ways? User model can be favored or directly assigned to Committee model. Design a function to account for these two methods.The signature of the function is: def get_associated_committees(user_id, favorite_filter=False, throughFavorites=False)", "test_cases": {"test1": "get_associated_committees(1, favorite_filter=True)", "test2": "get_associated_committees(1, favorite_filter=False)", "test3": "get_associated_committees(2, favorite_filter=True)", "test4": "get_associated_committees(2, throughFavorites=True)", "test5": "get_associated_committees(3, favorite_filter=False, throughFavorites=True)", "test6": "get_associated_committees(1, favorite_filter=True, throughFavorites=True)", "test7": "get_associated_committees(1, favorite_filter=False, throughFavorites=True)", "test8": "get_associated_committees(1, favorite_filter=False, throughFavorites=False)", "test9": "get_associated_committees(2, favorite_filter=False)", "test10": "get_associated_committees(2, throughFavorites=False)"}, "hidden_information": "def get_associated_committees(user_id, favorite_filter=False, throughFavorites=False):\n    user_committees = [f'committee_{i}' for i in range(1, 6)]\n    user_favorites = [f'committee_{i}' for i in range(2, 4)]\n    if user_id == 1 and throughFavorites:\n        return user_favorites\n    elif favorite_filter:\n        return user_favorites\n    else:\n        return user_committees"}
{"ground_truth": "def check_managed_object_context(managedObjectContext, entityName):\n  if managedObjectContext is None:\n    return f'Error: managedObjectContext is not set'\n  try:\n    NSEntityDescription.entityForName_(entityName, managedObjectContext)\n    return f'{entityName} found in managedObjectContext'\n  except Exception as e:\n    return f'Error: {str(e)}'", "problem_description": "Write a python function that checks if a managed object context is set and an entity is defined in that context. The function should take the managed object context and the entity name as arguments and return an error message if the managed object context is not set or the entity is not found.The signature of the function is: def check_managed_object_context(managedObjectContext, entityName)", "test_cases": {"test1": "check_managed_object_context(None, 'Name')", "test2": "check_managed_object_context('managedObjectContext', 'NonExistentEntity')", "test3": "check_managed_object_context('managedObjectContext', 'Name')", "test4": "check_managed_object_context(None, 'NonExistentEntity')", "test5": "check_managed_object_context('managedObjectContext', 'NameWithSpaces')", "test6": "check_managed_object_context('managedObjectContext', 'NameWithSpecialChars!@#$%^&*()')", "test7": "check_managed_object_context('managedObjectContext', 'Entity1')", "test8": "check_managed_object_context('managedObjectContext', 'Entity2')", "test9": "check_managed_object_context('managedObjectContext', 'Entity3')", "test10": "check_managed_object_context('managedObjectContext', '')"}, "hidden_information": "def check_managed_object_context(managedObjectContext, entityName):\n  if managedObjectContext is None:\n    return f'Error: managedObjectContext is not set'\n  try:\n    NSEntityDescription.entityForName_(entityName, managedObjectContext)\n    return f'{entityName} found in managedObjectContext'\n  except Exception as e:\n    return f'Error: {str(e)}'"}
{"ground_truth": "def calculate_reward(friends_invited, reward_per_friend, bonus_threshold, bonus_amount): \n    if friends_invited >= bonus_threshold: \n        return friends_invited * reward_per_friend + bonus_amount \n    else: \n        return friends_invited * reward_per_friend", "problem_description": "I want you to write a Python function that will help me calculate the rewards for users based on the number of friends they invite. The reward system has a bonus threshold, and I want to give a bonus amount when the threshold is reached. Can you help me with this?The signature of the function is: def calculate_reward(friends_invited, reward_per_friend, bonus_threshold, bonus_amount)", "test_cases": {"test1": "calculate_reward(5, 10, 10, 50)", "test2": "calculate_reward(20, 5, 15, 30)", "test3": "calculate_reward(8, 2, 10, 20)", "test4": "calculate_reward(12, 3, 12, 40)", "test5": "calculate_reward(25, 1, 20, 50)", "test6": "calculate_reward(7, 4, 10, 30)", "test7": "calculate_reward(18, 2, 15, 40)", "test8": "calculate_reward(9, 6, 12, 60)", "test9": "calculate_reward(22, 3, 20, 50)", "test10": "calculate_reward(11, 5, 15, 40)"}, "hidden_information": "def calculate_reward(friends_invited, reward_per_friend, bonus_threshold, bonus_amount): \n    if friends_invited >= bonus_threshold: \n        return friends_invited * reward_per_friend + bonus_amount \n    else: \n        return friends_invited * reward_per_friend"}
{"ground_truth": "def get_data_type(input_value):\n    if isinstance(input_value, list):\n        return [type(i) for i in input_value]\n    elif isinstance(input_value, range):\n        return [type(i) for i in input_value]\n    else:\n        return type(input_value)", "problem_description": "Hi, I want you to write a Python function that can work with different data types and return their respective data types when different operations are performed on them. It should be able to handle lists and vectors with different lengths and types, and provide the correct type for each element when indexing is involved.The signature of the function is: def get_data_type(input_value)", "test_cases": {"test1": "get_data_type([1, 2, 'hello', 3.5])", "test2": "get_data_type(range(5))", "test3": "get_data_type('hello')", "test4": "get_data_type([1, 2, [3, 4, [5, 6]], 7])", "test5": "get_data_type([[1, 2], [3, 4], [5, 6]])", "test6": "get_data_type(range(1, 10))", "test7": "get_data_type((1, 2, 'hello', 3.5))", "test8": "get_data_type({'a': 1, 'b': 2})", "test9": "get_data_type({1, 2, 3, 'hello'})", "test10": "get_data_type(b'a string'.decode('utf-8'))"}, "hidden_information": "def get_data_type(input_value):\n    if isinstance(input_value, list):\n        return [type(i) for i in input_value]\n    elif isinstance(input_value, range):\n        return [type(i) for i in input_value]\n    else:\n        return type(input_value)"}
{"ground_truth": "def get_devices_in_same_network(devices_bssid, devices_mac, target_bssid):\n    return [(bssid, mac) for bssid, mac in zip(devices_bssid, devices_mac) if bssid == target_bssid]", "problem_description": "I want the LLM agent to write a python function that checks if multiple devices are connected to the same network given their BSSID and MAC addresses.The signature of the function is: def get_devices_in_same_network(devices_bssid, devices_mac, target_bssid)", "test_cases": {"test1": "get_devices_in_same_network(['11111111', '22222222', '11111111'], ['AA:AA:AA:AA:AA:AA', 'BB:BB:BB:BB:BB:BB', 'CC:CC:CC:CC:CC:CC'], '11111111')", "test2": "get_devices_in_same_network(['12345678', '87654321', '90123456'], ['DD:DD:DD:DD:DD:DD', 'EE:EE:EE:EE:EE:EE', 'FF:FF:FF:FF:FF:FF'], '12345678')", "test3": "get_devices_in_same_network(['11111111', '22222222', '11111111'], ['AA:AA:AA:AA:AA:AA', 'BB:BB:BB:BB:BB:BB', 'CC:CC:CC:CC:CC:CC'], '33333333')", "test4": "get_devices_in_same_network(['12345678', '87654321', '90123456'], ['DD:DD:DD:DD:DD:DD', 'EE:EE:EE:EE:EE:EE', 'FF:FF:FF:FF:FF:FF'], '11111111')", "test5": "get_devices_in_same_network(['11111111', '11111111', '11111111'], ['AA:AA:AA:AA:AA:AA', 'BB:BB:BB:BB:BB:BB', 'CC:CC:CC:CC:CC:CC'], '11111111')", "test6": "get_devices_in_same_network(['12345678', '12345678', '12345678'], ['DD:DD:DD:DD:DD:DD', 'EE:EE:EE:EE:EE:EE', 'FF:FF:FF:FF:FF:FF'], '12345678')", "test7": "get_devices_in_same_network(['11111111', '22222222', '33333333'], ['AA:AA:AA:AA:AA:AA', 'BB:BB:BB:BB:BB:BB', 'CC:CC:CC:CC:CC:CC'], '44444444')", "test8": "get_devices_in_same_network(['12345678', '87654321', '90123456'], ['DD:DD:DD:DD:DD:DD', 'EE:EE:EE:EE:EE:EE', 'FF:FF:FF:FF:FF:FF'], '98765432')", "test9": "get_devices_in_same_network(['11111111', '11111111', '22222222'], ['AA:AA:AA:AA:AA:AA', 'BB:BB:BB:BB:BB:BB', 'CC:CC:CC:CC:CC:CC'], '11111111')", "test10": "get_devices_in_same_network(['12345678', '12345678', '87654321'], ['DD:DD:DD:DD:DD:DD', 'EE:EE:EE:EE:EE:EE', 'FF:FF:FF:FF:FF:FF'], '12345678')"}, "hidden_information": "def get_devices_in_same_network(devices_bssid, devices_mac, target_bssid):\n    return [(bssid, mac) for bssid, mac in zip(devices_bssid, devices_mac) if bssid == target_bssid]"}
{"ground_truth": "def parse_voice_commands(command):\n    # parse command for digits and movement commands\n    commands = {'forward': 'Moving forward', 'backward': 'Moving backward'}\n    command = command.lower()\n    if command in commands:\n        return commands[command]\n    else:\n        try:\n            digit = int(command)\n            if 0 < digit < 10:\n                return f'Number recognized: {digit}'\n            else:\n                return 'Invalid command'\n        except ValueError:\n            return 'Invalid command'", "problem_description": "I want a python function that will take a voice command as a string and return the corresponding action on an Android wearable device that is running ICS, I want it to recognize simple numbers, such as digits and some basic movement commands, e.g. 'forward', 'backward', without overlapping the current app window UI, ideally through an imitation of Google Glass functionality. The signature of the function is: def parse_voice_commands(command)", "test_cases": {"test_forward": "parse_voice_commands('forward')", "test_backward": "parse_voice_commands('backward')", "test_digit_5": "parse_voice_commands('5')", "test_multiple_digits": "parse_voice_commands('12345')", "test_alphanumeric": "parse_voice_commands('Hello1')", "test_invalid_command": "parse_voice_commands('left')", "test_out_of_range_digit": "parse_voice_commands('11')", "test_empty_command": "parse_voice_commands('')", "test_special_char_command": "parse_voice_commands('$')", "test_punctuation_command": "parse_voice_commands('.')"}, "hidden_information": "def parse_voice_commands(command):\n    # parse command for digits and movement commands\n    commands = {'forward': 'Moving forward', 'backward': 'Moving backward'}\n    command = command.lower()\n    if command in commands:\n        return commands[command]\n    else:\n        try:\n            digit = int(command)\n            if 0 < digit < 10:\n                return f'Number recognized: {digit}'\n            else:\n                return 'Invalid command'\n        except ValueError:\n            return 'Invalid command'"}
{"ground_truth": "def extract_javascript_files(html_content): \n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_content, 'html.parser')\n    javascript_files = [script.get('src') for script in soup.find_all('script') if script.get('src')]\n    return javascript_files", "problem_description": "Write a Python function to extract the list of JavaScript files associated with a webpage given its HTML content.The signature of the function is: def extract_javascript_files(html_content)", "test_cases": {"test1": "extract_javascript_files('<html><head><script src=\"test1.js\"></script></head><body></body></html>eofx')", "test2": "extract_javascript_files('<html><head></head><body><script src=\"test2.js\"></script></body></html>')", "test3": "extract_javascript_files('<html><head><script src=\"test3.js\"></script><script src=\"test4.js\"></script></head><body></body></html>')", "test4": "extract_javascript_files('<html><head></head><body><script src=\"test5.js\"></script><script src=\"test6.js\"></script></body></html>')", "test5": "extract_javascript_files('<html><head><script src=\"test7.js\"></script><script src=\"test8.js\"></script><script src=\"test9.js\"></script></head><body></body></html>')", "test6": "extract_javascript_files('<html><head></head><body><script src=\"test10.js\"></script></body></html>')", "test7": "extract_javascript_files('<html><head><script src=\"test11.js\"></script></head><body><script src=\"test12.js\"></script></body></html>')", "test8": "extract_javascript_files('<html><head></head><body></body></html>')", "test9": "extract_javascript_files('<html><head><script src=\"test13.js\"></script><script src=\"\"></script></head><body></body></html>')", "test10": "extract_javascript_files('<html><head><script src=\"test14.js\"></script><script src=\"test15.js\"></script><script src=\"></script></head><body></body></html>')"}, "hidden_information": "def extract_javascript_files(html_content): \n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_content, 'html.parser')\n    javascript_files = [script.get('src') for script in soup.find_all('script') if script.get('src')]\n    return javascript_files"}
{"ground_truth": "def get_events_in_range(events, event_id, start_time, end_time):\n    events_in_id = [event for event in events if event[0] == event_id]\n    return [event for event in events_in_id if start_time <= event[1] <= end_time]", "problem_description": "I need to write a Python function that can efficiently filter a large list of events with IDs and timestamps to select only the events of a certain ID that occurred within a given time range.The signature of the function is: def get_events_in_range(events, event_id, start_time, end_time)", "test_cases": {"test1": "get_events_in_range([(1, 1643723400), (1, 1643723410), (2, 1643723420)], 1, 1643723400, 1643723415)", "test2": "get_events_in_range([(1, 1643723400), (1, 1643723410), (2, 1643723420)], 1, 1643723420, 1643723430)", "test3": "get_events_in_range([(1, 1643723400), (1, 1643723410), (2, 1643723420)], 2, 1643723400, 1643723415)", "test4": "get_events_in_range([], 1, 1643723400, 1643723415)", "test5": "get_events_in_range([(1, 1643723400)], 1, 1643723400, 1643723415)", "test6": "get_events_in_range([(1, 1643723400), (1, 1643723410)], 1, 1643723400, 1643723420)", "test7": "get_events_in_range([(1, 1643723400), (1, 1643723410), (1, 1643723420)], 1, 1643723410, 1643723425)", "test8": "get_events_in_range([(1, 1643723400), (1, 1643723410), (1, 1643723420)], 1, 1643723400, 1643723415)", "test9": "get_events_in_range([(1, 1643723400), (1, 1643723410), (2, 1643723420)], 2, 1643723400, 1643723430)", "test10": "get_events_in_range([(1, 1643723400), (1, 1643723410), (2, 1643723420)], 3, 1643723400, 1643723430)"}, "hidden_information": "def get_events_in_range(events, event_id, start_time, end_time):\n    events_in_id = [event for event in events if event[0] == event_id]\n    return [event for event in events_in_id if start_time <= event[1] <= end_time]"}
{"ground_truth": "def topological_sort(graph, S):\n    visited = set()\n    ordering = []\n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n        ordering.append(node)\n    for node in S:\n        if node not in visited:\n            dfs(node)\n    return ordering[::-1]\n\ndef graph_to_dict(graph):\n    result = {}\n    for node, edges in graph.items():\n        result[node] = edges\n        for edge in edges:\n            if edge not in result:\n                result[edge] = []\n    return result", "problem_description": "I need you to write a python function that can perform a variant of topological sorting on a graph with specific constraints. The graph is a DAG with known data relationships, a specific node set S, and edges indicating dependencies. I want the function to find a topological ordering of the subgraph consisting of nodes reachable from set S.The signature of the function is: def topological_sort(graph, S)", "test_cases": {"test1": "topological_sort(graph_to_dict({1: [2, 3], 2: [4], 3: [4], 4: []}), [2, 3])", "test2": "topological_sort(graph_to_dict({5: [6], 6: []}), [5])", "test3": "topological_sort(graph_to_dict({1: [2], 2: [3], 3: []}), [1])", "test4": "topological_sort(graph_to_dict({1: [2], 2: [], 3: [1], 4: []}), [3, 4])", "test5": "topological_sort(graph_to_dict({1: [], 2: [1], 3: [1], 4: []}), [2, 3])", "test6": "topological_sort(graph_to_dict({1: [2], 2: [3], 3: [4], 4: []}), [1])", "test7": "topological_sort(graph_to_dict({1: [2], 2: [], 3: [2, 4], 4: []}), [1, 3])", "test8": "topological_sort(graph_to_dict({1: [2], 2: [3], 3: [], 4: [2], 5: []}), [1, 4])", "test9": "topological_sort(graph_to_dict({1: [2, 3], 2: [4], 3: [], 4: [], 5: []}), [1])", "test10": "topological_sort(graph_to_dict({1: [], 2: [1], 3: [2], 4: [3], 5: []}), [2, 4])"}, "hidden_information": "def topological_sort(graph, S):\n    visited = set()\n    ordering = []\n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n        ordering.append(node)\n    for node in S:\n        if node not in visited:\n            dfs(node)\n    return ordering[::-1]\n\ndef graph_to_dict(graph):\n    result = {}\n    for node, edges in graph.items():\n        result[node] = edges\n        for edge in edges:\n            if edge not in result:\n                result[edge] = []\n    return result"}
{"ground_truth": "def get_run_order(tasks, roles, desired_behavior):\n    run_order = {}\n    for task in tasks:\n        if task['role'] in roles:\n            if desired_behavior == 'sequential':\n                if len(run_order) > 0:\n                    run_order[len(run_order)] = task['command']\n                else:\n                    run_order[0] = task['command']\n            elif desired_behavior == 'parallel':\n                run_order[task['task_name']] = task['command']\n    return run_order", "problem_description": "I want you to write a Python function that will determine the run order of deployment tasks based on server roles using Capistrano. The function should take into account whether the tasks should be run sequentially or in parallel. Can you guide me through creating this function?The signature of the function is: def get_run_order(tasks, roles, desired_behavior)", "test_cases": {"test1": "get_run_order([{'task_name': 'restart', 'role': 'web', 'command': 'run restart web'}, {'task_name': 'deploy', 'role': 'web', 'command': 'run deploy web'}], ['web'], 'sequential')", "test2": "get_run_order([{'task_name': 'process', 'role': 'processing', 'command': 'run process'}], ['processing'], 'parallel')", "test3": "get_run_order([{'task_name': 'restart', 'role': 'web', 'command': 'run restart web'}, {'task_name': 'deploy', 'role': 'processing', 'command': 'run deploy processing'}], ['web', 'processing'], 'sequential')", "test4": "get_run_order([{'task_name': 'process', 'role': 'processing', 'command': 'run process'}, {'task_name': 'deploy', 'role': 'web', 'command': 'run deploy web'}], ['processing', 'web'], 'parallel')", "test5": "get_run_order([{'task_name': 'restart', 'role': 'web', 'command': 'run restart web'}], ['web'], 'sequential')", "test6": "get_run_order([{'task_name': 'restart', 'role': 'processing', 'command': 'run restart processing'}], ['processing'], 'parallel')", "test7": "get_run_order([{'task_name': 'deploy', 'role': 'web', 'command': 'run deploy web'}], ['web'], 'sequential')", "test8": "get_run_order([{'task_name': 'deploy', 'role': 'processing', 'command': 'run deploy processing'}], ['processing'], 'parallel')", "test9": "get_run_order([{'task_name': 'restart', 'role': 'web', 'command': 'run restart web'}, {'task_name': 'deploy', 'role': 'processing', 'command': 'run deploy processing'}], ['web', 'processing'], 'parallel')", "test10": "get_run_order([{'task_name': 'process', 'role': 'processing', 'command': 'run process'}, {'task_name': 'deploy', 'role': 'web', 'command': 'run deploy web'}], ['processing', 'web'], 'sequential')"}, "hidden_information": "def get_run_order(tasks, roles, desired_behavior):\n    run_order = {}\n    for task in tasks:\n        if task['role'] in roles:\n            if desired_behavior == 'sequential':\n                if len(run_order) > 0:\n                    run_order[len(run_order)] = task['command']\n                else:\n                    run_order[0] = task['command']\n            elif desired_behavior == 'parallel':\n                run_order[task['task_name']] = task['command']\n    return run_order"}
{"ground_truth": "def get_complex_field_values(objects, field_name):\n    return [getattr(obj, field_name, None) for obj in objects if hasattr(obj, field_name)]", "problem_description": "Write a Python function that can retrieve a specific field from a list of complex objects. The objects have different fields and the function should be able to handle this. The function should be able to handle cases where the field does not exist in an object.The signature of the function is: def get_complex_field_values(objects, field_name)", "test_cases": {"test1": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}], 'name')", "test2": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}], 'age')", "test3": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice'}], 'age')", "test4": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': '25'}], 'age')", "test5": "get_complex_field_values([], 'name')", "test6": "get_complex_field_values([{'name': 'John', 'age': 30}], 'age')", "test7": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}], 'non_existent_field')", "test8": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25, ' occupation': 'Developer'}], 'occupation')", "test9": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25, ' occupation': None}], 'occupation')", "test10": "get_complex_field_values([{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25, ' occupation': ''}], 'occupation')"}, "hidden_information": "def get_complex_field_values(objects, field_name):\n    return [getattr(obj, field_name, None) for obj in objects if hasattr(obj, field_name)]"}
{"ground_truth": "def optimize_android_memory(data_size, max_references, object_size):\n    # Initialize the reference table\n    references = {}\n\n    # Calculate the number of entries based on the object size and max references\n    max_entries = max_references // object_size\n\n    # Loop through the data and fill up the reference table\n    for i in range(data_size):\n        if len(references) < max_entries:\n            references[i] = object_size\n        else:\n            # If the reference table is full, start releasing older references\n            oldest_ref = min(references.keys())\n            del references[oldest_ref]\n            references[i] = object_size\n\n    return references", "problem_description": "Hi agent, I'm working on an Android app and I'm having trouble managing native memory. Can you write a Python function that can help me optimize memory usage and prevent ReferenceTable overflows?The signature of the function is: def optimize_android_memory(data_size, max_references, object_size)", "test_cases": {"test1": "optimize_android_memory(100, 512, 2)", "test2": "optimize_android_memory(200, 512, 4)", "test3": "optimize_android_memory(300, 1024, 1)", "test4": "optimize_android_memory(400, 2048, 2)", "test5": "optimize_android_memory(500, 512, 1)", "test6": "optimize_android_memory(100, 512, 4)", "test7": "optimize_android_memory(200, 1024, 2)", "test8": "optimize_android_memory(300, 2048, 1)", "test9": "optimize_android_memory(400, 512, 2)", "test10": "optimize_android_memory(500, 1024, 1)"}, "hidden_information": "def optimize_android_memory(data_size, max_references, object_size):\n    # Initialize the reference table\n    references = {}\n\n    # Calculate the number of entries based on the object size and max references\n    max_entries = max_references // object_size\n\n    # Loop through the data and fill up the reference table\n    for i in range(data_size):\n        if len(references) < max_entries:\n            references[i] = object_size\n        else:\n            # If the reference table is full, start releasing older references\n            oldest_ref = min(references.keys())\n            del references[oldest_ref]\n            references[i] = object_size\n\n    return references"}
{"ground_truth": "def create_transaction_managers(entity_manager_factories):\n    transaction_managers = {}\n    for i, factory in enumerate(entity_manager_factories):\n        transaction_manager = {\n            'transactionManager': f'transactionManager{i+1}',\n            'entityManagerFactory': factory\n        }\n        transaction_managers[f'transactionManager{i+1}'] = transaction_manager\n    return transaction_managers", "problem_description": "I need to configure my Spring application to use multiple transaction managers for different data access layers. Each layer has its own database connection and I want to perform transactions on each database individually. Can you write a Python function that takes a list of entity manager factories and returns a dictionary of transaction managers, where each transaction manager is configured for a specific entity manager factory?The signature of the function is: def create_transaction_managers(entity_manager_factories)", "test_cases": {"test1": "create_transaction_managers(['entityManagerFactory1', 'entityManagerFactory2'])", "test2": "create_transaction_managers(['entityManagerFactoryA', 'entityManagerFactoryB', 'entityManagerFactoryC'])", "test3": "create_transaction_managers(['entityManagerFactoryX'])", "test4": "create_transaction_managers([])", "test5": "create_transaction_managers(['entityManagerFactory1', 'entityManagerFactory1'])", "test6": "create_transaction_managers(['entityManagerFactoryA', 'entityManagerFactoryB', 'entityManagerFactoryA'])", "test7": "create_transaction_managers(['entityManagerFactoryX', 'entityManagerFactoryY', 'entityManagerFactoryZ'])", "test8": "create_transaction_managers(['entityManagerFactoryM', 'entityManagerFactoryN'])", "test9": "create_transaction_managers(['entityManagerFactoryP', 'entityManagerFactoryQ', 'entityManagerFactoryR'])", "test10": "create_transaction_managers(['entityManagerFactoryS', 'entityManagerFactoryT', 'entityManagerFactoryS'])"}, "hidden_information": "def create_transaction_managers(entity_manager_factories):\n    transaction_managers = {}\n    for i, factory in enumerate(entity_manager_factories):\n        transaction_manager = {\n            'transactionManager': f'transactionManager{i+1}',\n            'entityManagerFactory': factory\n        }\n        transaction_managers[f'transactionManager{i+1}'] = transaction_manager\n    return transaction_managers"}
{"ground_truth": "def check_module_compatibility(module, python_version): compatible_versions = {'pygame': ['2.6', '2.5', '2.4', '3.1'], 'pyglet': ['2.6', '2.5', '2.4', '3.2', '3.1', '3.0']}; return python_version in compatible_versions.get(module, [])", "problem_description": "I want a Python function that can check if a game development module like Pygame or Pyglet is compatible with a specific Python version. I want the function to return True if the module is compatible with the given Python version and False otherwise. The agent should write this function.The signature of the function is: def check_module_compatibility(module, python_version)", "test_cases": {"test1": "check_module_compatibility('pygame', '2.6')", "test2": "check_module_compatibility('pyglet', '2.6')", "test3": "check_module_compatibility('pygame', '3.1')", "test4": "check_module_compatibility('pyglet', '3.1')", "test5": "check_module_compatibility('pygame', '2.7')", "test6": "check_module_compatibility('pyglet', '2.7')", "test7": "check_module_compatibility('pygame', '3.0')", "test8": "check_module_compatibility('pyglet', '3.0')", "test9": "check_module_compatibility('pygame', '3.2')", "test10": "check_module_compatibility('pyglet', '3.2')"}, "hidden_information": "def check_module_compatibility(module, python_version): compatible_versions = {'pygame': ['2.6', '2.5', '2.4', '3.1'], 'pyglet': ['2.6', '2.5', '2.4', '3.2', '3.1', '3.0']}; return python_version in compatible_versions.get(module, [])"}
{"ground_truth": "def format_labels_and_fields(labels, fields, layout='horizontal'):\n\tresult = []\n\tfor label, field in zip(labels, fields):\n\t\tif layout == 'horizontal':\n\t\t\tresult.append(f\"<span class='display-label'>{label}:</span><span class='display-field'>{field}</span>\")\n\t\telse:\n\t\t\tresult.append(f\"<div class='display-label'>{label}</div><div class='display-field'>{field}</div>\")\n\treturn ''.join(result)", "problem_description": "Please write a Python function that formats and displays labels and fields in a specific way. The function should take a list of labels and fields as input, and return a string of HTML that displays the labels and fields in either a horizontal or vertical layout. The function should use CSS classes 'display-label' and 'display-field' to style the output.The signature of the function is: def format_labels_and_fields(labels, fields, layout='horizontal')", "test_cases": {"test1": "format_labels_and_fields(['Name', 'Email', 'Phone'], ['John Doe', 'john@example.com', '123-456-7890'], 'horizontal')", "test2": "format_labels_and_fields(['Title', 'Created', 'Modified'], ['My Document', '2022-01-01', '2022-01-15'], 'vertical')", "test3": "format_labels_and_fields(['Author', 'Genre'], ['John Smith', 'Science Fiction'], 'horizontal')", "test4": "format_labels_and_fields(['Document ID', 'Properties ID'], ['123', '456'], 'vertical')", "test5": "format_labels_and_fields(['Created', 'Modified', 'Author'], ['2022-01-01', '2022-01-15', 'John Smith'], 'horizontal')", "test6": "format_labels_and_fields(['Title', 'Genre'], ['My Document', 'Science Fiction'], 'vertical')", "test7": "format_labels_and_fields(['Name', 'Email'], ['Jane Doe', 'jane@example.com'], 'horizontal')", "test8": "format_labels_and_fields(['Document ID', 'Properties ID', 'Author'], ['123', '456', 'John Smith'], 'vertical')", "test9": "format_labels_and_fields(['Created', 'Modified'], ['2022-01-01', '2022-01-15'], 'horizontal')", "test10": "format_labels_and_fields(['Title', 'Author', 'Genre'], ['My Document', 'John Smith', 'Science Fiction'], 'vertical')"}, "hidden_information": "def format_labels_and_fields(labels, fields, layout='horizontal'):\n\tresult = []\n\tfor label, field in zip(labels, fields):\n\t\tif layout == 'horizontal':\n\t\t\tresult.append(f\"<span class='display-label'>{label}:</span><span class='display-field'>{field}</span>\")\n\t\telse:\n\t\t\tresult.append(f\"<div class='display-label'>{label}</div><div class='display-field'>{field}</div>\")\n\treturn ''.join(result)"}
{"ground_truth": "def skype_link_formatter(phone_number):\n    formatted_number = phone_number.replace(' ', '')\n    return f'callto:{formatted_number}'", "problem_description": "I need a Python function that can create a clickable Skype link, similar to an HTML anchor tag. The function should take a phone number as input and return a link that will open Skype when clicked. Can you write me this function?The signature of the function is: def skype_link_formatter(phone_number)", "test_cases": {"test1": "skype_link_formatter('1 234 567 8900')", "test2": "skype_link_formatter('+1 123 456 7890')", "test3": "skype_link_formatter('(123) 456-7890')", "test4": "skype_link_formatter('+11 11 111 11 11')", "test5": "skype_link_formatter('61234567890')", "test6": "skype_link_formatter('(123)456-7890')", "test7": "skype_link_formatter('11111111111')", "test8": "skype_link_formatter('(111)111-11111')", "test9": "skype_link_formatter('111-111-11111')", "test10": "skype_link_formatter('0011 11 111 11 11')"}, "hidden_information": "def skype_link_formatter(phone_number):\n    formatted_number = phone_number.replace(' ', '')\n    return f'callto:{formatted_number}'"}
{"ground_truth": "def generate_update_query(table_name, column_names, set_column, new_values, condition_column, condition_value):\n    query = f\"UPDATE {table_name} SET \";\n    set_column_str = \", \".join([f\"{column} = %s\" for column in set_column])\n    query += set_column_str\n    query += f\" WHERE {condition_column} = %s\"\n    return query", "problem_description": "Can you please write a python function that generates a MySQL UPDATE query string for me? I want it to update certain columns in a table based on a certain condition.The signature of the function is: def generate_update_query(table_name, column_names, set_column, new_values, condition_column, condition_value)", "test_cases": {"test1": "generate_update_query(\"members\", \"Username, Password, FirstName, MiddleName, LastName, Address, Email\", \"Username, Password, FirstName, MiddleName, LastName, Address, Email\", [\"new_username\", \"new_password\", \"new_first_name\", \"new_middle_name\", \"new_last_name\", \"new_address\", \"new_email\"], \"memberId\", \"123\")", "test2": "generate_update_query(\"products\", \"name, price, quantity\", \"name, price\", [\"new_name\", 12.99], \"product_id\", \"1234\")", "test3": "generate_update_query(\"employees\", \"salary, job_title\", \"salary\", [50000], \"employee_id\", \"456\")", "test4": "generate_update_query(\"orders\", \"order_date, total\", \"order_date\", [\"2022-01-01\"], \"order_id\", \"789\")", "test5": "generate_update_query(\"customers\", \"address, phone_number\", \"address\", [\"123 Main St\"], \"customer_id\", \"101\")", "test6": "generate_update_query(\"suppliers\", \"company_name, contact_name\", \"company_name\", [\"New Company Name\"], \"supplier_id\", \"202\")", "test7": "generate_update_query(\"invoices\", \"invoice_date, total\", \"invoice_date\", [\"2022-02-01\"], \"invoice_id\", \"303\")", "test8": "generate_update_query(\"payments\", \"payment_date, amount\", \"payment_date\", [\"2022-03-01\"], \"payment_id\", \"404\")", "test9": "generate_update_query(\"deliveries\", \"delivery_date, status\", \"delivery_date\", [\"2022-04-01\"], \"delivery_id\", \"505\")", "test10": "generate_update_query(\"returns\", \"return_date, reason\", \"return_date\", [\"2022-05-01\"], \"return_id\", \"606\")"}, "hidden_information": "def generate_update_query(table_name, column_names, set_column, new_values, condition_column, condition_value):\n    query = f\"UPDATE {table_name} SET \";\n    set_column_str = \", \".join([f\"{column} = %s\" for column in set_column])\n    query += set_column_str\n    query += f\" WHERE {condition_column} = %s\"\n    return query"}
{"ground_truth": "def get_unique_identifier(stats_dict):\n    import hashlib\n    unique_id = hashlib.md5(str(stats_dict).encode()).hexdigest()\n    return unique_id", "problem_description": "I want to create a Facebook app that allows users to vote without requiring them to grant permissions. Can you write a Python function to uniquely identify users solely based on their stats data (e.g. country, locale, age-range)?The signature of the function is: def get_unique_identifier(stats_dict)", "test_cases": {"test1": "get_unique_identifier({'country': 'US', 'locale': 'en_US', 'age-range': '18-24'})", "test2": "get_unique_identifier({'country': 'CA', 'locale': 'fr_CA', 'age-range': '25-34'})", "test3": "get_unique_identifier({'country': 'GB', 'locale': 'en_GB', 'age-range': '35-44'})", "test4": "get_unique_identifier({'country': 'AU', 'locale': 'en_AU', 'age-range': '18-24'})", "test5": "get_unique_identifier({'country': 'IN', 'locale': 'en_IN', 'age-range': '25-34'})", "test6": "get_unique_identifier({'country': 'US', 'locale': 'es_US', 'age-range': '18-24'})", "test7": "get_unique_identifier({'country': 'DE', 'locale': 'de_DE', 'age-range': '35-44'})", "test8": "get_unique_identifier({'country': 'FR', 'locale': 'fr_FR', 'age-range': '18-24'})", "test9": "get_unique_identifier({'country': 'CN', 'locale': 'zh_CN', 'age-range': '25-34'})", "test10": "get_unique_identifier({'country': 'JP', 'locale': 'ja_JP', 'age-range': '35-44'})"}, "hidden_information": "def get_unique_identifier(stats_dict):\n    import hashlib\n    unique_id = hashlib.md5(str(stats_dict).encode()).hexdigest()\n    return unique_id"}
{"ground_truth": "def compare_lists(list1, list2):\n    return list1 == list2", "problem_description": "I need a python function that can compare two lists, like perl does with its ability to check if two arrays are equal. Can the agent write a function for me?The signature of the function is: def compare_lists(list1, list2)", "test_cases": {"test1": "compare_lists([1, 2, 3], [1, 2, 3])", "test2": "compare_lists(['a', 'b'], ['a', 'b'])", "test3": "compare_lists([1, 2, 3], [3, 2, 1])", "test4": "compare_lists([], [])", "test5": "compare_lists([1], [2])", "test6": "compare_lists([1, 2, 3], [1, 2, '3'])", "test7": "compare_lists(['a', 'b', 'c'], ['a', 'b', 'c'])", "test8": "compare_lists([1.2, 2.3], [1.2, 2.3])", "test9": "compare_lists([True, False], [True, False])", "test10": "compare_lists([None], [None])"}, "hidden_information": "def compare_lists(list1, list2):\n    return list1 == list2"}
{"ground_truth": "def get_backup_sets_to_keep(num_backups, num_to_archive, max_sets):\n    return min(num_backups - num_to_archive, max_sets)", "problem_description": "I'm having trouble managing my SQL backups. They're eating up too much space. Can you write a Python function that will help me figure out how many backup sets I should keep? But I don't have enough information to decide the correct parameters yet.The signature of the function is: def get_backup_sets_to_keep(num_backups, num_to_archive, max_sets)", "test_cases": {"test1": "get_backup_sets_to_keep(10, 3, 5) == 5", "test2": "get_backup_sets_to_keep(20, 10, 8) == 8", "test3": "get_backup_sets_to_keep(50, 20, 12) == 12", "test4": "get_backup_sets_to_keep(15, 5, 10) == 10", "test5": "get_backup_sets_to_keep(30, 15, 8) == 8", "test6": "get_backup_sets_to_keep(40, 20, 12) == 12", "test7": "get_backup_sets_to_keep(60, 30, 15) == 15", "test8": "get_backup_sets_to_keep(25, 10, 8) == 8", "test9": "get_backup_sets_to_keep(35, 15, 10) == 10", "test10": "get_backup_sets_to_keep(45, 20, 12) == 12"}, "hidden_information": "def get_backup_sets_to_keep(num_backups, num_to_archive, max_sets):\n    return min(num_backups - num_to_archive, max_sets)"}
{"ground_truth": "def search_staff(staff_list, search_term):\n    result = []\n    search_term = search_term.lower()\n    for staff in staff_list:\n        if (search_term in staff['first_name'].lower() or\n            search_term in staff['last_name'].lower() or\n            search_term in staff['middle_name'].lower() or\n            str(staff['staff_id']).startswith(search_term) or\n            str(staff['cost_center']).startswith(search_term)):\n            result.append(staff)\n    return result", "problem_description": "I need a function that can search for staff members from a list based on some keywords. The function should be able to search for matches in first name, last name, middle name, staff ID, and cost center. Can you write a Python function that can do this?The signature of the function is: def search_staff(staff_list, search_term)", "test_cases": {"test1": "search_staff([{'first_name': 'John', 'last_name': 'Doe', 'middle_name': 'M', 'staff_id': 123, 'cost_center': 456}], 'jo')", "test2": "search_staff([{'first_name': 'Jane', 'last_name': 'Doe', 'middle_name': 'A', 'staff_id': 321, 'cost_center': 654}], 'doe')", "test3": "search_staff([{'first_name': 'John', 'last_name': 'Smith', 'middle_name': 'X', 'staff_id': 111, 'cost_center': 222}], 'smith')", "test4": "search_staff([{'first_name': 'Jane', 'last_name': 'Doe', 'middle_name': 'Z', 'staff_id': 999, 'cost_center': 888}], 'j')", "test5": "search_staff([{'first_name': 'John', 'last_name': 'Doe', 'middle_name': 'Y', 'staff_id': 555, 'cost_center': 666}], '1')", "test6": "search_staff([{'first_name': 'Jane', 'last_name': 'Smith', 'middle_name': 'W', 'staff_id': 777, 'cost_center': 888}], 'w')", "test7": "search_staff([{'first_name': 'John', 'last_name': 'Smith', 'middle_name': 'V', 'staff_id': 222, 'cost_center': 333}], 'v')", "test8": "search_staff([{'first_name': 'Jane', 'last_name': 'Doe', 'middle_name': 'U', 'staff_id': 666, 'cost_center': 777}], 'u')", "test9": "search_staff([{'first_name': 'John', 'last_name': 'Doe', 'middle_name': 'T', 'staff_id': 444, 'cost_center': 555}], 't')", "test10": "search_staff([{'first_name': 'Jane', 'last_name': 'Smith', 'middle_name': 'S', 'staff_id': 888, 'cost_center': 999}], 's')"}, "hidden_information": "def search_staff(staff_list, search_term):\n    result = []\n    search_term = search_term.lower()\n    for staff in staff_list:\n        if (search_term in staff['first_name'].lower() or\n            search_term in staff['last_name'].lower() or\n            search_term in staff['middle_name'].lower() or\n            str(staff['staff_id']).startswith(search_term) or\n            str(staff['cost_center']).startswith(search_term)):\n            result.append(staff)\n    return result"}
{"ground_truth": "def get_initialized_pointer(initialize_null, num_constructors, default_value=None):\n    class Pointer:\n        def __init__(self):\n            if initialize_null:\n                self.pointer = None\n            else:\n                self.pointer = default_value\n\n        def __str__(self):\n            return str(self.pointer)\n\n    pointers = [Pointer() for _ in range(num_constructors)]\n    return [str(pointer) for pointer in pointers]", "problem_description": "I want you to write a Python function that can simulate how a C++ class member variable might behave if not initialized properly. For example, I have a C++ class with a member variable that is a pointer and multiple constructors. If the member variable is not initialized in the constructors, what would be its default value? I want the function to be able to simulate different scenarios.The signature of the function is: def get_initialized_pointer(initialize_null, num_constructors, default_value=None)", "test_cases": {"test1": "get_initialized_pointer(True, 1)", "test2": "get_initialized_pointer(False, 1)", "test3": "get_initialized_pointer(False, 2, default_value='garbage')", "test4": "get_initialized_pointer(True, 5)", "test5": "get_initialized_pointer(False, 3, default_value=0)", "test6": "get_initialized_pointer(True, 1, default_value='default')", "test7": "get_initialized_pointer(False, 2)", "test8": "get_initialized_pointer(True, 4, default_value=None)", "test9": "get_initialized_pointer(False, 1, default_value='init')", "test10": "get_initialized_pointer(True, 3)"}, "hidden_information": "def get_initialized_pointer(initialize_null, num_constructors, default_value=None):\n    class Pointer:\n        def __init__(self):\n            if initialize_null:\n                self.pointer = None\n            else:\n                self.pointer = default_value\n\n        def __str__(self):\n            return str(self.pointer)\n\n    pointers = [Pointer() for _ in range(num_constructors)]\n    return [str(pointer) for pointer in pointers]"}
{"ground_truth": "def parse_update_status(output):\n    update_status = ''\n    error_message = ''\n    lines = output.decode('utf-8').splitlines()\n    if 'New version available' in lines:\n        update_status = 'update_available'\n    elif 'Updater.exe finished successfully' in lines:\n        update_status = 'updated'\n    elif 'Updater.exe failed' in lines:\n        update_status = 'update_failed'\n        error_message = lines[-1]  # assuming the last line contains the error message\n    return {'status': update_status, 'error_message': error_message}", "problem_description": "Hey LLM, I want a Python function that can take the output of a QProcess (a Qt concept) and parse it to determine the update status. The output will contain error messages or success messages. I need the function to return a dictionary with two values: 'status' and 'error_message'. Can you help me with that?The signature of the function is: def parse_update_status(output)", "test_cases": {"test1": "parse_update_status(b'New version available')", "test2": "parse_update_status(b'Updater.exe finished successfully')", "test3": "parse_update_status(b'Updater.exe failed: error message')", "test4": "parse_update_status(b'Updater.exe finished successfully\\nAdditional info...')", "test5": "parse_update_status(b'Updater.exe failed\\nError message...')", "test6": "parse_update_status(b'Updater.exe failed\\nError message...\\n')", "test7": "parse_update_status(b'')", "test8": "parse_update_status(b'Updater.exe finished successfully\\n\\nAdditional info...')", "test9": "parse_update_status(b'Updater.exe failed')", "test10": "parse_update_status(b'Updater.exe finished successfully: success message')"}, "hidden_information": "def parse_update_status(output):\n    update_status = ''\n    error_message = ''\n    lines = output.decode('utf-8').splitlines()\n    if 'New version available' in lines:\n        update_status = 'update_available'\n    elif 'Updater.exe finished successfully' in lines:\n        update_status = 'updated'\n    elif 'Updater.exe failed' in lines:\n        update_status = 'update_failed'\n        error_message = lines[-1]  # assuming the last line contains the error message\n    return {'status': update_status, 'error_message': error_message}"}
{"ground_truth": "def get_underperforming_ids(id_to_key_values):\n    underperforming_ids = []\n    for id, key_values in id_to_key_values.items():\n        if len(key_values) == 3 and all(value == 'false' for value in key_values.values()):\n            underperforming_ids.append(id)\n    return underperforming_ids", "problem_description": "I want to write a python function that takes a dictionary of ids to their corresponding key-value pairs and returns a list of ids that have all their key-value pairs marked as false.The signature of the function is: def get_underperforming_ids(id_to_key_values)", "test_cases": {"test1": "get_underperforming_ids({1: {'x': 'false', 'y': 'false', 'z': 'false'}, 2: {'x': 'true', 'y': 'false', 'z': 'false'}})", "test2": "get_underperforming_ids({1: {'x': 'false', 'y': 'false', 'z': 'false'}, 2: {'x': 'false', 'y': 'false', 'z': 'false'}})", "test3": "get_underperforming_ids({1: {'x': 'true', 'y': 'true', 'z': 'true'}, 2: {'x': 'true', 'y': 'false', 'z': 'true'}})", "test4": "get_underperforming_ids({1: {'x': 'false', 'y': 'false'}, 2: {'x': 'false', 'y': 'false', 'z': 'false'}})", "test5": "get_underperforming_ids({1: {'x': 'true', 'y': 'false'}, 2: {'x': 'false', 'y': 'false', 'z': 'true'}})", "test6": "get_underperforming_ids({1: {'x': 'false', 'y': 'true', 'z': 'false'}, 2: {'x': 'false', 'y': 'false', 'z': 'false'}})", "test7": "get_underperforming_ids({1: {'x': 'false', 'y': 'false', 'z': 'true'}, 2: {'x': 'false', 'y': 'false', 'z': 'false'}})", "test8": "get_underperforming_ids({})", "test9": "get_underperforming_ids({1: {'x': 'false', 'y': 'false', 'z': 'false'}})", "test10": "get_underperforming_ids({1: {'x': 'false', 'y': 'false', 'z': 'false'}, 2: {'a': 'false', 'b': 'false', 'c': 'false'}})"}, "hidden_information": "def get_underperforming_ids(id_to_key_values):\n    underperforming_ids = []\n    for id, key_values in id_to_key_values.items():\n        if len(key_values) == 3 and all(value == 'false' for value in key_values.values()):\n            underperforming_ids.append(id)\n    return underperforming_ids"}
{"ground_truth": "def is_valid_classpath(directory, operating_system, classpath):\n    if operating_system == 'Windows':\n        classpath_separator = ';'\n    else:\n        classpath_separator = ':'\n    if classpath_separator in classpath:\n        classpaths = classpath.split(classpath_separator)\n    else:\n        classpaths = [classpath]\n    for cp in classpaths:\n        if operating_system == 'Windows':\n            if not (cp.endswith('.jar') and cp.startswith(directory)):\n                return False\n        else:\n            if not (cp.endswith('.jar') and cp.startswith(directory.replace('\\\\', '/'))):\n                return False\n    return True", "problem_description": "I want you to write a Python function to check if a given directory path is valid for a Java classpath. I need the function to work on both Windows and Unix-based operating systems. Can you help me with that?The signature of the function is: def is_valid_classpath(directory, operating_system, classpath)", "test_cases": {"test1": "is_valid_classpath('C:\\\\lib\\\\', 'Windows', 'C:\\\\lib\\\\transfer.jar;C:\\\\lib\\\\someother.jar')", "test2": "is_valid_classpath('/lib/', 'Unix', '/lib/transfer.jar:/lib/someother.jar')", "test3": "is_valid_classpath('C:\\\\lib\\\\', 'Windows', 'C:\\\\lib\\\\transfer.jar')", "test4": "is_valid_classpath('/lib/', 'Unix', '/lib/transfer.jar')", "test5": "is_valid_classpath('C:\\\\lib\\\\', 'Unix', 'C:\\\\lib\\\\transfer.jar;C:\\\\lib\\\\someother.jar')", "test6": "is_valid_classpath('/lib/', 'Windows', '/lib/transfer.jar:/lib/someother.jar')", "test7": "is_valid_classpath('C:\\\\lib\\\\', 'Windows', 'C:\\\\lib\\\\transfer.jar;badasdfasdf')", "test8": "is_valid_classpath('/lib/', 'Unix', '/lib/transfer.jar;badpath')", "test9": "is_valid_classpath('C:\\\\lib\\\\', 'Windows', 'C:\\\\lib\\\\transfer')", "test10": "is_valid_classpath('/lib/', 'Unix', '/lib/transfer')"}, "hidden_information": "def is_valid_classpath(directory, operating_system, classpath):\n    if operating_system == 'Windows':\n        classpath_separator = ';'\n    else:\n        classpath_separator = ':'\n    if classpath_separator in classpath:\n        classpaths = classpath.split(classpath_separator)\n    else:\n        classpaths = [classpath]\n    for cp in classpaths:\n        if operating_system == 'Windows':\n            if not (cp.endswith('.jar') and cp.startswith(directory)):\n                return False\n        else:\n            if not (cp.endswith('.jar') and cp.startswith(directory.replace('\\\\', '/'))):\n                return False\n    return True"}
{"ground_truth": "def calculate_value(input_number):\n    return [35, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125][input_number-1]", "problem_description": "I want you to write a Python function that calculates a value based on an input integer. The input integer will be a unique value from 1 to 20, and the output value will depend on the input integer. I don't want to use if-elif-else statements, is there a better way to do it?The signature of the function is: def calculate_value(input_number)", "test_cases": {"test1": "calculate_value(1)", "test2": "calculate_value(5)", "test3": "calculate_value(10)", "test4": "calculate_value(15)", "test5": "calculate_value(20)", "test6": "calculate_value(3)", "test7": "calculate_value(8)", "test8": "calculate_value(12)", "test9": "calculate_value(18)", "test10": "calculate_value(7)"}, "hidden_information": "def calculate_value(input_number):\n    return [35, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125][input_number-1]"}
{"ground_truth": "def validate_input(input_str):\n    if input_str.count(',') <= 3 and input_str.replace(',', '').replace('-', '') != '':\n        return True\n    else:\n        return False", "problem_description": "I need a Python function to validate a text field input, allowing a maximum of 3 commas and ensuring the input string is not empty. The function should return True for valid inputs and False otherwise.The signature of the function is: def validate_input(input_str)", "test_cases": {"test1": "validate_input('a,bb,ddddd,eeeee')", "test2": "validate_input('Hello, World!')", "test3": "validate_input('a,,bbbbb')", "test4": "validate_input('123,456,789,0000')", "test5": "validate_input('')", "test6": "validate_input('a,bb,cc,dd,ee')", "test7": "validate_input('-1,-2,-3,4')", "test8": "validate_input('abc')", "test9": "validate_input('a,bb,cc,')", "test10": "validate_input(',a,bb,cc,dd')"}, "hidden_information": "def validate_input(input_str):\n    if input_str.count(',') <= 3 and input_str.replace(',', '').replace('-', '') != '':\n        return True\n    else:\n        return False"}
{"ground_truth": "def get_view_names(db_name):\n    import sqlite3\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type = 'view'\")\n    views = [row[0] for row in cursor.fetchall()]\n    conn.close()\n    return views", "problem_description": "I have some SQLite databases and I need a Python function to see only the names of the views in them, can you write it for me?The signature of the function is: def get_view_names(db_name)", "test_cases": {"test1": "get_view_names('database1.db')", "test2": "get_view_names('mydb.sqlite')", "test3": "get_view_names('kat.db')", "test4": "get_view_names('stock.db')", "test5": "get_view_names('qualified.db')", "test6": "get_view_names('exam.db')", "test7": "get_view_names('third.db')", "test8": "get_view_names('tune.db')", "test9": "get_view_names('mynew.db')", "test10": "get_view_names('scheme.db')"}, "hidden_information": "def get_view_names(db_name):\n    import sqlite3\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type = 'view'\")\n    views = [row[0] for row in cursor.fetchall()]\n    conn.close()\n    return views"}
{"ground_truth": "def calculate_reputation(score_values, decay_rate, new_score):\n    # Apply decay rate to previous scores\n    decayed_scores = [s * decay_rate for s in score_values]\n    # Add new score to the list of decayed scores\n    decayed_scores.append(new_score)\n    # Sum up all scores\n    return sum(decayed_scores)", "problem_description": "Write a Python function that calculates a user's reputation score based on their previous scores and a new score. The function should apply a decay rate to the previous scores and add the new score to the total. I'm not sure what decay rate I want to use, can you help me determine that and implement the function?The signature of the function is: def calculate_reputation(score_values, decay_rate, new_score)", "test_cases": {"test1": "calculate_reputation([100, 120, 130], 0.9, 150)", "test2": "calculate_reputation([50, 75], 0.8, 90)", "test3": "calculate_reputation([200], 0.95, 250)", "test4": "calculate_reputation([], 0.9, 100)", "test5": "calculate_reputation([100, 120], 1.0, 150)", "test6": "calculate_reputation([50, 75], 0.5, 90)", "test7": "calculate_reputation([200], 0.99, 250)", "test8": "calculate_reputation([100, 120, 130, 140], 0.9, 160)", "test9": "calculate_reputation([50, 75, 80], 0.8, 100)", "test10": "calculate_reputation([200, 250, 300], 0.95, 350)"}, "hidden_information": "def calculate_reputation(score_values, decay_rate, new_score):\n    # Apply decay rate to previous scores\n    decayed_scores = [s * decay_rate for s in score_values]\n    # Add new score to the list of decayed scores\n    decayed_scores.append(new_score)\n    # Sum up all scores\n    return sum(decayed_scores)"}
{"ground_truth": "def calculate_habitat_suitability(temperature, precipitation, elevation, species_thresholds={'min_temp': 10, 'max_temp': 30, 'min_precipitation': 500, 'max_precipitation': 2000, 'min_elevation': 100, 'max_elevation': 5000}): return all([temperature >= species_thresholds['min_temp'], temperature <= species_thresholds['max_temp'], precipitation >= species_thresholds['min_precipitation'], precipitation <= species_thresholds['max_precipitation'], elevation >= species_thresholds['min_elevation'], elevation <= species_thresholds['max_elevation']])", "problem_description": "Hey, I need a Python function to calculate the habitat suitability of a species in a given environment. The function should take some environmental parameters into account and return a boolean indicating whether the species can survive. Can you help me write this function?The signature of the function is: def calculate_habitat_suitability(temperature, precipitation, elevation, species_thresholds={'min_temp'", "test_cases": {"test1": "calculate_habitat_suitability(20, 1000, 2000)", "test2": "calculate_habitat_suitability(5, 500, 3000)", "test3": "calculate_habitat_suitability(35, 2500, 1000)", "test4": "calculate_habitat_suitability(25, 1500, 4000)", "test5": "calculate_habitat_suitability(15, 2000, 4500)", "test6": "calculate_habitat_suitability(30, 1200, 3500)", "test7": "calculate_habitat_suitability(10, 2500, 500)", "test8": "calculate_habitat_suitability(28, 1800, 3800)", "test9": "calculate_habitat_suitability(18, 2200, 2800)", "test10": "calculate_habitat_suitability(32, 2000, 4800)"}, "hidden_information": "def calculate_habitat_suitability(temperature, precipitation, elevation, species_thresholds={'min_temp': 10, 'max_temp': 30, 'min_precipitation': 500, 'max_precipitation': 2000, 'min_elevation': 100, 'max_elevation': 5000}): return all([temperature >= species_thresholds['min_temp'], temperature <= species_thresholds['max_temp'], precipitation >= species_thresholds['min_precipitation'], precipitation <= species_thresholds['max_precipitation'], elevation >= species_thresholds['min_elevation'], elevation <= species_thresholds['max_elevation']])"}
{"ground_truth": "def can_use_motheboard_hdmi(has_video_card, video_card_has_hdmi, onboard_video_disabled): return not (has_video_card and not video_card_has_hdmi) and not onboard_video_disabled", "problem_description": "Can you write a Python function that helps me decide whether my motherboard's HDMI port can be used in different scenarios? I want the function to take into account whether an additional video card is installed and whether the video card has its own HDMI port. I also want the function to consider whether the onboard video is disabled.The signature of the function is: def can_use_motheboard_hdmi(has_video_card, video_card_has_hdmi, onboard_video_disabled)", "test_cases": {"test1": "can_use_motheboard_hdmi(True, False, False)", "test2": "can_use_motheboard_hdmi(False, False, False)", "test3": "can_use_motheboard_hdmi(True, True, False)", "test4": "can_use_motheboard_hdmi(False, False, True)", "test5": "can_use_motheboard_hdmi(True, False, True)", "test6": "can_use_motheboard_hdmi(False, True, False)", "test7": "can_use_motheboard_hdmi(True, True, True)", "test8": "can_use_motheboard_hdmi(False, False, False)", "test9": "can_use_motheboard_hdmi(True, False, False)", "test10": "can_use_motheboard_hdmi(False, True, True)"}, "hidden_information": "def can_use_motheboard_hdmi(has_video_card, video_card_has_hdmi, onboard_video_disabled): return not (has_video_card and not video_card_has_hdmi) and not onboard_video_disabled"}
{"ground_truth": "def calculate_power_consumption(cpu_wattage, motherboard_wattage, gpu_wattage, monitor_wattage, other_components_wattage):\n    total_wattage = cpu_wattage + motherboard_wattage + gpu_wattage + monitor_wattage + other_components_wattage\n    return total_wattage", "problem_description": "Can the agent help me write a Python function to calculate the actual power consumption of my computer system? I want the function to take into account the power consumption of my CPU, motherboard, GPU, monitor, and other components.The signature of the function is: def calculate_power_consumption(cpu_wattage, motherboard_wattage, gpu_wattage, monitor_wattage, other_components_wattage)", "test_cases": {"test1": "calculate_power_consumption(95, 75, 100, 35, 50)", "test2": "calculate_power_consumption(65, 75, 200, 25, 30)", "test3": "calculate_power_consumption(35, 50, 300, 40, 20)", "test4": "calculate_power_consumption(55, 60, 150, 30, 25)", "test5": "calculate_power_consumption(85, 70, 120, 20, 40)", "test6": "calculate_power_consumption(110, 80, 180, 45, 35)", "test7": "calculate_power_consumption(60, 65, 250, 50, 30)", "test8": "calculate_power_consumption(70, 55, 220, 35, 25)", "test9": "calculate_power_consumption(90, 60, 200, 30, 40)", "test10": "calculate_power_consumption(75, 70, 280, 40, 35)"}, "hidden_information": "def calculate_power_consumption(cpu_wattage, motherboard_wattage, gpu_wattage, monitor_wattage, other_components_wattage):\n    total_wattage = cpu_wattage + motherboard_wattage + gpu_wattage + monitor_wattage + other_components_wattage\n    return total_wattage"}
{"ground_truth": "def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 < str2:\n        return -1\n    else:\n        return 1", "problem_description": "I need a Python function that compares two input strings and returns an integer indicating their lexicographic order. The function should return 0 if the strings are equal, -1 if the first string comes before the second string, and 1 if the first string comes after the second string. Can you write a Python function that achieves this?The signature of the function is: def compare_strings(str1, str2)", "test_cases": {"test1": "compare_strings('apple', 'banana')", "test2": "compare_strings('hello', 'hello')", "test3": "compare_strings('zebra', 'abc')", "test4": "compare_strings('abc', 'abc')", "test5": "compare_strings('bcd', 'abc')", "test6": "compare_strings('', '')", "test7": "compare_strings('a', '')", "test8": "compare_strings('', 'a')", "test9": "compare_strings('abc', '')", "test10": "compare_strings('', 'abc')"}, "hidden_information": "def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 < str2:\n        return -1\n    else:\n        return 1"}
{"ground_truth": "def is_user_active(visits, years, months, last_seen): \n    if years < 2 and months < 6: \n        return False \n    if visits < 3: \n        return False \n    current_time = '12' \n    last_seen_time = '12' \n    if current_time == last_seen_time or last_seen_time > '11': \n        return True \n    else: \n        return False", "problem_description": "Write a Python function that determines whether a stack exchange user is active or not. The function should take some input parameters and return True if the user is active and False otherwise.The signature of the function is: def is_user_active(visits, years, months, last_seen)", "test_cases": {"test1": "is_user_active(5, 3, 0, '12')", "test2": "is_user_active(2, 1, 0, '10')", "test3": "is_user_active(6, 4, 0, '14')", "test4": "is_user_active(1, 0, 0, '12')", "test5": "is_user_active(10, 1, 0, '15')", "test6": "is_user_active(3, 1, 10, '12')", "test7": "is_user_active(1, 1, 1, '12')", "test8": "is_user_active(8, 2, 0, '11')", "test9": "is_user_active(0, 0, 0, '12')", "test10": "is_user_active(7, 0, 2, '13')"}, "hidden_information": "def is_user_active(visits, years, months, last_seen): \n    if years < 2 and months < 6: \n        return False \n    if visits < 3: \n        return False \n    current_time = '12' \n    last_seen_time = '12' \n    if current_time == last_seen_time or last_seen_time > '11': \n        return True \n    else: \n        return False"}
{"ground_truth": "def calculate_neutering_benefits_and_risks(age, breed, sex, health_status, owner_responsibility):\n  benefits = 0\n  risks = 0\n  if age < 10:\n    benefits += 1  # reduces unwanted spraying\n    benefits += 1  # reduces roaming\n    benefits += 1  # removes chance of testicular cancer\n    benefits += 1  # reduces negative social behaviors\n    benefits += 1  # reduces aggressive behavior\n  if breed == 'purebred':\n    risks += 1  # may be a good dog for breeding purposes\n  if sex == 'male':\n    risks += 1  # may contribute to population growth\n  if health_status == 'excellent':\n    benefits += 1  # reduces chance of prostate problems\n  if owner_responsibility == 'high':\n    benefits += 1  # owner is responsible for preventing unwanted litters\n  return benefits, risks", "problem_description": "I want you to write a Python function that calculates the benefits and risks of neutering a dog based on its age, breed, sex, health status, and owner responsibility. The function should return two values: the total benefits and the total risks. I want the function to consider the factors mentioned in the article, such as reducing unwanted spraying and roaming, removing the chance of testicular cancer, reducing negative social behaviors, and reducing aggressive behavior.The signature of the function is: def calculate_neutering_benefits_and_risks(age, breed, sex, health_status, owner_responsibility)", "test_cases": {"test1": "calculate_neutering_benefits_and_risks(6, 'mixed', 'male', 'good', 'medium')", "test2": "calculate_neutering_benefits_and_risks(1, 'purebred', 'male', 'excellent', 'high')", "test3": "calculate_neutering_benefits_and_risks(15, 'mixed', 'female', 'poor', 'low')", "test4": "calculate_neutering_benefits_and_risks(5, 'purebred', 'male', 'good', 'high')", "test5": "calculate_neutering_benefits_and_risks(10, 'mixed', 'male', 'excellent', 'medium')", "test6": "calculate_neutering_benefits_and_risks(3, 'purebred', 'female', 'poor', 'low')", "test7": "calculate_neutering_benefits_and_risks(8, 'mixed', 'male', 'good', 'high')", "test8": "calculate_neutering_benefits_and_risks(12, 'purebred', 'male', 'excellent', 'medium')", "test9": "calculate_neutering_benefits_and_risks(2, 'mixed', 'female', 'poor', 'low')", "test10": "calculate_neutering_benefits_and_risks(5, 'purebred', 'male', 'good', 'high')"}, "hidden_information": "def calculate_neutering_benefits_and_risks(age, breed, sex, health_status, owner_responsibility):\n  benefits = 0\n  risks = 0\n  if age < 10:\n    benefits += 1  # reduces unwanted spraying\n    benefits += 1  # reduces roaming\n    benefits += 1  # removes chance of testicular cancer\n    benefits += 1  # reduces negative social behaviors\n    benefits += 1  # reduces aggressive behavior\n  if breed == 'purebred':\n    risks += 1  # may be a good dog for breeding purposes\n  if sex == 'male':\n    risks += 1  # may contribute to population growth\n  if health_status == 'excellent':\n    benefits += 1  # reduces chance of prostate problems\n  if owner_responsibility == 'high':\n    benefits += 1  # owner is responsible for preventing unwanted litters\n  return benefits, risks"}
{"ground_truth": "def is_record_accessible(is_terrorism_investigation, is_individual_suspected, has_probable_cause): return is_terrorism_investigation and (is_individual_suspected or has_probable_cause)", "problem_description": "Write a Python function that determines whether a person's records can be accessed by the FBI under Section 215 of the PATRIOT Act. The function should take into account whether the investigation is related to terrorism, whether the individual is suspected of a crime, and whether there is probable cause.The signature of the function is: def is_record_accessible(is_terrorism_investigation, is_individual_suspected, has_probable_cause)", "test_cases": {"test1": "is_record_accessible(True, True, True)", "test2": "is_record_accessible(True, False, True)", "test3": "is_record_accessible(True, False, False)", "test4": "is_record_accessible(False, True, True)", "test5": "is_record_accessible(False, False, True)", "test6": "is_record_accessible(True, True, False)", "test7": "is_record_accessible(False, False, False)", "test8": "is_record_accessible(True, True, True)", "test9": "is_record_accessible(False, True, False)", "test10": "is_record_accessible(False, False, False)"}, "hidden_information": "def is_record_accessible(is_terrorism_investigation, is_individual_suspected, has_probable_cause): return is_terrorism_investigation and (is_individual_suspected or has_probable_cause)"}
{"ground_truth": "def analyze_protester_demands(protester_data, government_responses, key_demands=['resignation', 'political_freedoms', 'rights'], key_responses=['concessions', 'trials', 'reforms']):\n    demands_met = 0\n    for demand in key_demands:\n        if demand in government_responses:\n            demands_met += 1\n    effectiveness = demands_met / len(key_demands)\n    return {'effectiveness': effectiveness, 'demands_met': demands_met}", "problem_description": "Can you write a Python function to determine the effectiveness of the government's response to protester demands in Bahrain, considering key demands such as government resignation, political freedoms, and rights, and key government responses such as concessions, trials, and reforms?The signature of the function is: def analyze_protester_demands(protester_data, government_responses, key_demands=['resignation', 'political_freedoms', 'rights'], key_responses=['concessions', 'trials', 'reforms'])", "test_cases": {"test1": "analyze_protester_demands(['protesters demand government resignation'], ['government offers concessions'], ['resignation'], ['concessions'])", "test2": "analyze_protester_demands(['protesters demand political freedoms and rights'], ['government establishes special security court'], ['political_freedoms', 'rights'], ['trials'])", "test3": "analyze_protester_demands(['protesters demand release of political prisoners'], ['government releases some prisoners'], ['resignation'], ['reforms'])", "test4": "analyze_protester_demands(['protesters demand government resignation and political freedoms'], ['government offers concessions and establishes special security court'], ['resignation', 'political_freedoms'], ['concessions', 'trials'])", "test5": "analyze_protester_demands(['protesters demand rights and release of political prisoners'], ['government establishes special security court and releases some prisoners'], ['rights', 'resignation'], ['trials', 'reforms'])", "test6": "analyze_protester_demands(['protesters demand government resignation and rights'], ['government offers concessions and releases some prisoners'], ['resignation', 'rights'], ['concessions', 'reforms'])", "test7": "analyze_protester_demands(['protesters demand political freedoms and release of political prisoners'], ['government establishes special security court and releases some prisoners'], ['political_freedoms', 'resignation'], ['trials', 'concessions'])", "test8": "analyze_protester_demands(['protesters demand government resignation, political freedoms, and rights'], ['government offers concessions, establishes special security court, and releases some prisoners'], ['resignation', 'political_freedoms', 'rights'], ['concessions', 'trials', 'reforms'])", "test9": "analyze_protester_demands(['protesters demand release of political prisoners and rights'], ['government releases some prisoners and establishes special security court'], ['resignation', 'rights'], ['concessions', 'trials'])", "test10": "analyze_protester_demands(['protesters demand government resignation, political freedoms, and release of political prisoners'], ['government offers concessions, establishes special security court, and releases some prisoners'], ['resignation', 'political_freedoms', 'rights'], ['concessions', 'trials', 'reforms'])"}, "hidden_information": "def analyze_protester_demands(protester_data, government_responses, key_demands=['resignation', 'political_freedoms', 'rights'], key_responses=['concessions', 'trials', 'reforms']):\n    demands_met = 0\n    for demand in key_demands:\n        if demand in government_responses:\n            demands_met += 1\n    effectiveness = demands_met / len(key_demands)\n    return {'effectiveness': effectiveness, 'demands_met': demands_met}"}
{"ground_truth": "def analyze_immigration_data(immigration_stats, threshold_speed_limit=60, us_citizens_displaced_threshold=0.5):\n    illegal_system_abuse = 0\n    total_cases = len(immigration_stats)\n    for case in immigration_stats:\n        if case['speed_exceeded'] > threshold_speed_limit:\n            illegal_system_abuse += 1\n            if case['us_citizens_displaced']:\n                return round(illegal_system_abuse / total_cases, 2)\n\n    if (illegal_system_abuse / total_cases) > us_citizens_displaced_threshold:\n        return round(illegal_system_abuse / total_cases, 2)\n    else:\n        return 0", "problem_description": "Can you write a python function that determines if undocumented immigrants are causing problems with following speed limits and job displacement based on some statistics? I have some data I can provide later.The signature of the function is: def analyze_immigration_data(immigration_stats, threshold_speed_limit=60, us_citizens_displaced_threshold=0.5)", "test_cases": {"test1": "analyze_immigration_data([{'speed_exceeded': 70, 'us_citizens_displaced': True}, {'speed_exceeded': 50, 'us_citizens_displaced': False}])", "test2": "analyze_immigration_data([{'speed_exceeded': 80, 'us_citizens_displaced': True}, {'speed_exceeded': 60, 'us_citizens_displaced': False}])", "test3": "analyze_immigration_data([{'speed_exceeded': 50, 'us_citizens_displaced': False}, {'speed_exceeded': 50, 'us_citizens_displaced': False}])", "test4": "analyze_immigration_data([{'speed_exceeded': 90, 'us_citizens_displaced': True}, {'speed_exceeded': 60, 'us_citizens_displaced': False}, {'speed_exceeded': 70, 'us_citizens_displaced': True}])", "test5": "analyze_immigration_data([{'speed_exceeded': 80, 'us_citizens_displaced': True}, {'speed_exceeded': 70, 'us_citizens_displaced': True}])", "test6": "analyze_immigration_data([{'speed_exceeded': 40, 'us_citizens_displaced': False}, {'speed_exceeded': 30, 'us_citizens_displaced': False}])", "test7": "analyze_immigration_data([{'speed_exceeded': 90, 'us_citizens_displaced': True}, {'speed_exceeded': 80, 'us_citizens_displaced': True}, {'speed_exceeded': 70, 'us_citizens_displaced': True}])", "test8": "analyze_immigration_data([{'speed_exceeded': 60, 'us_citizens_displaced': True}, {'speed_exceeded': 60, 'us_citizens_displaced': False}])", "test9": "analyze_immigration_data([{'speed_exceeded': 70, 'us_citizens_displaced': True}, {'speed_exceeded': 60, 'us_citizens_displaced': False}, {'speed_exceeded': 80, 'us_citizens_displaced': True}])", "test10": "analyze_immigration_data([{'speed_exceeded': 90, 'us_citizens_displaced': True}, {'speed_exceeded': 90, 'us_citizens_displaced': True}])"}, "hidden_information": "def analyze_immigration_data(immigration_stats, threshold_speed_limit=60, us_citizens_displaced_threshold=0.5):\n    illegal_system_abuse = 0\n    total_cases = len(immigration_stats)\n    for case in immigration_stats:\n        if case['speed_exceeded'] > threshold_speed_limit:\n            illegal_system_abuse += 1\n            if case['us_citizens_displaced']:\n                return round(illegal_system_abuse / total_cases, 2)\n\n    if (illegal_system_abuse / total_cases) > us_citizens_displaced_threshold:\n        return round(illegal_system_abuse / total_cases, 2)\n    else:\n        return 0"}
{"ground_truth": "def is_revokeable_by_majority(ruling_type, is_tax_law=False):\n    if ruling_type == 'tax law':\n        if is_tax_law:\n            return True\n        else:\n            return False\n    else:\n        if ruling_type == 'supermajority':\n            return False\n        else:\n            return True", "problem_description": "I need you to write a function that takes a court ruling type and determines if it can be revoked by simple majority in the senate. However, I do not know the exact naming convention. I need your help to understand this.The signature of the function is: def is_revokeable_by_majority(ruling_type, is_tax_law=False)", "test_cases": {"test1": "is_revokeable_by_majority('tax law', True)", "test2": "is_revokeable_by_majority('supermajority', False)", "test3": "is_revokeable_by_majority('other law', True)", "test4": "is_revokeable_by_majority('tax law', False)", "test5": "is_revokeable_by_majority('constitutional amendment', False)", "test6": "is_revokeable_by_majority('budget law', False)", "test7": "is_revokeable_by_majority('tax law', True)", "test8": "is_revokeable_by_majority('supermajority', True)", "test9": "is_revokeable_by_majority('regulatory law', False)", "test10": "is_revokeable_by_majority('judicial law', False)"}, "hidden_information": "def is_revokeable_by_majority(ruling_type, is_tax_law=False):\n    if ruling_type == 'tax law':\n        if is_tax_law:\n            return True\n        else:\n            return False\n    else:\n        if ruling_type == 'supermajority':\n            return False\n        else:\n            return True"}
{"ground_truth": "def calculate_large_drinks(visitors, preferences, drink_sizes=[16]):\n    total_drinks = 0\n    for preference in preferences:\n        if preference > drink_sizes[0]:\n            total_drinks += 1\n    return total_drinks * visitors", "problem_description": "Hi agent, I need a Python function to help a vending machine decide how many large drinks to stock. The city is implementing a new policy that limits drink sizes to 16 ounces. The machine wants to know how many large drinks to stock based on the number of visitors and their drink preferences.The signature of the function is: def calculate_large_drinks(visitors, preferences, drink_sizes=[16])", "test_cases": {"test1": "calculate_large_drinks(50, [12, 16, 20, 12, 24])", "test2": "calculate_large_drinks(25, [8, 12, 16, 16, 20, 24, 24])", "test3": "calculate_large_drinks(100, [16, 16, 16, 16, 16, 12, 8, 24, 20])", "test4": "calculate_large_drinks(10, [12, 12, 12, 20, 24, 16, 16, 8, 12])", "test5": "calculate_large_drinks(50, [16, 16, 16, 16, 20, 12, 24, 16, 24])", "test6": "calculate_large_drinks(25, [12, 8, 8, 12, 16, 16, 16])", "test7": "calculate_large_drinks(100, [16, 20, 24, 16, 16, 12, 12, 16, 16])", "test8": "calculate_large_drinks(50, [16, 16, 16, 20, 16, 16, 12, 16])", "test9": "calculate_large_drinks(25, [12, 16, 16, 20, 16, 16, 12])", "test10": "calculate_large_drinks(100, [16, 16, 16, 20, 20, 12, 12, 12, 16])"}, "hidden_information": "def calculate_large_drinks(visitors, preferences, drink_sizes=[16]):\n    total_drinks = 0\n    for preference in preferences:\n        if preference > drink_sizes[0]:\n            total_drinks += 1\n    return total_drinks * visitors"}
{"ground_truth": "def calculate_tau_spread(tau_values, region_connections):\n    tau_distribution = {region: 0 for region in set([k for connection in region_connections for k in connection])}\n    for connection in region_connections:\n        tau_distribution[connection[0]] += tau_values[connection[0]]\n        tau_distribution[connection[1]] += tau_values[connection[1]]\n    max_value = max(tau_distribution.values())\n    tau_spread_regions = [region for region, value in tau_distribution.items() if value >= max_value/2]\n    return tau_spread_regions", "problem_description": "I need a python function to analyze the spread of tau protein in the brain of Alzheimer's disease. Given a list of region connections and the tau protein values for each region, calculate the regions where tau protein spreads. I don't have the details, can you ask some questions to help me clarify?The signature of the function is: def calculate_tau_spread(tau_values, region_connections)", "test_cases": {"test1": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'C')])", "test2": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C')])", "test3": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E')])", "test4": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F')])", "test5": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G')])", "test6": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G'), ('G', 'H')])", "test7": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G'), ('G', 'H'), ('H', 'I')])", "test8": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G'), ('G', 'H'), ('H', 'I'), ('I', 'J')])", "test9": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100, 'K': 110}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G'), ('G', 'H'), ('H', 'I'), ('I', 'J'), ('J', 'K')])", "test10": "calculate_tau_spread(tau_values={'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50, 'F': 60, 'G': 70, 'H': 80, 'I': 90, 'J': 100, 'K': 110, 'L': 120}, region_connections=[('A', 'B'), ('B', 'C'), ('A', 'D'), ('D', 'C'), ('C', 'E'), ('E', 'F'), ('F', 'G'), ('G', 'H'), ('H', 'I'), ('I', 'J'), ('J', 'K'), ('K', 'L')])"}, "hidden_information": "def calculate_tau_spread(tau_values, region_connections):\n    tau_distribution = {region: 0 for region in set([k for connection in region_connections for k in connection])}\n    for connection in region_connections:\n        tau_distribution[connection[0]] += tau_values[connection[0]]\n        tau_distribution[connection[1]] += tau_values[connection[1]]\n    max_value = max(tau_distribution.values())\n    tau_spread_regions = [region for region, value in tau_distribution.items() if value >= max_value/2]\n    return tau_spread_regions"}
{"ground_truth": "def is_ditz(actions, words):\n    ditz_score = 0\n    for action in actions:\n        if 'sank' in action or 'flying' in action:\n            ditz_score += 5\n    for word in words:\n        if 'cute' in word or 'confidence' in word:\n            ditz_score -= 2\n    return ditz_score > 10", "problem_description": "I want you to write a Python function that determines if someone is a 'ditz' based on their actions and words, like London from The Suite Life of Zack and Cody. I want the function to take a list of actions and a list of words as input and return True if the person is a 'ditz' and False otherwise.The signature of the function is: def is_ditz(actions, words)", "test_cases": {"test1": "is_ditz(['sank like a rock'], ['cute lifeguards', 'confidence boost'])", "test2": "is_ditz(['flying a helicopter'], ['cute doctors', 'self doubt'])", "test3": "is_ditz(['went to Yale'], ['intelligent', 'hard work'])", "test4": "is_ditz(['wore a solid gold bikini'], ['vain', 'shallow'])", "test5": "is_ditz(['made a chemical to increase brain power'], ['scientist', 'intelligent'])", "test6": "is_ditz(['got into a helicopter crash'], ['reckless', 'impulsive'])", "test7": "is_ditz(['talked to a monkey in the vents'], ['caring', 'kind'])", "test8": "is_ditz(['created a dream where she was the evil queen'], ['self aware', ' introspective'])", "test9": "is_ditz(['made a comment about being a missing person'], ['funny', 'quirky'])", "test10": "is_ditz(['became a genius after taking a chemical'], ['intelligent', 'capable'])"}, "hidden_information": "def is_ditz(actions, words):\n    ditz_score = 0\n    for action in actions:\n        if 'sank' in action or 'flying' in action:\n            ditz_score += 5\n    for word in words:\n        if 'cute' in word or 'confidence' in word:\n            ditz_score -= 2\n    return ditz_score > 10"}
{"ground_truth": "def delete_old_threads(threads, importance_threshold, num_to_keep): threads_to_delete = [thread for thread in threads if thread['importance'] < importance_threshold and len(threads) - threads.index(thread) > num_to_keep]; return threads_to_delete", "problem_description": "Can you write a Python function that determines which old threads in a forum to delete, considering both the age of the thread and its importance, to strike a balance between preserving knowledge and improving database query speed?The signature of the function is: def delete_old_threads(threads, importance_threshold, num_to_keep)", "test_cases": {"test1": "delete_old_threads([{'importance': 0.8, 'age': 100}, {'importance': 0.5, 'age': 200}, {'importance': 0.2, 'age': 300}], 0.6, 500)", "test2": "delete_old_threads([{'importance': 0.9, 'age': 50}, {'importance': 0.4, 'age': 150}, {'importance': 0.1, 'age': 250}], 0.7, 1000)", "test3": "delete_old_threads([{'importance': 0.3, 'age': 20}, {'importance': 0.7, 'age': 120}, {'importance': 0.9, 'age': 220}], 0.5, 200)", "test4": "delete_old_threads([{'importance': 0.1, 'age': 10}, {'importance': 0.2, 'age': 110}, {'importance': 0.8, 'age': 210}], 0.4, 150)", "test5": "delete_old_threads([{'importance': 0.6, 'age': 30}, {'importance': 0.3, 'age': 130}, {'importance': 0.5, 'age': 230}], 0.8, 50)", "test6": "delete_old_threads([{'importance': 0.2, 'age': 40}, {'importance': 0.6, 'age': 140}, {'importance': 0.1, 'age': 240}], 0.3, 250)", "test7": "delete_old_threads([{'importance': 0.5, 'age': 60}, {'importance': 0.9, 'age': 160}, {'importance': 0.7, 'age': 260}], 0.2, 300)", "test8": "delete_old_threads([{'importance': 0.8, 'age': 70}, {'importance': 0.1, 'age': 170}, {'importance': 0.4, 'age': 270}], 0.1, 350)", "test9": "delete_old_threads([{'importance': 0.7, 'age': 80}, {'importance': 0.6, 'age': 180}, {'importance': 0.3, 'age': 280}], 0.9, 400)", "test10": "delete_old_threads([{'importance': 0.4, 'age': 90}, {'importance': 0.2, 'age': 190}, {'importance': 0.9, 'age': 290}], 0.5, 450)"}, "hidden_information": "def delete_old_threads(threads, importance_threshold, num_to_keep): threads_to_delete = [thread for thread in threads if thread['importance'] < importance_threshold and len(threads) - threads.index(thread) > num_to_keep]; return threads_to_delete"}
{"ground_truth": "def generate_destinations(city_name, max_results=10):\n    # This function generates a list of nearby attractions or features for a given city or neighborhood\n    destinations = [\n        # List of destinations\n    ]\n\n    # Assuming the list of destinations is too large, filter it to include only the top 'max_results' results for the given city_name\n    filtered_destinations = [dest for dest in destinations if city_name in dest]\n\n    # Sort the filtered destinations alphabetically and return the top 'max_results' results\n    return sorted(filtered_destinations)[:max_results]\n\n# Example usage: generate_destinations('San Diego', 5)", "problem_description": "Hey, I need a Python function that can help me find nearby attractions or features for a given city or neighborhood in Southern California. The function should allow me to input the city or neighborhood name and provide additional information to narrow down the results. Can you help me write such a function?The signature of the function is: def generate_destinations(city_name, max_results=10)", "test_cases": {"test1": "generate_destinations('San Diego', 5)", "test2": "generate_destinations('Los Angeles', 3)", "test3": "generate_destinations('Anaheim', 2)", "test4": "generate_destinations('San Diego', 10)", "test5": "generate_destinations('Riverside', 1)", "test6": "generate_destinations('Fullerton', 8)", "test7": "generate_destinations('Orange', 6)", "test8": "generate_destinations('Mission Viejo', 4)", "test9": "generate_destinations('Irvine', 9)", "test10": "generate_destinations('Santa Ana', 7)"}, "hidden_information": "def generate_destinations(city_name, max_results=10):\n    # This function generates a list of nearby attractions or features for a given city or neighborhood\n    destinations = [\n        # List of destinations\n    ]\n\n    # Assuming the list of destinations is too large, filter it to include only the top 'max_results' results for the given city_name\n    filtered_destinations = [dest for dest in destinations if city_name in dest]\n\n    # Sort the filtered destinations alphabetically and return the top 'max_results' results\n    return sorted(filtered_destinations)[:max_results]\n\n# Example usage: generate_destinations('San Diego', 5)"}
{"ground_truth": "def get_filmmaker_specialty(filmmaker_profiles, specialty): return [profile for profile in filmmaker_profiles if specialty in profile.get('specialties', [])]", "problem_description": "I have a list of filmmaker profiles and I want the agent to write a Python function to help me filter them by specialty. I want to be able to get all profiles that match a specific type of filming, like action sports. Can you help me with that?The signature of the function is: def get_filmmaker_specialty(filmmaker_profiles, specialty)", "test_cases": {"test1": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], 'action sports')", "test2": "get_filmmaker_specialty([{\"name\": 'Jane Doe', 'specialties': ['music video', 'comedy']}, {\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}], 'music video')", "test3": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], 'documentary')", "test4": "get_filmmaker_specialty([], 'action sports')", "test5": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], ' action sports ')", "test6": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], '')", "test7": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], 'snowboarding')", "test8": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding'], 'located_at': 'Petaluma, California'}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature'], 'located_at': 'San Francisco'}], 'action sports')", "test9": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': ['action sports', 'snowboarding']}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}, {\"name\": 'Mike Smith', 'specialties': ['action sports', 'extreme sports']}], 'action sports')", "test10": "get_filmmaker_specialty([{\"name\": 'Jesse Kinney', 'specialties': []}, {\"name\": 'John Doe', 'specialties': ['documentary', 'nature']}], 'action sports')"}, "hidden_information": "def get_filmmaker_specialty(filmmaker_profiles, specialty): return [profile for profile in filmmaker_profiles if specialty in profile.get('specialties', [])]"}
{"ground_truth": "def calculate_tax_cut_impact(initial_revenue, initial_jobs, tax_rate_reduction, jobs_per_million_dollars, spending_rate): jobs_created = (initial_revenue * tax_rate_reduction) * jobs_per_million_dollars; revenue_change = -initial_revenue * tax_rate_reduction; spending_change = revenue_change * spending_rate; return jobs_created, revenue_change, spending_change", "problem_description": "I want you to write a Python function that shows how a tax cut would affect the number of jobs and the overall revenue of our government. The details are kind of fuzzy, but we want to create new jobs and reduce taxes without significantly hurting revenue. Can you make something that calculates this?The signature of the function is: def calculate_tax_cut_impact(initial_revenue, initial_jobs, tax_rate_reduction, jobs_per_million_dollars, spending_rate)", "test_cases": {"test1": "calculate_tax_cut_impact(10000000, 1000, 0.05, 10, 0.8)", "test2": "calculate_tax_cut_impact(500000, 50, 0.1, 5, 0.7)", "test3": "calculate_tax_cut_impact(20000000, 2000, 0.03, 15, 0.9)", "test4": "calculate_tax_cut_impact(7500000, 750, 0.08, 8, 0.85)", "test5": "calculate_tax_cut_impact(1000000, 100, 0.12, 20, 0.6)", "test6": "calculate_tax_cut_impact(25000000, 2500, 0.02, 12, 0.95)", "test7": "calculate_tax_cut_impact(3000000, 300, 0.06, 10, 0.8)", "test8": "calculate_tax_cut_impact(8000000, 800, 0.09, 11, 0.82)", "test9": "calculate_tax_cut_impact(12000000, 1200, 0.04, 16, 0.88)", "test10": "calculate_tax_cut_impact(6000000, 600, 0.11, 9, 0.76)"}, "hidden_information": "def calculate_tax_cut_impact(initial_revenue, initial_jobs, tax_rate_reduction, jobs_per_million_dollars, spending_rate): jobs_created = (initial_revenue * tax_rate_reduction) * jobs_per_million_dollars; revenue_change = -initial_revenue * tax_rate_reduction; spending_change = revenue_change * spending_rate; return jobs_created, revenue_change, spending_change"}
{"ground_truth": "def identify_melted_banknotes(banknotes, temperature): \n    melted_banknotes = []\n    for bill in banknotes:\n        if bill['material'] == 'plastic' and temperature > 30:\n            melted_banknotes.append({'country': bill['country'], 'denomination': bill['denomination']})\n    return melted_banknotes", "problem_description": "I need a python function that solves a problem related to melting banknotes. I want the function to determine if certain banknotes from various countries melt when exposed to a certain temperature.The signature of the function is: def identify_melted_banknotes(banknotes, temperature)", "test_cases": {"test1": "identify_melted_banknotes([{'material': 'plastic', 'country': 'Canada', 'denomination': '$100'}, {'material': 'paper', 'country': 'USA', 'denomination': '$50'}], 35)", "test2": "identify_melted_banknotes([{'material': 'polymer', 'country': 'Australia', 'denomination': '$20'}, {'material': 'paper', 'country': 'Japan', 'denomination': '1000\u00a5'}], 28)", "test3": "identify_melted_banknotes([{'material': 'plastic', 'country': 'Canada', 'denomination': '$50'}, {'material': 'paper', 'country': 'China', 'denomination': '100\u00a5'}], 32)", "test4": "identify_melted_banknotes([{'material': 'polymer', 'country': 'UK', 'denomination': '\u00a310'}, {'material': 'paper', 'country': 'India', 'denomination': '500\u20b9'}], 35)", "test5": "identify_melted_banknotes([{'material': 'plastic', 'country': 'Canada', 'denomination': '$20'}, {'material': 'paper', 'country': 'South Africa', 'denomination': 'R50'}], 30)", "test6": "identify_melted_banknotes([{'material': 'polymer', 'country': 'Australia', 'denomination': '$50'}, {'material': 'paper', 'country': 'Brazil', 'denomination': 'R$20'}], 37)", "test7": "identify_melted_banknotes([{'material': 'plastic', 'country': 'Canada', 'denomination': '$10'}, {'material': 'paper', 'country': 'Russia', 'denomination': '500\u20bd'}], 33)", "test8": "identify_melted_banknotes([{'material': 'polymer', 'country': 'UK', 'denomination': '\u00a320'}, {'material': 'paper', 'country': 'South Korea', 'denomination': '10,000\u20a9'}], 32)", "test9": "identify_melted_banknotes([{'material': 'paper', 'country': 'China', 'denomination': '50\u00a5'}, {'material': 'paper', 'country': 'Japan', 'denomination': '5000\u00a5'}], 30)", "test10": "identify_melted_banknotes([{'material': 'plastic', 'country': 'Canada', 'denomination': '$100'}, {'material': 'polymer', 'country': 'Australia', 'denomination': '$100'}], 35)"}, "hidden_information": "def identify_melted_banknotes(banknotes, temperature): \n    melted_banknotes = []\n    for bill in banknotes:\n        if bill['material'] == 'plastic' and temperature > 30:\n            melted_banknotes.append({'country': bill['country'], 'denomination': bill['denomination']})\n    return melted_banknotes"}
{"ground_truth": "def calculate_total_money(income, expenses, initial_fund): return income - expenses + initial_fund", "problem_description": "Hello agent, I want you to write a Python function to help the new leader of Kyrgyzstan, Otunbayeva, manage the government's finances. The deposed regime made off with tens of millions of dollars, but there's still some money left in the state coffers. Can you write a function that calculates the total amount of money available to the government?The signature of the function is: def calculate_total_money(income, expenses, initial_fund)", "test_cases": {"test1": "calculate_total_money(1000000, 500000, 16000000)", "test2": "calculate_total_money(2000000, 800000, 16000000)", "test3": "calculate_total_money(500000, 200000, 16000000)", "test4": "calculate_total_money(1500000, 1000000, 16000000)", "test5": "calculate_total_money(2500000, 1200000, 16000000)", "test6": "calculate_total_money(3000000, 1500000, 16000000)", "test7": "calculate_total_money(3500000, 1800000, 16000000)", "test8": "calculate_total_money(4000000, 2000000, 16000000)", "test9": "calculate_total_money(4500000, 2200000, 16000000)", "test10": "calculate_total_money(5000000, 2500000, 16000000)"}, "hidden_information": "def calculate_total_money(income, expenses, initial_fund): return income - expenses + initial_fund"}
{"ground_truth": "def parse_scheduled_tasks(output):\n    tasks = {}\n    for line in output.splitlines()[4:]:\n        columns = line.split()\n        if len(columns) > 0:\n            task_name = columns[0]\n            task_status = columns[1]\n            tasks[task_name] = task_status\n    return tasks", "problem_description": "I want to automate the process of listing and filtering scheduled tasks on a Windows system using the schtasks.exe tool. Can you write a Python function that takes the output of the schtasks /query /fo list /v command as input and returns a dictionary where the keys are the task names and the values are their corresponding statuses? The function should ignore the first four lines of the output and handle tasks with different statuses (e.g., 'Ready', 'Running', 'Disabled').The signature of the function is: def parse_scheduled_tasks(output)", "test_cases": {"test1": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Notepad\\\"                       Ready                       \")", "test2": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Explorer\\\"                      Running                       \")", "test3": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Task1\\\"                       Disabled                      \")", "test4": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Task2\\\"                       Ready                       \")", "test5": "parse_scheduled_tasks(\"\")", "test6": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Notepad\\\"                       Ready                       \\nobe task name is \\\"Explorer\\\"                      Running                       \")", "test7": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Task1\\\"                       Disabled                      \\nobe task name is \\\"Task2\\\"                       Ready                       \")", "test8": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Notepad\\\"                       Ready                       \\nobe task name is \\\"Explorer\\\"                      Running                       \\nobe task name is \\\"Task1\\\"                       Disabled                      \")", "test9": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Task2\\\"                       Ready                       \\nobe task name is \\\"Notepad\\\"                       Ready                       \")", "test10": "parse_scheduled_tasks(\"Image Name                     \\nobe task name is \\\"Explorer\\\"                      Running                       \\nobe task name is \\\"Task1\\\"                       Disabled                      \\nobe task name is \\\"Task2\\\"                       Ready                      \")"}, "hidden_information": "def parse_scheduled_tasks(output):\n    tasks = {}\n    for line in output.splitlines()[4:]:\n        columns = line.split()\n        if len(columns) > 0:\n            task_name = columns[0]\n            task_status = columns[1]\n            tasks[task_name] = task_status\n    return tasks"}
{"ground_truth": "def filter_posts(posts, category, tags):\n    result = {}\n    for post in posts:\n        if post['category'] == category:\n            for tag in post['tags']:\n                if tag in tags:\n                    if tag not in result:\n                        result[tag] = []\n                    result[tag].append(post['title'])\n    return result", "problem_description": "Hey AI, I'm trying to write a script that filters posts based on their category and tags. I want to get all posts from a specific category and then list them out according to their tags. Can you write a Python function to achieve this?The signature of the function is: def filter_posts(posts, category, tags)", "test_cases": {"test1": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 1', 'Tag 2'])", "test2": "filter_posts([{'title': 'Post 1', 'category': 'Category B', 'tags': ['Tag 2', 'Tag 3']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 2', 'Tag 3'])", "test3": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 1'])", "test4": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category B', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 2', 'Tag 1'])", "test5": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category C', ['Tag 2', 'Tag 1'])", "test6": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 4'])", "test7": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', [])", "test8": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 1', 'Tag 2', 'Tag 3'])", "test9": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 1', 'Tag 3'])", "test10": "filter_posts([{'title': 'Post 1', 'category': 'Category A', 'tags': ['Tag 1', 'Tag 2']}, {'title': 'Post 2', 'category': 'Category A', 'tags': ['Tag 2', 'Tag 3']}], 'Category A', ['Tag 2', 'Tag 4'])"}, "hidden_information": "def filter_posts(posts, category, tags):\n    result = {}\n    for post in posts:\n        if post['category'] == category:\n            for tag in post['tags']:\n                if tag in tags:\n                    if tag not in result:\n                        result[tag] = []\n                    result[tag].append(post['title'])\n    return result"}
{"ground_truth": "def crash_data_processor(crash_incidents, surrounding_areas):\n    bird_related_crashes = [(incident, area) for incident, area in zip(crash_incidents, surrounding_areas) if 'bird' in incident.lower()]\n    return bird_related_crashes", "problem_description": "Hey AI, I have some F-16 fighter jet crash incidents data that I need you to analyze. Can you write a python function that takes a list of crash incidents and surrounding areas, and it should return the incidents which were possibly caused by a bird? The description of the incident is just a string.The signature of the function is: def crash_data_processor(crash_incidents, surrounding_areas)", "test_cases": {"test1": "crash_data_processor(['F-16 crash caused by bird', 'F-16 crash at night'], ['farmland', 'living room'])", "test2": "crash_data_processor(['bird strike on F-16', 'technical failure of F-16'], ['farm', 'city'])", "test3": "crash_data_processor(['F-16 crash due to bird', 'crashed into a tree'], ['open field', 'forest'])", "test4": "crash_data_processor(['fighter jet crash at night', 'F-16 bird strike'], ['near a house', 'desert'])", "test5": "crash_data_processor(['bird caused F-16 to crash', 'weather condition caused crash'], ['close to a base', 'near a mountain'])", "test6": "crash_data_processor(['a bird hit the F-16', 'a technical issue caused the crash'], ['open space', 'city square'])", "test7": "crash_data_processor(['F-16 intercepted a bird', 'another jet crash'], ['flat area', 'hilltop'])", "test8": "crash_data_processor([], ['desert', 'city'])", "test9": "crash_data_processor(['F-16 pilot saw a bird', 'F-16 crashed at day'], ['valley', 'coastal area'])", "test10": "crash_data_processor(['it was a weird crash', 'one F-16 crashed'], ['deep forest', 'base area'])"}, "hidden_information": "def crash_data_processor(crash_incidents, surrounding_areas):\n    bird_related_crashes = [(incident, area) for incident, area in zip(crash_incidents, surrounding_areas) if 'bird' in incident.lower()]\n    return bird_related_crashes"}
{"ground_truth": "def calculate_external_parties(days): return {4: 5, 5: 6, 6: 7, 7: 8}.get(days, 0)", "problem_description": "I need a python function that calculates something, not sure what exactly, but it needs to be about external people or parties coming to a house like what happened to my grandmama over the twelve days of state bureaucracy.The signature of the function is: def calculate_external_parties(days)", "test_cases": {"test1": "calculate_external_parties(4)", "test2": "calculate_external_parties(5)", "test3": "calculate_external_parties(6)", "test4": "calculate_external_parties(7)", "test5": "calculate_external_parties(1)", "test6": "calculate_external_parties(10)", "test7": "calculate_external_parties(3)", "test8": "calculate_external_parties(8)", "test9": "calculate_external_parties(2)", "test10": "calculate_external_parties(12)"}, "hidden_information": "def calculate_external_parties(days): return {4: 5, 5: 6, 6: 7, 7: 8}.get(days, 0)"}
{"ground_truth": "def calculate_risk_factor(spacecraft_reliability, tourist_risk_tolerance): return spacecraft_reliability * tourist_risk_tolerance", "problem_description": "I want you to write a Python function that calculates the risk factor for a spaceport based on the reliability of the spacecraft and the risk tolerance of space tourists. Can you help me come up with a function that takes these two factors into account and gives me a risk factor score?The signature of the function is: def calculate_risk_factor(spacecraft_reliability, tourist_risk_tolerance)", "test_cases": {"test1": "calculate_risk_factor(0.9, 0.8)", "test2": "calculate_risk_factor(0.7, 0.9)", "test3": "calculate_risk_factor(0.95, 0.6)", "test4": "calculate_risk_factor(0.5, 0.5)", "test5": "calculate_risk_factor(0.3, 0.7)", "test6": "calculate_risk_factor(0.8, 0.4)", "test7": "calculate_risk_factor(0.6, 0.9)", "test8": "calculate_risk_factor(0.4, 0.8)", "test9": "calculate_risk_factor(0.9, 0.3)", "test10": "calculate_risk_factor(0.2, 0.6)"}, "hidden_information": "def calculate_risk_factor(spacecraft_reliability, tourist_risk_tolerance): return spacecraft_reliability * tourist_risk_tolerance"}
{"ground_truth": "def is_imam(candidate):\n    required_qualities = ['infallibility', 'knowledge', 'courage', 'austerity', 'moral_attraction']\n    candidate_qualities = ['infallibility' if not candidate['has_sinned'] else None, 'knowledge' if candidate['knowledge_level'] > 8 else None, 'courage' if candidate['bravery_level'] > 7 else None, 'austerity' if not candidate['materialistic'] else None, 'moral_attraction' if candidate['moral_attraction_level'] > 6 else None]\n    return all(quality is not None for quality in candidate_qualities)", "problem_description": "I want you to write a Python function that determines whether a given individual has the necessary qualities to be an Imam. The function should take as input a dictionary representing the individual's characteristics and return a Boolean value indicating whether they qualify. Please consider the conditions and qualities required for an Imam as we discuss them.The signature of the function is: def is_imam(candidate)", "test_cases": {"test1": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': False, 'moral_attraction_level': 7})", "test2": "is_imam({'has_sinned': True, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': False, 'moral_attraction_level': 7})", "test3": "is_imam({'has_sinned': False, 'knowledge_level': 6, 'bravery_level': 8, 'materialistic': False, 'moral_attraction_level': 7})", "test4": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 6, 'materialistic': False, 'moral_attraction_level': 7})", "test5": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': True, 'moral_attraction_level': 7})", "test6": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': False, 'moral_attraction_level': 5})", "test7": "is_imam({'has_sinned': True, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': True, 'moral_attraction_level': 7})", "test8": "is_imam({'has_sinned': True, 'knowledge_level': 6, 'bravery_level': 6, 'materialistic': True, 'moral_attraction_level': 5})", "test9": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 9, 'materialistic': False, 'moral_attraction_level': 9})", "test10": "is_imam({'has_sinned': False, 'knowledge_level': 9, 'bravery_level': 8, 'materialistic': False, 'moral_attraction_level': 9})"}, "hidden_information": "def is_imam(candidate):\n    required_qualities = ['infallibility', 'knowledge', 'courage', 'austerity', 'moral_attraction']\n    candidate_qualities = ['infallibility' if not candidate['has_sinned'] else None, 'knowledge' if candidate['knowledge_level'] > 8 else None, 'courage' if candidate['bravery_level'] > 7 else None, 'austerity' if not candidate['materialistic'] else None, 'moral_attraction' if candidate['moral_attraction_level'] > 6 else None]\n    return all(quality is not None for quality in candidate_qualities)"}
{"ground_truth": "def classify_hazardous_product(product_name, contains_flame_retardant):\n    if contains_flame_retardant:\n        return f'{product_name} is a hazardous product'\n    else:\n        return f'{product_name} is a safe product'", "problem_description": "I want you to write a python function that can classifies household products that contains flame retardants as safe vs. not safe. We have a list of products that could possibly contains flame retardants e.g. sofa, baby stroller, nursing pillow, etc. Note that some of these products contains flame retardants but some dont.The signature of the function is: def classify_hazardous_product(product_name, contains_flame_retardant)", "test_cases": {"test1": "classify_hazardous_product('Sofa', True)", "test2": "classify_hazardous_product('Baby Stroller', False)", "test3": "classify_hazardous_product('Nursing Pillow', True)", "test4": "classify_hazardous_product('Toy Car', False)", "test5": "classify_hazardous_product('Crib', True)", "test6": "classify_hazardous_product('Chair', False)", "test7": "classify_hazardous_product('Mattress', True)", "test8": "classify_hazardous_product('Bookshelf', False)", "test9": "classify_hazardous_product('High Chair', True)", "test10": "classify_hazardous_product('Playpen', False)"}, "hidden_information": "def classify_hazardous_product(product_name, contains_flame_retardant):\n    if contains_flame_retardant:\n        return f'{product_name} is a hazardous product'\n    else:\n        return f'{product_name} is a safe product'"}
{"ground_truth": "def estimate_survival_rate(num_detainees, container_size, temperature, initial_water_supply):\n    # assume each detainee requires 4 cubic meters of space to survive\n    required_space = 4 * num_detainees\n    if container_size < required_space:\n        survival_rate = 0.1  # 10% survival rate if container size is insufficient\n    elif temperature > 40:\n        survival_rate = 0.3  # 30% survival rate if temperature is above 40 degrees Celsius\n    elif initial_water_supply < 5 * num_detainees:\n        survival_rate = 0.5  # 50% survival rate if water supply is insufficient\n    else:\n        survival_rate = 0.8  # 80% survival rate if all conditions are met\n    return survival_rate", "problem_description": "I want the agent to write a python function that can calculate the survival rate of detainees kept in shipping containers during a conflict, given the number of detainees, container size in square meters, temperature in degrees Celsius and the amount of water available per person. The agent should use the context of the libya detainee crisis to inform their calculations.The signature of the function is: def estimate_survival_rate(num_detainees, container_size, temperature, initial_water_supply)", "test_cases": {"test1": "estimate_survival_rate(5, 20, 30, 10)", "test2": "estimate_survival_rate(10, 10, 50, 5)", "test3": "estimate_survival_rate(7, 20, 20, 15)", "test4": "estimate_survival_rate(15, 10, 20, 20)", "test5": "estimate_survival_rate(5, 15, 45, 12)", "test6": "estimate_survival_rate(20, 15, 30, 15)", "test7": "estimate_survival_rate(3, 5, 40, 10)", "test8": "estimate_survival_rate(10, 20, 40, 10)", "test9": "estimate_survival_rate(15, 20, 30, 10)", "test10": "estimate_survival_rate(8, 15, 45, 12)"}, "hidden_information": "def estimate_survival_rate(num_detainees, container_size, temperature, initial_water_supply):\n    # assume each detainee requires 4 cubic meters of space to survive\n    required_space = 4 * num_detainees\n    if container_size < required_space:\n        survival_rate = 0.1  # 10% survival rate if container size is insufficient\n    elif temperature > 40:\n        survival_rate = 0.3  # 30% survival rate if temperature is above 40 degrees Celsius\n    elif initial_water_supply < 5 * num_detainees:\n        survival_rate = 0.5  # 50% survival rate if water supply is insufficient\n    else:\n        survival_rate = 0.8  # 80% survival rate if all conditions are met\n    return survival_rate"}
{"ground_truth": "def apply_geneticAlgorithm(populationSize, mutationRate, numGenerations, targetPhrase):\n    import random\n    def fitness(individual):\n        return sum(1 for a, b in zip(individual, targetPhrase) if a != b)\n    population = [''.join(random.choice(' ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(len(targetPhrase))) for _ in range(populationSize)]\n    for _ in range(numGenerations):\n        population = sorted(population, key=fitness)[:populationSize//2]\n        offspring = []\n        while len(offspring) < populationSize:\n            parent1 = random.choice(population)\n            parent2 = random.choice(population)\n            child = ''\n            for a, b in zip(parent1, parent2):\n                child += random.choice([a, b])\n            if random.random() < mutationRate:\n                child = child[:len(child)//2] + random.choice(' ABCDEFGHIJKLMNOPQRSTUVWXYZ') + child[len(child)//2+1:]\n            offspring.append(child)\n        population = offspring\n    return population[0]\n", "problem_description": "I want you to write a python function that does some kind of genetic thingy. Like, you know, with mutations and stuff. I'm not really sure how it should work, but I think it should take a phrase as input and then generate a bunch of random phrases that are similar to it. Oh, and there should be some kind of fitness function that determines which phrases are better than others. Can you help me with that?The signature of the function is: def apply_geneticAlgorithm(populationSize, mutationRate, numGenerations, targetPhrase)", "test_cases": {"test1": "apply_geneticAlgorithm(100, 0.01, 20, 'HELLO WORLD')", "test2": "apply_geneticAlgorithm(50, 0.05, 10, 'GATC')", "test3": "apply_geneticAlgorithm(200, 0.001, 30, 'SHIMMYBUTTON')", "test4": "apply_geneticAlgorithm(150, 0.1, 15, 'ABC')", "test5": "apply_geneticAlgorithm(250, 0.0001, 40, 'HELLO')", "test6": "apply_geneticAlgorithm(100, 0.05, 20, 'WORLD')", "test7": "apply_geneticAlgorithm(50, 0.01, 10, 'BUTTON')", "test8": "apply_geneticAlgorithm(200, 0.005, 30, 'GATCGCTGACT')", "test9": "apply_geneticAlgorithm(150, 0.01, 15, 'SHIMMYBUTTONACTGCT')", "test10": "apply_geneticAlgorithm(100, 0.001, 20, 'GCT')"}, "hidden_information": "def apply_geneticAlgorithm(populationSize, mutationRate, numGenerations, targetPhrase):\n    import random\n    def fitness(individual):\n        return sum(1 for a, b in zip(individual, targetPhrase) if a != b)\n    population = [''.join(random.choice(' ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(len(targetPhrase))) for _ in range(populationSize)]\n    for _ in range(numGenerations):\n        population = sorted(population, key=fitness)[:populationSize//2]\n        offspring = []\n        while len(offspring) < populationSize:\n            parent1 = random.choice(population)\n            parent2 = random.choice(population)\n            child = ''\n            for a, b in zip(parent1, parent2):\n                child += random.choice([a, b])\n            if random.random() < mutationRate:\n                child = child[:len(child)//2] + random.choice(' ABCDEFGHIJKLMNOPQRSTUVWXYZ') + child[len(child)//2+1:]\n            offspring.append(child)\n        population = offspring\n    return population[0]\n"}
{"ground_truth": "def get_disclosure_status(donor_contributions, donation_threshold=1000, cumulative_threshold=100000):\n    cumulative_contributions = sum(donor_contributions)\n    if cumulative_contributions > cumulative_threshold:\n        return 'Disclose all donations from this donor'\n    elif any(contribution > donation_threshold for contribution in donor_contributions):\n        return 'Disclose individual donation exceeding threshold'\n    else:\n        return 'No disclosure required'", "problem_description": "I want to write a Python function that determines whether a set of donations from a single donor to a political party or candidate requires disclosure, based on a threshold for individual donations and a cumulative threshold. Can you help me create this function?The signature of the function is: def get_disclosure_status(donor_contributions, donation_threshold=1000, cumulative_threshold=100000)", "test_cases": {"test1": "get_disclosure_status([5000])", "test2": "get_disclosure_status([500, 501, 500])", "test3": "get_disclosure_status([1000])", "test4": "get_disclosure_status([1001])", "test5": "get_disclosure_status([500, 500])", "test6": "get_disclosure_status([250, 250, 250, 251])", "test7": "get_disclosure_status([1000, 1000])", "test8": "get_disclosure_status([500, 500, 500, 500])", "test9": "get_disclosure_status([2500])", "test10": "get_disclosure_status([500, 1000, 500])"}, "hidden_information": "def get_disclosure_status(donor_contributions, donation_threshold=1000, cumulative_threshold=100000):\n    cumulative_contributions = sum(donor_contributions)\n    if cumulative_contributions > cumulative_threshold:\n        return 'Disclose all donations from this donor'\n    elif any(contribution > donation_threshold for contribution in donor_contributions):\n        return 'Disclose individual donation exceeding threshold'\n    else:\n        return 'No disclosure required'"}
{"ground_truth": "def get_artwork_dimensions_and_ratio(width_cm, height_cm):\n    width_in = width_cm / 2.54\n    height_in = height_cm / 2.54\n    ratio = round(width_in / height_in, 2)\n    return f'The artwork dimensions in inches are {round(width_in, 2)} in. x {round(height_in, 2)} in. and the ratio is {ratio}. ' ", "problem_description": "I need a python function that will take an artwork size in metric units (width and height in centimeters) and convert it to inches, then find the width to height ratio so that when I input an artwork's dimensions, I should get back its size in inches and the width to height ratio. Write a python function to do this.The signature of the function is: def get_artwork_dimensions_and_ratio(width_cm, height_cm)", "test_cases": {"test1": "get_artwork_dimensions_and_ratio(270.2, 137.2)", "test2": "get_artwork_dimensions_and_ratio(200, 100)", "test3": "get_artwork_dimensions_and_ratio(50, 75)", "test4": "get_artwork_dimensions_and_ratio(300, 200)", "test5": "get_artwork_dimensions_and_ratio(120.5, 90.5)", "test6": "get_artwork_dimensions_and_ratio(150, 250)", "test7": "get_artwork_dimensions_and_ratio(80, 120)", "test8": "get_artwork_dimensions_and_ratio(180.1, 270.1)", "test9": "get_artwork_dimensions_and_ratio(220, 180)", "test10": "get_artwork_dimensions_and_ratio(90, 110)"}, "hidden_information": "def get_artwork_dimensions_and_ratio(width_cm, height_cm):\n    width_in = width_cm / 2.54\n    height_in = height_cm / 2.54\n    ratio = round(width_in / height_in, 2)\n    return f'The artwork dimensions in inches are {round(width_in, 2)} in. x {round(height_in, 2)} in. and the ratio is {ratio}. ' "}
{"ground_truth": "def calculate_average_score(scores):\n    return sum(scores) / len(scores)", "problem_description": "I need a python function that can take a bunch of scores from a test and give me the average score of all test takers. Can you write that for me?The signature of the function is: def calculate_average_score(scores)", "test_cases": {"test1": "calculate_average_score([80, 90, 70, 85])", "test2": "calculate_average_score([100, 100, 100, 100])", "test3": "calculate_average_score([50, 60, 70, 80, 90])", "test4": "calculate_average_score([85, 90, 95, 92, 88])", "test5": "calculate_average_score([70, 75, 80, 85, 90, 95, 98])", "test6": "calculate_average_score([100, 90, 80, 95, 60])", "test7": "calculate_average_score([65, 72, 81, 90, 98, 76])", "test8": "calculate_average_score([50, 50, 50, 50, 50])", "test9": "calculate_average_score([99, 95, 92, 91, 89])", "test10": "calculate_average_score([75, 80, 75, 80, 75, 80])"}, "hidden_information": "def calculate_average_score(scores):\n    return sum(scores) / len(scores)"}
{"ground_truth": "def are_recipes_identical(recipe1, recipe2):\n    ingredients1 = set([ingredient.lower() for ingredient in recipe1])\n    ingredients2 = set([ingredient.lower() for ingredient in recipe2])\n    return ingredients1 == ingredients2", "problem_description": "I want you to write a python function that can determine if two lassi recipes are identical. The function should take as input two lists of ingredients and return True if the recipes are identical and False otherwise.The signature of the function is: def are_recipes_identical(recipe1, recipe2)", "test_cases": {"test1": "are_recipes_identical(['yogurt', 'mango', 'honey'], ['honey', 'mango', 'yogurt'])", "test2": "are_recipes_identical(['yogurt', 'strawberry'], ['yogurt', 'mango'])", "test3": "are_recipes_identical(['yogurt', 'water', 'spices'], ['water', 'spices', 'yogurt'])", "test4": "are_recipes_identical(['yogurt', 'sugar', 'mango'], ['mango', 'sugar', 'honey', 'yogurt'])", "test5": "are_recipes_identical(['yogurt', 'honey'], ['yogurt', 'honey'])", "test6": "are_recipes_identical(['yogurt', 'mango', 'honey', 'spices'], ['honey', 'spices', 'mango', 'yogurt'])", "test7": "are_recipes_identical(['yogurt', 'banana'], ['banana', 'yogurt'])", "test8": "are_recipes_identical(['yogurt', 'lemon', 'honey'], ['honey', 'yogurt'])", "test9": "are_recipes_identical(['buttermilk', 'water', 'spices'], ['water', 'spices', 'buttermilk'])", "test10": "are_recipes_identical(['yogurt', 'mango', 'honey', 'spices'], ['yogurt', 'honey', 'spices', 'banana'])"}, "hidden_information": "def are_recipes_identical(recipe1, recipe2):\n    ingredients1 = set([ingredient.lower() for ingredient in recipe1])\n    ingredients2 = set([ingredient.lower() for ingredient in recipe2])\n    return ingredients1 == ingredients2"}
{"ground_truth": "def detect_cheater(partners, cheaters): return [partner for partner in partners if partner in cheaters]", "problem_description": "I want to identify the cheaters in a list of partners based on a given list of known cheaters. Can you write a python function that can help me with this?The signature of the function is: def detect_cheater(partners, cheaters)", "test_cases": {"test1": "detect_cheater(['John', 'Alice', 'Bob'], ['John', 'Bob'])", "test2": "detect_cheater(['Charlie', 'David', 'Emily'], ['Charlie', 'Emily'])", "test3": "detect_cheater(['Frank', 'George', 'Hannah'], ['Frank', 'George'])", "test4": "detect_cheater(['Ivan', 'Julia', 'Kevin'], [])", "test5": "detect_cheater(['Laura', 'Matthew', 'Nina'], ['Laura', 'Nina'])", "test6": "detect_cheater([], [])", "test7": "detect_cheater(['Patrick', 'Rebecca', 'Samuel'], ['Patrick', 'Samuel'])", "test8": "detect_cheater(['Teresa', 'Uma', 'Victor'], ['Teresa', 'Uma'])", "test9": "detect_cheater(['William', 'Xanthe', 'Yvonne'], ['William', 'Yvonne'])", "test10": "detect_cheater(['Zachary', 'Audrey', 'Bryce'], ['Zachary', 'Bryce'])"}, "hidden_information": "def detect_cheater(partners, cheaters): return [partner for partner in partners if partner in cheaters]"}
{"ground_truth": "def analyze_animal_cruelty(data, year): return sum(1 for case in data if case['year'] == year and case['species'] == 'rabbit')", "problem_description": "I want you to write a Python function that can analyze data on animal cruelty cases and give me the number of rabbit cruelty cases in a given year. The data is in a list of dictionaries, where each dictionary represents a case and has keys for 'year' and 'species'.The signature of the function is: def analyze_animal_cruelty(data, year)", "test_cases": {"test1": "analyze_animal_cruelty([{'year': 2013, 'species': 'rabbit'}, {'year': 2012, 'species': 'dog'}, {'year': 2013, 'species': 'rabbit'}], 2013)", "test2": "analyze_animal_cruelty([{'year': 2010, 'species': 'cat'}, {'year': 2011, 'species': 'rabbit'}, {'year': 2011, 'species': 'rabbit'}], 2011)", "test3": "analyze_animal_cruelty([{'year': 2015, 'species': 'rabbit'}, {'year': 2014, 'species': 'bird'}, {'year': 2015, 'species': 'rabbit'}], 2015)", "test4": "analyze_animal_cruelty([{'year': 2013, 'species': 'rabbit'}, {'year': 2013, 'species': 'rabbit'}, {'year': 2012, 'species': 'rabbit'}], 2013)", "test5": "analyze_animal_cruelty([], 2013)", "test6": "analyze_animal_cruelty([{'year': 2013, 'species': 'dog'}], 2013)", "test7": "analyze_animal_cruelty([{'year': 2013, 'species': 'rabbit'}], 2013)", "test8": "analyze_animal_cruelty([{'year': 2012, 'species': 'rabbit'}, {'year': 2012, 'species': 'rabbit'}, {'year': 2013, 'species': 'rabbit'}], 2012)", "test9": "analyze_animal_cruelty([{'year': 2014, 'species': 'rabbit'}, {'year': 2014, 'species': 'rabbit'}, {'year': 2013, 'species': 'rabbit'}], 2014)", "test10": "analyze_animal_cruelty([{'year': 2015, 'species': 'cat'}, {'year': 2015, 'species': 'rabbit'}, {'year': 2014, 'species': 'rabbit'}], 2015)"}, "hidden_information": "def analyze_animal_cruelty(data, year): return sum(1 for case in data if case['year'] == year and case['species'] == 'rabbit')"}
{"ground_truth": "def get_average_rating(films, ratings):\n    film_ratings = {film: rating for film, rating in zip(films, ratings)}\n    total_rating = sum(film_ratings.values())\n    return total_rating / len(film_ratings)", "problem_description": "I need a python function that takes a list of movies like Bones and their corresponding ratings from a film critic, then does some math on them, like averaging or something, can you figure out what exactly the function should do?The signature of the function is: def get_average_rating(films, ratings)", "test_cases": {"test1": "get_average_rating(['Bones', 'Malcolm X', 'Suspiria'], [8, 9, 7])", "test2": "get_average_rating(['Tales From the Crypt Presents: Demon Knight', 'Scream'], [6, 8])", "test3": "get_average_rating(['Hellraiser', 'Land of the Dead'], [8, 9])", "test4": "get_average_rating(['Bones', 'Suspiria'], [7, 7])", "test5": "get_average_rating(['Malcolm X', 'Bones'], [9, 8])", "test6": "get_average_rating(['Scream', 'Tales From the Crypt Presents: Demon Knight'], [7, 5])", "test7": "get_average_rating(['Land of the Dead', 'Bones'], [9, 8])", "test8": "get_average_rating(['Suspiria', 'Malcolm X'], [8, 9])", "test9": "get_average_rating(['Hellraiser', 'Tales From the Crypt Presents: Demon Knight'], [9, 6])", "test10": "get_average_rating(['Bones', 'Scream', 'Suspiria'], [7, 7, 8])"}, "hidden_information": "def get_average_rating(films, ratings):\n    film_ratings = {film: rating for film, rating in zip(films, ratings)}\n    total_rating = sum(film_ratings.values())\n    return total_rating / len(film_ratings)"}
{"ground_truth": "def calculate_equipment_cost(num_onkyo_inputs, num_marantz_inputs, num_denon_inputs, promo_code=None):\n    # Define base costs for each type of input\n    onkyo_input_cost = 50\n    marantz_input_cost = 75\n    denon_input_cost = 100\n\n    # Calculate total cost\n    total_cost = (num_onkyo_inputs * onkyo_input_cost) + (num_marantz_inputs * marantz_input_cost) + (num_denon_inputs * denon_input_cost)\n\n    # Apply promo code if available\n    if promo_code == \"MARANTZ_10_Off\":\n        total_cost *= 0.9\n\n    return total_cost", "problem_description": "I want the agent to write a Python function that calculates the total cost of my new home theater equipment. I'm planning to buy some Onkyo, Marantz, and Denon devices, and I want to compare prices with and without HDMI inputs. Can the agent also consider some promo codes I found online?The signature of the function is: def calculate_equipment_cost(num_onkyo_inputs, num_marantz_inputs, num_denon_inputs, promo_code=None)", "test_cases": {"test1": "calculate_equipment_cost(0, 2, 1) == 175", "test2": "calculate_equipment_cost(1, 0, 0, promo_code=\"MARANTZ_10_Off\") == 45.0", "test3": "calculate_equipment_cost(2, 1, 1) == 325", "test4": "calculate_equipment_cost(0, 0, 0) == 0", "test5": "calculate_equipment_cost(1, 1, 1) == 225", "test6": "calculate_equipment_cost(0, 3, 0, promo_code=\"MARANTZ_10_Off\") == 202.5", "test7": "calculate_equipment_cost(2, 0, 2) == 300", "test8": "calculate_equipment_cost(1, 2, 1) == 275", "test9": "calculate_equipment_cost(0, 1, 0) == 75", "test10": "calculate_equipment_cost(3, 0, 0, promo_code=\"MARANTZ_10_Off\") == 135.0"}, "hidden_information": "def calculate_equipment_cost(num_onkyo_inputs, num_marantz_inputs, num_denon_inputs, promo_code=None):\n    # Define base costs for each type of input\n    onkyo_input_cost = 50\n    marantz_input_cost = 75\n    denon_input_cost = 100\n\n    # Calculate total cost\n    total_cost = (num_onkyo_inputs * onkyo_input_cost) + (num_marantz_inputs * marantz_input_cost) + (num_denon_inputs * denon_input_cost)\n\n    # Apply promo code if available\n    if promo_code == \"MARANTZ_10_Off\":\n        total_cost *= 0.9\n\n    return total_cost"}
{"ground_truth": "def calculate_total_rent(amount, monthly_rent, late_charge_rate, utility_rate, interest_rate, months_late, days_late): total_rent = monthly_rent * months_late; late_charge = (late_charge_rate / 100) * total_rent; utility_bill = utility_rate * months_late; interest = (interest_rate / 100) * (total_rent + utility_bill + late_charge) * (days_late / 30); return total_rent + late_charge + utility_bill + interest", "problem_description": "I have a tenant who didn't pay rent for 24 months and I want to calculate the total amount they owe me, including late charges and interest. I have an LLC, but the tenant is an individual. Can you write a Python function to help me calculate this amount?The signature of the function is: def calculate_total_rent(amount, monthly_rent, late_charge_rate, utility_rate, interest_rate, months_late, days_late)", "test_cases": {"test1": "calculate_total_rent(25000, 1000, 5, 200, 10, 24, 0)", "test2": "calculate_total_rent(5000, 500, 3, 50, 8, 12, 15)", "test3": "calculate_total_rent(10000, 2500, 2, 100, 12, 6, 0)", "test4": "calculate_total_rent(30000, 1500, 4, 300, 11, 20, 20)", "test5": "calculate_total_rent(8000, 100, 6, 20, 9, 8, 10)", "test6": "calculate_total_rent(4000, 200, 1, 50, 7, 4, 5)", "test7": "calculate_total_rent(12000, 500, 3, 75, 6, 16, 25)", "test8": "calculate_total_rent(18000, 750, 2, 150, 10, 12, 0)", "test9": "calculate_total_rent(22000, 1200, 5, 250, 12, 18, 15)", "test10": "calculate_total_rent(28000, 1000, 4, 200, 11, 20, 0)"}, "hidden_information": "def calculate_total_rent(amount, monthly_rent, late_charge_rate, utility_rate, interest_rate, months_late, days_late): total_rent = monthly_rent * months_late; late_charge = (late_charge_rate / 100) * total_rent; utility_bill = utility_rate * months_late; interest = (interest_rate / 100) * (total_rent + utility_bill + late_charge) * (days_late / 30); return total_rent + late_charge + utility_bill + interest"}
{"ground_truth": "def calculate_ideal_sleep_hours(age, lifestyleripponent='average'):\n    if age < 3:\n        return 12\n    elif age < 13:\n        return 10\n    elif age < 26:\n        return 9\n    elif age < 64:\n        return 7 if lifestyleripponent == 'active' else 9\n    else:\n        return 8", "problem_description": "Can you write a Python function that will calculate the ideal number of sleep hours for a given age group and account for different lifestyles?The signature of the function is: def calculate_ideal_sleep_hours(age, lifestyleripponent='average')", "test_cases": {"test1": "calculate_ideal_sleep_hours(20, 'average')", "test2": "calculate_ideal_sleep_hours(35, 'active')", "test3": "calculate_ideal_sleep_hours(70)", "test4": "calculate_ideal_sleep_hours(5, 'inactive')", "test5": "calculate_ideal_sleep_hours(28)", "test6": "calculate_ideal_sleep_hours(45, 'average')", "test7": "calculate_ideal_sleep_hours(60, 'inactive')", "test8": "calculate_ideal_sleep_hours(22, 'active')", "test9": "calculate_ideal_sleep_hours(50, 'average')", "test10": "calculate_ideal_sleep_hours(90)"}, "hidden_information": "def calculate_ideal_sleep_hours(age, lifestyleripponent='average'):\n    if age < 3:\n        return 12\n    elif age < 13:\n        return 10\n    elif age < 26:\n        return 9\n    elif age < 64:\n        return 7 if lifestyleripponent == 'active' else 9\n    else:\n        return 8"}
{"ground_truth": "def recommend_beer(taste_preferences, beers):\n  taste_preferences_map = {\n    'hoppy': ['Bengali Tiger', 'Resin'],\n    'malty': ['Resin', 'Righteous Ale'],\n    'crisp': ['The Crisp'],\n    'fruity': ['3beans']\n  }\n  recommended_beers = []\n  for preference in taste_preferences:\n    if preference in taste_preferences_map:\n      recommended_beers.extend(taste_preferences_map[preference])\n  return [beer for beer in recommended_beers if beer in beers]", "problem_description": "Hey, I'd like you to write a python function that takes in my taste preferences and a list of available beers, and recommends beers that match my preferences. However, I'm not sure what specific beers I like or dislike, so you'll need to ask me some questions to figure it out. Can you write a function that does this?The signature of the function is: def recommend_beer(taste_preferences, beers)", "test_cases": {"test1": "recommend_beer(['hoppy', 'fruity'], ['Bengali Tiger', '3beans', 'Resin', 'The Crisp'])", "test2": "recommend_beer(['malty'], ['Resin', 'Righteous Ale', 'The Crisp'])", "test3": "recommend_beer(['crisp'], ['The Crisp', 'Bengali Tiger', '3beans'])", "test4": "recommend_beer(['fruity', 'hoppy'], ['3beans', 'Bengali Tiger', 'Resin'])", "test5": "recommend_beer(['malty', 'crisp'], ['Resin', 'The Crisp', 'Righteous Ale'])", "test6": "recommend_beer(['hoppy', 'fruity', 'malty'], ['Bengali Tiger', '3beans', 'Resin', 'Righteous Ale'])", "test7": "recommend_beer(['crisp', 'fruity'], ['The Crisp', '3beans', 'Bengali Tiger'])", "test8": "recommend_beer(['malty', 'hoppy'], ['Resin', 'Righteous Ale', 'Bengali Tiger'])", "test9": "recommend_beer(['fruity', 'crisp'], ['3beans', 'The Crisp', 'Bengali Tiger'])", "test10": "recommend_beer(['hoppy', 'malty', 'crisp'], ['Bengali Tiger', 'Resin', 'The Crisp', 'Righteous Ale'])"}, "hidden_information": "def recommend_beer(taste_preferences, beers):\n  taste_preferences_map = {\n    'hoppy': ['Bengali Tiger', 'Resin'],\n    'malty': ['Resin', 'Righteous Ale'],\n    'crisp': ['The Crisp'],\n    'fruity': ['3beans']\n  }\n  recommended_beers = []\n  for preference in taste_preferences:\n    if preference in taste_preferences_map:\n      recommended_beers.extend(taste_preferences_map[preference])\n  return [beer for beer in recommended_beers if beer in beers]"}
{"ground_truth": "def calculate_hunter_stats(deaths_by_hunting, deaths_by_other_means, total_participants, total_population): \n    hunting_rate_per_100k = (deaths_by_hunting / total_participants) * 100000\n    other_death_rate_per_100k = (deaths_by_other_means / total_population) * 100000\n    return hunting_rate_per_100k, other_death_rate_per_100k", "problem_description": "I want the agent to write a Python function that calculates hunting-related statistics. The function should take into account the number of deaths caused by hunting and other means, as well as the total number of participants and the total population. However, I'm not sure what specific statistics I want the function to return. Can the agent help me figure this out?The signature of the function is: def calculate_hunter_stats(deaths_by_hunting, deaths_by_other_means, total_participants, total_population)", "test_cases": {"test1": "calculate_hunter_stats(100, 1500, 4000000, 330000000)", "test2": "calculate_hunter_stats(50, 1000, 2000000, 250000000)", "test3": "calculate_hunter_stats(200, 2500, 5000000, 400000000)", "test4": "calculate_hunter_stats(150, 2000, 3500000, 300000000)", "test5": "calculate_hunter_stats(250, 3000, 6000000, 500000000)", "test6": "calculate_hunter_stats(300, 3500, 7000000, 600000000)", "test7": "calculate_hunter_stats(350, 4000, 8000000, 700000000)", "test8": "calculate_hunter_stats(400, 4500, 9000000, 800000000)", "test9": "calculate_hunter_stats(450, 5000, 10000000, 900000000)", "test10": "calculate_hunter_stats(500, 5500, 11000000, 1000000000)"}, "hidden_information": "def calculate_hunter_stats(deaths_by_hunting, deaths_by_other_means, total_participants, total_population): \n    hunting_rate_per_100k = (deaths_by_hunting / total_participants) * 100000\n    other_death_rate_per_100k = (deaths_by_other_means / total_population) * 100000\n    return hunting_rate_per_100k, other_death_rate_per_100k"}
{"ground_truth": "def check_sba_loan_eligibility(downpayment, purchase_price, credit_score): return (downpayment / purchase_price) >= 0.1 and credit_score >= 650", "problem_description": "Can you write a python function that determines whether a borrower is eligible for an SBA loan based on their downpayment and credit score? The function should take into account the range of downpayments required by SBA loans (10% - 30%) and a minimum credit score of 650.The signature of the function is: def check_sba_loan_eligibility(downpayment, purchase_price, credit_score)", "test_cases": {"test1": "check_sba_loan_eligibility(10000, 100000, 700)", "test2": "check_sba_loan_eligibility(5000, 50000, 600)", "test3": "check_sba_loan_eligibility(30000, 100000, 720)", "test4": "check_sba_loan_eligibility(20000, 200000, 680)", "test5": "check_sba_loan_eligibility(15000, 50000, 620)", "test6": "check_sba_loan_eligibility(25000, 100000, 700)", "test7": "check_sba_loan_eligibility(10000, 50000, 600)", "test8": "check_sba_loan_eligibility(35000, 200000, 720)", "test9": "check_sba_loan_eligibility(22000, 150000, 680)", "test10": "check_sba_loan_eligibility(18000, 100000, 620)"}, "hidden_information": "def check_sba_loan_eligibility(downpayment, purchase_price, credit_score): return (downpayment / purchase_price) >= 0.1 and credit_score >= 650"}
{"ground_truth": "def calculate_total_calories(activity_durations, activity_types, intensities):\n    calories_burned = 0\n    activity_calories = {\n        'running': 10, 'cycling': 8, 'walking': 5, 'jogging': 9\n    }\n    for duration, activity, intensity in zip(activity_durations, activity_types, intensities):\n        if intensity == 'high':\n            calories_burned += duration * activity_calories[activity] * 1.2\n        elif intensity == 'low':\n            calories_burned += duration * activity_calories[activity] * 0.8\n        else:\n            calories_burned += duration * activity_calories[activity]\n    return round(calories_burned, 2)", "problem_description": "Hi, I need your help in writing a Python function to calculate my total daily calories burned. I want to be able to input the types of activities I do, their durations, and intensity levels, and get the total calories burned as output. Can you help me with that?The signature of the function is: def calculate_total_calories(activity_durations, activity_types, intensities)", "test_cases": {"test1": "calculate_total_calories([30, 60, 90], ['running', 'cycling', 'walking'], ['high', 'medium', 'low'])", "test2": "calculate_total_calories([45, 120], ['jogging', 'cycling'], ['medium', 'low'])", "test3": "calculate_total_calories([90], ['running'], ['high'])", "test4": "calculate_total_calories([60, 90], ['walking', 'cycling'], ['low', 'medium'])", "test5": "calculate_total_calories([30, 45, 60, 90], ['jogging', 'cycling', 'running', 'walking'], ['high', 'medium', 'low', 'medium'])", "test6": "calculate_total_calories([30], ['cycling'], ['medium'])", "test7": "calculate_total_calories([120], ['jogging'], ['low'])", "test8": "calculate_total_calories([45, 60, 90, 120], ['running', 'cycling', 'walking', 'jogging'], ['high', 'medium', 'low', 'medium'])", "test9": "calculate_total_calories([90, 120], ['walking', 'cycling'], ['low', 'medium'])", "test10": "calculate_total_calories([30, 60], ['jogging', 'running'], ['medium', 'high'])"}, "hidden_information": "def calculate_total_calories(activity_durations, activity_types, intensities):\n    calories_burned = 0\n    activity_calories = {\n        'running': 10, 'cycling': 8, 'walking': 5, 'jogging': 9\n    }\n    for duration, activity, intensity in zip(activity_durations, activity_types, intensities):\n        if intensity == 'high':\n            calories_burned += duration * activity_calories[activity] * 1.2\n        elif intensity == 'low':\n            calories_burned += duration * activity_calories[activity] * 0.8\n        else:\n            calories_burned += duration * activity_calories[activity]\n    return round(calories_burned, 2)"}
{"ground_truth": "def calculate_breeders_cup_purse(total_prize_pool, number_of_winners, purse_distribution_rates):\n    total_pool_for_winners = total_prize_pool * (1 - purse_distribution_rates['nominee'])\n    purse_per_winner = total_pool_for_winners / number_of_winners\n    purses = [purse_per_winner] * number_of_winners\n    purses[0] *= purse_distribution_rates['winner']\n    purses[1] *= purse_distribution_rates['runner_up']\n    return purses", "problem_description": "I want you to write a python function to calculate the purses for the Breeders' Cup. The purses should be calculated based on the total prize pool, the number of winning horses, and some specific purse distribution rates.The signature of the function is: def calculate_breeders_cup_purse(total_prize_pool, number_of_winners, purse_distribution_rates)", "test_cases": {"test1": "calculate_breeders_cup_purse(1000000, 5, {'nominee': 0.5, 'winner': 1.5, 'runner_up': 1.0})", "test2": "calculate_breeders_cup_purse(500000, 3, {'nominee': 0.4, 'winner': 1.2, 'runner_up': 0.8})", "test3": "calculate_breeders_cup_purse(2000000, 10, {'nominee': 0.3, 'winner': 1.8, 'runner_up': 0.9})", "test4": "calculate_breeders_cup_purse(750000, 4, {'nominee': 0.6, 'winner': 1.1, 'runner_up': 1.2})", "test5": "calculate_breeders_cup_purse(1500000, 7, {'nominee': 0.5, 'winner': 1.4, 'runner_up': 1.1})", "test6": "calculate_breeders_cup_purse(2500000, 5, {'nominee': 0.7, 'winner': 1.6, 'runner_up': 1.0})", "test7": "calculate_breeders_cup_purse(900000, 8, {'nominee': 0.4, 'winner': 1.3, 'runner_up': 1.0})", "test8": "calculate_breeders_cup_purse(1200000, 6, {'nominee': 0.6, 'winner': 1.2, 'runner_up': 1.1})", "test9": "calculate_breeders_cup_purse(1800000, 9, {'nominee': 0.8, 'winner': 1.1, 'runner_up': 0.9})", "test10": "calculate_breeders_cup_purse(2200000, 3, {'nominee': 0.3, 'winner': 1.9, 'runner_up': 0.8})"}, "hidden_information": "def calculate_breeders_cup_purse(total_prize_pool, number_of_winners, purse_distribution_rates):\n    total_pool_for_winners = total_prize_pool * (1 - purse_distribution_rates['nominee'])\n    purse_per_winner = total_pool_for_winners / number_of_winners\n    purses = [purse_per_winner] * number_of_winners\n    purses[0] *= purse_distribution_rates['winner']\n    purses[1] *= purse_distribution_rates['runner_up']\n    return purses"}
{"ground_truth": "def calculate_musician_earnings(song_sales, licensing_fees, concert_ticket_sales, song_price, licensing_fee_per_song, concert_ticket_price, concert_attendance): \n    total_earnings = (song_sales * song_price) + (licensing_fees * licensing_fee_per_song) + (concert_ticket_sales * concert_ticket_price * concert_attendance) \n    return total_earnings", "problem_description": "Can you write a Python function that calculates the total earnings of a musician based on their various sources of income? I want to be able to input the number of song sales, licensing fees, concert ticket sales, and some other parameters and get the total earnings as output.The signature of the function is: def calculate_musician_earnings(song_sales, licensing_fees, concert_ticket_sales, song_price, licensing_fee_per_song, concert_ticket_price, concert_attendance)", "test_cases": {"test1": "calculate_musician_earnings(1000, 5, 200, 0.99, 1000, 20, 500)", "test2": "calculate_musician_earnings(500, 10, 100, 1.29, 2000, 30, 300)", "test3": "calculate_musician_earnings(2000, 2, 150, 0.79, 500, 15, 400)", "test4": "calculate_musician_earnings(800, 15, 250, 1.49, 3000, 25, 600)", "test5": "calculate_musician_earnings(1200, 8, 300, 0.99, 2500, 20, 700)", "test6": "calculate_musician_earnings(900, 12, 220, 1.29, 2200, 18, 550)", "test7": "calculate_musician_earnings(1800, 6, 280, 0.79, 1800, 12, 500)", "test8": "calculate_musician_earnings(1100, 9, 200, 1.49, 2800, 22, 450)", "test9": "calculate_musician_earnings(1500, 4, 320, 0.99, 3200, 25, 600)", "test10": "calculate_musician_earnings(1300, 11, 270, 1.29, 3000, 19, 580)"}, "hidden_information": "def calculate_musician_earnings(song_sales, licensing_fees, concert_ticket_sales, song_price, licensing_fee_per_song, concert_ticket_price, concert_attendance): \n    total_earnings = (song_sales * song_price) + (licensing_fees * licensing_fee_per_song) + (concert_ticket_sales * concert_ticket_price * concert_attendance) \n    return total_earnings"}
{"ground_truth": "def calculate_sound_wave_frequency(displacement, velocity, coil_turns, magnetic_field): return (velocity / displacement) * coil_turns / magnetic_field", "problem_description": "Can you write a python function to calculate the sound wave frequency from the movement of a dynamic microphone's diaphragm?The signature of the function is: def calculate_sound_wave_frequency(displacement, velocity, coil_turns, magnetic_field)", "test_cases": {"test1": "calculate_sound_wave_frequency(0.01, 50, 1000, 0.5)", "test2": "calculate_sound_wave_frequency(0.005, 100, 800, 1.2)", "test3": "calculate_sound_wave_frequency(0.002, 20, 1200, 0.8)", "test4": "calculate_sound_wave_frequency(0.001, 15, 900, 1.5)", "test5": "calculate_sound_wave_frequency(0.01, 30, 1100, 0.6)", "test6": "calculate_sound_wave_frequency(0.005, 40, 1000, 1.8)", "test7": "calculate_sound_wave_frequency(0.002, 65, 1300, 0.4)", "test8": "calculate_sound_wave_frequency(0.001, 50, 1200, 0.9)", "test9": "calculate_sound_wave_frequency(0.01, 75, 1050, 1.1)", "test10": "calculate_sound_wave_frequency(0.005, 60, 1150, 1.3)"}, "hidden_information": "def calculate_sound_wave_frequency(displacement, velocity, coil_turns, magnetic_field): return (velocity / displacement) * coil_turns / magnetic_field"}
{"ground_truth": "def classify_plant_structure(has_bracteoles, has_sporangia, has_flowers):\n    if has_bracteoles and has_sporangia:\n        return \"gnetophyte\"\n    elif has_bracteoles and has_flowers:\n        return \"angiosperm\"\n    else:\n        return \"Unknown\"", "problem_description": "Can you write a Python function to classify different plant structures based on their characteristics, especially focusing on the role of bracteoles? The function should be able to identify the plant type as either gnetophyte or angiosperm.The signature of the function is: def classify_plant_structure(has_bracteoles, has_sporangia, has_flowers)", "test_cases": {"test1": "classify_plant_structure(True, True, False)", "test2": "classify_plant_structure(True, False, True)", "test3": "classify_plant_structure(False, False, False)", "test4": "classify_plant_structure(True, True, True)", "test5": "classify_plant_structure(False, True, False)", "test6": "classify_plant_structure(True, False, False)", "test7": "classify_plant_structure(False, False, True)", "test8": "classify_plant_structure(True, True, True)", "test9": "classify_plant_structure(False, True, True)", "test10": "classify_plant_structure(True, False, True)"}, "hidden_information": "def classify_plant_structure(has_bracteoles, has_sporangia, has_flowers):\n    if has_bracteoles and has_sporangia:\n        return \"gnetophyte\"\n    elif has_bracteoles and has_flowers:\n        return \"angiosperm\"\n    else:\n        return \"Unknown\""}
{"ground_truth": "def calculate_autism_association(avg_normal_expression, normal_std_dev, avg_autism_expression):\n    # Calculate the z-score of avg_autism_expression based on the normal distribution\n    z_score = (avg_autism_expression - avg_normal_expression) / normal_std_dev\n    # Using a simple statistical model where the genes of higher z-scores are more likely to be associated with autism\n    return z_score", "problem_description": "Can you write a python function to determine how likely it is that a specific gene's misregulation affects the risk of autism in children based on a bunch of biological information? essenntially given a number of metrics, how do we determine the strength of association of the gene to autism?The signature of the function is: def calculate_autism_association(avg_normal_expression, normal_std_dev, avg_autism_expression)", "test_cases": {"test1": "calculate_autism_association(10, 2, 15)", "test2": "calculate_autism_association(20, 1, 25)", "test3": "calculate_autism_association(100, 5, 105)", "test4": "calculate_autism_association(0.5, 0.1, 1.5)", "test5": "calculate_autism_association(-5, 2, 0)", "test6": "calculate_autism_association(1000, 500, 1500)", "test7": "calculate_autism_association(0.01, 0.001, 0.015)", "test8": "calculate_autism_association(-100, 50, -50)", "test9": "calculate_autism_association(50, 10, 60)", "test10": "calculate_autism_association(1, 0.5, 2)"}, "hidden_information": "def calculate_autism_association(avg_normal_expression, normal_std_dev, avg_autism_expression):\n    # Calculate the z-score of avg_autism_expression based on the normal distribution\n    z_score = (avg_autism_expression - avg_normal_expression) / normal_std_dev\n    # Using a simple statistical model where the genes of higher z-scores are more likely to be associated with autism\n    return z_score"}
{"ground_truth": "def calculate_resonance_frequency(fluid_density, fluid_surface_tension, mode_number): return (mode_number * (2.40483 ** 2) * fluid_surface_tension) / (fluid_density * 3.14159 ** 2)", "problem_description": "Can you write a python function that uses the properties of a fluid, such as density and surface tension, to calculate the frequency required to create a specific mode of resonance in the fluid when its surface is vibrated?The signature of the function is: def calculate_resonance_frequency(fluid_density, fluid_surface_tension, mode_number)", "test_cases": {"test1": "calculate_resonance_frequency(13.56, 0.465, 2)", "test2": "calculate_resonance_frequency(1.0, 0.07, 3)", "test3": "calculate_resonance_frequency(8.97, 0.73, 4)", "test4": "calculate_resonance_frequency(0.92, 0.07, 5)", "test5": "calculate_resonance_frequency(7.9, 0.07, 6)", "test6": "calculate_resonance_frequency(1.225, 0.07, 7)", "test7": "calculate_resonance_frequency(1.0, 0.07, 8)", "test8": "calculate_resonance_frequency(1000.0, 0.07, 2)", "test9": "calculate_resonance_frequency(10.0, 0.07, 5)", "test10": "calculate_resonance_frequency(1.0, 0.7, 3)"}, "hidden_information": "def calculate_resonance_frequency(fluid_density, fluid_surface_tension, mode_number): return (mode_number * (2.40483 ** 2) * fluid_surface_tension) / (fluid_density * 3.14159 ** 2)"}
{"ground_truth": "def calculate_break_even_point(revenue, fixed_costs, variable_costs):\n    break_even_point = (fixed_costs / (1 - (variable_costs / revenue)))\n    margin_of_safety = revenue - break_even_point\n    return break_even_point, margin_of_safety", "problem_description": "Can you write a python function to calculate the break-even point and margin of safety of a company given their revenue, fixed costs, and variable costs? The function should be able to handle different formats of input data and provide the expected output.The signature of the function is: def calculate_break_even_point(revenue, fixed_costs, variable_costs)", "test_cases": {"test1": "calculate_break_even_point(71005, 26682, 16868)", "test2": "calculate_break_even_point(80000, 20000, 12000)", "test3": "calculate_break_even_point(50000, 30000, 15000)", "test4": "calculate_break_even_point(60000, 25000, 18000)", "test5": "calculate_break_even_point(40000, 35000, 10000)", "test6": "calculate_break_even_point(70000, 28000, 16000)", "test7": "calculate_break_even_point(55000, 32000, 14000)", "test8": "calculate_break_even_point(65000, 29000, 17000)", "test9": "calculate_break_even_point(45000, 36000, 11000)", "test10": "calculate_break_even_point(75000, 27000, 16500)"}, "hidden_information": "def calculate_break_even_point(revenue, fixed_costs, variable_costs):\n    break_even_point = (fixed_costs / (1 - (variable_costs / revenue)))\n    margin_of_safety = revenue - break_even_point\n    return break_even_point, margin_of_safety"}
{"ground_truth": "def assess_debt_status(state_avg_debt, state_delinquency_rate, threshold_avg_debt=40000, threshold_delinquency_rate=0.1):\n    if state_avg_debt > threshold_avg_debt and state_delinquency_rate > threshold_delinquency_rate:\n        return 'High'\n    else:\n        return 'Low'", "problem_description": "Hello Agent, can you write a python function to help us determine if a state has high or low student loan debt based on its average student debt amount and its delinquency rate of repaying student debt?The signature of the function is: def assess_debt_status(state_avg_debt, state_delinquency_rate, threshold_avg_debt=40000, threshold_delinquency_rate=0.1)", "test_cases": {"test1": "assess_debt_status(45000, 0.12)", "test2": "assess_debt_status(30000, 0.05)", "test3": "assess_debt_status(50000, 0.15)", "test4": "assess_debt_status(35000, 0.08)", "test5": "assess_debt_status(42000, 0.11)", "test6": "assess_debt_status(38000, 0.09)", "test7": "assess_debt_status(60000, 0.2)", "test8": "assess_debt_status(48000, 0.13)", "test9": "assess_debt_status(41000, 0.07)", "test10": "assess_debt_status(55000, 0.14)"}, "hidden_information": "def assess_debt_status(state_avg_debt, state_delinquency_rate, threshold_avg_debt=40000, threshold_delinquency_rate=0.1):\n    if state_avg_debt > threshold_avg_debt and state_delinquency_rate > threshold_delinquency_rate:\n        return 'High'\n    else:\n        return 'Low'"}
{"ground_truth": "def is_family_car(seats, horsepower, trunk_volume, mpg_highway, door_layout):\n    if seats >= 4 and trunk_volume >= 2 and mpg_highway >= 20 and door_layout == 'family_friendly':\n        return True\n    else:\n        return False", "problem_description": "I want you to write a python function that determines if a car is suitable for a family based on its specifications. The function should consider the number of seats, horsepower, trunk volume, mpg highway, and door layout. Help me clarify what values are feasible for a family car.The signature of the function is: def is_family_car(seats, horsepower, trunk_volume, mpg_highway, door_layout)", "test_cases": {"test1": "is_family_car(2, 250, 3, 25, 'sports_car')", "test2": "is_family_car(4, 150, 2, 20, 'family_friendly')", "test3": "is_family_car(5, 200, 1, 15, 'family_friendly')", "test4": "is_family_car(3, 300, 3, 30, 'sports_car')", "test5": "is_family_car(4, 250, 2, 25, 'family_friendly')", "test6": "is_family_car(2, 200, 1, 20, 'sports_car')", "test7": "is_family_car(4, 200, 3, 20, 'family_friendly')", "test8": "is_family_car(3, 250, 2, 25, 'sports_car')", "test9": "is_family_car(5, 200, 3, 20, 'family_friendly')", "test10": "is_family_car(4, 150, 1, 15, 'sports_car')"}, "hidden_information": "def is_family_car(seats, horsepower, trunk_volume, mpg_highway, door_layout):\n    if seats >= 4 and trunk_volume >= 2 and mpg_highway >= 20 and door_layout == 'family_friendly':\n        return True\n    else:\n        return False"}
{"ground_truth": "def filter_expired_jobs(job_listings, expired_job_ids):\n    return [job for job in job_listings if job['id'] not in expired_job_ids]", "problem_description": "I have a bunch of job listings and some of them have expired, can you write a python function to help me exclude expired jobs based on a given list of job IDs? The job listings and expired job IDs are given as input to the function.The signature of the function is: def filter_expired_jobs(job_listings, expired_job_ids)", "test_cases": {"test1": "filter_expired_jobs([{'id': 1, 'title': 'Job 1'}, {'id': 2, 'title': 'Job 2'}, {'id': 3, 'title': 'Job 3'}], [2])", "test2": "filter_expired_jobs([{'id': 10, 'title': 'Job 10'}, {'id': 20, 'title': 'Job 20'}], [])", "test3": "filter_expired_jobs([], [30, 40])", "test4": "filter_expired_jobs([{'id': 50, 'title': 'Job 50'}], [50])", "test5": "filter_expired_jobs([{'id': 60, 'title': 'Job 60'}, {'id': 70, 'title': 'Job 70'}], [60, 70])", "test6": "filter_expired_jobs([{'id': 80, 'title': 'Job 80'}], [])", "test7": "filter_expired_jobs([{'id': 90, 'title': 'Job 90'}, {'id': 100, 'title': 'Job 100'}], [90])", "test8": "filter_expired_jobs([{'id': 110, 'title': 'Job 110'}], [110, 120])", "test9": "filter_expired_jobs([{'id': 130, 'title': 'Job 130'}, {'id': 140, 'title': 'Job 140'}], [])", "test10": "filter_expired_jobs([], [])"}, "hidden_information": "def filter_expired_jobs(job_listings, expired_job_ids):\n    return [job for job in job_listings if job['id'] not in expired_job_ids]"}
{"ground_truth": "def calculate_transfer_impact(transfers, num_patients, threshold):\n    if num_patients <= 0:\n        return \"Invalid number of patients\"\n    impact = sum(1 for patient_transfers in transfers if patient_transfers > threshold) / num_patients\n    return round(impact * 100, 2)", "problem_description": "I want the agent to write a Python function that analyzes the impact of frequent transfers on the mental health of patients in a correctional facility. The function should take into account the number of transfers and the number of patients, and return a percentage value representing the impact. However, I'm not sure what other parameters I should consider, so I need the agent to ask me more questions to clarify the requirements.The signature of the function is: def calculate_transfer_impact(transfers, num_patients, threshold)", "test_cases": {"test1": "calculate_transfer_impact([3, 1, 4, 1, 5, 9, 2, 6], 8, 3)", "test2": "calculate_transfer_impact([2, 2, 2, 2, 2, 2], 6, 1)", "test3": "calculate_transfer_impact([10, 5, 7, 3, 1], 5, 3)", "test4": "calculate_transfer_impact([1, 1, 1, 1, 1], 5, 2)", "test5": "calculate_transfer_impact([], 0, 3)", "test6": "calculate_transfer_impact([3, 3, 3, 3, 3], 5, 2)", "test7": "calculate_transfer_impact([5, 6, 7, 8, 9], 5, 5)", "test8": "calculate_transfer_impact([1, 1, 1, 1, 1, 1], 6, 1)", "test9": "calculate_transfer_impact([10, 5, 3, 2, 1], 5, 2)", "test10": "calculate_transfer_impact([8, 8, 8, 8, 8], 5, 7)"}, "hidden_information": "def calculate_transfer_impact(transfers, num_patients, threshold):\n    if num_patients <= 0:\n        return \"Invalid number of patients\"\n    impact = sum(1 for patient_transfers in transfers if patient_transfers > threshold) / num_patients\n    return round(impact * 100, 2)"}
{"ground_truth": "def calculate_total_affected(power_outages, homeless, killed): return power_outages + homeless + killed", "problem_description": "I want you to write a Python function to calculate the total damage caused by a typhoon, but I don't know the exact parameters. It should be able to take into account the number of households that lost power, people left homeless, and people who were killed. Can you write a function that can calculate this?The signature of the function is: def calculate_total_affected(power_outages, homeless, killed)", "test_cases": {"test1": "calculate_total_affected(1000, 50, 5)", "test2": "calculate_total_affected(20000, 100, 10)", "test3": "calculate_total_affected(75000, 70, 9)", "test4": "calculate_total_affected(150, 20, 3)", "test5": "calculate_total_affected(50000, 100, 20)", "test6": "calculate_total_affected(25000, 50, 10)", "test7": "calculate_total_affected(80000, 120, 12)", "test8": "calculate_total_affected(30000, 90, 8)", "test9": "calculate_total_affected(60000, 80, 15)", "test10": "calculate_total_affected(10000, 40, 6)"}, "hidden_information": "def calculate_total_affected(power_outages, homeless, killed): return power_outages + homeless + killed"}
{"ground_truth": "def calculate_luxury_tax(salary_cap, luxury_tax_threshold, team_salary, repeat_offender=False):\n    tax_due = 0\n    if team_salary > luxury_tax_threshold:\n        excess_salary = team_salary - luxury_tax_threshold\n        tax_due = excess_salary * 0.15\n        if repeat_offender:\n            tax_due += (excess_salary // 5000000) * 0.05\n    return tax_due", "problem_description": "I need you to write a python function to help me calculate the luxury tax due to the NBA's collective bargaining agreement. The function should take into account the salary cap, luxury tax threshold, and team salary, as well as the possibility of being a repeat offender.The signature of the function is: def calculate_luxury_tax(salary_cap, luxury_tax_threshold, team_salary, repeat_offender=False)", "test_cases": {"test1": "calculate_luxury_tax(40000000, 70000000, 80000000, False) == 1500000", "test2": "calculate_luxury_tax(40000000, 70000000, 85000000, True) == 2000000", "test3": "calculate_luxury_tax(40000000, 70000000, 65000000, False) == 0", "test4": "calculate_luxury_tax(40000000, 70000000, 80000000, True) == 2000000", "test5": "calculate_luxury_tax(40000000, 70000000, 90000000, False) == 2000000", "test6": "calculate_luxury_tax(40000000, 70000000, 65000000, True) == 0", "test7": "calculate_luxury_tax(40000000, 70000000, 75000000, False) == 0", "test8": "calculate_luxury_tax(40000000, 70000000, 85000000, False) == 1500000", "test9": "calculate_luxury_tax(40000000, 70000000, 95000000, True) == 2500000", "test10": "calculate_luxury_tax(40000000, 70000000, 65000000, False) == 0"}, "hidden_information": "def calculate_luxury_tax(salary_cap, luxury_tax_threshold, team_salary, repeat_offender=False):\n    tax_due = 0\n    if team_salary > luxury_tax_threshold:\n        excess_salary = team_salary - luxury_tax_threshold\n        tax_due = excess_salary * 0.15\n        if repeat_offender:\n            tax_due += (excess_salary // 5000000) * 0.05\n    return tax_due"}
{"ground_truth": "def calculate_average_yards_per_game(total_rushing_yards, total_offensive_plays, total_passing_yards, read_option_percentage): return (total_rushing_yards * read_option_percentage / 100) + total_passing_yards", "problem_description": "Hi, I want you to create a python function that calculates the average yards per game for Chip Kelly's offense in the NFL. This function will be given Chip's read-option style, total offshore plays and passing yards for all the games in a season. Write me a function that can make the calculation given his total yards from the read_option.The signature of the function is: def calculate_average_yards_per_game(total_rushing_yards, total_offensive_plays, total_passing_yards, read_option_percentage)", "test_cases": {"test1": "calculate_average_yards_per_game(500, 15, 4000, 30)", "test2": "calculate_average_yards_per_game(350, 20, 4500, 25)", "test3": "calculate_average_yards_per_game(420, 19, 3200, 35)", "test4": "calculate_average_yards_per_game(380, 18, 4100, 40)", "test5": "calculate_average_yards_per_game(450, 20, 3800, 20)", "test6": "calculate_average_yards_per_game(390, 21, 3300, 30)", "test7": "calculate_average_yards_per_game(410, 19, 3000, 35)", "test8": "calculate_average_yards_per_game(460, 20, 3400, 20)", "test9": "calculate_average_yards_per_game(370, 18, 3600, 40)", "test10": "calculate_average_yards_per_game(430, 21, 3200, 25)"}, "hidden_information": "def calculate_average_yards_per_game(total_rushing_yards, total_offensive_plays, total_passing_yards, read_option_percentage): return (total_rushing_yards * read_option_percentage / 100) + total_passing_yards"}
{"ground_truth": "def generate_post_mortem_transcript(game_moves, player_comments):\n    transcript = {}\n    for move in game_moves:\n        if move in player_comments:\n            transcript[move] = player_comments[move]\n    return transcript", "problem_description": "I am a chess journalist and I want you to write a Python function that generates a transcript for a post-mortem analysis of a chess game. The function should take as input a list of game moves and a dictionary of player comments, where the keys are the moves and the values are the comments. The function should return a dictionary where the keys are the moves and the values are the comments provided by the players.The signature of the function is: def generate_post_mortem_transcript(game_moves, player_comments)", "test_cases": {"test1": "generate_post_mortem_transcript([\"e4\", \"e5\", \"Nf3\"], {\"e4\": \"I started with the King's Pawn Opening.\", \"e5\": \"I responded with the Open Game.\", \"Nf3\": \"I developed my Knight to a good square.\"})", "test2": "generate_post_mortem_transcript([\"d4\", \"d5\", \"c4\"], {\"d4\": \"I chose the Queen's Pawn Opening.\", \"d5\": \"I responded with the symmetrical move.\", \"c4\": \"I played the Queen's Gambit.\"})", "test3": "generate_post_mortem_transcript([\"Nf3\", \"Nf6\", \"g3\"], {\"Nf3\": \"I started with the R\u00e9ti Opening.\", \"Nf6\": \"I responded with the solid move.\", \"g3\": \"I fianchettod my Bishop.\", \"Bf4\": \"I developed my Bishop to a good square.\"})", "test4": "generate_post_mortem_transcript([\"e4\", \"c5\", \"Bc4\"], {\"e4\": \"I played the King's Pawn Opening.\", \"c5\": \"I responded with the Sicilian Defense.\", \"Bc4\": \"I developed my Bishop to a good square.\"})", "test5": "generate_post_mortem_transcript([\"d4\", \"d5\", \"Nf3\"], {\"d4\": \"I chose the Queen's Pawn Opening.\", \"d5\": \"I responded with the symmetrical move.\", \"Nf3\": \"I developed my Knight to a good square.\", \"e4\": \"I played the Center Game.\", \"e6\": \"I responded with the solid move.\", \"Be2\": \"I developed my Bishop to a good square.\"})", "test6": "generate_post_mortem_transcript([\"Nf3\", \"Nf6\", \"g3\"], {\"Nf3\": \"I started with the R\u00e9ti Opening.\", \"Nf6\": \"I responded with the solid move.\", \"g3\": \"I fianchettod my Bishop.\", \"c4\": \"I played the Queen's Gambit.\"})", "test7": "generate_post_mortem_transcript([\"e4\", \"e5\", \"Nc3\"], {\"e4\": \"I started with the King's Pawn Opening.\", \"e5\": \"I responded with the Open Game.\", \"Nc3\": \"I developed my Knight to a good square.\"})", "test8": "generate_post_mortem_transcript([\"d4\", \"d5\", \"c4\"], {\"d4\": \"I chose the Queen's Pawn Opening.\", \"d5\": \"I responded with the symmetrical move.\", \"c4\": \"I played the Queen's Gambit.\", \"e6\": \"I responded with the solid move.\", \"Nf3\": \"I developed my Knight to a good square.\"})", "test9": "generate_post_mortem_transcript([\"e4\", \"c5\", \"Bc4\"], {\"e4\": \"I played the King's Pawn Opening.\", \"c5\": \"I responded with the Sicilian Defense.\", \"Bc4\": \"I developed my Bishop to a good square.\", \"d3\": \"I played the slow move.\", \"d6\": \"I responded with the solid move.\"})", "test10": "generate_post_mortem_transcript([\"d4\", \"d5\", \"Nf3\"], {\"d4\": \"I chose the Queen's Pawn Opening.\", \"d5\": \"I responded with the symmetrical move.\", \"Nf3\": \"I developed my Knight to a good square.\", \"e4\": \"I played the Center Game.\", \"e6\": \"I responded with the solid move.\"})"}, "hidden_information": "def generate_post_mortem_transcript(game_moves, player_comments):\n    transcript = {}\n    for move in game_moves:\n        if move in player_comments:\n            transcript[move] = player_comments[move]\n    return transcript"}
{"ground_truth": "def calculate_stationery_stats(num_sets, pad_width, pad_height, set_size=4, sheets_per_pad=50):\n    total_area = num_sets * set_size * sheets_per_pad * pad_width * pad_height\n    total_sheets = num_sets * set_size * sheets_per_pad\n    return total_sheets, total_area", "problem_description": "Can you write a python function to help me calculate the total number of sheets and area for my order of personalized Bold Tropics stationery sets? I want to know this so I can plan my desk space. Please consider I might want to order multiple sets with different pad dimensions, but each set has 4 pads and 50 sheets per pad.The signature of the function is: def calculate_stationery_stats(num_sets, pad_width, pad_height, set_size=4, sheets_per_pad=50)", "test_cases": {"test1": "calculate_stationery_stats(1, 4.25, 6.75)", "test2": "calculate_stationery_stats(2, 4.25, 6.75)", "test3": "calculate_stationery_stats(1, 3.5, 7)", "test4": "calculate_stationery_stats(5, 4.25, 6.75)", "test5": "calculate_stationery_stats(1, 5, 5)", "test6": "calculate_stationery_stats(10, 4.25, 6.75)", "test7": "calculate_stationery_stats(3, 6, 6)", "test8": "calculate_stationery_stats(8, 4.25, 6.75)", "test9": "calculate_stationery_stats(4, 7, 7)", "test10": "calculate_stationery_stats(6, 4.25, 6.75)"}, "hidden_information": "def calculate_stationery_stats(num_sets, pad_width, pad_height, set_size=4, sheets_per_pad=50):\n    total_area = num_sets * set_size * sheets_per_pad * pad_width * pad_height\n    total_sheets = num_sets * set_size * sheets_per_pad\n    return total_sheets, total_area"}
{"ground_truth": "def calculate_new_gold_price(initial_price, total_ounces, additional_ounces): return initial_price - (additional_ounces / (total_ounces + additional_ounces)) * initial_price", "problem_description": "I need a python function to determine how the price of gold changes when a large amount of notional gold is introduced into the market. Can you write me a function that takes into account the initial price and total ounces of gold in the market?The signature of the function is: def calculate_new_gold_price(initial_price, total_ounces, additional_ounces)", "test_cases": {"test1": "calculate_new_gold_price(1500, 1000000, 200000)", "test2": "calculate_new_gold_price(1600, 800000, 1500000)", "test3": "calculate_new_gold_price(1400, 1200000, 250000)", "test4": "calculate_new_gold_price(1700, 900000, 100000)", "test5": "calculate_new_gold_price(1550, 1100000, 300000)", "test6": "calculate_new_gold_price(1650, 950000, 200000)", "test7": "calculate_new_gold_price(1450, 1050000, 220000)", "test8": "calculate_new_gold_price(1750, 850000, 180000)", "test9": "calculate_new_gold_price(1500, 1000000, 250000)", "test10": "calculate_new_gold_price(1600, 1200000, 300000)"}, "hidden_information": "def calculate_new_gold_price(initial_price, total_ounces, additional_ounces): return initial_price - (additional_ounces / (total_ounces + additional_ounces)) * initial_price"}
{"ground_truth": "def get_ideal_screen_size(pocket_size, preferred_resolution, one_handed_use):\n    ideal_sizes = {\n        'small': (4, 720),\n        'medium': (5, 1080),\n        'large': (5.5, 1440)\n    }\n    if one_handed_use:\n        return ideal_sizes['small']\n    elif pocket_size < 5:\n        return ideal_sizes['small']\n    elif pocket_size < 6:\n        return ideal_sizes['medium']\n    else:\n        return ideal_sizes['large']", "problem_description": "I want a function that calculates the perfect smartphone screen size based on my preferences. I want a function that considers my pocket size, my preference for one-handed use, and my desired screen resolution. Can you write a Python function that does this?The signature of the function is: def get_ideal_screen_size(pocket_size, preferred_resolution, one_handed_use)", "test_cases": {"test1": "get_ideal_screen_size(5.5, 1080, True)", "test2": "get_ideal_screen_size(4, 720, False)", "test3": "get_ideal_screen_size(6, 1440, False)", "test4": "get_ideal_screen_size(5, 1080, True)", "test5": "get_ideal_screen_size(4.5, 900, True)", "test6": "get_ideal_screen_size(5.8, 1440, False)", "test7": "get_ideal_screen_size(4.2, 720, True)", "test8": "get_ideal_screen_size(5.1, 1080, False)", "test9": "get_ideal_screen_size(6.1, 1440, False)", "test10": "get_ideal_screen_size(4.8, 900, True)"}, "hidden_information": "def get_ideal_screen_size(pocket_size, preferred_resolution, one_handed_use):\n    ideal_sizes = {\n        'small': (4, 720),\n        'medium': (5, 1080),\n        'large': (5.5, 1440)\n    }\n    if one_handed_use:\n        return ideal_sizes['small']\n    elif pocket_size < 5:\n        return ideal_sizes['small']\n    elif pocket_size < 6:\n        return ideal_sizes['medium']\n    else:\n        return ideal_sizes['large']"}
{"ground_truth": "def calculate_efficiency(nrg_src, efficiency_factors):\n    base_efficiency = 1\n    if nrg_src == \"electric\":\n        for factor in efficiency_factors:\n            base_efficiency *= factor\n    elif nrg_src == \"fuel_cell\":\n        base_efficiency *= efficiency_factors[0]\n        base_efficiency *= efficiency_factors[1]\n        base_efficiency *= efficiency_factors[2]\n    return base_efficiency", "problem_description": "Hey agent, I need a Python function to compare the efficiency of electric cars and hydrogen fuel cells. I want to be able to pass in different efficiency factors for each energy source and get back the overall efficiency. Can you help me with that?The signature of the function is: def calculate_efficiency(nrg_src, efficiency_factors)", "test_cases": {"test1": "calculate_efficiency(\"electric\", [0.93, 0.90, 0.89])", "test2": "calculate_efficiency(\"fuel_cell\", [0.50, 0.80, 0.50])", "test3": "calculate_efficiency(\"electric\", [0.95, 0.92, 0.91])", "test4": "calculate_efficiency(\"fuel_cell\", [0.55, 0.85, 0.55])", "test5": "calculate_efficiency(\"electric\", [0.90, 0.88, 0.87])", "test6": "calculate_efficiency(\"fuel_cell\", [0.60, 0.90, 0.60])", "test7": "calculate_efficiency(\"electric\", [0.92, 0.90, 0.88])", "test8": "calculate_efficiency(\"fuel_cell\", [0.65, 0.95, 0.65])", "test9": "calculate_efficiency(\"electric\", [0.88, 0.86, 0.85])", "test10": "calculate_efficiency(\"fuel_cell\", [0.70, 1.00, 0.70])"}, "hidden_information": "def calculate_efficiency(nrg_src, efficiency_factors):\n    base_efficiency = 1\n    if nrg_src == \"electric\":\n        for factor in efficiency_factors:\n            base_efficiency *= factor\n    elif nrg_src == \"fuel_cell\":\n        base_efficiency *= efficiency_factors[0]\n        base_efficiency *= efficiency_factors[1]\n        base_efficiency *= efficiency_factors[2]\n    return base_efficiency"}
{"ground_truth": "def simulate_vote_outcome(initial_votes, target_votes, time_limit=900): # 900 seconds = 15 minutes\n    if sum(initial_votes) >= target_votes:\n        return initial_votes\n    else:\n        additional_votes = [1] * (target_votes - sum(initial_votes))\n        return initial_votes + additional_votes", "problem_description": "I need a python function that calculates the outcome of a vote in a house where the ruling party tends to extend the time limit to sway the outcome. Please take into consideration that the voting should not exceed 15 minutes.The signature of the function is: def simulate_vote_outcome(initial_votes, target_votes, time_limit=900)", "test_cases": {"test1": "simulate_vote_outcome([10, 5, 5], 21)", "test2": "simulate_vote_outcome([5, 5, 10], 10)", "test3": "simulate_vote_outcome([8, 8, 4], 20)", "test4": "simulate_vote_outcome([3, 3, 14], 10)", "test5": "simulate_vote_outcome([9, 9, 2], 10)", "test6": "simulate_vote_outcome([1, 1, 18], 15)", "test7": "simulate_vote_outcome([2, 2, 16], 18)", "test8": "simulate_vote_outcome([4, 4, 12], 11)", "test9": "simulate_vote_outcome([7, 7, 6], 15)", "test10": "simulate_vote_outcome([6, 6, 8], 14)"}, "hidden_information": "def simulate_vote_outcome(initial_votes, target_votes, time_limit=900): # 900 seconds = 15 minutes\n    if sum(initial_votes) >= target_votes:\n        return initial_votes\n    else:\n        additional_votes = [1] * (target_votes - sum(initial_votes))\n        return initial_votes + additional_votes"}
{"ground_truth": "def required_documents(child_citizenship, traveling_by_air, has_return_ticket):\n    documents = []\n    if child_citizenship != 'US':\n        documents.append('Passport')\n    if has_return_ticket:\n        documents.append('Return ticket to home country')\n    if traveling_by_air:\n        documents.append('Notarized letter from parents')\n    return documents", "problem_description": "I have a non-US citizen friend who wants to travel with me, but I'm not sure what documents they need to bring. Can you write a python function that can help me determine what documents are required based on their country of citizenship and mode of transportation? I want to make sure they have everything they need before we leave.The signature of the function is: def required_documents(child_citizenship, traveling_by_air, has_return_ticket)", "test_cases": {"test1": "required_documents('Canada', True, True)", "test2": "required_documents('US', False, True)", "test3": "required_documents('England', True, False)", "test4": "required_documents('Mexico', False, True)", "test5": "required_documents('Australia', True, False)", "test6": "required_documents('US', True, True)", "test7": "required_documents('China', False, True)", "test8": "required_documents('India', True, True)", "test9": "required_documents('France', False, False)", "test10": "required_documents('Germany', True, False)"}, "hidden_information": "def required_documents(child_citizenship, traveling_by_air, has_return_ticket):\n    documents = []\n    if child_citizenship != 'US':\n        documents.append('Passport')\n    if has_return_ticket:\n        documents.append('Return ticket to home country')\n    if traveling_by_air:\n        documents.append('Notarized letter from parents')\n    return documents"}
{"ground_truth": "def evaluate_presentation(powerpoint_score, read_aloud_score, selling_point_score):\n    total_score = powerpoint_score + read_aloud_score + selling_point_score\n    if total_score >= 24:\n        return 'Pass'\n    else:\n        return 'Fail'", "problem_description": "I want you to write a python function that can evaluate student presentations based on three components - PowerPoint, read-aloud, and selling point. The function should take into account scores from each component and return a Pass or Fail grade, but I'm not sure what thresholds or requirements we should use. Can you help me come up with something that would work for our classroom needs?The signature of the function is: def evaluate_presentation(powerpoint_score, read_aloud_score, selling_point_score)", "test_cases": {"test1": "evaluate_presentation(8, 8, 8)", "test2": "evaluate_presentation(7, 7, 7)", "test3": "evaluate_presentation(9, 8, 7)", "test4": "evaluate_presentation(10, 10, 10)", "test5": "evaluate_presentation(6, 6, 6)", "test6": "evaluate_presentation(5, 5, 5)", "test7": "evaluate_presentation(4, 4, 8)", "test8": "evaluate_presentation(8, 8, 4)", "test9": "evaluate_presentation(7, 7, 9)", "test10": "evaluate_presentation(3, 3, 3)"}, "hidden_information": "def evaluate_presentation(powerpoint_score, read_aloud_score, selling_point_score):\n    total_score = powerpoint_score + read_aloud_score + selling_point_score\n    if total_score >= 24:\n        return 'Pass'\n    else:\n        return 'Fail'"}
{"ground_truth": "def classify_vodka_product(ingredients, rating):\n    if rating >= 4 and 'natural' in [ingredient.lower() for ingredient in ingredients]:\n        return 'High Quality'\n    elif rating >= 3 and len(ingredients) <= 5:\n        return 'Medium Quality'\n    else:\n        return 'Low Quality'", "problem_description": "I want the agent to write a python function to classify the quality of a vodka product based on its ingredients and ratings. Can you help me with that?The signature of the function is: def classify_vodka_product(ingredients, rating)", "test_cases": {"test1": "classify_vodka_product(['winter wheat', 'water', 'mango'], 4)", "test2": "classify_vodka_product(['vodka', 'artificial mango flavor', 'sugar'], 3)", "test3": "classify_vodka_product(['natural ingredients', 'winter wheat'], 5)", "test4": "classify_vodka_product(['ABSOLUT VODKA', 'mango', 'fertilizers'], 2)", "test5": "classify_vodka_product(['natural', ' ABSOLUT VODKA', 'winter wheat'], 1)", "test6": "classify_vodka_product(['water', 'mango', ' tropical fruits'], 5)", "test7": "classify_vodka_product(['natural ingredients', 'artificial vodka'], 4)", "test8": "classify_vodka_product(['ABSOLUT VODKA', 'mango', 'sugar', 'fertilizers'], 3)", "test9": "classify_vodka_product(['winter wheat', 'water', 'mango', ' ABSOLUT VODKA'], 4)", "test10": "classify_vodka_product(['natural', ' ABSOLUT VODKA', 'winter wheat', 'sugar'], 2)"}, "hidden_information": "def classify_vodka_product(ingredients, rating):\n    if rating >= 4 and 'natural' in [ingredient.lower() for ingredient in ingredients]:\n        return 'High Quality'\n    elif rating >= 3 and len(ingredients) <= 5:\n        return 'Medium Quality'\n    else:\n        return 'Low Quality'"}
{"ground_truth": "def calculate_consumer_confidence(employment_stability, income_expectations, debt_crisis_sentiment, current_index, monthly_change):\n    weight_employment = 0.3\n    weight_income = 0.3\n    weight_debt = 0.4\n    return (weight_employment * employment_stability + weight_income * income_expectations + weight_debt * debt_crisis_sentiment) * (1 + monthly_change / 100) + current_index", "problem_description": "Can you write a Python function that calculates the consumer confidence index in Germany based on some economic factors, and I want it to match the data from the GfK's survey?The signature of the function is: def calculate_consumer_confidence(employment_stability, income_expectations, debt_crisis_sentiment, current_index, monthly_change)", "test_cases": {"test1": "calculate_consumer_confidence(0.85, 0.7, 0.2, 5.7, 0.1)", "test2": "calculate_consumer_confidence(0.9, 0.8, 0.1, 5.5, -0.05)", "test3": "calculate_consumer_confidence(0.8, 0.6, 0.3, 5.3, 0.15)", "test4": "calculate_consumer_confidence(0.95, 0.85, 0.05, 5.9, 0.01)", "test5": "calculate_consumer_confidence(0.7, 0.5, 0.4, 5.1, -0.1)", "test6": "calculate_consumer_confidence(0.85, 0.7, 0.2, 5.7, 0.05)", "test7": "calculate_consumer_confidence(0.9, 0.8, 0.1, 5.5, 0.0)", "test8": "calculate_consumer_confidence(0.8, 0.6, 0.3, 5.3, -0.05)", "test9": "calculate_consumer_confidence(0.95, 0.85, 0.05, 5.9, 0.15)", "test10": "calculate_consumer_confidence(0.7, 0.5, 0.4, 5.1, 0.2)"}, "hidden_information": "def calculate_consumer_confidence(employment_stability, income_expectations, debt_crisis_sentiment, current_index, monthly_change):\n    weight_employment = 0.3\n    weight_income = 0.3\n    weight_debt = 0.4\n    return (weight_employment * employment_stability + weight_income * income_expectations + weight_debt * debt_crisis_sentiment) * (1 + monthly_change / 100) + current_index"}
{"ground_truth": "def suitable_toys(toys, personality, interests, skills):\n    # Define a dictionary to map toy names to their characteristics\n    toy_characteristics = {\n        'Barbie': ['creative', 'role-playing', 'fashion'],\n        'LEGO': ['building', 'problem-solving', 'logical'],\n        'Lincoln Logs': ['building', 'creative', 'imagination'],\n        'Fisher Price': ['creative', 'role-playing', 'imagination']\n    }\n\n    # Initialize a list to store suitable toys\n    suitable = []\n\n    # Iterate over each toy\n    for toy in toys:\n        # Check if the toy's characteristics match the child's personality, interests, and skills\n        if any(char in personality for char in toy_characteristics[toy]) or \\\n           any(char in interests for char in toy_characteristics[toy]) or \\\n           any(char in skills for char in toy_characteristics[toy]):\n            suitable.append(toy)\n\n    return suitable", "problem_description": "I want you to write a Python function. The function should take four parameters: a list of toys, a list of a child's personality traits, a list of a child's interests, and a list of a child's skills. The function should determine which toys are suitable for the child based on their personality, interests, and skills. For example, if a child is a creative and likes building things, the function should return toys like LEGO or Lincoln Logs. I'm not sure how you'll define the characteristics of each toy, but make sure it's something that can be used to compare with the child's traits.The signature of the function is: def suitable_toys(toys, personality, interests, skills)", "test_cases": {"test1": "suitable_toys(['Barbie', 'LEGO', 'Lincoln Logs'], ['creative', 'role-playing'], ['fashion', 'building'], ['problem-solving'])", "test2": "suitable_toys(['Barbie', 'Fisher Price', 'LEGO'], ['logical', 'imaginative'], ['reading', 'puzzle-solving'], ['problem-solving'])", "test3": "suitable_toys(['Lincoln Logs', 'Barbie', 'LEGO'], ['creative', 'role-playing'], ['building', 'imaginative play'], ['building'])", "test4": "suitable_toys(['Fisher Price', 'Barbie', 'LEGO'], ['creative', 'problem-solving'], ['imaginative play', 'fashion'], ['problem-solving'])", "test5": "suitable_toys(['LEGO', 'Lincoln Logs', 'Fisher Price'], ['logical', 'imaginative'], ['building', 'puzzle-solving'], ['problem-solving'])", "test6": "suitable_toys(['Barbie', 'LEGO', 'Fisher Price'], ['creative', 'role-playing'], ['fashion', 'imaginative play'], ['problem-solving'])", "test7": "suitable_toys(['Lincoln Logs', 'Barbie', 'Fisher Price'], ['creative', 'imaginative'], ['building', 'imaginative play'], ['building'])", "test8": "suitable_toys(['LEGO', 'Barbie', 'Lincoln Logs'], ['logical', 'problem-solving'], ['building', 'puzzle-solving'], ['problem-solving'])", "test9": "suitable_toys(['Fisher Price', 'LEGO', 'Barbie'], ['creative', 'imaginative'], ['imaginative play', 'fashion'], ['problem-solving'])", "test10": "suitable_toys(['Barbie', 'Fisher Price', 'Lincoln Logs'], ['creative', 'role-playing'], ['fashion', 'imaginative play'], ['problem-solving'])"}, "hidden_information": "def suitable_toys(toys, personality, interests, skills):\n    # Define a dictionary to map toy names to their characteristics\n    toy_characteristics = {\n        'Barbie': ['creative', 'role-playing', 'fashion'],\n        'LEGO': ['building', 'problem-solving', 'logical'],\n        'Lincoln Logs': ['building', 'creative', 'imagination'],\n        'Fisher Price': ['creative', 'role-playing', 'imagination']\n    }\n\n    # Initialize a list to store suitable toys\n    suitable = []\n\n    # Iterate over each toy\n    for toy in toys:\n        # Check if the toy's characteristics match the child's personality, interests, and skills\n        if any(char in personality for char in toy_characteristics[toy]) or \\\n           any(char in interests for char in toy_characteristics[toy]) or \\\n           any(char in skills for char in toy_characteristics[toy]):\n            suitable.append(toy)\n\n    return suitable"}
{"ground_truth": "def convert_to_gluten_free(recipe, gluten_free_flour_mix):\n    gluten_free_recipe = {}\n    for ingredient, quantity in recipe.items():\n        if ingredient in ['all-purpose flour', 'wheat flour', 'oat flour']:\n            gluten_free_recipe[ingredient] = gluten_free_flour_mix\n        else:\n            gluten_free_recipe[ingredient] = quantity\n    return gluten_free_recipe\n\ndef gluten_free_flour_mix(relative_quantity):\n    millet_flour = relative_quantity * 0.4\n    sweet_rice_flour = relative_quantity * 0.3\n    potato_starch = relative_quantity * 0.3\n    return {'millet flour': millet_flour, 'sweet rice flour': sweet_rice_flour, 'potato starch': potato_starch} ", "problem_description": "Hello agent, I need your help in converting some recipes to be gluten-free. Can you write a Python function that takes in a recipe (represented as a dictionary with ingredient names as keys and quantities as values) and a gluten-free flour mix (also represented as a dictionary with ingredient names as keys and quantities as values), and outputs the modified recipe with all gluten-containing ingredients replaced with the gluten-free flour mix?The signature of the function is: def convert_to_gluten_free(recipe, gluten_free_flour_mix)", "test_cases": {"test1": "convert_to_gluten_free({'all-purpose flour': 2, 'sugar': 1, 'eggs': 2}, gluten_free_flour_mix(2))", "test2": "convert_to_gluten_free({'wheat flour': 1.5, 'chocolate chips': 1, 'hazelnuts': 0.5}, gluten_free_flour_mix(1.5))", "test3": "convert_to_gluten_free({'oat flour': 1, 'oat milk': 1, 'berries': 1}, gluten_free_flour_mix(1))", "test4": "convert_to_gluten_free({'all-purpose flour': 2, 'sugar': 1, 'butter': 1}, gluten_free_flour_mix(2))", "test5": "convert_to_gluten_free({'wheat flour': 1.5, 'eggs': 2, 'salt': 0.5}, gluten_free_flour_mix(1.5))", "test6": "convert_to_gluten_free({'oat flour': 1, 'oat milk': 1, 'honey': 0.5}, gluten_free_flour_mix(1))", "test7": "convert_to_gluten_free({'all-purpose flour': 2, 'sugar': 1, 'cream': 1}, gluten_free_flour_mix(2))", "test8": "convert_to_gluten_free({'wheat flour': 1.5, 'chocolate chips': 1, 'almonds': 0.5}, gluten_free_flour_mix(1.5))", "test9": "convert_to_gluten_free({'oat flour': 1, 'oat milk': 1, 'vanilla': 0.5}, gluten_free_flour_mix(1))", "test10": "convert_to_gluten_free({'all-purpose flour': 2, 'sugar': 1, 'peanuts': 1}, gluten_free_flour_mix(2))"}, "hidden_information": "def convert_to_gluten_free(recipe, gluten_free_flour_mix):\n    gluten_free_recipe = {}\n    for ingredient, quantity in recipe.items():\n        if ingredient in ['all-purpose flour', 'wheat flour', 'oat flour']:\n            gluten_free_recipe[ingredient] = gluten_free_flour_mix\n        else:\n            gluten_free_recipe[ingredient] = quantity\n    return gluten_free_recipe\n\ndef gluten_free_flour_mix(relative_quantity):\n    millet_flour = relative_quantity * 0.4\n    sweet_rice_flour = relative_quantity * 0.3\n    potato_starch = relative_quantity * 0.3\n    return {'millet flour': millet_flour, 'sweet rice flour': sweet_rice_flour, 'potato starch': potato_starch} "}
{"ground_truth": "def calculate_optimized_router_capacity(max_bandwidth, service_demands): max_capacity = max_bandwidth / sum(demand for demand in service_demands); optimized_capacities = [min(max_capacity, demand) for demand in service_demands]; return optimized_capacities", "problem_description": "I need a python function to optimize the allocation of bandwidth to different multimedia services on a cable network. The function should take into account the maximum available bandwidth and the demands of each service, and return the optimized allocation of bandwidth to each service. Can you write a function to solve this problem?The signature of the function is: def calculate_optimized_router_capacity(max_bandwidth, service_demands)", "test_cases": {"test1": "calculate_optimized_router_capacity(1000, [200, 300, 500])", "test2": "calculate_optimized_router_capacity(500, [100, 150, 250])", "test3": "calculate_optimized_router_capacity(2000, [500, 750, 250])", "test4": "calculate_optimized_router_capacity(1500, [300, 400, 800])", "test5": "calculate_optimized_router_capacity(2500, [600, 800, 900, 200])", "test6": "calculate_optimized_router_capacity(1200, [250, 350, 600])", "test7": "calculate_optimized_router_capacity(1800, [400, 600, 800])", "test8": "calculate_optimized_router_capacity(2200, [500, 700, 1000])", "test9": "calculate_optimized_router_capacity(2800, [600, 900, 1300])", "test10": "calculate_optimized_router_capacity(3000, [800, 1200, 1600])"}, "hidden_information": "def calculate_optimized_router_capacity(max_bandwidth, service_demands): max_capacity = max_bandwidth / sum(demand for demand in service_demands); optimized_capacities = [min(max_capacity, demand) for demand in service_demands]; return optimized_capacities"}
{"ground_truth": "def calculate_average_rating(ratings):\n    ratings_dict = {'\u00bd': 0.5, '1': 1, '1\u00bd': 1.5, '2': 2, '2\u00bd': 2.5, '3': 3, '3\u00bd': 3.5, '4': 4, '4\u00bd': 4.5, '5': 5}\n    return sum(ratings_dict.get(rate, 0) for rate in ratings) / len(ratings)", "problem_description": "I want you to write a python function to calculate the average rating of movies, but the ratings can be half stars as well. How would you handle that?The signature of the function is: def calculate_average_rating(ratings)", "test_cases": {"test1": "calculate_average_rating(['4', '5', '3', '2\u00bd', '4\u00bd'])", "test2": "calculate_average_rating(['1', '2', '3', '2', '1'])", "test3": "calculate_average_rating(['\u00bd', '3\u00bd', '4\u00bd'])", "test4": "calculate_average_rating(['5', '5', '5', '5'])", "test5": "calculate_average_rating(['1\u00bd', '2\u00bd', '3\u00bd', '4\u00bd'])", "test6": "calculate_average_rating(['2', '4', '6'])", "test7": "calculate_average_rating(['3'])", "test8": "calculate_average_rating(['1\u00bd', '1\u00bd', '1\u00bd'])", "test9": "calculate_average_rating(['4', '4', '4', '4'])", "test10": "calculate_average_rating(['\u00bd', '1', '1\u00bd', '2', '2\u00bd', '3', '3\u00bd', '4', '4\u00bd', '5'])"}, "hidden_information": "def calculate_average_rating(ratings):\n    ratings_dict = {'\u00bd': 0.5, '1': 1, '1\u00bd': 1.5, '2': 2, '2\u00bd': 2.5, '3': 3, '3\u00bd': 3.5, '4': 4, '4\u00bd': 4.5, '5': 5}\n    return sum(ratings_dict.get(rate, 0) for rate in ratings) / len(ratings)"}
{"ground_truth": "def diagnose_battery_issue(power_source, battery_age, ac_adaptor, cells_replaced):\n    if power_source == \"AC\" and ac_adaptor == \"unknown\":\n        return \"AC cannot be determined. System will run slower and battery will not be charged.\"\n    elif battery_age > 2:\n        return \"Battery life has expired. Consider replacing the battery.\"\n    elif cells_replaced:\n        return \"Cells replaced successfully. Battery life extended.\"\n    else:\n        return \"Unknown issue. Contact Dell support.\"", "problem_description": "I need the agent to write a Python function to diagnose the battery charging issue on my Dell laptop. It sometimes charges and sometimes it doesn't. The function should take some information about the laptop's configuration and provide a solution or a diagnosis.The signature of the function is: def diagnose_battery_issue(power_source, battery_age, ac_adaptor, cells_replaced)", "test_cases": {"test1": "diagnose_battery_issue(\"AC\", 3.5, \"unknown\", False)", "test2": "diagnose_battery_issue(\"Battery\", 1.2, \"Dell\", True)", "test3": "diagnose_battery_issue(\"AC\", 1.2, \"Dell\", False)", "test4": "diagnose_battery_issue(\"Battery\", 3.5, \"unknown\", False)", "test5": "diagnose_battery_issue(\"AC\", 3.5, \"Dell\", True)", "test6": "diagnose_battery_issue(\"Battery\", 2.0, \"unknown\", True)", "test7": "diagnose_battery_issue(\"AC\", 2.0, \"Dell\", False)", "test8": "diagnose_battery_issue(\"Battery\", 3.5, \"Dell\", True)", "test9": "diagnose_battery_issue(\"AC\", 3.5, \"unknown\", False)", "test10": "diagnose_battery_issue(\"Battery\", 2.0, \"Dell\", False)"}, "hidden_information": "def diagnose_battery_issue(power_source, battery_age, ac_adaptor, cells_replaced):\n    if power_source == \"AC\" and ac_adaptor == \"unknown\":\n        return \"AC cannot be determined. System will run slower and battery will not be charged.\"\n    elif battery_age > 2:\n        return \"Battery life has expired. Consider replacing the battery.\"\n    elif cells_replaced:\n        return \"Cells replaced successfully. Battery life extended.\"\n    else:\n        return \"Unknown issue. Contact Dell support.\""}
{"ground_truth": "def calculate_ingredient_quantities(num_servings):\n    ingredients = {\n        'bread slices': 6 * num_servings,\n        'mayonnaise': 6 * num_servings,\n        'bacon slices': 6 * num_servings,\n        'avocados': num_servings,\n        'tomatoes': num_servings,\n        'lettuce leaves': 4 * num_servings\n    }\n    return {k: v for k, v in ingredients.items() if v > 0}", "problem_description": "I want to plan a party with friends and I want the LLM agent to write a python function to calculate the quantity of each ingredient I need to make an Avocado BLT Club for an unknown number of guests.The signature of the function is: def calculate_ingredient_quantities(num_servings)", "test_cases": {"test1": "calculate_ingredient_quantities(2)", "test2": "calculate_ingredient_quantities(4)", "test3": "calculate_ingredient_quantities(1)", "test4": "calculate_ingredient_quantities(10)", "test5": "calculate_ingredient_quantities(5)", "test6": "calculate_ingredient_quantities(3)", "test7": "calculate_ingredient_quantities(20)", "test8": "calculate_ingredient_quantities(6)", "test9": "calculate_ingredient_quantities(8)", "test10": "calculate_ingredient_quantities(15)"}, "hidden_information": "def calculate_ingredient_quantities(num_servings):\n    ingredients = {\n        'bread slices': 6 * num_servings,\n        'mayonnaise': 6 * num_servings,\n        'bacon slices': 6 * num_servings,\n        'avocados': num_servings,\n        'tomatoes': num_servings,\n        'lettuce leaves': 4 * num_servings\n    }\n    return {k: v for k, v in ingredients.items() if v > 0}"}
{"ground_truth": "def categorize_sentiment(statements, keywords, name): \n    negative_statements = []\n    for statement in statements:\n        if any(keyword in statement for keyword in keywords):\n            if name in statement:\n                negative_statements.append(statement)\n    return negative_statements", "problem_description": "Hey I want to understand the sentiment of recent statements made by people from the middle east regarding their leader. The person is always male, always mentioned by name in a sentence. I was told a recent statement mentions 'big guns' in a negative light, what is the best way to go about this in python? can you write a python function?The signature of the function is: def categorize_sentiment(statements, keywords, name)", "test_cases": {"test1": "categorize_sentiment(['I think President John is great.', 'President John has big guns and big tanks.'], ['bad', 'guns', 'tanks', 'war'], 'President John')", "test2": "categorize_sentiment(['The leader is just and fair.', 'I dislike the leader and his methods.'], ['bad', 'hate', 'dislike'], 'leader')", "test3": "categorize_sentiment(['The king has been just and fair.', 'He has big guns but is a good ruler.'], ['bad', 'guns', 'war', 'good'], 'king')", "test4": "categorize_sentiment(['I think the prince has been very generous.', 'The prince is very bad.'], ['bad', 'generous'], 'prince')", "test5": "categorize_sentiment(['The king has done a lot for the country.', 'The king has done some questionable things recently'], ['bad', 'questionable', 'country'], 'king')", "test6": "categorize_sentiment(['President Michael is a great ruler.', 'President Michael is a bad ruler.'], ['ruler', 'bad', 'great'], 'President Michael')", "test7": "categorize_sentiment(['The sultan has a lot of power.', 'I dislike the sultan and his actions.'], ['power', 'actions', 'dislike'], 'sultan')", "test8": "categorize_sentiment(['The leader has done a lot for the country.', 'I do not like the leader.'], ['country', 'leader', 'like'], 'leader')", "test9": "categorize_sentiment(['Emperor Leo is a great emperor.', 'Emperor Leo has questionable actions.'], ['emperor', 'questionable', 'actions'], 'Emperor Leo')", "test10": "categorize_sentiment(['The caliph has been fair and just.', 'I think the caliph has done some bad things recently.'], ['caliph', 'bad', 'fair', 'just'], 'caliph')"}, "hidden_information": "def categorize_sentiment(statements, keywords, name): \n    negative_statements = []\n    for statement in statements:\n        if any(keyword in statement for keyword in keywords):\n            if name in statement:\n                negative_statements.append(statement)\n    return negative_statements"}
{"ground_truth": "def calculate_federal_funding_lost(state_name, federal_funding_breakdown, total_federal_fund):\n    education_funding = federal_funding_breakdown.get('education', 0) * 0.25\n    transportation_funding = federal_funding_breakdown.get('transportation', 0) * 0.25\n    public_housing_funding = federal_funding_breakdown.get('public_housing', 0) * 0.1\n    total_funding_lost = education_funding + transportation_funding + public_housing_funding\n    return total_funding_lost", "problem_description": "Can you write a python function to calculate the total federal funding lost by a state if it were to secede from the United States? The state receives funding for various sectors such as education, transportation, and public housing. The agent should ask questions to clarify the federal funding breakdown and the percentage of funding allocated to each sector.The signature of the function is: def calculate_federal_funding_lost(state_name, federal_funding_breakdown, total_federal_fund)", "test_cases": {"test1": "calculate_federal_funding_lost('Oklahoma', {'education': 1000000000, 'transportation': 450000000, 'public_housing': 50000000}, 2200000000)", "test2": "calculate_federal_funding_lost('Texas', {'education': 8000000000, 'transportation': 1000000000, 'public_housing': 200000000}, 3000000000)", "test3": "calculate_federal_funding_lost('California', {'education': 12000000000, 'transportation': 2000000000, 'public_housing': 300000000}, 4000000000)", "test4": "calculate_federal_funding_lost('New York', {'education': 10000000000, 'transportation': 3000000000, 'public_housing': 400000000}, 5000000000)", "test5": "calculate_federal_funding_lost('Florida', {'education': 8000000000, 'transportation': 2500000000, 'public_housing': 500000000}, 3500000000)", "test6": "calculate_federal_funding_lost('Illinois', {'education': 9000000000, 'transportation': 2000000000, 'public_housing': 300000000}, 4000000000)", "test7": "calculate_federal_funding_lost('Pennsylvania', {'education': 7000000000, 'transportation': 1500000000, 'public_housing': 200000000}, 3000000000)", "test8": "calculate_federal_funding_lost('Ohio', {'education': 6000000000, 'transportation': 1000000000, 'public_housing': 150000000}, 2500000000)", "test9": "calculate_federal_funding_lost('Georgia', {'education': 5000000000, 'transportation': 1200000000, 'public_housing': 100000000}, 2200000000)", "test10": "calculate_federal_funding_lost('North Carolina', {'education': 4000000000, 'transportation': 1000000000, 'public_housing': 50000000}, 2000000000)"}, "hidden_information": "def calculate_federal_funding_lost(state_name, federal_funding_breakdown, total_federal_fund):\n    education_funding = federal_funding_breakdown.get('education', 0) * 0.25\n    transportation_funding = federal_funding_breakdown.get('transportation', 0) * 0.25\n    public_housing_funding = federal_funding_breakdown.get('public_housing', 0) * 0.1\n    total_funding_lost = education_funding + transportation_funding + public_housing_funding\n    return total_funding_lost"}
{"ground_truth": "def calculate_poverty_relief_budget(total_budget, poverty_percentage=1.0, non_poverty_allocations=None):\n    if non_poverty_allocations is None:\n        non_poverty_allocations = {}\n    total_non_poverty_allocation = sum(non_poverty_allocations.values())\n    poverty_allocation = (total_budget - total_non_poverty_allocation) * poverty_percentage / 100\n    return poverty_allocation", "problem_description": "I want you to write a Python function to calculate the additional budget for poverty relief based on the federal budget. I want to allocate a certain percentage of the budget to help the poor, but I'm not sure how to take into account the existing non-poverty allocations. Can you help me with that?The signature of the function is: def calculate_poverty_relief_budget(total_budget, poverty_percentage=1.0, non_poverty_allocations=None)", "test_cases": {"test1": "calculate_poverty_relief_budget(1000000, non_poverty_allocations={'defense': 300000, 'education': 200000})", "test2": "calculate_poverty_relief_budget(500000, poverty_percentage=0.5, non_poverty_allocations={'healthcare': 150000, 'infrastructure': 100000})", "test3": "calculate_poverty_relief_budget(2000000, non_poverty_allocations={'tax_cuts': 500000, 'other': 200000})", "test4": "calculate_poverty_relief_budget(1000000, poverty_percentage=2.0)", "test5": "calculate_poverty_relief_budget(500000, non_poverty_allocations={'welfare': 100000, 'environment': 50000})", "test6": "calculate_poverty_relief_budget(2000000, poverty_percentage=0.75, non_poverty_allocations={'social_security': 300000, 'transportation': 200000})", "test7": "calculate_poverty_relief_budget(1500000, non_poverty_allocations={'agriculture': 200000, 'energy': 150000})", "test8": "calculate_poverty_relief_budget(2500000, poverty_percentage=1.25, non_poverty_allocations={'commerce': 400000, 'housing': 250000})", "test9": "calculate_poverty_relief_budget(1200000, non_poverty_allocations={'justice': 250000, 'science': 150000})", "test10": "calculate_poverty_relief_budget(3500000, poverty_percentage=0.9, non_poverty_allocations={'veterans': 500000, 'foreign_aid': 300000})"}, "hidden_information": "def calculate_poverty_relief_budget(total_budget, poverty_percentage=1.0, non_poverty_allocations=None):\n    if non_poverty_allocations is None:\n        non_poverty_allocations = {}\n    total_non_poverty_allocation = sum(non_poverty_allocations.values())\n    poverty_allocation = (total_budget - total_non_poverty_allocation) * poverty_percentage / 100\n    return poverty_allocation"}
{"ground_truth": "def anonymize_call_log(call_logs, anonymous_callers):\n    encrypted_logs = {}\n    for call_log in call_logs:\n        caller = call_log['caller']\n        receiver = call_log['receiver']\n        if caller in anonymous_callers or receiver in anonymous_callers:\n            encrypted_logs[f'{caller}:{receiver}'] = 'encrypted'\n        else:\n            encrypted_logs[f'{caller}:{receiver}'] = 'non-encrypted'\n    return encrypted_logs", "problem_description": "I want you to write a Python function that maintains call logs. However, the function must ensure the calls made by certain individuals or groups remain anonymous and encrypted. The function should take the list of call logs as input, which includes the caller and receiver details, and output the logs that identify whether each call is encrypted or non-encrypted.The signature of the function is: def anonymize_call_log(call_logs, anonymous_callers)", "test_cases": {"test1": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], ['user1', 'user3'])", "test2": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user4', 'receiver': 'user5'}], ['user1'])", "test3": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], ['user3', 'user4'])", "test4": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user4', 'receiver': 'user5'}], [])", "test5": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], ['user1', 'user2'])", "test6": "anonymize_call_log([], ['user1', 'user3'])", "test7": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], ['user1', 'user3', 'user4'])", "test8": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], ['user5', 'user6'])", "test9": "anonymize_call_log([{\"caller\": 'user1', 'receiver': 'user2'}, {\"caller\": 'user3', 'receiver': 'user4'}], [])", "test10": "anonymize_call_log([], ['user1', 'user3'])"}, "hidden_information": "def anonymize_call_log(call_logs, anonymous_callers):\n    encrypted_logs = {}\n    for call_log in call_logs:\n        caller = call_log['caller']\n        receiver = call_log['receiver']\n        if caller in anonymous_callers or receiver in anonymous_callers:\n            encrypted_logs[f'{caller}:{receiver}'] = 'encrypted'\n        else:\n            encrypted_logs[f'{caller}:{receiver}'] = 'non-encrypted'\n    return encrypted_logs"}
{"ground_truth": "def calculate_distribution(claimed_amounts, total_recovered_funds): return [claimed_amount * total_recovered_funds / sum(claimed_amounts) for claimed_amount in claimed_amounts]", "problem_description": "Hi agent, I have a huge list of clients, each who has claimed a certain amount after being affected by the Ponzi scheme. I also know the total funds we've recovered from this scam so far. Can you write a python function that can calculate how much each client would ideally receive from the recovered funds given the funds that were claimed by each client? The recovered funds should be distributed based on the proportion of the total amount claimed.The signature of the function is: def calculate_distribution(claimed_amounts, total_recovered_funds)", "test_cases": {"test1": "calculate_distribution([100000, 200000, 300000], 9000000)", "test2": "calculate_distribution([1000000, 2000000], 1500000)", "test3": "calculate_distribution([5000000], 10000000)", "test4": "calculate_distribution([200000, 300000], 600000)", "test5": "calculate_distribution([1000000, 2000000, 3000000, 4000000], 8000000)", "test6": "calculate_distribution([50000, 100000], 150000)", "test7": "calculate_distribution([1000000, 2000000, 3000000], 0)", "test8": "calculate_distribution([1000000], 1000000)", "test9": "calculate_distribution([250000, 500000, 750000], 1500000)", "test10": "calculate_distribution([10000, 20000, 30000, 40000, 50000], 100000)"}, "hidden_information": "def calculate_distribution(claimed_amounts, total_recovered_funds): return [claimed_amount * total_recovered_funds / sum(claimed_amounts) for claimed_amount in claimed_amounts]"}
{"ground_truth": "def calculate_performance_improvement(before_grade, after_grade):\n    if before_grade == 0:\n        if after_grade == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return (after_grade - before_grade) / before_grade * 100", "problem_description": "I want you to write a python function that can tell me if a student improved their language skills after taking a course. Please consider that the student's grade before and after the course is given as a number from 1 to 10. Can you create that function?The signature of the function is: def calculate_performance_improvement(before_grade, after_grade)", "test_cases": {"test1": "calculate_performance_improvement(4, 7)", "test2": "calculate_performance_improvement(8, 8)", "test3": "calculate_performance_improvement(1, 0)", "test4": "calculate_performance_improvement(5, 5)", "test5": "calculate_performance_improvement(0, 0)", "test6": "calculate_performance_improvement(2, 6)", "test7": "calculate_performance_improvement(9, 10)", "test8": "calculate_performance_improvement(3, 3)", "test9": "calculate_performance_improvement(1, 1)", "test10": "calculate_performance_improvement(6, 2)"}, "hidden_information": "def calculate_performance_improvement(before_grade, after_grade):\n    if before_grade == 0:\n        if after_grade == 0:\n            return 0\n        else:\n            return 1\n    else:\n        return (after_grade - before_grade) / before_grade * 100"}
{"ground_truth": "def detect_reposts(posts, users, tolerance=30):\n    reposts = {}\n    for post, author in zip(posts, users):\n        reposts[post] = reposts.get(post, 0) + 1\n        if reposts[post] > tolerance:\n            return True, post\n    return False, None", "problem_description": "Hey Agent, I want you to write a python function that takes in some user post data from a web forum, and then identifies and reports any reposts (which are basically posts that have been posted multiple times before). I just want to automate this task to improve the quality of the forum. This should be a pretty simple task, can you get to it?The signature of the function is: def detect_reposts(posts, users, tolerance=30)", "test_cases": {"test1": "detect_reposts(['postA', 'postB', 'postA', 'postC'], ['user1', 'user2', 'user3', 'user4'], tolerance=30)", "test2": "detect_reposts(['postX', 'postY', 'postZ'], ['userX', 'userY', 'userZ'], tolerance=30)", "test3": "detect_reposts(['postA', 'postA', 'postA', 'postA'], ['user1', 'user1', 'user1', 'user1'], tolerance=30)", "test4": "detect_reposts(['postA', 'postB', 'postC', 'postD'], ['user1', 'user2', 'user3', 'user4'], tolerance=30)", "test5": "detect_reposts(['postA', 'postA', 'postB', 'postC'], ['user1', 'user2', 'user3', 'user4'], tolerance=30)", "test6": "detect_reposts(['postX', 'postY', 'postX', 'postY'], ['userX', 'userY', 'userX', 'userY'], tolerance=30)", "test7": "detect_reposts(['postA', 'postA', 'postA', 'postA', 'postA'], ['user1', 'user1', 'user1', 'user1', 'user1'], tolerance=30)", "test8": "detect_reposts(['postA', 'postB', 'postC', 'postA', 'postD'], ['user1', 'user2', 'user3', 'user1', 'user4'], tolerance=30)", "test9": "detect_reposts(['postX', 'postY', 'postZ', 'postW'], ['userX', 'userY', 'userZ', 'userW'], tolerance=30)", "test10": "detect_reposts(['postA', 'postA', 'postB', 'postC', 'postA'], ['user1', 'user2', 'user3', 'user4', 'user1'], tolerance=30)"}, "hidden_information": "def detect_reposts(posts, users, tolerance=30):\n    reposts = {}\n    for post, author in zip(posts, users):\n        reposts[post] = reposts.get(post, 0) + 1\n        if reposts[post] > tolerance:\n            return True, post\n    return False, None"}
{"ground_truth": "def find_pokemon(region):\n    pokemon_regions = {\n        'Kanto': ['Pikachu', 'Bulbasaur', 'Charmander'],\n        'Unova': ['Snivy', 'Tepig', 'Oshawott'],\n        'Johto': ['Chikorita', 'Cyndaquil', 'Totodile'],\n        'Hoenn': ['Treecko', 'Torchic', 'Mudkip'],\n        'Sinnoh': ['Turtwig', 'Chimchar', 'Piplup'],\n        'Alola': ['Rowlet', 'Litten', 'Popplio'],\n        'Galar': ['Grookey', 'Scorbunny', 'Sobble'],\n    }\n    if region in pokemon_regions:\n        return pokemon_regions[region]\n    else:\n        return 'Invalid region'", "problem_description": "Hey LLM, I want to write a python function that can determine the types of Pok\u00e9mon that can be found in different regions, but I'm not sure how to approach it. Can you help me create a function that takes a region as input and returns the Pok\u00e9mon that can be found there?The signature of the function is: def find_pokemon(region)", "test_cases": {"test1": "find_pokemon('Kanto')", "test2": "find_pokemon('Unova')", "test3": "find_pokemon('Johto')", "test4": "find_pokemon('Hoenn')", "test5": "find_pokemon('Sinnoh')", "test6": "find_pokemon('Alola')", "test7": "find_pokemon('Galar')", "test8": "find_pokemon('Kalos')", "test9": "find_pokemon('Orange Archipelago')", "test10": "find_pokemon('Unknown Region')"}, "hidden_information": "def find_pokemon(region):\n    pokemon_regions = {\n        'Kanto': ['Pikachu', 'Bulbasaur', 'Charmander'],\n        'Unova': ['Snivy', 'Tepig', 'Oshawott'],\n        'Johto': ['Chikorita', 'Cyndaquil', 'Totodile'],\n        'Hoenn': ['Treecko', 'Torchic', 'Mudkip'],\n        'Sinnoh': ['Turtwig', 'Chimchar', 'Piplup'],\n        'Alola': ['Rowlet', 'Litten', 'Popplio'],\n        'Galar': ['Grookey', 'Scorbunny', 'Sobble'],\n    }\n    if region in pokemon_regions:\n        return pokemon_regions[region]\n    else:\n        return 'Invalid region'"}
{"ground_truth": "def categorize_game_review(rating):\n    if rating >= 8:\n        return 'Highly Recommended'\n    elif rating >= 5:\n        return 'Recommended'\n    else:\n        return 'Not Recommended'", "problem_description": "I want you to write a python function that can help me summarize game reviews. Can you design a function that takes a game's rating and returns a recommendation category? I think the categories should be based on the rating, but I'm not sure how many categories there should be or what the exact thresholds should be.The signature of the function is: def categorize_game_review(rating)", "test_cases": {"test1": "categorize_game_review(9)", "test2": "categorize_game_review(7)", "test3": "categorize_game_review(4)", "test4": "categorize_game_review(8.5)", "test5": "categorize_game_review(6.2)", "test6": "categorize_game_review(3)", "test7": "categorize_game_review(5)", "test8": "categorize_game_review(9.5)", "test9": "categorize_game_review(2)", "test10": "categorize_game_review(6)"}, "hidden_information": "def categorize_game_review(rating):\n    if rating >= 8:\n        return 'Highly Recommended'\n    elif rating >= 5:\n        return 'Recommended'\n    else:\n        return 'Not Recommended'"}
{"ground_truth": "def calculate_total_savings(num_friends, initial_prices, price_drop, money_already_saved):\n    total_savings = 0\n    for i in range(num_friends):\n        savings_per_person = min(initial_prices[i] - price_drop, money_already_saved[i])\n        total_savings += savings_per_person\n    return total_savings", "problem_description": "I want a python function that can calculate total savings for a group of friends who want to buy a console after a price drop. The function should take into account the initial price of the console when each friend planned to buy it, the amount of the price drop, and how much money each friend had already saved up before the price drop was announced.The signature of the function is: def calculate_total_savings(num_friends, initial_prices, price_drop, money_already_saved)", "test_cases": {"test1": "calculate_total_savings(2, [200, 250], 80, [50, 100])", "test2": "calculate_total_savings(3, [200, 250, 300], 50, [0, 75, 150])", "test3": "calculate_total_savings(1, [300], 100, [200])", "test4": "calculate_total_savings(2, [200, 250], 25, [50, 100])", "test5": "calculate_total_savings(4, [200, 250, 300, 350], 75, [0, 75, 150, 225])", "test6": "calculate_total_savings(2, [250, 300], 25, [50, 75])", "test7": "calculate_total_savings(1, [200], 0, [100])", "test8": "calculate_total_savings(3, [200, 250, 300], 100, [50, 75, 150])", "test9": "calculate_total_savings(2, [250, 300], 50, [75, 100])", "test10": "calculate_total_savings(4, [200, 250, 300, 350], 25, [25, 50, 75, 100])"}, "hidden_information": "def calculate_total_savings(num_friends, initial_prices, price_drop, money_already_saved):\n    total_savings = 0\n    for i in range(num_friends):\n        savings_per_person = min(initial_prices[i] - price_drop, money_already_saved[i])\n        total_savings += savings_per_person\n    return total_savings"}
{"ground_truth": "def calculate_final_score(day_scores, weights=[0.3, 0.3, 0.4]):\n    return sum([day_scores[i] * weights[i] for i in range(len(day_scores))])", "problem_description": "Write a Python function to calculate the overall rating of a player based on their individual scores from multiple days of a game. The player's overall rating should be a weighted sum of their daily scores, but the specific weights are not specified.The signature of the function is: def calculate_final_score(day_scores, weights=[0.3, 0.3, 0.4])", "test_cases": {"test1": "calculate_final_score([80, 70, 90], [0.2, 0.3, 0.5])", "test2": "calculate_final_score([50, 80, 70])", "test3": "calculate_final_score([90, 95, 92], [0.5, 0.3, 0.2])", "test4": "calculate_final_score([40, 50, 60], [0.1, 0.2, 0.7])", "test5": "calculate_final_score([99, 99, 99])", "test6": "calculate_final_score([1, 2, 3], [0.33, 0.33, 0.34])", "test7": "calculate_final_score([70, 80, 90], [0.4, 0.4, 0.2])", "test8": "calculate_final_score([60, 70, 80], [0.1, 0.7, 0.2])", "test9": "calculate_final_score([90, 80, 70], [0.2, 0.4, 0.4])", "test10": "calculate_final_score([50, 60, 70])"}, "hidden_information": "def calculate_final_score(day_scores, weights=[0.3, 0.3, 0.4]):\n    return sum([day_scores[i] * weights[i] for i in range(len(day_scores))])"}
{"ground_truth": "def calculate_serial_ata_efficiency(gen_speed, deterministic_jitter, transfer_rate):\n    if gen_speed == 1:\n        return (transfer_rate / (1 + deterministic_jitter / 100))\n    elif gen_speed == 2:\n        return (transfer_rate / (1 + deterministic_jitter / 50))\n    else:\n        return False", "problem_description": "I want the agent to write a Python function to calculate the efficiency of Serial ATA transfer rates for Gen 1 and Gen 2 speeds based on deterministic jitter.The signature of the function is: def calculate_serial_ata_efficiency(gen_speed, deterministic_jitter, transfer_rate)", "test_cases": {"test1": "calculate_serial_ata_efficiency(1, 0.5, 150)", "test2": "calculate_serial_ata_efficiency(2, 0.2, 300)", "test3": "calculate_serial_ata_efficiency(1, 0, 150)", "test4": "calculate_serial_ata_efficiency(2, 1, 300)", "test5": "calculate_serial_ata_efficiency(1, 0.8, 150)", "test6": "calculate_serial_ata_efficiency(2, 0.4, 300)", "test7": "calculate_serial_ata_efficiency(3, 0.5, 150)", "test8": "calculate_serial_ata_efficiency(1, 0.1, 150)", "test9": "calculate_serial_ata_efficiency(2, 0.9, 300)", "test10": "calculate_serial_ata_efficiency(1, 1, 150)"}, "hidden_information": "def calculate_serial_ata_efficiency(gen_speed, deterministic_jitter, transfer_rate):\n    if gen_speed == 1:\n        return (transfer_rate / (1 + deterministic_jitter / 100))\n    elif gen_speed == 2:\n        return (transfer_rate / (1 + deterministic_jitter / 50))\n    else:\n        return False"}
{"ground_truth": "def calculate_total_price(menu_item_prices, groupon_discount, meal_time, num_items):\n    if meal_time < '16:30':\n        return 'Not valid'\n    total_price = sum(menu_item_prices)\n    if groupon_discount == 'groupon':\n        if total_price > 35:\n            return 17\n        else:\n            return total_price\n    else:\n        return total_price", "problem_description": "Write a python function to calculate the total dinner price for a customer at Tokyo Japanese SteakHouse, Sushi, and Lounge with a $35 Groupon deal and clarify certain conditions with me.The signature of the function is: def calculate_total_price(menu_item_prices, groupon_discount, meal_time, num_items)", "test_cases": {"test1": "calculate_total_price([8, 26], 'groupon', '19:00', 2)", "test2": "calculate_total_price([15, 18], 'normal', '18:00', 2)", "test3": "calculate_total_price([8, 26, 33], 'groupon', '20:00', 3)", "test4": "calculate_total_price([15], 'groupon', '16:00', 1)", "test5": "calculate_total_price([8, 26, 33], 'groupon', '21:30', 3)", "test6": "calculate_total_price([18, 15], 'groupon', '17:00', 2)", "test7": "calculate_total_price([26, 33], 'groupon', '20:00', 2)", "test8": "calculate_total_price([8, 26], 'groupon', '18:30', 2)", "test9": "calculate_total_price([15], 'normal', '18:00', 1)", "test10": "calculate_total_price([8, 26, 33], 'groupon', '16:30', 3)"}, "hidden_information": "def calculate_total_price(menu_item_prices, groupon_discount, meal_time, num_items):\n    if meal_time < '16:30':\n        return 'Not valid'\n    total_price = sum(menu_item_prices)\n    if groupon_discount == 'groupon':\n        if total_price > 35:\n            return 17\n        else:\n            return total_price\n    else:\n        return total_price"}
{"ground_truth": "def quiz_results(questions, answers):\n  results = {}\n  for i in range(len(questions)):\n    if questions[i][1] == answers[i]:\n      results[questions[i][0]] = True\n    else:\n      results[questions[i][0]] = False\n  return results", "problem_description": "I want you to write a python function that will help me grade quizzes based on a list of questions and answers provided by the reader. The function will take two arguments, a list of questions where each question is a tuple containing the question text and the correct answer, and a list of answers provided by the reader. The function will return a dictionary where the keys are the question text and the values are boolean values indicating whether the answer was correct or not.The signature of the function is: def quiz_results(questions, answers)", "test_cases": {"test1": "quiz_results([('What is the name of the main character in the story?', 'Harry'), ('Who is the Head Boy?', 'Draco'), ('What is the name of the subject in which the main character is an expert?', 'Transfiguration')], ['Hermione', 'Draco', 'Transfiguration'])", "test2": "quiz_results([('Who is the main character in the story?', 'Harry'), ('Who is the Head Girl?', 'Hermione'), ('What is the name of the sport played by the main characters?', 'Quidditch')], ['Hermione', 'Hermione', 'Quidditch'])", "test3": "quiz_results([('Who is the author of the story?', 'J.K. Rowling'), ('Who is the villain in the story?', 'Draco'), ('What is the name of the school attended by the main characters?', 'Hogwarts')], ['J.K. Rowling', 'Draco', 'Hogwarts'])", "test4": "quiz_results([('What is the name of the main characters pet?', 'No answer'), ('Who is the best friend of the main character?', 'No answer'), ('What is the name of the teacher who teaches Potions?', 'No answer')], ['No answer', 'Ron', 'Professor Snape'])", "test5": "quiz_results([('What is the name of the story?', 'No answer'), ('Who is the author of the story?', 'No answer'), ('What is the name of the school attended by the main characters?', 'No answer')], ['The Pureblood and the Mudblood', 'No answer', 'No answer'])", "test6": "quiz_results([('Who is the main character in the story?', 'No answer'), ('Who is the Head Girl?', 'No answer'), ('What is the name of the sport played by the main characters?', 'No answer')], ['No answer', 'Hermione', 'No answer'])", "test7": "quiz_results([('Who is the author of the story?', 'J.K. Rowling'), ('Who is the villain in the story?', 'No answer'), ('What is the name of the school attended by the main characters?', 'No answer')], ['J.K. Rowling', 'No answer', 'Hogwarts'])", "test8": "quiz_results([('What is the name of the main characters pet?', 'No answer'), ('Who is the best friend of the main character?', 'Ron'), ('What is the name of the teacher who teaches Potions?', 'Professor Snape')], ['No answer', 'Ron', 'Professor Snape'])", "test9": "quiz_results([('What is the name of the story?', 'The Pureblood and the Mudblood'), ('Who is the author of the story?', 'No answer'), ('What is the name of the school attended by the main characters?', 'Hogwarts')], ['The Pureblood and the Mudblood', 'Stellee123', 'Hogwarts'])", "test10": "quiz_results([('Who is the main character in the story?', 'Hermione'), ('Who is the Head Boy?', 'No answer'), ('What is the name of the sport played by the main characters?', 'No answer')], ['Hermione', 'Draco', 'Quidditch'])"}, "hidden_information": "def quiz_results(questions, answers):\n  results = {}\n  for i in range(len(questions)):\n    if questions[i][1] == answers[i]:\n      results[questions[i][0]] = True\n    else:\n      results[questions[i][0]] = False\n  return results"}
{"ground_truth": "def calculate_laparoscopic_percentage(laparoscopic_resections, total_resections):\n    if total_resections == 0:\n        raise ValueError(\"Total resections cannot be zero\")\n    return (laparoscopic_resections / total_resections) * 100", "problem_description": "I want the agent to write a Python function to calculate some percentage distribution for medical research data. I have a dataset with information about liver resections, and I want to calculate the percentage of laparoscopic resections out of the total number of resections. Can the agent help me with this?The signature of the function is: def calculate_laparoscopic_percentage(laparoscopic_resections, total_resections)", "test_cases": {"test1": "calculate_laparoscopic_percentage(7, 19)", "test2": "calculate_laparoscopic_percentage(8, 19)", "test3": "calculate_laparoscopic_percentage(4, 19)", "test4": "calculate_laparoscopic_percentage(10, 25)", "test5": "calculate_laparoscopic_percentage(0, 20)", "test6": "calculate_laparoscopic_percentage(19, 38)", "test7": "calculate_laparoscopic_percentage(5, 15)", "test8": "calculate_laparoscopic_percentage(20, 40)", "test9": "calculate_laparoscopic_percentage(1, 2)", "test10": "calculate_laparoscopic_percentage(18, 20)"}, "hidden_information": "def calculate_laparoscopic_percentage(laparoscopic_resections, total_resections):\n    if total_resections == 0:\n        raise ValueError(\"Total resections cannot be zero\")\n    return (laparoscopic_resections / total_resections) * 100"}
{"ground_truth": "def generate_health_ratings(inspection_scores, criteria): \n    # Ensure all criterias passed\n    for score in inspection_scores:\n        if score < 85:\n            return 'C' # failed to pass one of the critical criteria\n\n    # calculate overall rating\n    passing_criterias = [score for score in inspection_scores if score >= 85]\n    average_score = sum(passing_criterias)/len(passing_criterias)\n    if average_score >= 90:\n        return 'A'\n    elif average_score >= 80:\n        return 'B'\n    else:\n        return 'C'", "problem_description": "Hey, can you write a python function to generate health ratings (A, B or C) for restaurants based on their recent inspection scores in different criteria (e.g. cleanliness, food safety, facilities)? I need the function to mark restaurants that do not pass any critical criteria, and use the average score of the passing criteria to generate the final grade. Can you help?The signature of the function is: def generate_health_ratings(inspection_scores, criteria)", "test_cases": {"test1": "generate_health_ratings([98, 90, 92, 88, 99], [85, 85, 85, 85, 85])", "test2": "generate_health_ratings([90, 85, 92, 60, 99], [85, 85, 85, 85, 85])", "test3": "generate_health_ratings([85, 85, 85, 85, 85], [85, 85, 85, 85, 85])", "test4": "generate_health_ratings([99, 99, 99, 99, 99], [85, 85, 85, 85, 85])", "test5": "generate_health_ratings([70, 85, 92, 88, 99], [85, 85, 85, 85, 85])", "test6": "generate_health_ratings([95, 95, 95, 95, 95], [80, 85, 85, 85, 85])", "test7": "generate_health_ratings([80, 90, 92, 88, 99], [85, 85, 85, 85, 85])", "test8": "generate_health_ratings([70, 70, 70, 70, 70], [85, 85, 85, 85, 85])", "test9": "generate_health_ratings([75, 85, 92, 88, 99], [85, 85, 85, 85, 85])", "test10": "generate_health_ratings([100, 100, 100, 100, 100], [85, 85, 85, 85, 85])"}, "hidden_information": "def generate_health_ratings(inspection_scores, criteria): \n    # Ensure all criterias passed\n    for score in inspection_scores:\n        if score < 85:\n            return 'C' # failed to pass one of the critical criteria\n\n    # calculate overall rating\n    passing_criterias = [score for score in inspection_scores if score >= 85]\n    average_score = sum(passing_criterias)/len(passing_criterias)\n    if average_score >= 90:\n        return 'A'\n    elif average_score >= 80:\n        return 'B'\n    else:\n        return 'C'"}
{"ground_truth": "def canter_lead(rider_experience, horse_direction, horse_stiffness, desired_lead):\n  if rider_experience < 5:\n    return 'Focus on getting secure at the canter'\n  else:\n    if horse_stiffness == 'right' and desired_lead == 'right':\n      return 'Counter canter'\n    elif horse_stiffness == 'left' and desired_lead == 'left':\n      return 'Counter canter'\n    else:\n      return 'True lead'", "problem_description": "I'm having trouble with my horse staying in the left lead when I try to canter to the right. Can you write a python function that will help me determine the correct canter lead based on my horse's behavior?The signature of the function is: def canter_lead(rider_experience, horse_direction, horse_stiffness, desired_lead)", "test_cases": {"test1": "canter_lead(1, 'right', 'stiff', 'right')", "test2": "canter_lead(10, 'left', 'normal', 'left')", "test3": "canter_lead(3, 'right', 'stiff', 'left')", "test4": "canter_lead(5, 'left', 'normal', 'right')", "test5": "canter_lead(1, 'right', 'normal', 'right')", "test6": "canter_lead(10, 'left', 'stiff', 'left')", "test7": "canter_lead(7, 'right', 'normal', 'right')", "test8": "canter_lead(2, 'left', 'stiff', 'right')", "test9": "canter_lead(9, 'right', 'normal', 'left')", "test10": "canter_lead(4, 'left', 'normal', 'left')"}, "hidden_information": "def canter_lead(rider_experience, horse_direction, horse_stiffness, desired_lead):\n  if rider_experience < 5:\n    return 'Focus on getting secure at the canter'\n  else:\n    if horse_stiffness == 'right' and desired_lead == 'right':\n      return 'Counter canter'\n    elif horse_stiffness == 'left' and desired_lead == 'left':\n      return 'Counter canter'\n    else:\n      return 'True lead'"}
{"ground_truth": "def partition_data(data, column, dates):\n    partitions = {}\n    for row in data:\n        date = row[column]\n        if date not in partitions:\n            partitions[date] = []\n        partitions[date].append(row)\n    return partitions", "problem_description": "Can you write a python function that organizes data similar to how table partitioning works in DB2 9? We have data spread across multiple dimensions, and we want to write a function that puts the similar data ranges in the same partition.The signature of the function is: def partition_data(data, column, dates)", "test_cases": {"test1": "partition_data([{ 'quarter': '2020-01-01', 'id': 1 }, { 'quarter': '2020-01-01', 'id': 2 }, { 'quarter': '2020-04-01', 'id': 3 }], 'quarter', ['2020-01-01', '2020-04-01'])", "test2": "partition_data([{ 'quarter': '2020-07-01', 'id': 4 }, { 'quarter': '2020-10-01', 'id': 5 }], 'quarter', ['2020-07-01', '2020-10-01'])", "test3": "partition_data([{ 'month': '2022-01-01', 'id': 6 }, { 'month': '2022-02-01', 'id': 7 }, { 'month': '2022-03-01', 'id': 8 }], 'month', ['2022-01-01', '2022-02-01', '2022-03-01'])", "test4": "partition_data([{ 'year': '2010', 'id': 9 }, { 'year': '2011', 'id': 10 }, { 'year': '2012', 'id': 11 }], 'year', ['2010', '2011', '2012'])", "test5": "partition_data([{ 'quarter': '2006-01-01', 'id': 12 }, { 'quarter': '2006-04-01', 'id': 13 }, { 'quarter': '2007-01-01', 'id': 14 }], 'quarter', ['2006-01-01', '2006-04-01', '2007-01-01'])", "test6": "partition_data([{ 'quarter': '2020-01-01', 'id': 15 }, { 'quarter': '2020-04-01', 'id': 16 }], 'quarter', ['2020-01-01', '2020-04-01'])", "test7": "partition_data([{ 'month': '2022-01-01', 'id': 17 }, { 'month': '2022-02-01', 'id': 18 }], 'month', ['2022-01-01', '2022-02-01'])", "test8": "partition_data([{ 'year': '2010', 'id': 19 }, { 'year': '2012', 'id': 20 }], 'year', ['2010', '2012'])", "test9": "partition_data([{ 'quarter': '2006-07-01', 'id': 21 }, { 'quarter': '2006-10-01', 'id': 22 }], 'quarter', ['2006-07-01', '2006-10-01'])", "test10": "partition_data([{ 'month': '2022-03-01', 'id': 23 }, { 'month': '2022-04-01', 'id': 24 }], 'month', ['2022-03-01', '2022-04-01'])"}, "hidden_information": "def partition_data(data, column, dates):\n    partitions = {}\n    for row in data:\n        date = row[column]\n        if date not in partitions:\n            partitions[date] = []\n        partitions[date].append(row)\n    return partitions"}
{"ground_truth": "def get_composer(movie_title):\n    movie_composers = {\n        'The Lord of the Rings Trilogy': 'Howard Shore',\n        'Star Wars, Harry Potter': 'John Williams',\n        'Inception, Sherlock Holmes': 'Hans Zimmer',\n        'Casablanca': 'Max Steiner',\n        'The Lion King': 'Elton John and Tim Rice',\n        # ... and other movies and composers ...\n    }\n    return movie_composers.get(movie_title, 'Composer not found')\n\ndef get_movie_titles(composer):\n    movie_titles = {\n        'Howard Shore': ['The Lord of the Rings Trilogy'],\n        'John Williams': ['Star Wars, Harry Potter'],\n        'Hans Zimmer': ['Inception, Sherlock Holmes'],\n        'Max Steiner': ['Casablanca'],\n        'Elton John and Tim Rice': ['The Lion King'],\n        # ... and other composers and movies ...\n    }\n    return movie_titles.get(composer, [])", "problem_description": "I'm looking for an LLM agent's help to write a Python function that can match movie/TV titles with their composers. For example, I want to pass a list of movie titles and get back the names of their composers. Can the agent write a function to do this?The signature of the function is: def get_composer(movie_title)", "test_cases": {"test1": "get_composer('Casablanca')", "test2": "get_composer('The Lion King')", "test3": "get_composer('Inception')", "test4": "get_movie_titles('John Williams')", "test5": "get_movie_titles('Hans Zimmer')", "test6": "get_composer('The Lord of the Rings Trilogy')", "test7": "get_composer('Star Wars, Harry Potter')", "test8": "get_movie_titles('Max Steiner')", "test9": "get_movie_titles('Elton John and Tim Rice')", "test10": "get_composer('The Big Bang Theory (Main Title Theme)')"}, "hidden_information": "def get_composer(movie_title):\n    movie_composers = {\n        'The Lord of the Rings Trilogy': 'Howard Shore',\n        'Star Wars, Harry Potter': 'John Williams',\n        'Inception, Sherlock Holmes': 'Hans Zimmer',\n        'Casablanca': 'Max Steiner',\n        'The Lion King': 'Elton John and Tim Rice',\n        # ... and other movies and composers ...\n    }\n    return movie_composers.get(movie_title, 'Composer not found')\n\ndef get_movie_titles(composer):\n    movie_titles = {\n        'Howard Shore': ['The Lord of the Rings Trilogy'],\n        'John Williams': ['Star Wars, Harry Potter'],\n        'Hans Zimmer': ['Inception, Sherlock Holmes'],\n        'Max Steiner': ['Casablanca'],\n        'Elton John and Tim Rice': ['The Lion King'],\n        # ... and other composers and movies ...\n    }\n    return movie_titles.get(composer, [])"}
{"ground_truth": "def calculate_net_debt(total_debt, cash_equivalents):\n    return total_debt - cash_equivalents", "problem_description": "I want the agent to write a Python function to calculate a company's net debt from its financial data. I need this to evaluate the company's debt situation.The signature of the function is: def calculate_net_debt(total_debt, cash_equivalents)", "test_cases": {"test1": "calculate_net_debt(1000000, 500000)", "test2": "calculate_net_debt(500000, 200000)", "test3": "calculate_net_debt(2000000, 1000000)", "test4": "calculate_net_debt(1500000, 750000)", "test5": "calculate_net_debt(800000, 400000)", "test6": "calculate_net_debt(2500000, 1200000)", "test7": "calculate_net_debt(300000, 150000)", "test8": "calculate_net_debt(1200000, 600000)", "test9": "calculate_net_debt(1800000, 900000)", "test10": "calculate_net_debt(2200000, 1100000)"}, "hidden_information": "def calculate_net_debt(total_debt, cash_equivalents):\n    return total_debt - cash_equivalents"}
{"ground_truth": "def calculate_time_difference(persons_current_hour, israel_hour_difference):\n    return (persons_current_hour + israel_hour_difference) % 24", "problem_description": "Hey LLM, I'm moving to Israel from the US and I'm having trouble keeping track of time differences. Can you write a Python function that calculates the time in Israel based on the current hour in California and the time difference between the two locations? It should be able to handle cases where the calculated time goes past midnight.The signature of the function is: def calculate_time_difference(persons_current_hour, israel_hour_difference)", "test_cases": {"test1": "calculate_time_difference(10, 10)", "test2": "calculate_time_difference(23, 10)", "test3": "calculate_time_difference(0, 5)", "test4": "calculate_time_difference(12, 7)", "test5": "calculate_time_difference(6, 4)", "test6": "calculate_time_difference(18, 12)", "test7": "calculate_time_difference(20, 8)", "test8": "calculate_time_difference(2, 10)", "test9": "calculate_time_difference(15, 6)", "test10": "calculate_time_difference(22, 9)"}, "hidden_information": "def calculate_time_difference(persons_current_hour, israel_hour_difference):\n    return (persons_current_hour + israel_hour_difference) % 24"}
{"ground_truth": "def calculate_rental_cost(days, base_rate, insurance_rate=0, discount=0):\n  return (days * base_rate) + (days * insurance_rate) - discount", "problem_description": "I am planning a trip and want to estimate my car rental costs. I want the agent to write a Python function that takes into account the rental duration, base rate, insurance rate, and any applicable discounts. I am not sure about the exact costs, so I want the agent to interact with me to clarify these details and ensure the function is accurate.The signature of the function is: def calculate_rental_cost(days, base_rate, insurance_rate=0, discount=0)", "test_cases": {"test1": "calculate_rental_cost(3, 120, 0, 0)", "test2": "calculate_rental_cost(7, 80, 15, 20)", "test3": "calculate_rental_cost(1, 200, 10, 0)", "test4": "calculate_rental_cost(10, 100, 0, 50)", "test5": "calculate_rental_cost(5, 150, 20, 30)", "test6": "calculate_rental_cost(2, 180, 15, 10)", "test7": "calculate_rental_cost(14, 90, 10, 40)", "test8": "calculate_rental_cost(6, 110, 0, 25)", "test9": "calculate_rental_cost(4, 140, 12, 18)", "test10": "calculate_rental_cost(8, 130, 18, 35)"}, "hidden_information": "def calculate_rental_cost(days, base_rate, insurance_rate=0, discount=0):\n  return (days * base_rate) + (days * insurance_rate) - discount"}
{"ground_truth": "def torch_relay_status(torches):\n    total_extinguished = 0\n    total_near_misses = 0\n    total_successful = 0\n    for torch in torches:\n        if torch['status'] == 'extinguished':\n            total_extinguished += 1\n        elif torch['status'] == 'near_miss':\n            total_near_misses += 1\n        else:\n            total_successful += 1\n    return total_extinguished, total_near_misses, total_successful", "problem_description": "I'm trying to write a Python function that helps track the status of the Olympic torchbearers' flames during the relay. Can you help me create a function that takes a list of dictionaries as input, where each dictionary contains information about a torchbearer's run? The function should return the total count of times the flame was extinguished, the total count of near-misses where the torchbearer's clothes caught fire, and the total count of successful runs where the flame remained lit.The signature of the function is: def torch_relay_status(torches)", "test_cases": {"test1": "torch_relay_status([{'bearer': 'John', 'status': 'extinguished'}, {'bearer': 'Alice', 'status': 'successful'}, {'bearer': 'Bob', 'status': 'near_miss'}])", "test2": "torch_relay_status([{'bearer': 'Sam', 'status': 'extinguished'}, {'bearer': 'Eve', 'status': 'successful'}, {'bearer': 'Mike', 'status': 'successful'}])", "test3": "torch_relay_status([{'bearer': 'Tom', 'status': 'near_miss'}, {'bearer': 'Kate', 'status': 'extinguished'}, {'bearer': 'David', 'status': 'successful'}])", "test4": "torch_relay_status([{'bearer': 'Robert', 'status': 'successful'}, {'bearer': 'Emily', 'status': 'near_miss'}, {'bearer': 'James', 'status': 'extinguished'}])", "test5": "torch_relay_status([{'bearer': 'Jessica', 'status': 'extinguished'}, {'bearer': 'William', 'status': 'successful'}, {'bearer': 'Amy', 'status': 'near_miss'}])", "test6": "torch_relay_status([{'bearer': 'Patricia', 'status': 'successful'}, {'bearer': 'Michael', 'status': 'extinguished'}, {'bearer': 'Christopher', 'status': 'near_miss'}])", "test7": "torch_relay_status([{'bearer': 'Matthew', 'status': 'near_miss'}, {'bearer': 'Jennifer', 'status': 'extinguished'}, {'bearer': 'Joseph', 'status': 'successful'}])", "test8": "torch_relay_status([{'bearer': 'Sarah', 'status': 'successful'}, {'bearer': 'Andrew', 'status': 'near_miss'}, {'bearer': 'Victoria', 'status': 'extinguished'}])", "test9": "torch_relay_status([{'bearer': 'Joshua', 'status': 'extinguished'}, {'bearer': 'Margaret', 'status': 'successful'}, {'bearer': 'Brian', 'status': 'near_miss'}])", "test10": "torch_relay_status([{'bearer': 'Olivia', 'status': 'near_miss'}, {'bearer': 'Taylor', 'status': 'extinguished'}, {'bearer': 'Elizabeth', 'status': 'successful'}])"}, "hidden_information": "def torch_relay_status(torches):\n    total_extinguished = 0\n    total_near_misses = 0\n    total_successful = 0\n    for torch in torches:\n        if torch['status'] == 'extinguished':\n            total_extinguished += 1\n        elif torch['status'] == 'near_miss':\n            total_near_misses += 1\n        else:\n            total_successful += 1\n    return total_extinguished, total_near_misses, total_successful"}
{"ground_truth": "def analyze_game_reviews(reviews, ratings): \n    positive_count = sum(1 for review in reviews if 'positive' in review.lower())\n    negative_count = len(reviews) - positive_count\n    avg_rating = sum(ratings) / len(ratings)\n    return {'Sentiment': 'Positive' if positive_count > negative_count else 'Negative', 'Rating Distribution': {'Positive': positive_count, 'Negative': negative_count}, 'Average Rating': avg_rating}", "problem_description": "I want you to write a python function to analyze game reviews and return the overall sentiment of the reviews and the distribution of ratings. The function should take a list of reviews and a list of ratings as input and return a dictionary with the sentiment, rating distribution and average rating.The signature of the function is: def analyze_game_reviews(reviews, ratings)", "test_cases": {"test1": "analyze_game_reviews(['This game is very good.', 'I love this game.', 'This game is bad.'], [8, 9, 2])", "test2": "analyze_game_reviews(['This game is okay.', 'I hate this game.', 'This game is good.'], [5, 1, 7])", "test3": "analyze_game_reviews(['This game is awesome!', 'I am not impressed.', 'This game is amazing!'], [9, 3, 10])", "test4": "analyze_game_reviews(['This game is terrible.', 'I love this game.', 'This game is bad.'], [2, 9, 2])", "test5": "analyze_game_reviews(['This game is good.', 'I hate this game.', 'This game is okay.'], [7, 1, 5])", "test6": "analyze_game_reviews(['This game is amazing!', 'I am impressed.', 'This game is bad.'], [10, 8, 2])", "test7": "analyze_game_reviews(['This game is awesome!', 'I love this game.', 'This game is good.'], [9, 9, 7])", "test8": "analyze_game_reviews(['This game is terrible.', 'I hate this game.', 'This game is bad.'], [2, 1, 2])", "test9": "analyze_game_reviews(['This game is okay.', 'I am not impressed.', 'This game is good.'], [5, 3, 7])", "test10": "analyze_game_reviews(['This game is amazing!', 'I love this game.', 'This game is awesome!'], [10, 9, 9])"}, "hidden_information": "def analyze_game_reviews(reviews, ratings): \n    positive_count = sum(1 for review in reviews if 'positive' in review.lower())\n    negative_count = len(reviews) - positive_count\n    avg_rating = sum(ratings) / len(ratings)\n    return {'Sentiment': 'Positive' if positive_count > negative_count else 'Negative', 'Rating Distribution': {'Positive': positive_count, 'Negative': negative_count}, 'Average Rating': avg_rating}"}
{"ground_truth": "def classify_review(review_text):\n  positive_words = ['love', 'funny', 'great', 'must see']\n  negative_words = ['hate', 'disappointment', 'painfully unfunny', 'dreadfully dull']\n  review_text = review_text.lower()\n  if any(word in review_text for word in positive_words):\n    return 'Positive'\n  elif any(word in review_text for word in negative_words):\n    return 'Negative'\n  else:\n    return 'Mixed'", "problem_description": "I want you to write a python function that can take a movie review as input and output whether the review is positive, negative, or mixed. The function should be able to handle reviews that are not clearly positive or negative.The signature of the function is: def classify_review(review_text)", "test_cases": {"test1": "classify_review('I loved this movie, it was hilarious!')", "test2": "classify_review('This movie was a complete disappointment, painfully unfunny.')", "test3": "classify_review('I thought the movie was okay, but nothing special.')", "test4": "classify_review('Johnny English Reborn is a love it or hate it movie.')", "test5": "classify_review('The movie was great, but the jokes were a bit predictable.')", "test6": "classify_review('I found the original surprisingly funny, but the sequel is a massive disappointment.')", "test7": "classify_review('This is the funniest movie I have ever seen!')", "test8": "classify_review('The film tries to be funny, but its just an epic fail.')", "test9": "classify_review('The movie is a bit over-the-top, but still enjoyable.')", "test10": "classify_review('I think this movie is a must see for all Johnny English fans.')"}, "hidden_information": "def classify_review(review_text):\n  positive_words = ['love', 'funny', 'great', 'must see']\n  negative_words = ['hate', 'disappointment', 'painfully unfunny', 'dreadfully dull']\n  review_text = review_text.lower()\n  if any(word in review_text for word in positive_words):\n    return 'Positive'\n  elif any(word in review_text for word in negative_words):\n    return 'Negative'\n  else:\n    return 'Mixed'"}
{"ground_truth": "def calculate_artist_performance(releases, awards, years_experience): \n    base_score = 0\n    for release in releases:\n        base_score += 1 + (release['sales'] // 100000)\n    return base_score + (years_experience * 2) + len(awards)", "problem_description": "Hey, I want you to write a Python function that can help me compare the performance of different rappers based on their past records and awards. They can have multiple releases, and each release will have a sales figure in thousands. The function should take into account the number of years they've been in the industry and the number of awards they've received. Can you help me come up with a function that can give me a score for each artist?The signature of the function is: def calculate_artist_performance(releases, awards, years_experience)", "test_cases": {"test1": "calculate_artist_performance([{'sales': 100000}, {'sales': 200000}], ['Grammy'], 10)", "test2": "calculate_artist_performance([{'sales': 500000}, {'sales': 100000}], ['MTV'], 5)", "test3": "calculate_artist_performance([{'sales': 200000}], ['Grammy', 'MTV'], 8)", "test4": "calculate_artist_performance([{'sales': 800000}], ['Grammy', 'Billboard'], 12)", "test5": "calculate_artist_performance([{'sales': 400000}, {'sales': 300000}, {'sales': 200000}], ['MTV', 'Billboard', 'Grammy'], 15)", "test6": "calculate_artist_performance([], [], 5)", "test7": "calculate_artist_performance([{'sales': 700000}], ['Grammy', 'Billboard'], 8)", "test8": "calculate_artist_performance([{'sales': 900000}, {'sales': 100000}], ['MTV'], 10)", "test9": "calculate_artist_performance([{'sales': 600000}], ['Grammy'], 12)", "test10": "calculate_artist_performance([{'sales': 300000}, {'sales': 400000}, {'sales': 500000}], ['MTV', 'Billboard'], 20)"}, "hidden_information": "def calculate_artist_performance(releases, awards, years_experience): \n    base_score = 0\n    for release in releases:\n        base_score += 1 + (release['sales'] // 100000)\n    return base_score + (years_experience * 2) + len(awards)"}
{"ground_truth": "def get_recommended_outdoor_tvs(weather_conditions, screen_size, enhanced_brightness):\n    tvs = [\n        {'name': 'Samsung', 'water_resistance': True, 'screen_size': 42, 'enhanced_brightness': True},\n        {'name': 'Toshiba', 'water_resistance': False, 'screen_size': 55, 'enhanced_brightness': False},\n        {'name': 'Sharp', 'water_resistance': True, 'screen_size': 49, 'enhanced_brightness': True},\n        {'name': 'Sony', 'water_resistance': False, 'screen_size': 65, 'enhanced_brightness': True}\n    ]\n    recommended_tvs = [tv for tv in tvs if tv['water_resistance'] == (weather_conditions == 'rainy') and tv['screen_size'] >= screen_size and tv['enhanced_brightness'] == enhanced_brightness]\n    return recommended_tvs", "problem_description": "I want to find the best outdoor TV for my backyard entertainment area, but I'm not sure what features I need. Can you write a python function to help me filter outdoor TVs based on weather conditions, screen size, and enhanced brightness?The signature of the function is: def get_recommended_outdoor_tvs(weather_conditions, screen_size, enhanced_brightness)", "test_cases": {"test1": "get_recommended_outdoor_tvs('sunny', 50, True)", "test2": "get_recommended_outdoor_tvs('rainy', 45, True)", "test3": "get_recommended_outdoor_tvs('cloudy', 55, False)", "test4": "get_recommended_outdoor_tvs('sunny', 65, True)", "test5": "get_recommended_outdoor_tvs('rainy', 42, False)", "test6": "get_recommended_outdoor_tvs('cloudy', 49, True)", "test7": "get_recommended_outdoor_tvs('sunny', 50, False)", "test8": "get_recommended_outdoor_tvs('rainy', 55, True)", "test9": "get_recommended_outdoor_tvs('cloudy', 65, False)", "test10": "get_recommended_outdoor_tvs('sunny', 42, True)"}, "hidden_information": "def get_recommended_outdoor_tvs(weather_conditions, screen_size, enhanced_brightness):\n    tvs = [\n        {'name': 'Samsung', 'water_resistance': True, 'screen_size': 42, 'enhanced_brightness': True},\n        {'name': 'Toshiba', 'water_resistance': False, 'screen_size': 55, 'enhanced_brightness': False},\n        {'name': 'Sharp', 'water_resistance': True, 'screen_size': 49, 'enhanced_brightness': True},\n        {'name': 'Sony', 'water_resistance': False, 'screen_size': 65, 'enhanced_brightness': True}\n    ]\n    recommended_tvs = [tv for tv in tvs if tv['water_resistance'] == (weather_conditions == 'rainy') and tv['screen_size'] >= screen_size and tv['enhanced_brightness'] == enhanced_brightness]\n    return recommended_tvs"}
{"ground_truth": "def get_recommended_leveling_spec(level, role, group_comp):\n    if level < 50 and role == 'priest' and 'mage' in group_comp:\n        return 'Holy'\n    elif level >= 50 and role == 'priest' and 'mage' in group_comp:\n        return 'Shadow'\n    else:\n        return 'Not enough information to recommend a leveling spec'", "problem_description": "Hey AI, I'm playing a priest in a group with my friend who's a mage and I want to level up efficiently. Can you write a Python function that takes our current level and roles as input and recommends the best leveling spec for me?The signature of the function is: def get_recommended_leveling_spec(level, role, group_comp)", "test_cases": {"test1": "get_recommended_leveling_spec(15, 'priest', ['mage'])", "test2": "get_recommended_leveling_spec(50, 'priest', ['mage'])", "test3": "get_recommended_leveling_spec(60, 'priest', ['warrior'])", "test4": "get_recommended_leveling_spec(49, 'mage', ['priest'])", "test5": "get_recommended_leveling_spec(60, 'druid', ['priest', 'mage'])", "test6": "get_recommended_leveling_spec(40, 'warlock', ['mage'])", "test7": "get_recommended_leveling_spec(55, 'priest', ['druid', 'mage'])", "test8": "get_recommended_leveling_spec(30, 'mage', ['warrior'])", "test9": "get_recommended_leveling_spec(65, 'rogue', ['mage'])", "test10": "get_recommended_leveling_spec(70, 'priest', ['rogue', 'mage'])"}, "hidden_information": "def get_recommended_leveling_spec(level, role, group_comp):\n    if level < 50 and role == 'priest' and 'mage' in group_comp:\n        return 'Holy'\n    elif level >= 50 and role == 'priest' and 'mage' in group_comp:\n        return 'Shadow'\n    else:\n        return 'Not enough information to recommend a leveling spec'"}
{"ground_truth": "def most_strategic_hero(enemy_strength, enemy_armor, enemy_speed, enemy_damage):\n    alesha_combat_value = 10 * enemy_damage / (enemy_armor + 2) + 3 * enemy_speed / (enemy_strength + 2)\n    dobrynya_combat_value = 15 * enemy_damage / (enemy_armor + 2) + 1 * enemy_speed / (enemy_strength + 2)\n    illya_combat_value = 8 * enemy_damage / (enemy_armor + 2) + 6 * enemy_speed / (enemy_strength + 2)\n\n    combat_values = {'Alesha': alesha_combat_value, 'Dobrynya': dobrynya_combat_value, 'Ilya': illya_combat_value}\n    return max(combat_values, key=combat_values.get)", "problem_description": "Write a python function which considers the strength, armor, speed and damage of an enemy as input attributes and predicts the hero which has the most strategic combat effectiveness given the domain knowledge of Alesha being agile archer, Dobrynya being strong but slow with capability to pole-vault, and Ilya as strong but slow and with massive area of influence in combat, all characters with has differing combat statistics in varying degree against enemies with varying degree of damage and attributesThe signature of the function is: def most_strategic_hero(enemy_strength, enemy_armor, enemy_speed, enemy_damage)", "test_cases": {"test1": "most_strategic_hero(10, 5, 5, 15)", "test2": "most_strategic_hero(20, 10, 2, 12)", "test3": "most_strategic_hero(15, 8, 8, 18)", "test4": "most_strategic_hero(30, 12, 10, 20)", "test5": "most_strategic_hero(1, 2, 1, 16)", "test6": "most_strategic_hero(40, 20, 20, 10)", "test7": "most_strategic_hero(45, 8, 10, 8)", "test8": "most_strategic_hero(60, 15, 20, 7)", "test9": "most_strategic_hero(75, 4, 10, 12)", "test10": "most_strategic_hero(90, 30, 20, 9)"}, "hidden_information": "def most_strategic_hero(enemy_strength, enemy_armor, enemy_speed, enemy_damage):\n    alesha_combat_value = 10 * enemy_damage / (enemy_armor + 2) + 3 * enemy_speed / (enemy_strength + 2)\n    dobrynya_combat_value = 15 * enemy_damage / (enemy_armor + 2) + 1 * enemy_speed / (enemy_strength + 2)\n    illya_combat_value = 8 * enemy_damage / (enemy_armor + 2) + 6 * enemy_speed / (enemy_strength + 2)\n\n    combat_values = {'Alesha': alesha_combat_value, 'Dobrynya': dobrynya_combat_value, 'Ilya': illya_combat_value}\n    return max(combat_values, key=combat_values.get)"}
{"ground_truth": "def team_eligible_for_bowl(team_wins, team_conf, prev_bowl_appearances, conf_teams, min_wins_required, min_conf_teams_required):\n    if team_conf in conf_teams and team_wins >= min_wins_required and prev_bowl_appearances >= min_conf_teams_required:\n        return True\n    else:\n        return False", "problem_description": "I want you to write a python function that determines if a football team is eligible for a specific bowl game based on certain conditions. I think it has something to do with the team's win record, conference affiliation, and previous bowl appearances, but I'm not really sure. Can you figure it out?The signature of the function is: def team_eligible_for_bowl(team_wins, team_conf, prev_bowl_appearances, conf_teams, min_wins_required, min_conf_teams_required)", "test_cases": {"test1": "team_eligible_for_bowl(11, 'MAC', 4, ['MAC', 'SEC'], 10, 3)", "test2": "team_eligible_for_bowl(9, 'PAC12', 2, ['PAC12', 'ACC'], 10, 2)", "test3": "team_eligible_for_bowl(12, 'SEC', 5, ['SEC', 'BIG12'], 10, 4)", "test4": "team_eligible_for_bowl(8, 'BIG10', 1, ['BIG10', 'BIG12'], 10, 2)", "test5": "team_eligible_for_bowl(10, 'ACC', 3, ['ACC', 'PAC12'], 10, 3)", "test6": "team_eligible_for_bowl(11, 'MAC', 4, ['MAC', 'SEC'], 12, 3)", "test7": "team_eligible_for_bowl(9, 'PAC12', 2, ['PAC12', 'ACC'], 9, 2)", "test8": "team_eligible_for_bowl(12, 'SEC', 5, ['SEC', 'BIG12'], 11, 4)", "test9": "team_eligible_for_bowl(8, 'BIG10', 1, ['BIG10', 'BIG12'], 8, 2)", "test10": "team_eligible_for_bowl(10, 'ACC', 3, ['ACC', 'PAC12'], 11, 3)"}, "hidden_information": "def team_eligible_for_bowl(team_wins, team_conf, prev_bowl_appearances, conf_teams, min_wins_required, min_conf_teams_required):\n    if team_conf in conf_teams and team_wins >= min_wins_required and prev_bowl_appearances >= min_conf_teams_required:\n        return True\n    else:\n        return False"}
{"ground_truth": "def vbac_preparedness_score(midwife_support, husband_support, pregnancy_length, exercise_frequency, meditation_frequency, yoga_frequency, breathing_control):\n    score = 0\n    if midwife_support:\n        score += 2\n    if husband_support:\n        score += 2\n    if pregnancy_length > 36:\n        score += 1\n    if exercise_frequency > 2:\n        score += 1\n    if meditation_frequency > 2:\n        score += 1\n    if yoga_frequency > 1:\n        score += 1\n    if breathing_control:\n        score += 1\n    return score", "problem_description": "I want the agent to write a python function that takes in various inputs about a woman's pregnancy and returns a score that represents her preparedness for a vaginal birth after a cesarean (VBAC). The function should include the following parameters: midwife support, husband support, pregnancy length in weeks, frequency of exercise per week, frequency of meditation per week, frequency of yoga per week, and breathing control during labor.The signature of the function is: def vbac_preparedness_score(midwife_support, husband_support, pregnancy_length, exercise_frequency, meditation_frequency, yoga_frequency, breathing_control)", "test_cases": {"test1": "vbac_preparedness_score(True, True, 40, 3, 3, 2, True)", "test2": "vbac_preparedness_score(False, False, 32, 1, 1, 0, False)", "test3": "vbac_preparedness_score(True, True, 38, 2, 2, 1, True)", "test4": "vbac_preparedness_score(False, True, 35, 3, 3, 2, False)", "test5": "vbac_preparedness_score(True, False, 40, 1, 1, 0, True)", "test6": "vbac_preparedness_score(False, False, 32, 2, 2, 1, False)", "test7": "vbac_preparedness_score(True, True, 38, 3, 3, 2, True)", "test8": "vbac_preparedness_score(False, True, 35, 2, 2, 1, False)", "test9": "vbac_preparedness_score(True, False, 40, 2, 2, 1, True)", "test10": "vbac_preparedness_score(False, False, 32, 3, 3, 2, False)"}, "hidden_information": "def vbac_preparedness_score(midwife_support, husband_support, pregnancy_length, exercise_frequency, meditation_frequency, yoga_frequency, breathing_control):\n    score = 0\n    if midwife_support:\n        score += 2\n    if husband_support:\n        score += 2\n    if pregnancy_length > 36:\n        score += 1\n    if exercise_frequency > 2:\n        score += 1\n    if meditation_frequency > 2:\n        score += 1\n    if yoga_frequency > 1:\n        score += 1\n    if breathing_control:\n        score += 1\n    return score"}
{"ground_truth": "def calculate_emissions_reduction(initial_emissions, reduction_rate, years):\n    return initial_emissions * (1 - reduction_rate) ** years", "problem_description": "I want the agent to write a Python function that calculates the emissions reduction over a certain number of years, given the initial emissions and the reduction rate. The function should take three parameters: initial emissions, reduction rate, and the number of years.The signature of the function is: def calculate_emissions_reduction(initial_emissions, reduction_rate, years)", "test_cases": {"test1": "calculate_emissions_reduction(1000, 0.05, 5)", "test2": "calculate_emissions_reduction(500, 0.1, 3)", "test3": "calculate_emissions_reduction(2000, 0.02, 10)", "test4": "calculate_emissions_reduction(1500, 0.03, 7)", "test5": "calculate_emissions_reduction(2500, 0.04, 9)", "test6": "calculate_emissions_reduction(1200, 0.06, 8)", "test7": "calculate_emissions_reduction(1800, 0.01, 12)", "test8": "calculate_emissions_reduction(2200, 0.07, 6)", "test9": "calculate_emissions_reduction(2800, 0.02, 11)", "test10": "calculate_emissions_reduction(3500, 0.03, 15)"}, "hidden_information": "def calculate_emissions_reduction(initial_emissions, reduction_rate, years):\n    return initial_emissions * (1 - reduction_rate) ** years"}
{"ground_truth": "def calculate_t_cell_production(sonar_frequency, cavitation_effect, immune_system_cells):\n    # assuming a simple linear relationship between sonar frequency and T cell production\n    t_cell_production_rate = (sonar_frequency * cavitation_effect) / (immune_system_cells ** 2)\n    return t_cell_production_rate", "problem_description": "Hey agent, I want you to write a python function that helps Dr. Cole calculate T cell production rate based on his theory about dolphins' sonar and cavitation effect. Can you do it?The signature of the function is: def calculate_t_cell_production(sonar_frequency, cavitation_effect, immune_system_cells)", "test_cases": {"test1": "calculate_t_cell_production(1000, 0.5, 10000)", "test2": "calculate_t_cell_production(500, 0.2, 5000)", "test3": "calculate_t_cell_production(2000, 0.8, 20000)", "test4": "calculate_t_cell_production(1500, 0.4, 15000)", "test5": "calculate_t_cell_production(2500, 0.6, 25000)", "test6": "calculate_t_cell_production(1000, 0.5, 5000)", "test7": "calculate_t_cell_production(1200, 0.3, 8000)", "test8": "calculate_t_cell_production(1800, 0.7, 18000)", "test9": "calculate_t_cell_production(2200, 0.9, 22000)", "test10": "calculate_t_cell_production(2800, 0.1, 28000)"}, "hidden_information": "def calculate_t_cell_production(sonar_frequency, cavitation_effect, immune_system_cells):\n    # assuming a simple linear relationship between sonar frequency and T cell production\n    t_cell_production_rate = (sonar_frequency * cavitation_effect) / (immune_system_cells ** 2)\n    return t_cell_production_rate"}
{"ground_truth": "def calculate_sound_wave_length(frequency, speed_of_sound=343): \n  return speed_of_sound / frequency", "problem_description": "I want you to write a Python function that calculates something related to hearing loss in children. The function should take one or more input parameters and return a value. The function should be useful for a parent or a medical professional trying to understand or explain hearing loss in children.The signature of the function is: def calculate_sound_wave_length(frequency, speed_of_sound=343)", "test_cases": {"test1": "calculate_sound_wave_length(200)", "test2": "calculate_sound_wave_length(frequency=300)", "test3": "calculate_sound_wave_length(250, speed_of_sound=350)", "test4": "calculate_sound_wave_length(400)", "test5": "calculate_sound_wave_length(frequency=450, speed_of_sound=360)", "test6": "calculate_sound_wave_length(550)", "test7": "calculate_sound_wave_length(250)", "test8": "calculate_sound_wave_length(frequency=350, speed_of_sound=340)", "test9": "calculate_sound_wave_length(650)", "test10": "calculate_sound_wave_length(frequency=750, speed_of_sound=330)"}, "hidden_information": "def calculate_sound_wave_length(frequency, speed_of_sound=343): \n  return speed_of_sound / frequency"}
{"ground_truth": "def calculate_optimal_feeding_duration(baby_age_in_weeks, feeding_frequency_per_day):\n    if baby_age_in_weeks < 4:\n        return feeding_frequency_per_day * 20\n    elif baby_age_in_weeks < 8:\n        return feeding_frequency_per_day * 25\n    else:\n        return feeding_frequency_per_day * 30", "problem_description": "Hi, I need a python function to calculate the optimal feeding duration for my baby. She's 2 weeks old now and I'm having trouble figuring out how often and how long I should feed her. Can you help me with that?The signature of the function is: def calculate_optimal_feeding_duration(baby_age_in_weeks, feeding_frequency_per_day)", "test_cases": {"test1": "calculate_optimal_feeding_duration(2, 8)", "test2": "calculate_optimal_feeding_duration(6, 6)", "test3": "calculate_optimal_feeding_duration(10, 4)", "test4": "calculate_optimal_feeding_duration(1, 12)", "test5": "calculate_optimal_feeding_duration(8, 5)", "test6": "calculate_optimal_feeding_duration(4, 9)", "test7": "calculate_optimal_feeding_duration(12, 3)", "test8": "calculate_optimal_feeding_duration(3, 7)", "test9": "calculate_optimal_feeding_duration(9, 11)", "test10": "calculate_optimal_feeding_duration(5, 10)"}, "hidden_information": "def calculate_optimal_feeding_duration(baby_age_in_weeks, feeding_frequency_per_day):\n    if baby_age_in_weeks < 4:\n        return feeding_frequency_per_day * 20\n    elif baby_age_in_weeks < 8:\n        return feeding_frequency_per_day * 25\n    else:\n        return feeding_frequency_per_day * 30"}
{"ground_truth": "def calculate_oxygen_supply(breathing_depth, breathing_frequency, oxygen_consumption_rate):\n    return breathing_depth * breathing_frequency * oxygen_consumption_rate", "problem_description": "I want you to write a Python function that can calculate the oxygen supply in the body based on deep breathing exercises. Can you come up with a function that takes into account the depth and frequency of breathing, as well as the rate at which the body consumes oxygen?The signature of the function is: def calculate_oxygen_supply(breathing_depth, breathing_frequency, oxygen_consumption_rate)", "test_cases": {"test1": "calculate_oxygen_supply(2.5, 12, 0.05)", "test2": "calculate_oxygen_supply(3.0, 10, 0.1)", "test3": "calculate_oxygen_supply(1.8, 15, 0.07)", "test4": "calculate_oxygen_supply(2.2, 12, 0.12)", "test5": "calculate_oxygen_supply(3.5, 9, 0.15)", "test6": "calculate_oxygen_supply(2.0, 14, 0.11)", "test7": "calculate_oxygen_supply(1.9, 16, 0.09)", "test8": "calculate_oxygen_supply(3.1, 11, 0.13)", "test9": "calculate_oxygen_supply(2.8, 13, 0.14)", "test10": "calculate_oxygen_supply(1.7, 17, 0.08)"}, "hidden_information": "def calculate_oxygen_supply(breathing_depth, breathing_frequency, oxygen_consumption_rate):\n    return breathing_depth * breathing_frequency * oxygen_consumption_rate"}
{"ground_truth": "def calculate_laborer_efficiency(tasks_completed, tasks_assigned, time_worked):\n    if tasks_assigned == 0:\n        return 0\n    efficiency = (tasks_completed / tasks_assigned) * (60 / time_worked)\n    return efficiency", "problem_description": "Can you write a python function to calculate the efficiency of laborers in our manufacturing department?The signature of the function is: def calculate_laborer_efficiency(tasks_completed, tasks_assigned, time_worked)", "test_cases": {"test1": "calculate_laborer_efficiency(10, 10, 60)", "test2": "calculate_laborer_efficiency(8, 10, 60)", "test3": "calculate_laborer_efficiency(10, 8, 60)", "test4": "calculate_laborer_efficiency(0, 10, 60)", "test5": "calculate_laborer_efficiency(10, 0, 60)", "test6": "calculate_laborer_efficiency(10, 10, 30)", "test7": "calculate_laborer_efficiency(10, 10, 90)", "test8": "calculate_laborer_efficiency(5, 8, 60)", "test9": "calculate_laborer_efficiency(8, 8, 60)", "test10": "calculate_laborer_efficiency(9, 10, 60)"}, "hidden_information": "def calculate_laborer_efficiency(tasks_completed, tasks_assigned, time_worked):\n    if tasks_assigned == 0:\n        return 0\n    efficiency = (tasks_completed / tasks_assigned) * (60 / time_worked)\n    return efficiency"}
{"ground_truth": "def assess_border_situation(violence_level, cartel_presence, civilian_harmRisk, us_troop_deployment, posse_comitatus_act=False):\n    if violence_level > 5 and cartel_presence and civilian_harmRisk > 3:\n        return True\n    elif (not posse_comitatus_act) and us_troop_deployment:\n        return True\n    else:\n        return False", "problem_description": "I want you to write a Python function that determines whether a given situation along the Mexican border warrants calling in the military. The function should take into account various factors such as violence levels, cartel presence, and civilian harm risk, as well as the current deployment of US troops and the potential for violating the Posse Comitatus Act. Can you please help me create this function?The signature of the function is: def assess_border_situation(violence_level, cartel_presence, civilian_harmRisk, us_troop_deployment, posse_comitatus_act=False)", "test_cases": {"test1": "assess_border_situation(6, True, 4, True, False)", "test2": "assess_border_situation(3, False, 2, False, False)", "test3": "assess_border_situation(7, True, 5, False, False)", "test4": "assess_border_situation(4, False, 1, False, True)", "test5": "assess_border_situation(8, True, 6, True, True)", "test6": "assess_border_situation(2, False, 3, False, False)", "test7": "assess_border_situation(5, True, 5, False, False)", "test8": "assess_border_situation(9, True, 7, True, False)", "test9": "assess_border_situation(1, False, 2, False, True)", "test10": "assess_border_situation(6, True, 4, True, True)"}, "hidden_information": "def assess_border_situation(violence_level, cartel_presence, civilian_harmRisk, us_troop_deployment, posse_comitatus_act=False):\n    if violence_level > 5 and cartel_presence and civilian_harmRisk > 3:\n        return True\n    elif (not posse_comitatus_act) and us_troop_deployment:\n        return True\n    else:\n        return False"}
{"ground_truth": "def get_player_performance(player_monthly_stats, player_names, batting_average_threshold=0.3, home_runs_threshold=5, hits_threshold=50):\n    player_performance = []\n    for i, stats in enumerate(player_monthly_stats):\n        if stats['batting_average'] > batting_average_threshold and stats['home_runs'] > home_runs_threshold and stats['hits'] > hits_threshold:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Excellent'})\n        elif stats['batting_average'] > 0.25 and stats['home_runs'] > 3 and stats['hits'] > 30:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Good'})\n        elif stats['batting_average'] > 0.2 and stats['home_runs'] > 2 and stats['hits'] > 20:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Fair'})\n        else:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Needs Improvement'})\n    return player_performance", "problem_description": "Lauren Lastrapes wants the agent to write a python function that calculates softball team players' performance based on their monthly stats. The function evaluates individual player performance and assigns a label of 'Excellent', 'Good', 'Fair', or 'Needs Improvement' for each player based on predefined thresholds for batting average, home runs, and hits.The signature of the function is: def get_player_performance(player_monthly_stats, player_names, batting_average_threshold=0.3, home_runs_threshold=5, hits_threshold=50)", "test_cases": {"test1": "get_player_performance([{'batting_average': 0.31, 'home_runs': 6, 'hits': 55}, {'batting_average': 0.21, 'home_runs': 2, 'hits': 25}], ['Lauren Lastrapes', 'Player2'])", "test2": "get_player_performance([{'batting_average': 0.35, 'home_runs': 8, 'hits': 60}, {'batting_average': 0.15, 'home_runs': 1, 'hits': 15}], ['Player3', 'Player4'])", "test3": "get_player_performance([{'batting_average': 0.28, 'home_runs': 4, 'hits': 40}, {'batting_average': 0.22, 'home_runs': 3, 'hits': 30}], ['Player5', 'Player6'])", "test4": "get_player_performance([{'batting_average': 0.32, 'home_runs': 5, 'hits': 50}, {'batting_average': 0.12, 'home_runs': 0, 'hits': 10}], ['Player7', 'Player8'])", "test5": "get_player_performance([{'batting_average': 0.29, 'home_runs': 7, 'hits': 58}, {'batting_average': 0.20, 'home_runs': 2, 'hits': 20}], ['Player9', 'Player10'])", "test6": "get_player_performance([{'batting_average': 0.34, 'home_runs': 9, 'hits': 62}, {'batting_average': 0.14, 'home_runs': 1, 'hits': 12}], ['Player11', 'Player12'])", "test7": "get_player_performance([{'batting_average': 0.27, 'home_runs': 3, 'hits': 38}, {'batting_average': 0.23, 'home_runs': 4, 'hits': 35}], ['Player13', 'Player14'])", "test8": "get_player_performance([{'batting_average': 0.33, 'home_runs': 6, 'hits': 55}, {'batting_average': 0.13, 'home_runs': 0, 'hits': 9}], ['Player15', 'Player16'])", "test9": "get_player_performance([{'batting_average': 0.30, 'home_runs': 8, 'hits': 60}, {'batting_average': 0.21, 'home_runs': 3, 'hits': 30}], ['Player17', 'Player18'])", "test10": "get_player_performance([{'batting_average': 0.26, 'home_runs': 5, 'hits': 50}, {'batting_average': 0.11, 'home_runs': 0, 'hits': 8}], ['Player19', 'Player20'])"}, "hidden_information": "def get_player_performance(player_monthly_stats, player_names, batting_average_threshold=0.3, home_runs_threshold=5, hits_threshold=50):\n    player_performance = []\n    for i, stats in enumerate(player_monthly_stats):\n        if stats['batting_average'] > batting_average_threshold and stats['home_runs'] > home_runs_threshold and stats['hits'] > hits_threshold:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Excellent'})\n        elif stats['batting_average'] > 0.25 and stats['home_runs'] > 3 and stats['hits'] > 30:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Good'})\n        elif stats['batting_average'] > 0.2 and stats['home_runs'] > 2 and stats['hits'] > 20:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Fair'})\n        else:\n            player_performance.append({'player': player_names[i], 'stats': stats, 'performance': 'Needs Improvement'})\n    return player_performance"}
{"ground_truth": "def is_craft_brewery(annual_production, ownership, flagship_beer_type, use_adjuncts):\n    if annual_production > 6e6:\n        return False\n    if ownership > 25:\n        return False\n    if flagship_beer_type == 'all malt' or (flagship_beer_type != 'all malt' and use_adjuncts):\n        return True\n    return False", "problem_description": "I need a python function that determines if a brewery is craft or not. The function should consider the brewery's annual production, percentage of ownership by a non-craft brewery, and whether the brewery's flagship beer is all malt or uses adjuncts to enhance flavor. Can you write the function for me?The signature of the function is: def is_craft_brewery(annual_production, ownership, flagship_beer_type, use_adjuncts)", "test_cases": {"test1": "is_craft_brewery(5e6, 20, 'all malt', False)", "test2": "is_craft_brewery(6.1e6, 20, 'all malt', False)", "test3": "is_craft_brewery(5e6, 26, 'all malt', False)", "test4": "is_craft_brewery(5e6, 20, 'not all malt', True)", "test5": "is_craft_brewery(5e6, 20, 'not all malt', False)", "test6": "is_craft_brewery(5e6, 20, 'all malt', True)", "test7": "is_craft_brewery(5e6, 0, 'all malt', False)", "test8": "is_craft_brewery(6e6, 20, 'all malt', True)", "test9": "is_craft_brewery(5e6, 24.99, 'not all malt', False)", "test10": "is_craft_brewery(6e6, 0, 'not all malt', True)"}, "hidden_information": "def is_craft_brewery(annual_production, ownership, flagship_beer_type, use_adjuncts):\n    if annual_production > 6e6:\n        return False\n    if ownership > 25:\n        return False\n    if flagship_beer_type == 'all malt' or (flagship_beer_type != 'all malt' and use_adjuncts):\n        return True\n    return False"}
{"ground_truth": "def calculate_artist_performance(album_sales, concert_tickets_sold, radio_plays): return album_sales * 0.1 + concert_tickets_sold * 0.3 + radio_plays * 0.6", "problem_description": "I want you to write a python function that helps me to determine how successful an artist is based on some criteria. All I know is that the artist's performance metric is determined by their album sales, concert ticket sales, and radio plays. Write me a python function based on this high-level description that I can use to get an artist's performance. Can you please take a look and collaborate with me to fulfill this task?The signature of the function is: def calculate_artist_performance(album_sales, concert_tickets_sold, radio_plays)", "test_cases": {"test1": "calculate_artist_performance(1000, 500, 100)", "test2": "calculate_artist_performance(500, 2000, 300)", "test3": "calculate_artist_performance(0, 1000, 200)", "test4": "calculate_artist_performance(100, 0, 500)", "test5": "calculate_artist_performance(500, 1000, 0)", "test6": "calculate_artist_performance(2000, 3000, 4000)", "test7": "calculate_artist_performance(1, 2, 3)", "test8": "calculate_artist_performance(0, 0, 10)", "test9": "calculate_artist_performance(100, 200, 100)", "test10": "calculate_artist_performance(10, 10, 0)"}, "hidden_information": "def calculate_artist_performance(album_sales, concert_tickets_sold, radio_plays): return album_sales * 0.1 + concert_tickets_sold * 0.3 + radio_plays * 0.6"}
{"ground_truth": "def freeze_protection(sugar_level):\n    # Calculate the freezing point of the wood frog based on the sugar level\n    freezing_point = -0.5 * sugar_level\n    if freezing_point <= -50:\n        return True\n    else:\n        return False", "problem_description": "Write a python function to simulate how wood frogs can tolerate extremely high blood sugar levels during winter hibernation and how this can be applied to human medicine, specifically for managing high blood sugar levels in people with diabetes.The signature of the function is: def freeze_protection(sugar_level)", "test_cases": {"test1": "freeze_protection(100)", "test2": "freeze_protection(50)", "test3": "freeze_protection(20)", "test4": "freeze_protection(10)", "test5": "freeze_protection(5)", "test6": "freeze_protection(0)", "test7": "freeze_protection(-10)", "test8": "freeze_protection(-20)", "test9": "freeze_protection(-50)", "test10": "freeze_protection(-100)"}, "hidden_information": "def freeze_protection(sugar_level):\n    # Calculate the freezing point of the wood frog based on the sugar level\n    freezing_point = -0.5 * sugar_level\n    if freezing_point <= -50:\n        return True\n    else:\n        return False"}
{"ground_truth": "def determine_marital_status(partner1_gender, partner2_gender, year, ceremony_choice=None, religious_denomination=None): \n    if year >= 2014 and (partner1_gender != partner2_gender or (ceremony_choice == 'civil' and religious_denomination in ['Church of England', 'Church of Wales'])): \n        return 'Married'\n    elif year >= 2005 and partner1_gender == partner2_gender and ceremony_choice == 'civil': \n        return 'Civil Partnership'\n    else: \n        return 'Not Applicable'", "problem_description": "I want you to write a python function that determines the marital status of a couple based on their genders, the year they applied for marriage or civil partnership, and their preferences for a civil or religious ceremony. Please take into account the legalization of same-sex marriage in England and Wales in 2014 and the existing civil partnership laws since 2005.The signature of the function is: def determine_marital_status(partner1_gender, partner2_gender, year, ceremony_choice=None, religious_denomination=None)", "test_cases": {"test1": "determine_marital_status('male', 'male', 2013, 'civil', 'Church of England')", "test2": "determine_marital_status('female', 'female', 2015, 'religious', 'Church of England')", "test3": "determine_marital_status('male', 'female', 2010, 'civil')", "test4": "determine_marital_status('male', 'male', 2010, 'civil')", "test5": "determine_marital_status('female', 'female', 2008, 'civil', 'Roman Catholic')", "test6": "determine_marital_status('male', 'male', 2014, 'civil', 'Humanist')", "test7": "determine_marital_status('female', 'female', 2010, 'religious', 'Unitarian')", "test8": "determine_marital_status('male', 'female', 2014, 'civil', 'None')", "test9": "determine_marital_status('male', 'male', 2016, 'civil', 'None')", "test10": "determine_marital_status('female', 'female', 2012, 'civil', 'None')"}, "hidden_information": "def determine_marital_status(partner1_gender, partner2_gender, year, ceremony_choice=None, religious_denomination=None): \n    if year >= 2014 and (partner1_gender != partner2_gender or (ceremony_choice == 'civil' and religious_denomination in ['Church of England', 'Church of Wales'])): \n        return 'Married'\n    elif year >= 2005 and partner1_gender == partner2_gender and ceremony_choice == 'civil': \n        return 'Civil Partnership'\n    else: \n        return 'Not Applicable'"}
{"ground_truth": "def calculate_unwanted_pets(intact_animals, average_litter_size, birth_frequency, spaying_rate):\n    births_per_year = intact_animals * average_litter_size * birth_frequency\n    unwanted_pets = births_per_year * (1 - spaying_rate)\n    return unwanted_pets", "problem_description": "I'm trying to estimate the number of unwanted pets in my city, and I need a Python function to do so. The function should consider the number of intact animals and maybe some other factors. Can you help me write it?The signature of the function is: def calculate_unwanted_pets(intact_animals, average_litter_size, birth_frequency, spaying_rate)", "test_cases": {"test1": "calculate_unwanted_pets(1000, 5, 2, 0.5)", "test2": "calculate_unwanted_pets(500, 3, 3, 0.7)", "test3": "calculate_unwanted_pets(2000, 4, 1, 0.3)", "test4": "calculate_unwanted_pets(1500, 6, 2, 0.8)", "test5": "calculate_unwanted_pets(2500, 5, 1, 0.4)", "test6": "calculate_unwanted_pets(1000, 4, 3, 0.9)", "test7": "calculate_unwanted_pets(3000, 3, 2, 0.1)", "test8": "calculate_unwanted_pets(4000, 6, 1, 0.6)", "test9": "calculate_unwanted_pets(2000, 5, 2, 0.2)", "test10": "calculate_unwanted_pets(3500, 4, 3, 0.75)"}, "hidden_information": "def calculate_unwanted_pets(intact_animals, average_litter_size, birth_frequency, spaying_rate):\n    births_per_year = intact_animals * average_litter_size * birth_frequency\n    unwanted_pets = births_per_year * (1 - spaying_rate)\n    return unwanted_pets"}
{"ground_truth": "def calculate_doughnut_production(doughnuts_per_second, seconds_per_minute, minutes_per_hour, store_count, hours_per_day):\n  return (doughnuts_per_second * seconds_per_minute * minutes_per_hour * hours_per_day) * store_count", "problem_description": "I want you to write a Python function that calculates the total number of doughnuts Krispy Kreme shops can produce in a day, but I don't know the exact parameters. Can you help me create this function?The signature of the function is: def calculate_doughnut_production(doughnuts_per_second, seconds_per_minute, minutes_per_hour, store_count, hours_per_day)", "test_cases": {"test1": "calculate_doughnut_production(1, 60, 60, 10000, 24)", "test2": "calculate_doughnut_production(0.5, 60, 60, 5000, 12)", "test3": "calculate_doughnut_production(2, 30, 60, 2000, 8)", "test4": "calculate_doughnut_production(0.25, 10, 60, 1000, 4)", "test5": "calculate_doughnut_production(3, 60, 60, 15000, 24)", "test6": "calculate_doughnut_production(1, 30, 60, 8000, 12)", "test7": "calculate_doughnut_production(0.75, 10, 60, 2000, 8)", "test8": "calculate_doughnut_production(2, 60, 60, 12000, 24)", "test9": "calculate_doughnut_production(0.5, 30, 60, 5000, 12)", "test10": "calculate_doughnut_production(1, 10, 60, 8000, 4)"}, "hidden_information": "def calculate_doughnut_production(doughnuts_per_second, seconds_per_minute, minutes_per_hour, store_count, hours_per_day):\n  return (doughnuts_per_second * seconds_per_minute * minutes_per_hour * hours_per_day) * store_count"}
{"ground_truth": "def calculate_table_size(extents, extent_sizes):\n    return sum([size * count for size, count in zip(extent_sizes, extents)])", "problem_description": "I'm trying to optimize the performance of my database and I need a Python function to calculate the total size of tables based on their extent sizes and counts. Can you help me write a function that takes in two lists, one for extent sizes and one for extent counts, and returns the total size?The signature of the function is: def calculate_table_size(extents, extent_sizes)", "test_cases": {"test1": "calculate_table_size([100, 200, 300], [10, 20, 30])", "test2": "calculate_table_size([500, 1000], [5, 10])", "test3": "calculate_table_size([1024, 2048], [1, 2])", "test4": "calculate_table_size([1, 2, 3], [100, 200, 300])", "test5": "calculate_table_size([1000000], [1])", "test6": "calculate_table_size([50], [1000])", "test7": "calculate_table_size([1, 1, 1], [100, 200, 300])", "test8": "calculate_table_size([1024, 2048, 4096], [1, 2, 4])", "test9": "calculate_table_size([10, 20, 30, 40], [1, 2, 3, 4])", "test10": "calculate_table_size([100, 200], [0, 0])"}, "hidden_information": "def calculate_table_size(extents, extent_sizes):\n    return sum([size * count for size, count in zip(extent_sizes, extents)])"}
{"ground_truth": "def filter_embedded_systems(os_list, embedded_os=['Linux', 'Tizen', 'FreeRTOS']):\n    return [os for os in os_list if os in embedded_os]", "problem_description": "I want the agent to write a Python function that filters out embedded operating systems from a list of operating systems, I have a list of operating systems, but I need to get a list of all embedded systems.The signature of the function is: def filter_embedded_systems(os_list, embedded_os=['Linux', 'Tizen', 'FreeRTOS'])", "test_cases": {"test1": "filter_embedded_systems(['Windows', 'Linux', 'macOS', 'FreeRTOS'])", "test2": "filter_embedded_systems(['Tizen', 'Android', 'iOS', 'Windows'])", "test3": "filter_embedded_systems(['Ubuntu', 'Debian', 'Fedora', 'CentOS'])", "test4": "filter_embedded_systems(['Chrome OS', 'Symbian', 'Blackberry OS', 'Windows Phone'])", "test5": "filter_embedded_systems(['QNX', 'VxWorks', 'Nucleus', 'FreeRTOS'])", "test6": "filter_embedded_systems(['Windows', 'macOS', 'Linux', 'Android'])", "test7": "filter_embedded_systems(['iOS', 'watchOS', 'tvOS', ' macOS'])", "test8": "filter_embedded_systems(['Ubuntu Core', 'Ubuntu Server', 'Ubuntu Desktop', 'Ubuntu Kylin'])", "test9": "filter_embedded_systems(['SUSE Linux', 'openSUSE', 'Fedora', 'RHEL'])", "test10": "filter_embedded_systems(['Microsoft Azure Sphere', 'FreeRTOS', 'Zephyr', 'RIOT'])"}, "hidden_information": "def filter_embedded_systems(os_list, embedded_os=['Linux', 'Tizen', 'FreeRTOS']):\n    return [os for os in os_list if os in embedded_os]"}
{"ground_truth": "def calculate_total_cost(num_vehicles, resistance_levels, oxidation_levels, wire_cost):\n    total_cost = 0\n    for i in range(num_vehicles):\n        if resistance_levels[i] > 0.5 and oxidation_levels[i] > 0.2:\n            total_cost += wire_cost * 2\n        else:\n            total_cost += wire_cost\n    return total_cost", "problem_description": "I want a python function that can help me determine the total cost of replacing spark plug wires for a set of vehicles, considering factors that affect the wire's performance. The function should take into account the number of vehicles and some performance indicators.The signature of the function is: def calculate_total_cost(num_vehicles, resistance_levels, oxidation_levels, wire_cost)", "test_cases": {"test1": "calculate_total_cost(2, [0.6, 0.2], [0.1, 0.5], 10.0)", "test2": "calculate_total_cost(5, [0.4, 0.7, 0.1, 0.9, 0.3], [0.2, 0.1, 0.7, 0.5, 0.1], 8.0)", "test3": "calculate_total_cost(1, [0.8], [0.6], 12.0)", "test4": "calculate_total_cost(3, [0.2, 0.5, 0.9], [0.1, 0.2, 0.8], 9.0)", "test5": "calculate_total_cost(1, [0.1], [0.1], 11.0)", "test6": "calculate_total_cost(4, [0.7, 0.3, 0.6, 0.8], [0.2, 0.8, 0.1, 0.6], 10.0)", "test7": "calculate_total_cost(2, [0.9, 0.1], [0.5, 0.2], 8.0)", "test8": "calculate_total_cost(3, [0.5, 0.7, 0.2], [0.1, 0.3, 0.9], 9.5)", "test9": "calculate_total_cost(1, [0.6], [0.8], 13.0)", "test10": "calculate_total_cost(5, [0.1, 0.3, 0.5, 0.7, 0.9], [0.2, 0.4, 0.6, 0.8, 0.1], 8.5)"}, "hidden_information": "def calculate_total_cost(num_vehicles, resistance_levels, oxidation_levels, wire_cost):\n    total_cost = 0\n    for i in range(num_vehicles):\n        if resistance_levels[i] > 0.5 and oxidation_levels[i] > 0.2:\n            total_cost += wire_cost * 2\n        else:\n            total_cost += wire_cost\n    return total_cost"}
{"ground_truth": "def calculate_storage_capacity(num_drives, raid_config, drive_capacity):\n    if raid_config == 'RAID 1':\n        return drive_capacity\n    elif raid_config == 'RAID 5':\n        return (num_drives - 1) * drive_capacity\n    elif raid_config == 'RAID 10':\n        return (num_drives / 2) * drive_capacity\n    else:\n        return 'Invalid RAID configuration'\n", "problem_description": "I want you to write a Python function to calculate the storage capacity of a custom RAID setup. The RAID can be configured in different ways and have a variable number of drives. I want to be able to input the number of drives, the RAID configuration, and the capacity of each drive, and get the total storage capacity as output. Can you write me a function that does this?The signature of the function is: def calculate_storage_capacity(num_drives, raid_config, drive_capacity)", "test_cases": {"test1": "calculate_storage_capacity(4, 'RAID 1', 1000)", "test2": "calculate_storage_capacity(6, 'RAID 5', 500)", "test3": "calculate_storage_capacity(8, 'RAID 10', 2000)", "test4": "calculate_storage_capacity(3, 'RAID 5', 750)", "test5": "calculate_storage_capacity(5, 'RAID 1', 1200)", "test6": "calculate_storage_capacity(10, 'RAID 10', 1500)", "test7": "calculate_storage_capacity(2, 'RAID 5', 3000)", "test8": "calculate_storage_capacity(7, 'RAID 1', 2200)", "test9": "calculate_storage_capacity(9, 'RAID 5', 1800)", "test10": "calculate_storage_capacity(6, 'RAID 10', 2500)"}, "hidden_information": "def calculate_storage_capacity(num_drives, raid_config, drive_capacity):\n    if raid_config == 'RAID 1':\n        return drive_capacity\n    elif raid_config == 'RAID 5':\n        return (num_drives - 1) * drive_capacity\n    elif raid_config == 'RAID 10':\n        return (num_drives / 2) * drive_capacity\n    else:\n        return 'Invalid RAID configuration'\n"}
{"ground_truth": "def generate_dynamic_dict(max_value):\n    dynamic_dict = {}\n    for i in range(1, max_value + 1):\n        dynamic_dict[f'uid_{i}'] = i\n    return dynamic_dict", "problem_description": "I want a python function that can create a dictionary with dynamic keys that can be constructed on the fly with a variable containing a counter, similar to the Perl example I found online where it iterates and assigns a counter to a uid. Can you write such a function?The signature of the function is: def generate_dynamic_dict(max_value)", "test_cases": {"test1": "generate_dynamic_dict(5)", "test2": "generate_dynamic_dict(10)", "test3": "generate_dynamic_dict(1)", "test4": "generate_dynamic_dict(0)", "test5": "generate_dynamic_dict(20)", "test6": "generate_dynamic_dict(15)", "test7": "generate_dynamic_dict(3)", "test8": "generate_dynamic_dict(8)", "test9": "generate_dynamic_dict(12)", "test10": "generate_dynamic_dict(25)"}, "hidden_information": "def generate_dynamic_dict(max_value):\n    dynamic_dict = {}\n    for i in range(1, max_value + 1):\n        dynamic_dict[f'uid_{i}'] = i\n    return dynamic_dict"}
{"ground_truth": "def binary_converter(val, mode):\n    if mode == 'dec2bin':\n        return bin(int(val))[2:]\n    elif mode == 'bin2dec':\n        return str(int(val, 2))\n    else:\n        return 'Invalid mode'", "problem_description": "Write a python function that can convert numbers between binary and decimal. The function should take an input number and a mode, either 'dec2bin' for decimal to binary or 'bin2dec' for binary to decimal. I'm not sure about the implementation details, so you'll need to ask me some questions to clarify.The signature of the function is: def binary_converter(val, mode)", "test_cases": {"test1": "binary_converter(10, 'dec2bin')", "test2": "binary_converter('1010', 'bin2dec')", "test3": "binary_converter(16, 'dec2bin')", "test4": "binary_converter('10000', 'bin2dec')", "test5": "binary_converter(255, 'dec2bin')", "test6": "binary_converter('11111111', 'bin2dec')", "test7": "binary_converter(32, 'dec2bin')", "test8": "binary_converter('100000', 'bin2dec')", "test9": "binary_converter(512, 'dec2bin')", "test10": "binary_converter('1000000000', 'bin2dec')"}, "hidden_information": "def binary_converter(val, mode):\n    if mode == 'dec2bin':\n        return bin(int(val))[2:]\n    elif mode == 'bin2dec':\n        return str(int(val, 2))\n    else:\n        return 'Invalid mode'"}
{"ground_truth": "def is_valid_perl_regex(user_input):\n    try:\n        import re\n        perl_regex = r'^\\d+\\s*-How\\s*to\\s*use\\s*\\?\\s*|\\s*[cC]reate\\s*[Aa]n\\s*[Nn]ew\\s*[Uu]ser\\s*|\\s*[Ll]og\\s*[Ii]n?\\s*$'\n        return bool(re.match(perl_regex, user_input))\n    except re.error:\n        return False", "problem_description": "Can you write a python function to filter out invalid lines as per perl rule? I don't know how to explain it but I have given you the example from perlmonks website.The signature of the function is: def is_valid_perl_regex(user_input)", "test_cases": {"test1": "is_valid_perl_regex('21 -How to use?')", "test2": "is_valid_perl_regex('  Create A New User ')", "test3": "is_valid_perl_regex('Log In  ')", "test4": "is_valid_perl_regex(' 22 -What is the meaning of life? ')", "test5": "is_valid_perl_regex('Create User')", "test6": "is_valid_perl_regex('22 How to use')", "test7": "is_valid_perl_regex('user')", "test8": "is_valid_perl_regex('Log')", "test9": "is_valid_perl_regex('22')", "test10": "is_valid_perl_regex('')"}, "hidden_information": "def is_valid_perl_regex(user_input):\n    try:\n        import re\n        perl_regex = r'^\\d+\\s*-How\\s*to\\s*use\\s*\\?\\s*|\\s*[cC]reate\\s*[Aa]n\\s*[Nn]ew\\s*[Uu]ser\\s*|\\s*[Ll]og\\s*[Ii]n?\\s*$'\n        return bool(re.match(perl_regex, user_input))\n    except re.error:\n        return False"}
{"ground_truth": "def decode_html_entities(encoded_string): return encoded_string.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&#91;', '[').replace('&#93;', ']')", "problem_description": "I need a python function that can correctly parse and decode some html entitiesThe signature of the function is: def decode_html_entities(encoded_string)", "test_cases": {"test1": "decode_html_entities('Use: &amp;')", "test2": "decode_html_entities('[&#91; \u0442\u0435\u043d\u043a ]&#93;')", "test3": "decode_html_entities('&amp;&lt;&gt;')", "test4": "decode_html_entities('&#91;tenk&#93; &amp; &#91;&#93;')", "test5": "decode_html_entities('&gt; Websites &lt;')", "test6": "decode_html_entities('&#91;FAQ&#93; &amp; &#91;tenk&#93;')", "test7": "decode_html_entities('Crawl &amp; &#91;tenk&#93;')", "test8": "decode_html_entities(' &lt; ontology &gt;')", "test9": "decode_html_entities(' &#91;ab&#93;c'[1:-1].replace('&amp;', '&'))", "test10": "decode_html_entities('&#91;tank &#93; &gt; started')"}, "hidden_information": "def decode_html_entities(encoded_string): return encoded_string.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&#91;', '[').replace('&#93;', ']')"}
{"ground_truth": "def categorize_animals(animals, categories):\n    categorized_animals = {}\n    for category in categories:\n        categorized_animals[category] = [animal for animal in animals if category in animal['class']]\n    return categorized_animals", "problem_description": "Can you write a python function to categorize exotic animals into different categories like big cats, wildlife? I need it to take a list of animals and categories as input.The signature of the function is: def categorize_animals(animals, categories)", "test_cases": {"test1": "categorize_animals([{'name': 'Lion', 'class': 'big cat'}, {'name': 'Tiger', 'class': 'big cat'}, {'name': 'Wolf', 'class': 'wildlife'}], ['big cat', 'wildlife'])", "test2": "categorize_animals([{'name': 'Bear', 'class': 'wildlife'}, {'name': 'Cheetah', 'class': 'big cat'}], ['wildlife'])", "test3": "categorize_animals([{'name': 'Elephant', 'class': 'wildlife'}, {'name': 'Lemur', 'class': 'primate'}], ['wildlife', 'primate'])", "test4": "categorize_animals([{'name': 'Kangaroo', 'class': 'marsupial'}, {'name': 'Penguin', 'class': 'bird'}], ['marsupial', 'bird'])", "test5": "categorize_animals([{'name': 'Giraffe', 'class': 'wildlife'}, {'name': 'Zebra', 'class': 'wildlife'}], ['wildlife'])", "test6": "categorize_animals([{'name': 'Chimpanzee', 'class': 'primate'}, {'name': 'Gorilla', 'class': 'primate'}], ['primate'])", "test7": "categorize_animals([{'name': 'Snake', 'class': 'reptile'}, {'name': 'Lizard', 'class': 'reptile'}], ['reptile'])", "test8": "categorize_animals([{'name': 'Falcon', 'class': 'bird'}, {'name': 'Hawk', 'class': 'bird'}], ['bird'])", "test9": "categorize_animals([{'name': 'Turtle', 'class': 'reptile'}, {'name': 'Crocodile', 'class': 'reptile'}], ['reptile'])", "test10": "categorize_animals([{'name': 'Koala', 'class': 'marsupial'}, {'name': 'Wombat', 'class': 'marsupial'}], ['marsupial'])"}, "hidden_information": "def categorize_animals(animals, categories):\n    categorized_animals = {}\n    for category in categories:\n        categorized_animals[category] = [animal for animal in animals if category in animal['class']]\n    return categorized_animals"}
{"ground_truth": "def calculate_vodka_amount(num_guests, cocktail_choice, num_shots_per_guest):\n    vodka_amount = 0\n    if cocktail_choice == 'Birthday Cake Martini':\n        vodka_amount += num_guests * num_shots_per_guest * 1.5\n    elif cocktail_choice == 'Aurora Borealis':\n        vodka_amount += num_guests * num_shots_per_guest * 1.5\n    elif cocktail_choice == 'Moaning Myrtle Martini':\n        vodka_amount += num_guests * num_shots_per_guest * 1.25\n    return vodka_amount", "problem_description": "I'm planning a Harry Potter themed party for my friend's birthday and I want to serve some special cocktails. I need a Python function to calculate how much vodka I need to buy based on the number of guests and the type of cocktail I serve. Can you help me come up with a function that does this?The signature of the function is: def calculate_vodka_amount(num_guests, cocktail_choice, num_shots_per_guest)", "test_cases": {"test1": "calculate_vodka_amount(10, 'Birthday Cake Martini', 2)", "test2": "calculate_vodka_amount(20, 'Aurora Borealis', 3)", "test3": "calculate_vodka_amount(5, 'Moaning Myrtle Martini', 1)", "test4": "calculate_vodka_amount(30, 'Birthday Cake Martini', 3)", "test5": "calculate_vodka_amount(10, 'Aurora Borealis', 2)", "test6": "calculate_vodka_amount(20, 'Moaning Myrtle Martini', 2)", "test7": "calculate_vodka_amount(1, 'Birthday Cake Martini', 1)", "test8": "calculate_vodka_amount(40, 'Aurora Borealis', 4)", "test9": "calculate_vodka_amount(25, 'Moaning Myrtle Martini', 3)", "test10": "calculate_vodka_amount(15, 'Birthday Cake Martini', 1)"}, "hidden_information": "def calculate_vodka_amount(num_guests, cocktail_choice, num_shots_per_guest):\n    vodka_amount = 0\n    if cocktail_choice == 'Birthday Cake Martini':\n        vodka_amount += num_guests * num_shots_per_guest * 1.5\n    elif cocktail_choice == 'Aurora Borealis':\n        vodka_amount += num_guests * num_shots_per_guest * 1.5\n    elif cocktail_choice == 'Moaning Myrtle Martini':\n        vodka_amount += num_guests * num_shots_per_guest * 1.25\n    return vodka_amount"}
{"ground_truth": "def categorize_vampire_review(review_text):\n    keywords = ['twilight', 'vampire diaries', 'buffy']\n    review_text_lower = review_text.lower()\n    categorized = {'positive': 0, 'negative': 0, 'neutral': 0}\n    if 'better' in review_text_lower or 'best' in review_text_lower:\n        categorized['positive'] += 1\n    elif 'worse' in review_text_lower or 'worst' in review_text_lower:\n        categorized['negative'] += 1\n    for keyword in keywords:\n        if keyword in review_text_lower:\n            categorized['neutral'] += 1\n    return categorized", "problem_description": "Can you write a python function to analyze the sentiment of a vampire-themed movie/series review and return a dictionary indicating how many times the review mentions something positive, negative or is neutral.The signature of the function is: def categorize_vampire_review(review_text)", "test_cases": {"test1": "categorize_vampire_review('I think the vampire diaries is the best show ever!')", "test2": "categorize_vampire_review('I did not like twilight. It is the worst show ever.')", "test3": "categorize_vampire_review('I have seen both twilight and the vampire diaries. I think they are okay.')", "test4": "categorize_vampire_review('This movie is a bit better than the others in the vampire genre.')", "test5": "categorize_vampire_review('I am a huge fan of buffy and angel!')", "test6": "categorize_vampire_review('I dont think this show is worth watching.')", "test7": "categorize_vampire_review('The vampire diaries is better than buffy.')", "test8": "categorize_vampire_review('I love both vampire movies and romance novels.')", "test9": "categorize_vampire_review('This is not a typical vampire movie.')", "test10": "categorize_vampire_review('Twilight is the worst movie ever compared to the vampire diaries.')"}, "hidden_information": "def categorize_vampire_review(review_text):\n    keywords = ['twilight', 'vampire diaries', 'buffy']\n    review_text_lower = review_text.lower()\n    categorized = {'positive': 0, 'negative': 0, 'neutral': 0}\n    if 'better' in review_text_lower or 'best' in review_text_lower:\n        categorized['positive'] += 1\n    elif 'worse' in review_text_lower or 'worst' in review_text_lower:\n        categorized['negative'] += 1\n    for keyword in keywords:\n        if keyword in review_text_lower:\n            categorized['neutral'] += 1\n    return categorized"}
{"ground_truth": "def generate_performance_report(employee_monthly_stats, employee_names, threshold=50):\n    performance_report = {}\n    for i, stats in enumerate(employee_monthly_stats):\n        if stats['sales'] > threshold or stats['productivity'] > threshold:\n            performance_report[employee_names[i]] = 'alive'\n        else:\n            performance_report[employee_names[i]] = 'fallen'\n    return performance_report", "problem_description": "I want the LLM agent to write a python function that can assess the performance of my family members in our business. They recently received their monthly statistics, and I need to know whether they're doing well or struggling. Can you help me with that?The signature of the function is: def generate_performance_report(employee_monthly_stats, employee_names, threshold=50)", "test_cases": {"test1": "generate_performance_report([{'sales': 60, 'productivity': 70}, {'sales': 40, 'productivity': 30}], ['John', 'Alice'])", "test2": "generate_performance_report([{'sales': 80, 'productivity': 90}, {'sales': 20, 'productivity': 10}, {'sales': 50, 'productivity': 50}], ['John', 'Alice', 'Bob'])", "test3": "generate_performance_report([{'sales': 95, 'productivity': 80}], ['John'])", "test4": "generate_performance_report([{'sales': 30, 'productivity': 20}, {'sales': 60, 'productivity': 70}], ['John', 'Alice'])", "test5": "generate_performance_report([{'sales': 85, 'productivity': 95}, {'sales': 45, 'productivity': 35}, {'sales': 65, 'productivity': 75}, {'sales': 25, 'productivity': 15}], ['John', 'Alice', 'Bob', 'Charlie'])", "test6": "generate_performance_report([{'sales': 50, 'productivity': 50}], ['John'])", "test7": "generate_performance_report([{'sales': 35, 'productivity': 25}, {'sales': 75, 'productivity': 85}], ['John', 'Alice'])", "test8": "generate_performance_report([{'sales': 98, 'productivity': 88}], ['John'])", "test9": "generate_performance_report([{'sales': 58, 'productivity': 68}, {'sales': 42, 'productivity': 32}], ['John', 'Alice'])", "test10": "generate_performance_report([{'sales': 72, 'productivity': 82}, {'sales': 28, 'productivity': 18}, {'sales': 52, 'productivity': 62}], ['John', 'Alice', 'Bob'])"}, "hidden_information": "def generate_performance_report(employee_monthly_stats, employee_names, threshold=50):\n    performance_report = {}\n    for i, stats in enumerate(employee_monthly_stats):\n        if stats['sales'] > threshold or stats['productivity'] > threshold:\n            performance_report[employee_names[i]] = 'alive'\n        else:\n            performance_report[employee_names[i]] = 'fallen'\n    return performance_report"}
{"ground_truth": "def ideal_weight_range(height, position, body_type):\n    if position == 'OT-DT' and body_type == 'skinny':\n        return (height * 25, height * 30)\n    elif position == 'OT-DT' and body_type == 'average':\n        return (height * 22, height * 28)\n    elif position == 'OT-DT' and body_type == 'stocky':\n        return (height * 20, height * 25)\n    else:\n        return 'Invalid position or body type'", "problem_description": "I want you to write a python function that calculates the ideal weight range for a high school football player based on their height, position, and body type. The function should take these three parameters as inputs and return a tuple of the minimum and maximum ideal weights for the player. The position will be one of 'OT-DT' and the body type will be one of 'skinny', 'average', or 'stocky'. Note that the actual calculation will depend on these parameters.The signature of the function is: def ideal_weight_range(height, position, body_type)", "test_cases": {"test1": "ideal_weight_range(66, 'OT-DT', 'skinny')", "test2": "ideal_weight_range(72, 'OT-DT', 'average')", "test3": "ideal_weight_range(70, 'OT-DT', 'stocky')", "test4": "ideal_weight_range(62, 'WR', 'skinny')", "test5": "ideal_weight_range(68, 'RB', 'average')", "test6": "ideal_weight_range(78, 'QB', 'stocky')", "test7": "ideal_weight_range(71, 'OT-DT', 'skinny')", "test8": "ideal_weight_range(74, 'OT-DT', 'average')", "test9": "ideal_weight_range(76, 'OT-DT', 'stocky')", "test10": "ideal_weight_range(69, 'OT-DT', 'skinny')"}, "hidden_information": "def ideal_weight_range(height, position, body_type):\n    if position == 'OT-DT' and body_type == 'skinny':\n        return (height * 25, height * 30)\n    elif position == 'OT-DT' and body_type == 'average':\n        return (height * 22, height * 28)\n    elif position == 'OT-DT' and body_type == 'stocky':\n        return (height * 20, height * 25)\n    else:\n        return 'Invalid position or body type'"}
{"ground_truth": "def calculate_sleep_likelihood(food_diary, water_intake, calcium_sources, sugar_consumption, complex_carbs):\n    sleep_score = 0\n    if 'vegetables' in food_diary and 'fruits' in food_diary:\n        sleep_score += 2\n    if water_intake >= 8:\n        sleep_score += 2\n    for source in calcium_sources:\n        if source in ['milk', 'yogurt', 'cheese', 'broccoli', 'sunflower seeds', 'carob', 'spinach']:\n            sleep_score += 1\n    if sugar_consumption < 2:\n        sleep_score += 2\n    if 'complex_carbs' in food_diary:\n        sleep_score += 1\n    return sleep_score / 8", "problem_description": "Hey LLM, I'm concerned about my child's sleep patterns and I think their diet might be affecting it. I've read that certain foods can help or hinder a good night's sleep. Can you write a Python function that takes my child's daily food intake into account and gives me a likelihood of them getting a good night's sleep? I'm not sure what specific foods or nutrients are important, so you'll have to ask me some questions to get more information.The signature of the function is: def calculate_sleep_likelihood(food_diary, water_intake, calcium_sources, sugar_consumption, complex_carbs)", "test_cases": {"test1": "calculate_sleep_likelihood(['vegetables', 'fruits', 'grains'], 8, ['milk'], 1, 'complex_carbs')", "test2": "calculate_sleep_likelihood(['pizza', 'ice cream'], 2, [], 3, '')", "test3": "calculate_sleep_likelihood(['broccoli', 'sunflower seeds', 'carob'], 6, ['yogurt'], 0, 'complex_carbs')", "test4": "calculate_sleep_likelihood(['fruits', 'grains'], 4, ['cheese'], 2, '')", "test5": "calculate_sleep_likelihood(['vegetables', 'fruits', 'complex_carbs'], 8, ['milk', 'yogurt'], 1, 'complex_carbs')", "test6": "calculate_sleep_likelihood(['pizza', 'ice cream'], 2, [], 3, '')", "test7": "calculate_sleep_likelihood(['broccoli', 'sunflower seeds'], 6, ['yogurt'], 0, '')", "test8": "calculate_sleep_likelihood(['fruits', 'grains', 'complex_carbs'], 4, ['cheese'], 2, 'complex_carbs')", "test9": "calculate_sleep_likelihood(['vegetables', 'complex_carbs'], 8, ['milk', 'yogurt'], 0, 'complex_carbs')", "test10": "calculate_sleep_likelihood(['pizza', 'ice cream', 'complex_carbs'], 2, [], 1, 'complex_carbs')"}, "hidden_information": "def calculate_sleep_likelihood(food_diary, water_intake, calcium_sources, sugar_consumption, complex_carbs):\n    sleep_score = 0\n    if 'vegetables' in food_diary and 'fruits' in food_diary:\n        sleep_score += 2\n    if water_intake >= 8:\n        sleep_score += 2\n    for source in calcium_sources:\n        if source in ['milk', 'yogurt', 'cheese', 'broccoli', 'sunflower seeds', 'carob', 'spinach']:\n            sleep_score += 1\n    if sugar_consumption < 2:\n        sleep_score += 2\n    if 'complex_carbs' in food_diary:\n        sleep_score += 1\n    return sleep_score / 8"}
{"ground_truth": "def get_glamour_day_price(glamour_day_packet_price, discount_percentage, desired_photos):\n  discounted_price = glamour_day_packet_price - (glamour_day_packet_price * discount_percentage / 100)\n  photo_price = 10\n  total_price = discounted_price + (desired_photos * photo_price)\n  return total_price", "problem_description": "I need a python function to help Raylene from the Klip-N-Kurl calculate the total price for a Glamour Day packet after a discount and including additional photos. Can you write a function that takes the original price of the packet, a discount percentage, and the number of desired photos as input and outputs the total price?The signature of the function is: def get_glamour_day_price(glamour_day_packet_price, discount_percentage, desired_photos)", "test_cases": {"test1": "get_glamour_day_price(100, 10, 2)", "test2": "get_glamour_day_price(50, 20, 1)", "test3": "get_glamour_day_price(200, 5, 3)", "test4": "get_glamour_day_price(75, 15, 0)", "test5": "get_glamour_day_price(150, 25, 4)", "test6": "get_glamour_day_price(120, 8, 1)", "test7": "get_glamour_day_price(250, 12, 2)", "test8": "get_glamour_day_price(180, 18, 3)", "test9": "get_glamour_day_price(90, 22, 0)", "test10": "get_glamour_day_price(110, 10, 5)"}, "hidden_information": "def get_glamour_day_price(glamour_day_packet_price, discount_percentage, desired_photos):\n  discounted_price = glamour_day_packet_price - (glamour_day_packet_price * discount_percentage / 100)\n  photo_price = 10\n  total_price = discounted_price + (desired_photos * photo_price)\n  return total_price"}
{"ground_truth": "def predict_relationship_success(partner1_soppiness, partner2_soppiness, partner1_commitment, partner2_commitment):\n    if partner1_soppiness + partner2_soppiness > 10 and partner1_commitment + partner2_commitment > 10:\n        return 'High'\n    elif partner1_soppiness + partner2_soppiness > 5 and partner1_commitment + partner2_commitment > 5:\n        return 'Medium'\n    else:\n        return 'Low'", "problem_description": "I want you to write a Python function that determines whether a romantic relationship will succeed based on the amount of 'soppiness' and commitment of each partner. I'm not entirely sure what I mean by 'soppiness', but I think it's a combination of how romantic and emotional someone is. Can you figure it out and write a function that takes in the necessary inputs and outputs the likelihood of success?The signature of the function is: def predict_relationship_success(partner1_soppiness, partner2_soppiness, partner1_commitment, partner2_commitment)", "test_cases": {"test1": "predict_relationship_success(8, 6, 9, 7)", "test2": "predict_relationship_success(3, 4, 5, 6)", "test3": "predict_relationship_success(10, 10, 10, 10)", "test4": "predict_relationship_success(1, 2, 1, 2)", "test5": "predict_relationship_success(5, 5, 8, 8)", "test6": "predict_relationship_success(6, 6, 6, 6)", "test7": "predict_relationship_success(9, 9, 3, 3)", "test8": "predict_relationship_success(2, 2, 9, 9)", "test9": "predict_relationship_success(4, 4, 5, 5)", "test10": "predict_relationship_success(7, 7, 8, 8)"}, "hidden_information": "def predict_relationship_success(partner1_soppiness, partner2_soppiness, partner1_commitment, partner2_commitment):\n    if partner1_soppiness + partner2_soppiness > 10 and partner1_commitment + partner2_commitment > 10:\n        return 'High'\n    elif partner1_soppiness + partner2_soppiness > 5 and partner1_commitment + partner2_commitment > 5:\n        return 'Medium'\n    else:\n        return 'Low'"}
{"ground_truth": "def get_incident_demographics(description):\n    description = description.lower()\n    age_demographics = {'young': 0, 'old': 0, 'unknown': 0}\n    role_demographics = {'aggressor': 0, 'defender': 0, 'unknown': 0}\n    if 'older' in description:\n        age_demographics['old'] += 1\n    elif 'young' in description or 'younger' in description:\n        age_demographics['young'] += 1\n    if 'throwing punches' in description or 'started a fight' in description:\n        role_demographics['aggressor'] += 1\n    elif 'no aggression' in description or \"didn't want any part\" in description:\n        role_demographics['defender'] += 1\n    return age_demographics, role_demographics", "problem_description": "I need a python function that can infer the demographics of individuals involved in violent incidents at fast-food restaurants based on witness descriptions. The function should take a string description of the incident as input and return the age and role demographics of the individuals involved. Can you write a python function to do this?The signature of the function is: def get_incident_demographics(description)", "test_cases": {"test1": "get_incident_demographics('A young man started a fight with an older man at a fast-food restaurant.')", "test2": "get_incident_demographics('The guy that was stabbed was the one throwing punches at the Burger King.')", "test3": "get_incident_demographics('An older man was repeatedly punching a young man at the Venetian Square Shopping Center.')", "test4": "get_incident_demographics('A man in his 50s was stabbed near his rib cage on the left side of his abdomen.')", "test5": "get_incident_demographics('The first man was on top of the older man throwing punches.')", "test6": "get_incident_demographics('All I heard the older guy saying was, Stop! No! Please stop!')", "test7": "get_incident_demographics('There was no aggression out of that man.')", "test8": "get_incident_demographics('He did not want any part of what just happened.')", "test9": "get_incident_demographics('The restaurant was temporarily closed while police interviewed witnesses and gathered evidence.')", "test10": "get_incident_demographics('Witnesses said one man started a fight with an older man for no apparent reason.')"}, "hidden_information": "def get_incident_demographics(description):\n    description = description.lower()\n    age_demographics = {'young': 0, 'old': 0, 'unknown': 0}\n    role_demographics = {'aggressor': 0, 'defender': 0, 'unknown': 0}\n    if 'older' in description:\n        age_demographics['old'] += 1\n    elif 'young' in description or 'younger' in description:\n        age_demographics['young'] += 1\n    if 'throwing punches' in description or 'started a fight' in description:\n        role_demographics['aggressor'] += 1\n    elif 'no aggression' in description or \"didn't want any part\" in description:\n        role_demographics['defender'] += 1\n    return age_demographics, role_demographics"}
{"ground_truth": "def predict_days_until_spring(shadows, dates, state_temperatures):\n    shadowdays = [date for date, shadow in zip(dates, shadows) if shadow]\n    avgtemp = sum(state_temperatures) / len(state_temperatures)\n    if avgtemp < 40:\n        return 42 if shadowdays else 34\n    else:\n        return 21 if shadowdays else 14", "problem_description": "Write a python function to predict the number of days until spring. The function should use the groundhogs' shadow data and temperatures to make the prediction. But I'm not sure what input parameters are needed or how to format the data.The signature of the function is: def predict_days_until_spring(shadows, dates, state_temperatures)", "test_cases": {"test1": "predict_days_until_spring([True, False, True], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [39, 41, 40])", "test2": "predict_days_until_spring([False, False, False], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [42, 43, 40])", "test3": "predict_days_until_spring([True, True, True], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [35, 36, 37])", "test4": "predict_days_until_spring([False, True, False], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [39, 40, 41])", "test5": "predict_days_until_spring([True, False, True], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [40, 41, 40])", "test6": "predict_days_until_spring([False, False, False], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [38, 39, 40])", "test7": "predict_days_until_spring([True, True, False], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [39, 40, 40])", "test8": "predict_days_until_spring([False, True, True], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [38, 39, 40])", "test9": "predict_days_until_spring([True, False, False], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [38, 39, 40])", "test10": "predict_days_until_spring([False, False, True], [\"2024-02-02\", \"2024-02-03\", \"2024-02-04\"], [39, 40, 42])"}, "hidden_information": "def predict_days_until_spring(shadows, dates, state_temperatures):\n    shadowdays = [date for date, shadow in zip(dates, shadows) if shadow]\n    avgtemp = sum(state_temperatures) / len(state_temperatures)\n    if avgtemp < 40:\n        return 42 if shadowdays else 34\n    else:\n        return 21 if shadowdays else 14"}
{"ground_truth": "def calculate_false_memory_probability(initial_correct_answers, false_answers_from_group, false_answer_probability, total_number_of_answers, total_group_members):\n    false_memory_rate = (false_answers_from_group / total_group_members) * false_answer_probability\n    false_memory_probability = false_memory_rate * (1 - (initial_correct_answers / total_number_of_answers))\n    return false_memory_probability", "problem_description": "I'm trying to model a scenario where people may form false memories based on social pressure. I'd like a python function that can predict the probability that a person forms a false memory when people in their group provide conflicting information. Can you please write this function?The signature of the function is: def calculate_false_memory_probability(initial_correct_answers, false_answers_from_group, false_answer_probability, total_number_of_answers, total_group_members)", "test_cases": {"test1": "calculate_false_memory_probability(100, 20, 0.5, 200, 10)", "test2": "calculate_false_memory_probability(50, 5, 0.3, 100, 5)", "test3": "calculate_false_memory_probability(75, 12, 0.4, 150, 8)", "test4": "calculate_false_memory_probability(20, 5, 0.2, 50, 10)", "test5": "calculate_false_memory_probability(100, 30, 0.8, 200, 15)", "test6": "calculate_false_memory_probability(80, 22, 0.6, 180, 12)", "test7": "calculate_false_memory_probability(30, 8, 0.4, 70, 8)", "test8": "calculate_false_memory_probability(150, 40, 0.7, 250, 20)", "test9": "calculate_false_memory_probability(90, 25, 0.55, 220, 18)", "test10": "calculate_false_memory_probability(60, 18, 0.45, 160, 12)"}, "hidden_information": "def calculate_false_memory_probability(initial_correct_answers, false_answers_from_group, false_answer_probability, total_number_of_answers, total_group_members):\n    false_memory_rate = (false_answers_from_group / total_group_members) * false_answer_probability\n    false_memory_probability = false_memory_rate * (1 - (initial_correct_answers / total_number_of_answers))\n    return false_memory_probability"}
{"ground_truth": "def calculate_stolen_value(stolen_credits, conversion_rate): return stolen_credits * conversion_rate", "problem_description": "Hey agent, I want you to write a Python function to calculate the total value of some stolen in-game credits. I'm not sure how it should work, but I think we need to take into account the conversion rate from virtual currency to real money. Can you help me?The signature of the function is: def calculate_stolen_value(stolen_credits, conversion_rate)", "test_cases": {"test1": "calculate_stolen_value(1000000, 0.01)", "test2": "calculate_stolen_value(200000000, 0.005)", "test3": "calculate_stolen_value(50000, 0.05)", "test4": "calculate_stolen_value(10000000, 0.0001)", "test5": "calculate_stolen_value(0, 0.1)", "test6": "calculate_stolen_value(2500000, 0.02)", "test7": "calculate_stolen_value(750000, 0.0075)", "test8": "calculate_stolen_value(3000000, 0.015)", "test9": "calculate_stolen_value(400000, 0.003)", "test10": "calculate_stolen_value(15000000, 0.0025)"}, "hidden_information": "def calculate_stolen_value(stolen_credits, conversion_rate): return stolen_credits * conversion_rate"}
{"ground_truth": "def calculate_binding_free_energy(peptide_sequence, pH, temperature):\n    # Constants\n    R = 8.3145  # gas constant in J/mol*K\n    T = temperature  # temperature in K\n    pKa_Cys = 8.33  # pKa of cysteine\n    pKa_His = 6.00  # pKa of histidine\n    \n    # Calculate the number of cysteines and histidines in the peptide sequence\n    num_Cys = peptide_sequence.count('C')\n    num_His = peptide_sequence.count('H')\n    \n    # Calculate the number of displaced protons\n    num_protons_displaced = num_Cys + num_His\n    \n    # Calculate the deprotonation enthalpy of cysteines\n    deprotonation_enthalpy_Cys = -30.0 * num_Cys  # kJ/mol\n    \n    # Calculate the binding enthalpy\n    binding_enthalpy = -50.0 - deprotonation_enthalpy_Cys  # kJ/mol\n    \n    # Calculate the binding entropy\n    binding_entropy = -120.0 - 20.0 * num_protons_displaced  # J/mol*K\n    \n    # Calculate the binding free energy\n    binding_free_energy = binding_enthalpy - T * binding_entropy / 1000  # kJ/mol\n    return binding_free_energy", "problem_description": "Write a python function to calculate the binding free energy of a zinc ion to a given peptide sequence at a specific pH and temperature. I want the function to take into account the deprotonation enthalpy of cysteines and the number of displaced protons.The signature of the function is: def calculate_binding_free_energy(peptide_sequence, pH, temperature)", "test_cases": {"test1": "calculate_binding_free_energy('CHHHH', 7.4, 298.15)", "test2": "calculate_binding_free_energy('CCCC', 7.4, 310.15)", "test3": "calculate_binding_free_energy('HHHH', 7.4, 298.15)", "test4": "calculate_binding_free_energy('CHCHCHC', 7.4, 310.15)", "test5": "calculate_binding_free_energy('CCCCCC', 7.4, 298.15)", "test6": "calculate_binding_free_energy('HHHHHH', 7.4, 310.15)", "test7": "calculate_binding_free_energy('CCHHC', 7.4, 298.15)", "test8": "calculate_binding_free_energy('HCHCH', 7.4, 310.15)", "test9": "calculate_binding_free_energy('CCCCC', 7.4, 298.15)", "test10": "calculate_binding_free_energy('HHHHC', 7.4, 310.15)"}, "hidden_information": "def calculate_binding_free_energy(peptide_sequence, pH, temperature):\n    # Constants\n    R = 8.3145  # gas constant in J/mol*K\n    T = temperature  # temperature in K\n    pKa_Cys = 8.33  # pKa of cysteine\n    pKa_His = 6.00  # pKa of histidine\n    \n    # Calculate the number of cysteines and histidines in the peptide sequence\n    num_Cys = peptide_sequence.count('C')\n    num_His = peptide_sequence.count('H')\n    \n    # Calculate the number of displaced protons\n    num_protons_displaced = num_Cys + num_His\n    \n    # Calculate the deprotonation enthalpy of cysteines\n    deprotonation_enthalpy_Cys = -30.0 * num_Cys  # kJ/mol\n    \n    # Calculate the binding enthalpy\n    binding_enthalpy = -50.0 - deprotonation_enthalpy_Cys  # kJ/mol\n    \n    # Calculate the binding entropy\n    binding_entropy = -120.0 - 20.0 * num_protons_displaced  # J/mol*K\n    \n    # Calculate the binding free energy\n    binding_free_energy = binding_enthalpy - T * binding_entropy / 1000  # kJ/mol\n    return binding_free_energy"}
{"ground_truth": "def determine_risk_level(urgency, impact, job_type):\n    if urgency == \"high\" and impact == \"high\":\n        return \"high-risk\"\n    elif job_type == \"sex worker\" or (urgency == \"none\" and impact == \"low\"):\n        return \"low-risk\"\n    else:\n        return \"medium-risk\"", "problem_description": "Can you write a python function for me to figure out if a situation is low-risk or high-risk? I want the function to consider various parameters but I am not sure what they should be.The signature of the function is: def determine_risk_level(urgency, impact, job_type)", "test_cases": {"test1": "determine_risk_level('high', 'high', 'related to finance')", "test2": "determine_risk_level('low', 'low', 'related to sex work')", "test3": "determine_risk_level('medium', 'high', 'related to pets')", "test4": "determine_risk_level('none', 'low', 'related to arts')", "test5": "determine_risk_level('high', 'medium', 'related to healthcare')", "test6": "determine_risk_level('low', 'medium', 'related to sex work')", "test7": "determine_risk_level('none', 'none', 'related to sports')", "test8": "determine_risk_level('low', 'high', 'related to education')", "test9": "determine_risk_level('medium', 'low', 'related to tourism')", "test10": "determine_risk_level('high', 'low', 'related to politics')"}, "hidden_information": "def determine_risk_level(urgency, impact, job_type):\n    if urgency == \"high\" and impact == \"high\":\n        return \"high-risk\"\n    elif job_type == \"sex worker\" or (urgency == \"none\" and impact == \"low\"):\n        return \"low-risk\"\n    else:\n        return \"medium-risk\""}
{"ground_truth": "def analyze_hospital_traffic(patient_info, emergency_room_data, insurance_status):\n    traffic_increase = 0\n    for patient in patient_info:\n        if patient['insurance'] in insurance_status and patient['last_visit'] == 'emergency_room':\n            traffic_increase += 1\n    return traffic_increase, emergency_room_data['violence_level'] + traffic_increase * 0.1", "problem_description": "I need you to write a Python function to analyze the impact of increased health insurance on hospital traffic, particularly in emergency rooms. I want to know how it affects the security risk in these areas.The signature of the function is: def analyze_hospital_traffic(patient_info, emergency_room_data, insurance_status)", "test_cases": {"test1": "analyze_hospital_traffic([{'name': 'John', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}, {'name': 'Jane', 'insurance': 'Private', 'last_visit': 'doctor_office'}], {'violence_level': 5}, ['Medicaid', 'Private'])", "test2": "analyze_hospital_traffic([{'name': 'Bob', 'insurance': 'Uninsured', 'last_visit': 'emergency_room'}], {'violence_level': 3}, ['Medicaid'])", "test3": "analyze_hospital_traffic([{'name': 'Alice', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}, {'name': 'Mike', 'insurance': 'Private', 'last_visit': 'emergency_room'}], {'violence_level': 4}, ['Medicaid', 'Private'])", "test4": "analyze_hospital_traffic([{'name': 'Emma', 'insurance': 'Private', 'last_visit': 'doctor_office'}], {'violence_level': 2}, ['Medicaid'])", "test5": "analyze_hospital_traffic([{'name': 'Liam', 'insurance': 'Uninsured', 'last_visit': 'emergency_room'}, {'name': 'Noah', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}], {'violence_level': 5}, ['Medicaid', 'Private'])", "test6": "analyze_hospital_traffic([{'name': 'Olivia', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}], {'violence_level': 4}, ['Private'])", "test7": "analyze_hospital_traffic([{'name': 'Ava', 'insurance': 'Private', 'last_visit': 'emergency_room'}, {'name': 'Isabella', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}], {'violence_level': 6}, ['Medicaid'])", "test8": "analyze_hospital_traffic([{'name': 'Sophia', 'insurance': 'Uninsured', 'last_visit': 'doctor_office'}, {'name': 'Mia', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}], {'violence_level': 3}, ['Private'])", "test9": "analyze_hospital_traffic([{'name': 'Charlie', 'insurance': 'Medicaid', 'last_visit': 'emergency_room'}, {'name': 'William', 'insurance': 'Private', 'last_visit': 'emergency_room'}], {'violence_level': 7}, ['Medicaid', 'Private'])", "test10": "analyze_hospital_traffic([{'name': 'Thomas', 'insurance': 'Private', 'last_visit': 'emergency_room'}], {'violence_level': 1}, ['Uninsured'])"}, "hidden_information": "def analyze_hospital_traffic(patient_info, emergency_room_data, insurance_status):\n    traffic_increase = 0\n    for patient in patient_info:\n        if patient['insurance'] in insurance_status and patient['last_visit'] == 'emergency_room':\n            traffic_increase += 1\n    return traffic_increase, emergency_room_data['violence_level'] + traffic_increase * 0.1"}
{"ground_truth": "def process_image(contrast, brightness, is_color, lux_level):\n    image_quality = ''\n    if is_color and lux_level >= 0.5:\n        image_quality = 'high'\n    elif not is_color and lux_level >= 0.06:\n        image_quality = 'high'\n    else:\n        image_quality = 'low'\n    if contrast > 128:\n        image_quality = 'high'\n    if brightness > 255:\n        image_quality = 'high'\n    return image_quality", "problem_description": "I want you to write a python function that determines the quality of an image based on its brightness, contrast, color mode, and light sensitivity. The function should return 'high' if the image quality is good, and 'low' otherwise.The signature of the function is: def process_image(contrast, brightness, is_color, lux_level)", "test_cases": {"test1": "process_image(100, 200, True, 1.0)", "test2": "process_image(50, 200, False, 0.07)", "test3": "process_image(130, 200, True, 0.4)", "test4": "process_image(100, 256, True, 1.0)", "test5": "process_image(100, 200, False, 0.055)", "test6": "process_image(150, 200, True, 0.6)", "test7": "process_image(100, 200, True, 0.0)", "test8": "process_image(120, 250, False, 0.1)", "test9": "process_image(110, 200, True, 0.8)", "test10": "process_image(140, 200, False, 0.09)"}, "hidden_information": "def process_image(contrast, brightness, is_color, lux_level):\n    image_quality = ''\n    if is_color and lux_level >= 0.5:\n        image_quality = 'high'\n    elif not is_color and lux_level >= 0.06:\n        image_quality = 'high'\n    else:\n        image_quality = 'low'\n    if contrast > 128:\n        image_quality = 'high'\n    if brightness > 255:\n        image_quality = 'high'\n    return image_quality"}
{"ground_truth": "def categorize_games(game_genres, game_names):\n    genre_dict = {\n        'action': ['Doom', 'Alan Wake'],\n        'adventure': ['Far Cry', 'Red Dead'],\n        'RPG': ['Skyrim', 'Mass Effect'],\n        'multiplayer simulation': ['World of tanks', 'Mechwarrior Online'],\n        'MOBA': ['Guardians of Middle Earth', 'League of Legends'],\n    }\n    categorized_games = {}\n    for genre, games in genre_dict.items():\n        categorized_games[genre] = [game for game in games if game in game_names]\n    return categorized_games", "problem_description": "Can you write a Python function to categorize games into genres? I want to be able to input a list of game names and a list of predefined genres, and have the function return a dictionary where each genre is associated with a list of games that belong to that genre. I'm not sure what genres to include or how the function should handle games that don't fit into any genre. Can you figure it out?The signature of the function is: def categorize_games(game_genres, game_names)", "test_cases": {"test1": "categorize_games(['action', 'adventure', 'RPG', 'multiplayer simulation', 'MOBA'], ['Doom', 'Far Cry', 'Skyrim', 'World of tanks', 'Guardians of Middle Earth'])", "test2": "categorize_games(['action', 'adventure', 'RPG'], ['Alan Wake', 'Red Dead', 'Mass Effect', 'Super Mario'])", "test3": "categorize_games(['multiplayer simulation', 'MOBA'], ['World of tanks', 'Mechwarrior Online', 'League of Legends'])", "test4": "categorize_games([], ['Doom', 'Far Cry', 'Skyrim'])", "test5": "categorize_games(['action', 'adventure'], [])", "test6": "categorize_games(['action', 'adventure', 'RPG'], ['Doom', 'Far Cry', 'Skyrim', 'Red Dead', 'Mass Effect'])", "test7": "categorize_games(['multiplayer simulation'], ['World of tanks', 'Mechwarrior Online'])", "test8": "categorize_games(['MOBA'], ['Guardians of Middle Earth', 'League of Legends'])", "test9": "categorize_games(['action', 'RPG'], ['Doom', 'Skyrim', 'Alan Wake'])", "test10": "categorize_games(['adventure', 'multiplayer simulation'], ['Far Cry', 'World of tanks'])"}, "hidden_information": "def categorize_games(game_genres, game_names):\n    genre_dict = {\n        'action': ['Doom', 'Alan Wake'],\n        'adventure': ['Far Cry', 'Red Dead'],\n        'RPG': ['Skyrim', 'Mass Effect'],\n        'multiplayer simulation': ['World of tanks', 'Mechwarrior Online'],\n        'MOBA': ['Guardians of Middle Earth', 'League of Legends'],\n    }\n    categorized_games = {}\n    for genre, games in genre_dict.items():\n        categorized_games[genre] = [game for game in games if game in game_names]\n    return categorized_games"}
{"ground_truth": "def calculate_disease_progression(ht, time, stage, treatment):\n    if treatment == 'exorcism' or treatment == 'no_mana_area':\n        if stage == 1 or stage == 2:\n            return 'Partly cured, HT loss imminent'\n        else:\n            return 'Cured'\n    elif time < ht:\n        return f'Stage 1: {ht - time} hours left'\n    elif time < ht * 2:\n        return f'Stage 2: {ht * 2 - time} hours left'\n    else:\n        if time < ht * 6:\n            return f'Stage 3: {ht * 6 - time} hours left'\n        else:\n            return 'Deceased'", "problem_description": "I want you to write a python function that determines the progression of the fictional Ambulatory Necrotic Plague, taking into account patient's health threshold, time elapsed, current stage of the disease, and whether a treatment was applied. The function should return the current status of the patient, including the stage of the disease or the cure.The signature of the function is: def calculate_disease_progression(ht, time, stage, treatment)", "test_cases": {"test1": "calculate_disease_progression(10, 5, 1, 'no_treatment')", "test2": "calculate_disease_progression(15, 20, 2, 'exorcism')", "test3": "calculate_disease_progression(12, 0, 1, 'no_mana_area')", "test4": "calculate_disease_progression(8, 60, 3, 'no_treatment')", "test5": "calculate_disease_progression(20, 72, 2, 'exorcism')", "test6": "calculate_disease_progression(18, 30, 1, 'no_treatment')", "test7": "calculate_disease_progression(11, 22, 2, 'no_mana_area')", "test8": "calculate_disease_progression(9, 90, 3, 'no_treatment')", "test9": "calculate_disease_progression(14, 48, 2, 'exorcism')", "test10": "calculate_disease_progression(7, 0, 1, 'no_mana_area')"}, "hidden_information": "def calculate_disease_progression(ht, time, stage, treatment):\n    if treatment == 'exorcism' or treatment == 'no_mana_area':\n        if stage == 1 or stage == 2:\n            return 'Partly cured, HT loss imminent'\n        else:\n            return 'Cured'\n    elif time < ht:\n        return f'Stage 1: {ht - time} hours left'\n    elif time < ht * 2:\n        return f'Stage 2: {ht * 2 - time} hours left'\n    else:\n        if time < ht * 6:\n            return f'Stage 3: {ht * 6 - time} hours left'\n        else:\n            return 'Deceased'"}
{"ground_truth": "def is_conspiracy_related(text, keywords):\n    conspiracy_keywords = [\"government\", \"rulers\", \"Satan\", \"destruction\", \"corruption\"]\n    if any(keyword.lower() in text.lower() for keyword in keywords) or any(keyword.lower() in text.lower() for keyword in conspiracy_keywords):\n        return True\n    return False", "problem_description": "Hey agent, I want you to write a Python function that can analyze a piece of text and determine whether it's related to a conspiracy theory. I'm not really sure how to define it, but I'll know it when I see it. Can you help me come up with something?The signature of the function is: def is_conspiracy_related(text, keywords)", "test_cases": {"test1": "is_conspiracy_related('The government is controlling our minds', ['mind control'])", "test2": "is_conspiracy_related('I love playing video games all day', ['government'])", "test3": "is_conspiracy_related('The Illuminati is real', ['Illuminati'])", "test4": "is_conspiracy_related('The Earth is flat', [])", "test5": "is_conspiracy_related('Satan is the ruler of the world', ['Satan'])", "test6": "is_conspiracy_related('The New World Order is coming', ['New World Order'])", "test7": "is_conspiracy_related('I love eating pizza', ['government'])", "test8": "is_conspiracy_related('The government is hiding aliens', ['aliens'])", "test9": "is_conspiracy_related('The world is ending soon', [])", "test10": "is_conspiracy_related('The Freemasons are controlling the world', ['Freemasons'])"}, "hidden_information": "def is_conspiracy_related(text, keywords):\n    conspiracy_keywords = [\"government\", \"rulers\", \"Satan\", \"destruction\", \"corruption\"]\n    if any(keyword.lower() in text.lower() for keyword in keywords) or any(keyword.lower() in text.lower() for keyword in conspiracy_keywords):\n        return True\n    return False"}
{"ground_truth": "def calculate_water_cost(total_litres, subsidy_rate=0.2456, base_cost_per_litre=0.0154):\n    total_cost_without_subsidy = total_litres * base_cost_per_litre\n    subsidy_amount = total_cost_without_subsidy * subsidy_rate\n    return round(total_cost_without_subsidy - subsidy_amount, 2)", "problem_description": "Hey LLM agent, I need your help. I'm trying to manage the water delivery costs for a small rural town, but it's getting complicated. Can you write a Python function that calculates the total cost of water delivery based on the amount of water needed and the government subsidy rate? The subsidy rate is a percentage of the total cost without the subsidy.The signature of the function is: def calculate_water_cost(total_litres, subsidy_rate=0.2456, base_cost_per_litre=0.0154)", "test_cases": {"test1": "calculate_water_cost(12000)", "test2": "calculate_water_cost(5000, subsidy_rate=0.1)", "test3": "calculate_water_cost(20000, base_cost_per_litre=0.02)", "test4": "calculate_water_cost(15000, subsidy_rate=0.3, base_cost_per_litre=0.015)", "test5": "calculate_water_cost(10000)", "test6": "calculate_water_cost(25000, subsidy_rate=0.2)", "test7": "calculate_water_cost(8000, base_cost_per_litre=0.018)", "test8": "calculate_water_cost(18000, subsidy_rate=0.25)", "test9": "calculate_water_cost(22000, base_cost_per_litre=0.017)", "test10": "calculate_water_cost(30000, subsidy_rate=0.22, base_cost_per_litre=0.016)"}, "hidden_information": "def calculate_water_cost(total_litres, subsidy_rate=0.2456, base_cost_per_litre=0.0154):\n    total_cost_without_subsidy = total_litres * base_cost_per_litre\n    subsidy_amount = total_cost_without_subsidy * subsidy_rate\n    return round(total_cost_without_subsidy - subsidy_amount, 2)"}
{"ground_truth": "def calculate_lawyer_earnings(settlement_amount, lawyer_fee, costs_to_recover, claimants):\n    total_lawyer_earnings = settlement_amount * (1 - lawyer_fee / 100) - (costs_to_recover / len(claimants))\n    return total_lawyer_earnings", "problem_description": "I need you to write a python function that calculates the total earnings of a lawyer from a defamation case, considering the settlement amount, lawyer fees, costs to recover, and multiple claimants. Please collaborate and ask me questions to clarify these parameters.The signature of the function is: def calculate_lawyer_earnings(settlement_amount, lawyer_fee, costs_to_recover, claimants)", "test_cases": {"test1": "calculate_lawyer_earnings(100000, 30, 5000, ['John', 'Sarah'])", "test2": "calculate_lawyer_earnings(200000, 25, 10000, ['Mark', 'Emily', 'Michael'])", "test3": "calculate_lawyer_earnings(50000, 35, 2000, ['David', 'Jessica'])", "test4": "calculate_lawyer_earnings(150000, 20, 8000, ['James', 'Tom', 'Oliver'])", "test5": "calculate_lawyer_earnings(300000, 40, 12000, ['William', 'Sophia'])", "test6": "calculate_lawyer_earnings(250000, 28, 9000, ['Benjamin', 'Charlotte'])", "test7": "calculate_lawyer_earnings(180000, 32, 7000, ['Liam', 'Abigail'])", "test8": "calculate_lawyer_earnings(120000, 22, 4000, ['Noah', 'Harper'])", "test9": "calculate_lawyer_earnings(280000, 38, 11000, ['Ethan', 'Evelyn'])", "test10": "calculate_lawyer_earnings(1000000, 45, 20000, ['Alexander', 'Isabella'])"}, "hidden_information": "def calculate_lawyer_earnings(settlement_amount, lawyer_fee, costs_to_recover, claimants):\n    total_lawyer_earnings = settlement_amount * (1 - lawyer_fee / 100) - (costs_to_recover / len(claimants))\n    return total_lawyer_earnings"}
{"ground_truth": "def get_top_winning_teams(teams, wins, top_n=10): return sorted(teams, key=lambda x: wins[x], reverse=True)[:top_n]", "problem_description": "Hey agent, I want you to write a Python function that calculates the top winning college football teams of the decade. I have a list of teams and their corresponding wins, but I'm not sure how to structure the data or what timeframe to consider. Can you help me with this?The signature of the function is: def get_top_winning_teams(teams, wins, top_n=10)", "test_cases": {"test1": "get_top_winning_teams(['Alabama', 'USC', 'Oklahoma', 'Texas', 'LSU'], {'Alabama': 88, 'USC': 92, 'Oklahoma': 95, 'Texas': 77, 'LSU': 82})", "test2": "get_top_winning_teams(['Florida', 'Georgia', 'Tennessee', 'Auburn', 'Arkansas'], {'Florida': 76, 'Georgia': 79, 'Tennessee': 85, 'Auburn': 83, 'Arkansas': 71})", "test3": "get_top_winning_teams(['Ohio State', 'Michigan', 'Penn State', 'Wisconsin', 'Iowa'], {'Ohio State': 93, 'Michigan': 73, 'Penn State': 84, 'Wisconsin': 87, 'Iowa': 78})", "test4": "get_top_winning_teams(['Miami', 'Florida State', 'Virginia Tech', 'Clemson', 'Georgia Tech'], {'Miami': 90, 'Florida State': 96, 'Virginia Tech': 86, 'Clemson': 81, 'Georgia Tech': 74})", "test5": "get_top_winning_teams(['USC', 'Oklahoma', 'Texas', 'LSU', 'Alabama'], {'USC': 92, 'Oklahoma': 95, 'Texas': 77, 'LSU': 82, 'Alabama': 88})", "test6": "get_top_winning_teams(['Tennessee', 'Auburn', 'Arkansas', 'Florida', 'Georgia'], {'Tennessee': 85, 'Auburn': 83, 'Arkansas': 71, 'Florida': 76, 'Georgia': 79})", "test7": "get_top_winning_teams(['Wisconsin', 'Iowa', 'Penn State', 'Ohio State', 'Michigan'], {'Wisconsin': 87, 'Iowa': 78, 'Penn State': 84, 'Ohio State': 93, 'Michigan': 73})", "test8": "get_top_winning_teams(['Clemson', 'Georgia Tech', 'Virginia Tech', 'Miami', 'Florida State'], {'Clemson': 81, 'Georgia Tech': 74, 'Virginia Tech': 86, 'Miami': 90, 'Florida State': 96})", "test9": "get_top_winning_teams(['Alabama', 'USC', 'Oklahoma', 'Texas', 'LSU'], {'Alabama': 88, 'USC': 92, 'Oklahoma': 95, 'Texas': 77, 'LSU': 82}, top_n=3)", "test10": "get_top_winning_teams(['Florida', 'Georgia', 'Tennessee', 'Auburn', 'Arkansas'], {'Florida': 76, 'Georgia': 79, 'Tennessee': 85, 'Auburn': 83, 'Arkansas': 71}, top_n=4)"}, "hidden_information": "def get_top_winning_teams(teams, wins, top_n=10): return sorted(teams, key=lambda x: wins[x], reverse=True)[:top_n]"}
{"ground_truth": "def calculate_score(clips, rating):\n    total_score = sum([clip * rating for clip in clips])\n    return total_score / len(clips)", "problem_description": "The Xbox One records the best gaming clips and allows users to share them. I need help to write a python function that calculates the average rating of the clips that a user has recorded with their gaming console.The signature of the function is: def calculate_score(clips, rating)", "test_cases": {"test1": "calculate_score([100, 50, 200], 5)", "test2": "calculate_score([500, 100, 300, 200], 4)", "test3": "calculate_score([1000, 700, 600, 800, 900], 3)", "test4": "calculate_score([400, 300, 500, 200], 2)", "test5": "calculate_score([600, 500, 300, 400, 200], 1)", "test6": "calculate_score([100, 50, 200, 150, 250, 300], 5)", "test7": "calculate_score([500, 100, 300, 200, 400, 600], 4)", "test8": "calculate_score([1000, 700], 3)", "test9": "calculate_score([400], 2)", "test10": "calculate_score([600, 500, 300, 400], 1)"}, "hidden_information": "def calculate_score(clips, rating):\n    total_score = sum([clip * rating for clip in clips])\n    return total_score / len(clips)"}
{"ground_truth": "def calculate_battery_life(screen_brightness, wifi_enabled, gaming, video_watching, hours_of_use):\n    # Based on the review, assume max screen brightness, wifi enabled and gaming/video watching drain the battery faster\n    if gaming or video_watching:\n        if screen_brightness == 'max' and wifi_enabled:\n            return 3.3\n        else:\n            return 4.5\n    else:\n        return 5.5", "problem_description": "I want to calculate the average battery life of my Sony Tablet P based on how I use it. Can you write a Python function to do this? The function should take into account screen brightness, wifi connectivity, and whether I'm playing games or watching videos.The signature of the function is: def calculate_battery_life(screen_brightness, wifi_enabled, gaming, video_watching, hours_of_use)", "test_cases": {"test1": "calculate_battery_life('max', True, True, False, 2)", "test2": "calculate_battery_life('medium', False, False, True, 4)", "test3": "calculate_battery_life('min', True, True, True, 3)", "test4": "calculate_battery_life('max', True, False, False, 5)", "test5": "calculate_battery_life('max', False, True, True, 4)", "test6": "calculate_battery_life('medium', True, False, False, 6)", "test7": "calculate_battery_life('min', False, False, True, 3)", "test8": "calculate_battery_life('max', True, True, True, 5)", "test9": "calculate_battery_life('medium', False, True, False, 4)", "test10": "calculate_battery_life('min', True, False, True, 6)"}, "hidden_information": "def calculate_battery_life(screen_brightness, wifi_enabled, gaming, video_watching, hours_of_use):\n    # Based on the review, assume max screen brightness, wifi enabled and gaming/video watching drain the battery faster\n    if gaming or video_watching:\n        if screen_brightness == 'max' and wifi_enabled:\n            return 3.3\n        else:\n            return 4.5\n    else:\n        return 5.5"}
{"ground_truth": "def calculate_volunteer_points(hours_volunteered, points_per_hour): return hours_volunteered * points_per_hour", "problem_description": "Hey LLM agent, I want you to write a Python function that calculates the total volunteer hours and points for a volunteer. The government has a new program that awards points to volunteers for their hours of service. These points can be redeemed for goods and services. Can you write a function that takes the number of hours volunteered and the number of points per hour as input and returns the total points? But I'm not sure what data structure to use for the input. Can you help me with that?The signature of the function is: def calculate_volunteer_points(hours_volunteered, points_per_hour)", "test_cases": {"test1": "calculate_volunteer_points(10, 5)", "test2": "calculate_volunteer_points(20, 3)", "test3": "calculate_volunteer_points(5, 2)", "test4": "calculate_volunteer_points(15, 4)", "test5": "calculate_volunteer_points(0, 10)", "test6": "calculate_volunteer_points(8, 6)", "test7": "calculate_volunteer_points(12, 9)", "test8": "calculate_volunteer_points(25, 1)", "test9": "calculate_volunteer_points(18, 7)", "test10": "calculate_volunteer_points(22, 8)"}, "hidden_information": "def calculate_volunteer_points(hours_volunteered, points_per_hour): return hours_volunteered * points_per_hour"}
{"ground_truth": "def should_hire_candidate(age, years_experience, skills, required_skills):\n    # Define the weights for each factor\n    age_weight = 0.3\n    experience_weight = 0.4\n    skills_weight = 0.3\n    # Calculate the score for each factor\n    age_score = 1 - (age / 100) if age > 40 else 1\n    experience_score = years_experience / 10 if years_experience <= 10 else 1\n    skills_score = len([skill for skill in skills if skill in required_skills]) / len(required_skills)\n    # Calculate the overall score\n    score = age_score * age_weight + experience_score * experience_weight + skills_score * skills_weight\n    return score >= 0.7", "problem_description": "I want to write a Python function that determines whether a company should hire a candidate based on their age, experience, and skills. The function should consider the candidate's age, years of experience, and the skills they possess in relation to the required skills for the job. Write a Python function that takes these factors into account and returns a boolean value indicating whether the company should hire the candidate.The signature of the function is: def should_hire_candidate(age, years_experience, skills, required_skills)", "test_cases": {"test1": "should_hire_candidate(25, 5, ['python', 'java', 'c++'], ['python', 'java'])", "test2": "should_hire_candidate(55, 15, ['c++', 'javascript'], ['python', 'c++'])", "test3": "should_hire_candidate(30, 10, ['java', 'c++', 'python'], ['java', 'python'])", "test4": "should_hire_candidate(60, 20, ['javascript', 'c++'], ['javascript', 'python'])", "test5": "should_hire_candidate(20, 2, ['python', 'java'], ['python', 'java'])", "test6": "should_hire_candidate(45, 12, ['c++', 'javascript', 'python'], ['c++', 'javascript'])", "test7": "should_hire_candidate(50, 18, ['java', 'c++'], ['java', 'c++'])", "test8": "should_hire_candidate(38, 8, ['python', 'javascript', 'c++'], ['python', 'javascript'])", "test9": "should_hire_candidate(62, 22, ['c++', 'java'], ['javascript', 'c++'])", "test10": "should_hire_candidate(28, 4, ['java', 'python'], ['java', 'c++'])"}, "hidden_information": "def should_hire_candidate(age, years_experience, skills, required_skills):\n    # Define the weights for each factor\n    age_weight = 0.3\n    experience_weight = 0.4\n    skills_weight = 0.3\n    # Calculate the score for each factor\n    age_score = 1 - (age / 100) if age > 40 else 1\n    experience_score = years_experience / 10 if years_experience <= 10 else 1\n    skills_score = len([skill for skill in skills if skill in required_skills]) / len(required_skills)\n    # Calculate the overall score\n    score = age_score * age_weight + experience_score * experience_weight + skills_score * skills_weight\n    return score >= 0.7"}
{"ground_truth": "def compare_budget_plans(plan1, plan2):\n    # Initialize variables\n    plan1_tax_rate = plan1['tax_rate']\n    plan1_spending_cuts = plan1['spending_cuts']\n    plan1_deficit_reduction = plan1['deficit_reduction']\n    plan2_tax_rate = plan2['tax_rate']\n    plan2_spending_cuts = plan2['spending_cuts']\n    plan2_deficit_reduction = plan2['deficit_reduction']\n\n    # Calculate and compare tax rates\n    if plan1_tax_rate < plan2_tax_rate:\n        return 'Plan 1 has a lower tax rate'\n    elif plan1_tax_rate > plan2_tax_rate:\n        return 'Plan 2 has a lower tax rate'\n    else:\n        return 'Both plans have the same tax rate'\n\n    # Calculate and compare spending cuts\n    if plan1_spending_cuts > plan2_spending_cuts:\n        return 'Plan 1 has more spending cuts'\n    elif plan1_spending_cuts < plan2_spending_cuts:\n        return 'Plan 2 has more spending cuts'\n    else:\n        return 'Both plans have the same spending cuts'\n\n    # Calculate and compare deficit reduction\n    if plan1_deficit_reduction > plan2_deficit_reduction:\n        return 'Plan 1 has more deficit reduction'\n    elif plan1_deficit_reduction < plan2_deficit_reduction:\n        return 'Plan 2 has more deficit reduction'\n    else:\n        return 'Both plans have the same deficit reduction'", "problem_description": "Can you write a Python function to compare two budget plans, taking into account tax rates, spending cuts, and deficit reduction? The function should be able to analyze the plans and return a string describing which plan is better in each category. The plans will be represented as dictionaries with keys 'tax_rate', 'spending_cuts', and 'deficit_reduction'.The signature of the function is: def compare_budget_plans(plan1, plan2)", "test_cases": {"test1": "compare_budget_plans({'tax_rate': 0.2, 'spending_cuts': 100, 'deficit_reduction': 50}, {'tax_rate': 0.3, 'spending_cuts': 80, 'deficit_reduction': 60})", "test2": "compare_budget_plans({'tax_rate': 0.1, 'spending_cuts': 120, 'deficit_reduction': 40}, {'tax_rate': 0.2, 'spending_cuts': 100, 'deficit_reduction': 50})", "test3": "compare_budget_plans({'tax_rate': 0.3, 'spending_cuts': 90, 'deficit_reduction': 70}, {'tax_rate': 0.3, 'spending_cuts': 90, 'deficit_reduction': 70})", "test4": "compare_budget_plans({'tax_rate': 0.4, 'spending_cuts': 80, 'deficit_reduction': 60}, {'tax_rate': 0.4, 'spending_cuts': 80, 'deficit_reduction': 60})", "test5": "compare_budget_plans({'tax_rate': 0.2, 'spending_cuts': 110, 'deficit_reduction': 45}, {'tax_rate': 0.2, 'spending_cuts': 110, 'deficit_reduction': 45})", "test6": "compare_budget_plans({'tax_rate': 0.1, 'spending_cuts': 130, 'deficit_reduction': 35}, {'tax_rate': 0.1, 'spending_cuts': 130, 'deficit_reduction': 35})", "test7": "compare_budget_plans({'tax_rate': 0.5, 'spending_cuts': 70, 'deficit_reduction': 80}, {'tax_rate': 0.5, 'spending_cuts': 70, 'deficit_reduction': 80})", "test8": "compare_budget_plans({'tax_rate': 0.3, 'spending_cuts': 100, 'deficit_reduction': 50}, {'tax_rate': 0.3, 'spending_cuts': 100, 'deficit_reduction': 50})", "test9": "compare_budget_plans({'tax_rate': 0.25, 'spending_cuts': 105, 'deficit_reduction': 55}, {'tax_rate': 0.25, 'spending_cuts': 105, 'deficit_reduction': 55})", "test10": "compare_budget_plans({'tax_rate': 0.35, 'spending_cuts': 95, 'deficit_reduction': 65}, {'tax_rate': 0.35, 'spending_cuts': 95, 'deficit_reduction': 65})"}, "hidden_information": "def compare_budget_plans(plan1, plan2):\n    # Initialize variables\n    plan1_tax_rate = plan1['tax_rate']\n    plan1_spending_cuts = plan1['spending_cuts']\n    plan1_deficit_reduction = plan1['deficit_reduction']\n    plan2_tax_rate = plan2['tax_rate']\n    plan2_spending_cuts = plan2['spending_cuts']\n    plan2_deficit_reduction = plan2['deficit_reduction']\n\n    # Calculate and compare tax rates\n    if plan1_tax_rate < plan2_tax_rate:\n        return 'Plan 1 has a lower tax rate'\n    elif plan1_tax_rate > plan2_tax_rate:\n        return 'Plan 2 has a lower tax rate'\n    else:\n        return 'Both plans have the same tax rate'\n\n    # Calculate and compare spending cuts\n    if plan1_spending_cuts > plan2_spending_cuts:\n        return 'Plan 1 has more spending cuts'\n    elif plan1_spending_cuts < plan2_spending_cuts:\n        return 'Plan 2 has more spending cuts'\n    else:\n        return 'Both plans have the same spending cuts'\n\n    # Calculate and compare deficit reduction\n    if plan1_deficit_reduction > plan2_deficit_reduction:\n        return 'Plan 1 has more deficit reduction'\n    elif plan1_deficit_reduction < plan2_deficit_reduction:\n        return 'Plan 2 has more deficit reduction'\n    else:\n        return 'Both plans have the same deficit reduction'"}
{"ground_truth": "def get_player_info(player_stats, search_criteria):\n    player_stats = [player for player in player_stats if player['Height (cm)'] >= search_criteria['min_height']] \n    player_stats = [player for player in player_stats if player['Injuries'] <= search_criteria['max_injuries']] \n    player_stats = [player for player in player_stats if player['Games_Played'] >= search_criteria['min_games']] \n    return player_stats", "problem_description": "I have a database of football players, can you write a python function to help me find players that fit certain criteria? I want to select players who are above a certain height, have not had too many injuries, and have played a certain number of games.The signature of the function is: def get_player_info(player_stats, search_criteria)", "test_cases": {"test1": "get_player_info([{'Name': 'Max Bailey', 'Height (cm)': 206, 'Injuries': 3, 'Games_Played': 6}, {'Name': 'John Doe', 'Height (cm)': 195, 'Injuries': 2, 'Games_Played': 10}], {'min_height': 200, 'max_injuries': 2, 'min_games': 5})", "test2": "get_player_info([{'Name': 'Jane Smith', 'Height (cm)': 180, 'Injuries': 1, 'Games_Played': 8}, {'Name': 'Bob Johnson', 'Height (cm)': 210, 'Injuries': 4, 'Games_Played': 12}], {'min_height': 190, 'max_injuries': 3, 'min_games': 7})", "test3": "get_player_info([{'Name': 'Mike Brown', 'Height (cm)': 200, 'Injuries': 2, 'Games_Played': 9}, {'Name': 'Emma Taylor', 'Height (cm)': 190, 'Injuries': 1, 'Games_Played': 6}], {'min_height': 195, 'max_injuries': 2, 'min_games': 8})", "test4": "get_player_info([{'Name': 'Tom White', 'Height (cm)': 205, 'Injuries': 3, 'Games_Played': 11}, {'Name': 'Sarah Lee', 'Height (cm)': 185, 'Injuries': 2, 'Games_Played': 9}], {'min_height': 190, 'max_injuries': 2, 'min_games': 8})", "test5": "get_player_info([{'Name': 'David Kim', 'Height (cm)': 198, 'Injuries': 1, 'Games_Played': 7}, {'Name': 'Sophia Martin', 'Height (cm)': 202, 'Injuries': 3, 'Games_Played': 10}], {'min_height': 195, 'max_injuries': 2, 'min_games': 8})", "test6": "get_player_info([{'Name': 'Michael Brown', 'Height (cm)': 199, 'Injuries': 2, 'Games_Played': 9}, {'Name': 'Jessica Davis', 'Height (cm)': 201, 'Injuries': 3, 'Games_Played': 12}], {'min_height': 190, 'max_injuries': 2, 'min_games': 8})", "test7": "get_player_info([{'Name': 'William Thompson', 'Height (cm)': 197, 'Injuries': 1, 'Games_Played': 8}, {'Name': 'Amy Hall', 'Height (cm)': 203, 'Injuries': 2, 'Games_Played': 10}], {'min_height': 190, 'max_injuries': 2, 'min_games': 8})", "test8": "get_player_info([{'Name': 'James Wilson', 'Height (cm)': 200, 'Injuries': 3, 'Games_Played': 11}, {'Name': 'Melissa Jenkins', 'Height (cm)': 186, 'Injuries': 2, 'Games_Played': 9}], {'min_height': 195, 'max_injuries': 2, 'min_games': 8})", "test9": "get_player_info([{'Name': 'Robert Harris', 'Height (cm)': 198, 'Injuries': 2, 'Games_Played': 10}, {'Name': 'Rebecca Martin', 'Height (cm)': 204, 'Injuries': 3, 'Games_Played': 12}], {'min_height': 190, 'max_injuries': 2, 'min_games': 8})", "test10": "get_player_info([{'Name': 'Richard Lee', 'Height (cm)': 199, 'Injuries': 1, 'Games_Played': 9}, {'Name': 'Elizabeth White', 'Height (cm)': 202, 'Injuries': 2, 'Games_Played': 11}], {'min_height': 195, 'max_injuries': 2, 'min_games': 8})"}, "hidden_information": "def get_player_info(player_stats, search_criteria):\n    player_stats = [player for player in player_stats if player['Height (cm)'] >= search_criteria['min_height']] \n    player_stats = [player for player in player_stats if player['Injuries'] <= search_criteria['max_injuries']] \n    player_stats = [player for player in player_stats if player['Games_Played'] >= search_criteria['min_games']] \n    return player_stats"}
{"ground_truth": "def calculate_golf_score(par, shots_taken, is_bogey=False, is_double_bogey=False):\n    if is_double_bogey:\n        return shots_taken + 2\n    elif is_bogey:\n        return shots_taken + 1\n    else:\n        return shots_taken + (par - par)", "problem_description": "Can you write a Python function to calculate a golfer's score on a given hole based on the number of shots taken, considering cases where the golfer scores a bogey or double bogey? The function should take into account the par of the hole.The signature of the function is: def calculate_golf_score(par, shots_taken, is_bogey=False, is_double_bogey=False)", "test_cases": {"test1": "calculate_golf_score(3, 4, True)", "test2": "calculate_golf_score(3, 5, False, True)", "test3": "calculate_golf_score(4, 5, True)", "test4": "calculate_golf_score(3, 3, False, False)", "test5": "calculate_golf_score(4, 6, False, True)", "test6": "calculate_golf_score(3, 4, False)", "test7": "calculate_golf_score(3, 6, True, True)", "test8": "calculate_golf_score(4, 7, False, True)", "test9": "calculate_golf_score(3, 3, True, False)", "test10": "calculate_golf_score(4, 5)"}, "hidden_information": "def calculate_golf_score(par, shots_taken, is_bogey=False, is_double_bogey=False):\n    if is_double_bogey:\n        return shots_taken + 2\n    elif is_bogey:\n        return shots_taken + 1\n    else:\n        return shots_taken + (par - par)"}
{"ground_truth": "def calculate_emissions(electricity, industry, transportation, buildings, oil_and_gas):\n    # Define emission rates (tonnes per year)\n    electricity_rate = 20\n    industry_rate = 150\n    transportation_rate = 350\n    buildings_rate = 50\n    oil_and_gas_rate = 100\n\n    # Calculate total emissions\n    total_emissions = (electricity * electricity_rate) + (industry * industry_rate) + (transportation * transportation_rate) + (buildings * buildings_rate) + (oil_and_gas * oil_and_gas_rate)\n    return total_emissions", "problem_description": "I want you to write a Python function that calculates the total greenhouse gas emissions from various sources, but I'm not sure which specific sources to include. Can you help me figure it out and write the function?The signature of the function is: def calculate_emissions(electricity, industry, transportation, buildings, oil_and_gas)", "test_cases": {"test1": "calculate_emissions(1, 0, 0, 0, 0) == 20", "test2": "calculate_emissions(0, 1, 0, 0, 0) == 150", "test3": "calculate_emissions(0, 0, 1, 0, 0) == 350", "test4": "calculate_emissions(0, 0, 0, 1, 0) == 50", "test5": "calculate_emissions(0, 0, 0, 0, 1) == 100", "test6": "calculate_emissions(2, 2, 2, 2, 2) == 1340", "test7": "calculate_emissions(0.5, 0.5, 0.5, 0.5, 0.5) == 335", "test8": "calculate_emissions(10, 0, 0, 0, 0) == 200", "test9": "calculate_emissions(0, 10, 0, 0, 0) == 1500", "test10": "calculate_emissions(0, 0, 10, 0, 0) == 3500"}, "hidden_information": "def calculate_emissions(electricity, industry, transportation, buildings, oil_and_gas):\n    # Define emission rates (tonnes per year)\n    electricity_rate = 20\n    industry_rate = 150\n    transportation_rate = 350\n    buildings_rate = 50\n    oil_and_gas_rate = 100\n\n    # Calculate total emissions\n    total_emissions = (electricity * electricity_rate) + (industry * industry_rate) + (transportation * transportation_rate) + (buildings * buildings_rate) + (oil_and_gas * oil_and_gas_rate)\n    return total_emissions"}
{"ground_truth": "def calculate_total_sentence(charges, trial_outcomes, years_per_charge, concurrent_serving):\n    total_sentence = 0\n    for i, charge in enumerate(charges):\n        if trial_outcomes[i] == 'guilty':\n            total_sentence += years_per_charge[i]\n    if concurrent_serving:\n        return max(total_sentence, max(years_per_charge))\n    else:\n        return total_sentence", "problem_description": "Write a python function to calculate the total sentence of an individual given the charges they were tried for, the outcome of each trial, the number of years they would serve for each charge, and whether they are serving time concurrently for all charges.The signature of the function is: def calculate_total_sentence(charges, trial_outcomes, years_per_charge, concurrent_serving)", "test_cases": {"test1": "calculate_total_sentence(['murder', 'theft', 'arson'], ['guilty', 'not guilty', 'guilty'], [10, 5, 20], False)", "test2": "calculate_total_sentence(['theft', 'arson'], ['guilty', 'guilty'], [5, 20], True)", "test3": "calculate_total_sentence(['murder', 'theft', 'arson'], ['not guilty', 'not guilty', 'not guilty'], [10, 5, 20], False)", "test4": "calculate_total_sentence(['murder'], ['guilty'], [10], False)", "test5": "calculate_total_sentence(['theft', 'arson'], ['guilty', 'guilty'], [5, 20], False)", "test6": "calculate_total_sentence(['murder', 'theft', 'arson'], ['guilty', 'not guilty', 'guilty'], [10, 5, 20], True)", "test7": "calculate_total_sentence(['theft', 'arson'], ['guilty', 'not guilty'], [5, 20], False)", "test8": "calculate_total_sentence(['murder'], ['guilty'], [10], True)", "test9": "calculate_total_sentence(['theft', 'arson'], ['guilty', 'guilty'], [5, 20], True)", "test10": "calculate_total_sentence(['murder', 'theft', 'arson'], ['guilty', 'guilty', 'guilty'], [10, 5, 20], False)"}, "hidden_information": "def calculate_total_sentence(charges, trial_outcomes, years_per_charge, concurrent_serving):\n    total_sentence = 0\n    for i, charge in enumerate(charges):\n        if trial_outcomes[i] == 'guilty':\n            total_sentence += years_per_charge[i]\n    if concurrent_serving:\n        return max(total_sentence, max(years_per_charge))\n    else:\n        return total_sentence"}
{"ground_truth": "def calculate_inflation_adjusted_wage(wage_growth, inflation_rate):\n    return wage_growth / (1 + inflation_rate / 100)", "problem_description": "I need a python function to help me understand the impact of inflation on wages. The problem is that wages are growing more slowly than the cost of living and I want to calculate the difference. Can you help me write a function to calculate this?The signature of the function is: def calculate_inflation_adjusted_wage(wage_growth, inflation_rate)", "test_cases": {"test1": "calculate_inflation_adjusted_wage(1.7, 3.6)", "test2": "calculate_inflation_adjusted_wage(1.4, 3.6)", "test3": "calculate_inflation_adjusted_wage(1.9, 2.5)", "test4": "calculate_inflation_adjusted_wage(1.5, 4.0)", "test5": "calculate_inflation_adjusted_wage(2.0, 3.0)", "test6": "calculate_inflation_adjusted_wage(1.2, 2.8)", "test7": "calculate_inflation_adjusted_wage(1.8, 3.2)", "test8": "calculate_inflation_adjusted_wage(1.6, 3.8)", "test9": "calculate_inflation_adjusted_wage(1.3, 2.6)", "test10": "calculate_inflation_adjusted_wage(1.1, 2.4)"}, "hidden_information": "def calculate_inflation_adjusted_wage(wage_growth, inflation_rate):\n    return wage_growth / (1 + inflation_rate / 100)"}
{"ground_truth": "def calculate_emissions_reduction_target(current_emissions, eu_target, country_share):\n    total_emissions = sum(current_emissions.values())\n    eu_reduction_target = total_emissions * eu_target / 100\n    country_reduction_targets = {}\n    for country, emissions in current_emissions.items():\n        reduction_target = emissions * country_share[country] / 100\n        country_reduction_targets[country] = reduction_target\n    return country_reduction_targets", "problem_description": "I want the agent to write a Python function that can help me calculate the total emissions reduction target for each country in the EU based on their current emissions and the EU's overall target of reducing carbon emissions by 20% by 2020. I have a list of countries with their current emissions, but I'm not sure how to distribute the EU's target among them.The signature of the function is: def calculate_emissions_reduction_target(current_emissions, eu_target, country_share)", "test_cases": {"test1": "calculate_emissions_reduction_target({'Germany': 1000, 'France': 800, 'Poland': 600}, 20, {'Germany': 30, 'France': 25, 'Poland': 45})", "test2": "calculate_emissions_reduction_target({'UK': 1200, 'Italy': 900, 'Spain': 700}, 20, {'UK': 35, 'Italy': 30, 'Spain': 35})", "test3": "calculate_emissions_reduction_target({'Germany': 500, 'France': 400, 'Poland': 300}, 15, {'Germany': 25, 'France': 20, 'Poland': 55})", "test4": "calculate_emissions_reduction_target({'UK': 1500, 'Italy': 1200, 'Spain': 1000}, 25, {'UK': 40, 'Italy': 35, 'Spain': 25})", "test5": "calculate_emissions_reduction_target({'Germany': 2000, 'France': 1800, 'Poland': 1600}, 10, {'Germany': 20, 'France': 15, 'Poland': 65})", "test6": "calculate_emissions_reduction_target({'Germany': 2500, 'France': 2200, 'Poland': 2000}, 20, {'Germany': 30, 'France': 25, 'Poland': 45})", "test7": "calculate_emissions_reduction_target({'UK': 2000, 'Italy': 1800, 'Spain': 1600}, 25, {'UK': 40, 'Italy': 35, 'Spain': 25})", "test8": "calculate_emissions_reduction_target({'Germany': 1000, 'France': 800, 'Poland': 600}, 15, {'Germany': 20, 'France': 15, 'Poland': 65})", "test9": "calculate_emissions_reduction_target({'Germany': 3000, 'France': 2800, 'Poland': 2600}, 10, {'Germany': 25, 'France': 20, 'Poland': 55})", "test10": "calculate_emissions_reduction_target({'Germany': 3500, 'France': 3200, 'Poland': 3000}, 20, {'Germany': 35, 'France': 30, 'Poland': 35})"}, "hidden_information": "def calculate_emissions_reduction_target(current_emissions, eu_target, country_share):\n    total_emissions = sum(current_emissions.values())\n    eu_reduction_target = total_emissions * eu_target / 100\n    country_reduction_targets = {}\n    for country, emissions in current_emissions.items():\n        reduction_target = emissions * country_share[country] / 100\n        country_reduction_targets[country] = reduction_target\n    return country_reduction_targets"}
{"ground_truth": "def categorize_movies_by_country(movies, countries):\n    result = {}\n    for movie in movies:\n        country = movie['country']\n        if country in countries:\n            if country not in result:\n                result[country] = []\n            result[country].append(movie)\n    return result", "problem_description": "I have a list of movies with their details and I want to write a Python function to group them by their country of origin. The function should be able to handle any list of movies and a list of countries to group by. The function should return a dictionary with the country as the key and a list of movies from that country as the value. I also want the function to ignore movies that are not from the specified countries.The signature of the function is: def categorize_movies_by_country(movies, countries)", "test_cases": {"test1": "categorize_movies_by_country([{\"title\": \"Stigmata\", \"country\": \"USA\"}, {\"title\": \"The Guardian\", \"country\": \"UK\"}], [\"USA\", \"UK\"])", "test2": "categorize_movies_by_country([{\"title\": \"Stigmata\", \"country\": \"USA\"}, {\"title\": \"The Guardian\", \"country\": \"UK\"}, {\"title\": \"Amelie\", \"country\": \"France\"}], [\"USA\", \"UK\"])", "test3": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}, {\"title\": \"The Dark Knight\", \"country\": \"USA\"}], [\"USA\"])", "test4": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}, {\"title\": \"The Dark Knight\", \"country\": \"UK\"}], [\"USA\"])", "test5": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}, {\"title\": \"The Dark Knight\", \"country\": \"France\"}], [\"USA\", \"UK\"])", "test6": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}], [\"USA\", \"UK\"])", "test7": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"UK\"}, {\"title\": \"The Godfather\", \"country\": \"France\"}], [\"USA\"])", "test8": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}, {\"title\": \"The Dark Knight\", \"country\": \"UK\"}], [\"UK\"])", "test9": "categorize_movies_by_country([{\"title\": \"The Shawshank Redemption\", \"country\": \"USA\"}, {\"title\": \"The Godfather\", \"country\": \"USA\"}, {\"title\": \"The Dark Knight\", \"country\": \"UK\"}, {\"title\": \"Inception\", \"country\": \"France\"}], [\"USA\", \"UK\", \"France\"])", "test10": "categorize_movies_by_country([{\"title\": \"Stigmata\", \"country\": \"USA\"}, {\"title\": \"The Guardian\", \"country\": \"UK\"}, {\"title\": \"Amelie\", \"country\": \"France\"}], [])"}, "hidden_information": "def categorize_movies_by_country(movies, countries):\n    result = {}\n    for movie in movies:\n        country = movie['country']\n        if country in countries:\n            if country not in result:\n                result[country] = []\n            result[country].append(movie)\n    return result"}
{"ground_truth": "def manage_displaced_people(displaced_persons, capacity_per_shelter, num_shelters):\n    total_displaced = len(displaced_persons)\n    shelters_needed = (total_displaced + capacity_per_shelter - 1) // capacity_per_shelter\n    if shelters_needed <= num_shelters:\n        return shelters_needed\n    else:\n        return 'Not enough shelters'", "problem_description": "I want you to create a Python function to help me manage displaced people in a humanitarian crisis. I have a lot of people fleeing from a war-torn area and I need to find a way to distribute them among the available shelters.The signature of the function is: def manage_displaced_people(displaced_persons, capacity_per_shelter, num_shelters)", "test_cases": {"test1": "manage_displaced_people([1, 2, 3, 4, 5], 2, 3)", "test2": "manage_displaced_people([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)", "test3": "manage_displaced_people([1], 10, 1)", "test4": "manage_displaced_people([1, 2, 3, 4, 5], 1, 1)", "test5": "manage_displaced_people([], 10, 1)", "test6": "manage_displaced_people([1, 2, 3, 4, 5], 10, 1)", "test7": "manage_displaced_people([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 5, 3)", "test8": "manage_displaced_people([1, 2, 3, 4, 5], 1, 5)", "test9": "manage_displaced_people([1, 2, 3, 4, 5, 6], 3, 2)", "test10": "manage_displaced_people([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10, 2)"}, "hidden_information": "def manage_displaced_people(displaced_persons, capacity_per_shelter, num_shelters):\n    total_displaced = len(displaced_persons)\n    shelters_needed = (total_displaced + capacity_per_shelter - 1) // capacity_per_shelter\n    if shelters_needed <= num_shelters:\n        return shelters_needed\n    else:\n        return 'Not enough shelters'"}
{"ground_truth": "def filter_phone_records(phone_records, location_blacklist, max_call_duration):\n    filtered_records = []\n    for record in phone_records:\n        if record['location'] not in location_blacklist and record['duration'] <= max_call_duration:\n            filtered_records.append(record)\n    return filtered_records", "problem_description": "Can you write a python function to filter out phone records that should not be handed over to the NSA based on certain criteria? I want to know if a phone company is allowed to hand over the records of its customers or not.The signature of the function is: def filter_phone_records(phone_records, location_blacklist, max_call_duration)", "test_cases": {"test1": "filter_phone_records([{'location': 'New York', 'duration': 30}, {'location': 'LA', 'duration': 60}], ['LA'], 45)", "test2": "filter_phone_records([{'location': 'Chicago', 'duration': 20}, {'location': 'Houston', 'duration': 40}], ['Chicago'], 35)", "test3": "filter_phone_records([{'location': 'Seattle', 'duration': 50}, {'location': 'Miami', 'duration': 70}], ['Miami'], 55)", "test4": "filter_phone_records([{'location': 'Boston', 'duration': 10}, {'location': 'Denver', 'duration': 80}], ['Denver'], 65)", "test5": "filter_phone_records([{'location': 'Dallas', 'duration': 35}, {'location': 'San Francisco', 'duration': 90}], ['Dallas'], 75)", "test6": "filter_phone_records([{'location': 'Philadelphia', 'duration': 45}, {'location': 'Washington', 'duration': 100}], ['Philadelphia'], 85)", "test7": "filter_phone_records([{'location': 'Minneapolis', 'duration': 25}, {'location': 'Atlanta', 'duration': 110}], ['Atlanta'], 95)", "test8": "filter_phone_records([{'location': 'Cleveland', 'duration': 55}, {'location': 'Detroit', 'duration': 120}], ['Cleveland'], 105)", "test9": "filter_phone_records([{'location': 'Portland', 'duration': 65}, {'location': 'Columbus', 'duration': 130}], ['Portland'], 115)", "test10": "filter_phone_records([{'location': 'San Diego', 'duration': 75}, {'location': 'San Jose', 'duration': 140}], ['San Jose'], 125)"}, "hidden_information": "def filter_phone_records(phone_records, location_blacklist, max_call_duration):\n    filtered_records = []\n    for record in phone_records:\n        if record['location'] not in location_blacklist and record['duration'] <= max_call_duration:\n            filtered_records.append(record)\n    return filtered_records"}
{"ground_truth": "def calculate_pension_fund(years_of_service, salary, pension_rate, years_after_retirement):\n    if years_of_service < 10:\n        multiplier = 0.1\n    elif years_of_service < 20:\n        multiplier = 0.2\n    else:\n        multiplier = 0.3\n    pension = salary * multiplier * (years_after_retirement + 1)\n    return pension", "problem_description": "I want you to write a python function that calculates the pension fund for employees based on their years of service, salary, pension rate, and years after retirement. I need this function to determine the pension amount after a certain number of years.The signature of the function is: def calculate_pension_fund(years_of_service, salary, pension_rate, years_after_retirement)", "test_cases": {"test1": "calculate_pension_fund(5, 50000, 0.05, 10)", "test2": "calculate_pension_fund(15, 60000, 0.05, 15)", "test3": "calculate_pension_fund(25, 70000, 0.05, 20)", "test4": "calculate_pension_fund(10, 55000, 0.05, 12)", "test5": "calculate_pension_fund(20, 65000, 0.05, 18)", "test6": "calculate_pension_fund(8, 48000, 0.05, 10)", "test7": "calculate_pension_fund(22, 68000, 0.05, 20)", "test8": "calculate_pension_fund(12, 58000, 0.05, 15)", "test9": "calculate_pension_fund(18, 62000, 0.05, 18)", "test10": "calculate_pension_fund(9, 52000, 0.05, 12)"}, "hidden_information": "def calculate_pension_fund(years_of_service, salary, pension_rate, years_after_retirement):\n    if years_of_service < 10:\n        multiplier = 0.1\n    elif years_of_service < 20:\n        multiplier = 0.2\n    else:\n        multiplier = 0.3\n    pension = salary * multiplier * (years_after_retirement + 1)\n    return pension"}
{"ground_truth": "def calculate_revenue(subscription_price, num_users, current_revenue_per_month, current_num_users):\n    # Calculate revenue from subscription model\n    subscription_revenue = subscription_price * num_users\n    # Calculate current industry revenue\n    current_revenue = current_revenue_per_month * current_num_users\n    # Return the revenue difference\n    return subscription_revenue - current_revenue", "problem_description": "Can you write a Python function to calculate the revenue from a subscription-based music model, considering the decline in music industry revenue due to piracy and the shift to digital distribution? The function should take into account the subscription price and number of users. Also, compare it with the current music industry revenue model. I want to see how much more revenue the subscription model can generate with a given number of users.The signature of the function is: def calculate_revenue(subscription_price, num_users, current_revenue_per_month, current_num_users)", "test_cases": {"test1": "calculate_revenue(5.99, 1000000, 2.5, 500000)", "test2": "calculate_revenue(9.99, 500000, 5.0, 250000)", "test3": "calculate_revenue(4.99, 2000000, 1.0, 1000000)", "test4": "calculate_revenue(7.99, 1500000, 3.5, 750000)", "test5": "calculate_revenue(3.99, 2500000, 2.0, 1250000)", "test6": "calculate_revenue(6.99, 1200000, 4.0, 600000)", "test7": "calculate_revenue(8.99, 1800000, 2.5, 900000)", "test8": "calculate_revenue(4.99, 2800000, 1.5, 1400000)", "test9": "calculate_revenue(9.99, 1000000, 5.5, 500000)", "test10": "calculate_revenue(5.99, 2200000, 3.0, 1100000)"}, "hidden_information": "def calculate_revenue(subscription_price, num_users, current_revenue_per_month, current_num_users):\n    # Calculate revenue from subscription model\n    subscription_revenue = subscription_price * num_users\n    # Calculate current industry revenue\n    current_revenue = current_revenue_per_month * current_num_users\n    # Return the revenue difference\n    return subscription_revenue - current_revenue"}
{"ground_truth": "def count_comment_sentiments(comments):\n    positive_words = ['cute', 'yummy', 'great', 'success', 'perfect', 'beauty']\n    negative_words = ['bitch', 'imperfect', 'shame', 'wrong', 'who cares']\n    sentiments = {\"positive\": 0, \"negative\": 0}\n    for comment in comments:\n        words = comment.split()\n        for word in words:\n            if word.lower() in positive_words:\n                sentiments[\"positive\"] += 1\n            elif word.lower() in negative_words:\n                sentiments[\"negative\"] += 1\n    return sentiments", "problem_description": "I want you to write a Python function to analyze a list of comments and determine whether the overall sentiment is positive or negative. The function should return a dictionary with two keys: 'positive' and 'negative', each containing the count of positive and negative comments, respectively. Please collaborate with me to better understand how I want this function to work.The signature of the function is: def count_comment_sentiments(comments)", "test_cases": {"test1": "count_comment_sentiments(['I love this!', 'This is terrible', 'Great job!'])", "test2": "count_comment_sentiments(['Shame on you!', ' cest parfait!'])", "test3": "count_comment_sentiments(['You are so cute!'])", "test4": "count_comment_sentiments(['This is wrong!', 'Whocares?!'])", "test5": "count_comment_sentiments(['Beauty is in the eye of the beholder'])", "test6": "count_comment_sentiments(['Bitch, please!', 'Great comment!'])", "test7": "count_comment_sentiments(['Who cares about this?!', 'This is perfect!'])", "test8": "count_comment_sentiments(['What the hell is wrong with you?!'])", "test9": "count_comment_sentiments(['Dayum..Lookin yummy!'])", "test10": "count_comment_sentiments(['As per usual, who cares?!', 'You look great!'])"}, "hidden_information": "def count_comment_sentiments(comments):\n    positive_words = ['cute', 'yummy', 'great', 'success', 'perfect', 'beauty']\n    negative_words = ['bitch', 'imperfect', 'shame', 'wrong', 'who cares']\n    sentiments = {\"positive\": 0, \"negative\": 0}\n    for comment in comments:\n        words = comment.split()\n        for word in words:\n            if word.lower() in positive_words:\n                sentiments[\"positive\"] += 1\n            elif word.lower() in negative_words:\n                sentiments[\"negative\"] += 1\n    return sentiments"}
{"ground_truth": "def determine_court_outcome(defendant_guilty, prosecutor_evidence, defense_evidence, judge_bias):\n    if defendant_guilty and prosecutor_evidence > defense_evidence and judge_bias == 'prosecution':\n        return 'Guilty'\n    elif not defendant_guilty and defense_evidence > prosecutor_evidence and judge_bias == 'defense':\n        return 'Not Guilty'\n    else:\n        return 'Jury Split'", "problem_description": "Write a Python function that takes into account the evidence presented by the prosecutor and the defense, the defendant's guilt or innocence, and the judge's bias to determine the court outcomeThe signature of the function is: def determine_court_outcome(defendant_guilty, prosecutor_evidence, defense_evidence, judge_bias)", "test_cases": {"test1": "determine_court_outcome(True, 80, 20, 'prosecution')", "test2": "determine_court_outcome(False, 30, 70, 'defense')", "test3": "determine_court_outcome(True, 50, 50, 'neutral')", "test4": "determine_court_outcome(False, 20, 80, 'prosecution')", "test5": "determine_court_outcome(True, 70, 30, 'defense')", "test6": "determine_court_outcome(False, 40, 60, 'neutral')", "test7": "determine_court_outcome(True, 90, 10, 'prosecution')", "test8": "determine_court_outcome(False, 10, 90, 'defense')", "test9": "determine_court_outcome(True, 60, 40, 'neutral')", "test10": "determine_court_outcome(False, 50, 50, 'prosecution')"}, "hidden_information": "def determine_court_outcome(defendant_guilty, prosecutor_evidence, defense_evidence, judge_bias):\n    if defendant_guilty and prosecutor_evidence > defense_evidence and judge_bias == 'prosecution':\n        return 'Guilty'\n    elif not defendant_guilty and defense_evidence > prosecutor_evidence and judge_bias == 'defense':\n        return 'Not Guilty'\n    else:\n        return 'Jury Split'"}
{"ground_truth": "def analyze_comments(comments, keywords):\n    positive = sum(1 for comment in comments if keywords[0] in comment.lower())\n    negative = sum(1 for comment in comments if keywords[1] in comment.lower())\n    neutral = len(comments) - positive - negative\n    return {'positive': positive, 'negative': negative, 'neutral': neutral, 'overall_sentiment': 'positive' if positive > negative else 'negative' if negative > positive else 'neutral'}", "problem_description": "I want you to write a Python function to analyze anonymous user comments. I want to see the sentiment of these comments, e.g., positive, negative, or neutral. Also, can you give me some stats on how many comments fall under each category? The function should take a list of comments and some keywords to look out for to determine sentiment.The signature of the function is: def analyze_comments(comments, keywords)", "test_cases": {"test1": "analyze_comments(['Great show!', 'Love this!', 'Awesome!'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test2": "analyze_comments(['Terrible show.', 'I hate it.', 'Not good.'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test3": "analyze_comments(['Its okay.', 'Not sure.', 'Meh.'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test4": "analyze_comments(['I like it!', 'Its fine.', 'Not great.'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test5": "analyze_comments(['What a show!', 'Wow, so good!', 'Amazing!'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test6": "analyze_comments(['This is terrible.', 'I hate this show.', 'Really bad.'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test7": "analyze_comments(['Just okay.', 'Not impressed.', 'Meh...'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test8": "analyze_comments(['Love this show!', 'Great characters!', 'Awesome plot!'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test9": "analyze_comments(['Not a fan.', 'I hate the actors.', 'Worst show ever.'], ['love', 'great', 'awesome', 'hate', 'bad'])", "test10": "analyze_comments(['It was fine.', 'Not bad.', 'Could be better.'], ['love', 'great', 'awesome', 'hate', 'bad'])"}, "hidden_information": "def analyze_comments(comments, keywords):\n    positive = sum(1 for comment in comments if keywords[0] in comment.lower())\n    negative = sum(1 for comment in comments if keywords[1] in comment.lower())\n    neutral = len(comments) - positive - negative\n    return {'positive': positive, 'negative': negative, 'neutral': neutral, 'overall_sentiment': 'positive' if positive > negative else 'negative' if negative > positive else 'neutral'}"}
{"ground_truth": "def is_restricted_date(date, start_date='2022-03-01', end_date='2022-11-30'): \n    return start_date <= date <= end_date", "problem_description": "I need a Python function that checks if a date falls within the fishing restriction period on the Cumberland River system. Can the agent write a function that takes a date as input and outputs a boolean indicating whether fishing is restricted on that date?The signature of the function is: def is_restricted_date(date, start_date='2022-03-01', end_date='2022-11-30')", "test_cases": {"test1": "is_restricted_date('2022-06-15')", "test2": "is_restricted_date('2022-12-01')", "test3": "is_restricted_date('2021-03-01')", "test4": "is_restricted_date('2022-03-01')", "test5": "is_restricted_date('2022-05-31')", "test6": "is_restricted_date('2022-11-30')", "test7": "is_restricted_date('2022-04-15', start_date='2022-04-10', end_date='2022-04-20')", "test8": "is_restricted_date('2022-04-09', start_date='2022-04-10', end_date='2022-04-20')", "test9": "is_restricted_date('2022-04-21', start_date='2022-04-10', end_date='2022-04-20')", "test10": "is_restricted_date('2022-04-15', start_date='2022-04-05', end_date='2022-04-25')"}, "hidden_information": "def is_restricted_date(date, start_date='2022-03-01', end_date='2022-11-30'): \n    return start_date <= date <= end_date"}
{"ground_truth": "def get_responsible_agency(location, county_borders, city_borders): \n  if location[0] < county_borders[0] or location[0] > county_borders[1] or location[1] < county_borders[2] or location[1] > county_borders[3]: \n    return 'County Vector Control'\n  elif location[0] < city_borders[0] or location[0] > city_borders[1] or location[1] < city_borders[2] or location[1] > city_borders[3]:\n    return 'City Vector Control'\n  else:\n    return 'Shared Jurisdiction'", "problem_description": "Can you write a Python function that determines which vector control agency is responsible for a given location? I'm tired of getting bounced between county and city vector control. Something with geography, I guess.The signature of the function is: def get_responsible_agency(location, county_borders, city_borders)", "test_cases": {"test1": "get_responsible_agency([40.5, -120.0], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test2": "get_responsible_agency([40.8, -119.0], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test3": "get_responsible_agency([39.9, -120.5], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test4": "get_responsible_agency([40.3, -120.5], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test5": "get_responsible_agency([40.5, -119.8], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test6": "get_responsible_agency([40.8, -119.8], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test7": "get_responsible_agency([40.5, -120.2], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test8": "get_responsible_agency([40.0, -120.5], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test9": "get_responsible_agency([41.0, -119.5], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])", "test10": "get_responsible_agency([40.5, -119.2], [40.0, 41.0, -121.0, -119.0], [40.3, 40.7, -120.2, -119.5])"}, "hidden_information": "def get_responsible_agency(location, county_borders, city_borders): \n  if location[0] < county_borders[0] or location[0] > county_borders[1] or location[1] < county_borders[2] or location[1] > county_borders[3]: \n    return 'County Vector Control'\n  elif location[0] < city_borders[0] or location[0] > city_borders[1] or location[1] < city_borders[2] or location[1] > city_borders[3]:\n    return 'City Vector Control'\n  else:\n    return 'Shared Jurisdiction'"}
{"ground_truth": "def calculate_carbon_offset(emissions, offset_price, reduction_percentage):\n    if emissions >= 0 and offset_price > 0 and 0 <= reduction_percentage <= 100:\n        total_offset = emissions * offset_price * (reduction_percentage / 100)\n        return total_offset\n    else:\n        return 'Invalid input'", "problem_description": "I want the agent to write a Python function that calculates the total carbon offset for a given set of emissions, offset price, and reduction percentage. The function should be flexible enough to handle different input values, but I'm not sure about the specifics. Can you help me clarify the requirements?The signature of the function is: def calculate_carbon_offset(emissions, offset_price, reduction_percentage)", "test_cases": {"test1": "calculate_carbon_offset(100, 2.5, 50)", "test2": "calculate_carbon_offset(50, 1.8, 75)", "test3": "calculate_carbon_offset(200, 3.2, 25)", "test4": "calculate_carbon_offset(0, 2.5, 50)", "test5": "calculate_carbon_offset(-50, 1.8, 75)", "test6": "calculate_carbon_offset(100, 0, 50)", "test7": "calculate_carbon_offset(50, 1.8, 150)", "test8": "calculate_carbon_offset(200, 3.2, 0)", "test9": "calculate_carbon_offset(100, 2.5, -50)", "test10": "calculate_carbon_offset(50, 1.8, 100)"}, "hidden_information": "def calculate_carbon_offset(emissions, offset_price, reduction_percentage):\n    if emissions >= 0 and offset_price > 0 and 0 <= reduction_percentage <= 100:\n        total_offset = emissions * offset_price * (reduction_percentage / 100)\n        return total_offset\n    else:\n        return 'Invalid input'"}
{"ground_truth": "def convert_volume(length, width, height, unit='cubic_inches'): return (length * width * height) / {'cubic_inches': 1, 'cubic_cm': 16.387064, 'liters': 61023.7441}.get(unit, 1)", "problem_description": "Can you write a Python function to calculate the volume of my Sriracha-infused Easter egg in different units? I think it's about the size of a typical Easter egg, but I'm not sure of the dimensions.The signature of the function is: def convert_volume(length, width, height, unit='cubic_inches')", "test_cases": {"test1": "convert_volume(7, 5, 3, unit='cubic_inches')", "test2": "convert_volume(10, 10, 5, unit='cubic_cm')", "test3": "convert_volume(5, 3, 2, unit='liters')", "test4": "convert_volume(15, 10, 8, unit='cubic_inches')", "test5": "convert_volume(20, 15, 10, unit='cubic_cm')", "test6": "convert_volume(8, 6, 4, unit='liters')", "test7": "convert_volume(7, 5, 3, unit='cubic_inches')", "test8": "convert_volume(12, 8, 6, unit='cubic_cm')", "test9": "convert_volume(10, 8, 5, unit='liters')", "test10": "convert_volume(9, 7, 5, unit='cubic_inches')"}, "hidden_information": "def convert_volume(length, width, height, unit='cubic_inches'): return (length * width * height) / {'cubic_inches': 1, 'cubic_cm': 16.387064, 'liters': 61023.7441}.get(unit, 1)"}
{"ground_truth": "def calculate_total_cost(device_cost, battery_cost, num_uses):\n    cost_per_use = battery_cost / 100\n    total_cost = device_cost + (cost_per_use * num_uses)\n    return total_cost", "problem_description": "I need a python function that can calculate the total cost for this drone thingy, it has some initial cost for the device and the battery costs something each time i use it. can you write a function to do this?The signature of the function is: def calculate_total_cost(device_cost, battery_cost, num_uses)", "test_cases": {"test1": "calculate_total_cost(1000, 50, 100)", "test2": "calculate_total_cost(500, 20, 200)", "test3": "calculate_total_cost(2000, 30, 50)", "test4": "calculate_total_cost(1500, 40, 150)", "test5": "calculate_total_cost(1200, 25, 120)", "test6": "calculate_total_cost(1800, 35, 180)", "test7": "calculate_total_cost(2500, 45, 250)", "test8": "calculate_total_cost(3000, 50, 300)", "test9": "calculate_total_cost(3500, 55, 350)", "test10": "calculate_total_cost(4000, 60, 400)"}, "hidden_information": "def calculate_total_cost(device_cost, battery_cost, num_uses):\n    cost_per_use = battery_cost / 100\n    total_cost = device_cost + (cost_per_use * num_uses)\n    return total_cost"}
{"ground_truth": "def calculate_treadmill_time(total_calories, portion_calories, running_calorie_burn_rate):\n    total_portions_consumed = total_calories / portion_calories\n    return total_portions_consumed * running_calorie_burn_rate", "problem_description": "Hey agent, I need a Python function that can help me calculate how long I need to run on the treadmill to burn off the calories from a chocolate bar with portions of different sizes. Can you help me write a function that takes into account the total calories I consumed and the calorie burn rate of my treadmill?The signature of the function is: def calculate_treadmill_time(total_calories, portion_calories, running_calorie_burn_rate)", "test_cases": {"test1": "calculate_treadmill_time(200, 50, 5)", "test2": "calculate_treadmill_time(120, 40, 4)", "test3": "calculate_treadmill_time(350, 70, 6)", "test4": "calculate_treadmill_time(100, 20, 3)", "test5": "calculate_treadmill_time(80, 20, 2)", "test6": "calculate_treadmill_time(250, 50, 7)", "test7": "calculate_treadmill_time(180, 30, 5)", "test8": "calculate_treadmill_time(360, 90, 6)", "test9": "calculate_treadmill_time(200, 50, 4)", "test10": "calculate_treadmill_time(120, 40, 5)"}, "hidden_information": "def calculate_treadmill_time(total_calories, portion_calories, running_calorie_burn_rate):\n    total_portions_consumed = total_calories / portion_calories\n    return total_portions_consumed * running_calorie_burn_rate"}
{"ground_truth": "def calculate_total_cost(contract_length, monthly_payment, data_plan_cost, tablet_price): return (contract_length * monthly_payment) + tablet_price + (contract_length * data_plan_cost)", "problem_description": "I want the agent to write a python function that calculates the total cost of ownership of an item (e.g. the Orange Tahiti tablet) over a certain period. The cost should take into account the initial price of the item, monthly payments, and data plan costs. Can you do that for me?The signature of the function is: def calculate_total_cost(contract_length, monthly_payment, data_plan_cost, tablet_price)", "test_cases": {"test1": "calculate_total_cost(24, 25, 10, 69)", "test2": "calculate_total_cost(12, 30, 5, 99)", "test3": "calculate_total_cost(36, 20, 15, 129)", "test4": "calculate_total_cost(24, 25, 0, 69)", "test5": "calculate_total_cost(12, 0, 5, 99)", "test6": "calculate_total_cost(36, 20, 0, 129)", "test7": "calculate_total_cost(24, 10, 10, 50)", "test8": "calculate_total_cost(12, 20, 5, 75)", "test9": "calculate_total_cost(36, 30, 15, 150)", "test10": "calculate_total_cost(24, 25, 10, 0)"}, "hidden_information": "def calculate_total_cost(contract_length, monthly_payment, data_plan_cost, tablet_price): return (contract_length * monthly_payment) + tablet_price + (contract_length * data_plan_cost)"}
{"ground_truth": "def classify_character(traits):\n    healers = ['Elixir']\n    omega_level_healers = ['Elixir']\n    heroic_traits = ['white knight nature']\n    classification = 'Unknown'\n    if 'died and resurrected' in traits:\n        if any(trait in traits for trait in heroic_traits):\n            if any(trait in traits for trait in healers):\n                if any(trait in traits for trait in omega_level_healers):\n                    classification = 'Villain'\n                else:\n                    classification = 'Hero'\n            else:\n                classification = 'Hero'\n        else:\n            classification = 'Villain'\n    return classification", "problem_description": "can you write a python function for me that classifies comic book characters as heroes or villains based on some characteristics? The function should consider the character's traits and backgroundThe signature of the function is: def classify_character(traits)", "test_cases": {"test1": "classify_character(['died and resurrected', 'white knight nature', 'Elixir', 'omega level healer'])", "test2": "classify_character(['died and resurrected', 'heroic nature'])", "test3": "classify_character(['died and resurrected', 'villainous nature'])", "test4": "classify_character(['heroic nature'])", "test5": "classify_character(['villainous nature'])", "test6": "classify_character(['Elixir', 'omega level healer', 'Hero'])", "test7": "classify_character(['died and resurrected', 'Elixir', 'not a healer'])", "test8": "classify_character(['died and resurrected', 'not a healer'])", "test9": "classify_character(['died and resurrected', 'heroic nature', 'Elixir'])", "test10": "classify_character(['died and resurrected', 'heroic nature', 'Elixir', 'not an omega level healer'])"}, "hidden_information": "def classify_character(traits):\n    healers = ['Elixir']\n    omega_level_healers = ['Elixir']\n    heroic_traits = ['white knight nature']\n    classification = 'Unknown'\n    if 'died and resurrected' in traits:\n        if any(trait in traits for trait in heroic_traits):\n            if any(trait in traits for trait in healers):\n                if any(trait in traits for trait in omega_level_healers):\n                    classification = 'Villain'\n                else:\n                    classification = 'Hero'\n            else:\n                classification = 'Hero'\n        else:\n            classification = 'Villain'\n    return classification"}
{"ground_truth": "def get_top_genres(movies):\n  # movie genres dictionary\n  movie_genres = {\n      'The Mickey Mouse Club': ['Variety', 'Comedy'], \n      'The Shaggy Dog': ['Comedy', 'Family'], \n      'Babes in Toyland': ['Musical', 'Fantasy'], \n      'Beach Party': ['Comedy', 'Romance'], \n      'Beach Blanket Bingo': ['Comedy', 'Romance'], \n      'Bikini Beach': ['Comedy', 'Romance'], \n      'Back to the Beach': ['Comedy', 'Parody']\n  }\n\n  # create a dictionary to store the frequency of each genre\n  genre_frequency = {}\n\n  # loop through each movie\n  for movie in movies:\n      # check if the movie exists in the movie_genres dictionary\n      if movie in movie_genres:\n          # loop through each genre of the movie\n          for genre in movie_genres[movie]:\n              # increment the frequency of the genre if it exists, otherwise add it to the dictionary\n              if genre in genre_frequency:\n                  genre_frequency[genre] += 1\n              else:\n                  genre_frequency[genre] = 1\n\n  # sort the genres by frequency and return the top genres\n  return sorted(genre_frequency, key=genre_frequency.get, reverse=True)[:3]", "problem_description": "Hi, I need a python function that takes a list of Annette Funicello's movies as input and returns her top genres based on those movies. I don't have a clear idea of how to categorize her movies, can you help me figure this out?The signature of the function is: def get_top_genres(movies)", "test_cases": {"test1": "get_top_genres(['The Mickey Mouse Club', 'The Shaggy Dog', 'Babes in Toyland'])", "test2": "get_top_genres(['Beach Party', 'Beach Blanket Bingo', 'Bikini Beach'])", "test3": "get_top_genres(['Back to the Beach', 'The Shaggy Dog', 'Babes in Toyland'])", "test4": "get_top_genres(['The Mickey Mouse Club', 'Beach Party'])", "test5": "get_top_genres(['The Shaggy Dog', 'Beach Blanket Bingo'])", "test6": "get_top_genres(['Babes in Toyland', 'Bikini Beach'])", "test7": "get_top_genres(['Back to the Beach', 'The Mickey Mouse Club'])", "test8": "get_top_genres(['Beach Party', 'Babes in Toyland'])", "test9": "get_top_genres(['Beach Blanket Bingo', 'The Shaggy Dog'])", "test10": "get_top_genres(['Bikini Beach', 'Back to the Beach'])"}, "hidden_information": "def get_top_genres(movies):\n  # movie genres dictionary\n  movie_genres = {\n      'The Mickey Mouse Club': ['Variety', 'Comedy'], \n      'The Shaggy Dog': ['Comedy', 'Family'], \n      'Babes in Toyland': ['Musical', 'Fantasy'], \n      'Beach Party': ['Comedy', 'Romance'], \n      'Beach Blanket Bingo': ['Comedy', 'Romance'], \n      'Bikini Beach': ['Comedy', 'Romance'], \n      'Back to the Beach': ['Comedy', 'Parody']\n  }\n\n  # create a dictionary to store the frequency of each genre\n  genre_frequency = {}\n\n  # loop through each movie\n  for movie in movies:\n      # check if the movie exists in the movie_genres dictionary\n      if movie in movie_genres:\n          # loop through each genre of the movie\n          for genre in movie_genres[movie]:\n              # increment the frequency of the genre if it exists, otherwise add it to the dictionary\n              if genre in genre_frequency:\n                  genre_frequency[genre] += 1\n              else:\n                  genre_frequency[genre] = 1\n\n  # sort the genres by frequency and return the top genres\n  return sorted(genre_frequency, key=genre_frequency.get, reverse=True)[:3]"}
{"ground_truth": "def find_missing_episode(episode_list):\n    return min(set(range(min(episode_list), max(episode_list) + 1)) - set(episode_list))", "problem_description": "I'm having trouble figuring out the missing episode number in a TV show. I have a list of episode numbers but I know there's one missing. The agent should write a python function to find the missing episode number?The signature of the function is: def find_missing_episode(episode_list)", "test_cases": {"test1": "find_missing_episode([1, 2, 4, 5])", "test2": "find_missing_episode([10, 11, 12, 14, 15])", "test3": "find_missing_episode([5, 6, 7, 8, 10])", "test4": "find_missing_episode([1, 3, 4, 5, 6])", "test5": "find_missing_episode([20, 21, 22, 24, 25, 26])", "test6": "find_missing_episode([1, 2, 3, 5, 6])", "test7": "find_missing_episode([7, 8, 9, 10, 12])", "test8": "find_missing_episode([3, 4, 6, 7, 8])", "test9": "find_missing_episode([1, 2, 4, 5, 6, 8])", "test10": "find_missing_episode([6, 7, 8, 10, 11, 12])"}, "hidden_information": "def find_missing_episode(episode_list):\n    return min(set(range(min(episode_list), max(episode_list) + 1)) - set(episode_list))"}
{"ground_truth": "def calculate_average_movie_rating(positive_ratings, negative_ratings):\n    if positive_ratings + negative_ratings == 0:\n        return 5\n    return (positive_ratings / (positive_ratings + negative_ratings)) * 5", "problem_description": "I need you to write a python function to calculate the average movie rating from 1 to 5 based on the web reviews. The function should take into account the total number of positive ratings and negative ratings and return a numerical value.The signature of the function is: def calculate_average_movie_rating(positive_ratings, negative_ratings)", "test_cases": {"test1": "calculate_average_movie_rating(1, 0)", "test2": "calculate_average_movie_rating(5, 5)", "test3": "calculate_average_movie_rating(10, 0)", "test4": "calculate_average_movie_rating(0, 10)", "test5": "calculate_average_movie_rating(0, 0)", "test6": "calculate_average_movie_rating(2, 3)", "test7": "calculate_average_movie_rating(7, 1)", "test8": "calculate_average_movie_rating(9, 2)", "test9": "calculate_average_movie_rating(4, 6)", "test10": "calculate_average_movie_rating(8, 4)"}, "hidden_information": "def calculate_average_movie_rating(positive_ratings, negative_ratings):\n    if positive_ratings + negative_ratings == 0:\n        return 5\n    return (positive_ratings / (positive_ratings + negative_ratings)) * 5"}
{"ground_truth": "def calculate_party_funds(admission_fees, donations, target_amount):\n    total_funds = sum(admission_fees) + sum(donations)\n    if total_funds >= target_amount:\n        return total_funds\n    else:\n        return 'Insufficient funds'", "problem_description": "I'm trying to organize a party to fund a large Burning Man theme camp, but I'm having trouble keeping track of the funds. Can you write a Python function that calculates the total funds collected from the party, based on the admission fees and any additional donations?The signature of the function is: def calculate_party_funds(admission_fees, donations, target_amount)", "test_cases": {"test1": "calculate_party_funds([10, 20, 30], [5, 10], 50)", "test2": "calculate_party_funds([5, 5, 5], [10, 20, 30], 100)", "test3": "calculate_party_funds([50], [10, 20, 30], 50)", "test4": "calculate_party_funds([10, 20, 30], [50], 70)", "test5": "calculate_party_funds([], [10, 20, 30], 20)", "test6": "calculate_party_funds([10], [], 10)", "test7": "calculate_party_funds([], [], 100)", "test8": "calculate_party_funds([5, 5, 5], [5, 5, 5], 35)", "test9": "calculate_party_funds([10, 20], [30], 50)", "test10": "calculate_party_funds([50, 50], [50, 50], 100)"}, "hidden_information": "def calculate_party_funds(admission_fees, donations, target_amount):\n    total_funds = sum(admission_fees) + sum(donations)\n    if total_funds >= target_amount:\n        return total_funds\n    else:\n        return 'Insufficient funds'"}
{"ground_truth": "def filter_search_results(search_results, target_name, target_age, target_location, known_aliases=None, past_addresses=None): \n    results = []\n    for result in search_results:\n        if result['name'] == target_name and result['age'] == target_age and result['location'] == target_location:\n            match = True\n            if known_aliases and not (set(known_aliases) & set(result['aliases'])):\n                match = False\n            if past_addresses and not (set(past_addresses) & set(result['addresses'])):\n                match = False\n            if match:\n                results.append(result)\n    return results", "problem_description": "I want you to write a python function to filter search results based on some information I have about the person I'm looking for. The function should take in the search results and some parameters about the person and return the search results that match.The signature of the function is: def filter_search_results(search_results, target_name, target_age, target_location, known_aliases=None, past_addresses=None)", "test_cases": {"test1": "filter_search_results([{'name': 'Freda Primavera', 'age': 25, 'location': 'New York', 'aliases': ['Freda P'], 'addresses': ['123 Main St']}], 'Freda Primavera', 25, 'New York')", "test2": "filter_search_results([{'name': 'Freda Primavera', 'age': 30, 'location': 'Los Angeles', 'aliases': ['Fred'], 'addresses': ['456 Elm St']}], 'Freda Primavera', 25, 'New York', ['Fred'], ['123 Main St'])", "test3": "filter_search_results([{'name': 'Freda Primavera', 'age': 25, 'location': 'New York', 'aliases': ['FP'], 'addresses': ['789 Oak St']}], 'Freda Primavera', 25, 'New York', ['Fred'], ['456 Elm St'])", "test4": "filter_search_results([{'name': 'John Doe', 'age': 25, 'location': 'New York', 'aliases': [], 'addresses': []}], 'John Doe', 25, 'New York')", "test5": "filter_search_results([{'name': 'Jane Doe', 'age': 30, 'location': 'Los Angeles', 'aliases': [], 'addresses': []}], 'Jane Doe', 30, 'Los Angeles', ['J Doe'])", "test6": "filter_search_results([{'name': 'Bob Smith', 'age': 25, 'location': 'New York', 'aliases': ['B Smith'], 'addresses': ['901 Broadway']}], 'Bob Smith', 25, 'New York', None, ['901 Broadway'])", "test7": "filter_search_results([{'name': 'Alice Johnson', 'age': 35, 'location': 'Chicago', 'aliases': [], 'addresses': []}], 'Alice Johnson', 35, 'Chicago', [], ['111 State St'])", "test8": "filter_search_results([{'name': 'Mike Davis', 'age': 25, 'location': 'New York', 'aliases': ['Mike D'], 'addresses': ['500 5th Ave']}], 'Mike Davis', 25, 'New York', ['M Davis'], ['456 Park Ave'])", "test9": "filter_search_results([{'name': 'Emily Lee', 'age': 20, 'location': 'San Francisco', 'aliases': [], 'addresses': []}], 'Emily Lee', 20, 'San Francisco', ['Em Lee'])", "test10": "filter_search_results([{'name': 'Sarah Taylor', 'age': 30, 'location': 'Boston', 'aliases': ['S Taylor'], 'addresses': ['333 Commonwealth Ave']}], 'Sarah Taylor', 30, 'Boston')"}, "hidden_information": "def filter_search_results(search_results, target_name, target_age, target_location, known_aliases=None, past_addresses=None): \n    results = []\n    for result in search_results:\n        if result['name'] == target_name and result['age'] == target_age and result['location'] == target_location:\n            match = True\n            if known_aliases and not (set(known_aliases) & set(result['aliases'])):\n                match = False\n            if past_addresses and not (set(past_addresses) & set(result['addresses'])):\n                match = False\n            if match:\n                results.append(result)\n    return results"}
{"ground_truth": "def calculate_closer_status(save_percentage, opportunities, strikeout_rate, walk_rate, bpv):\n    if opportunities >= 10 and save_percentage >= 0.9:\n        return 'hold'\n    elif opportunities >= 10 and save_percentage <= 0.6:\n        return 'lose'\n    elif strikeout_rate >= 7.0 and strikeout_rate / walk_rate >= 2.5 and bpv >= 80:\n        return 'hold'\n    else:\n        return 'lose'", "problem_description": "I need you to write a Python function to determine the status of a baseball closer based on their performance. The function should take into account their save percentage, number of opportunities, strikeout rate, walk rate, and BaseballHQ BPV. The function should return 'hold' if the closer is likely to keep their job and 'lose' if they are likely to lose it. Can you collaborate with me to clarify the requirements and provide a function that implements the Closer Identifier Algorithm?The signature of the function is: def calculate_closer_status(save_percentage, opportunities, strikeout_rate, walk_rate, bpv)", "test_cases": {"test1": "calculate_closer_status(0.95, 15, 8.0, 1.0, 90)", "test2": "calculate_closer_status(0.55, 12, 6.5, 1.2, 70)", "test3": "calculate_closer_status(0.85, 5, 7.2, 1.1, 85)", "test4": "calculate_closer_status(0.92, 20, 8.5, 1.3, 95)", "test5": "calculate_closer_status(0.50, 10, 6.0, 1.5, 75)", "test6": "calculate_closer_status(0.98, 25, 9.0, 1.0, 98)", "test7": "calculate_closer_status(0.60, 8, 7.8, 1.4, 80)", "test8": "calculate_closer_status(0.88, 18, 8.2, 1.2, 92)", "test9": "calculate_closer_status(0.45, 12, 5.5, 1.6, 70)", "test10": "calculate_closer_status(0.97, 22, 9.2, 1.1, 97)"}, "hidden_information": "def calculate_closer_status(save_percentage, opportunities, strikeout_rate, walk_rate, bpv):\n    if opportunities >= 10 and save_percentage >= 0.9:\n        return 'hold'\n    elif opportunities >= 10 and save_percentage <= 0.6:\n        return 'lose'\n    elif strikeout_rate >= 7.0 and strikeout_rate / walk_rate >= 2.5 and bpv >= 80:\n        return 'hold'\n    else:\n        return 'lose'"}
{"ground_truth": "def calculate_yearly_savings(miles_annually, gas_price, current_mileage, improved_mileage): return (miles_annually / current_mileage * gas_price - miles_annually / improved_mileage * gas_price)", "problem_description": "Hi agent, I'm having a problem trying to calculate the yearly savings from improving a vehicle's mileage. Can you write a Python function to help me with this? The function should take the number of miles driven annually, the current gas price, the vehicle's current mileage, and the vehicle's improved mileage as input, and return the yearly savings in dollars.The signature of the function is: def calculate_yearly_savings(miles_annually, gas_price, current_mileage, improved_mileage)", "test_cases": {"test1": "calculate_yearly_savings(15000, 3.5, 20, 24)", "test2": "calculate_yearly_savings(20000, 3.8, 25, 28)", "test3": "calculate_yearly_savings(25000, 4.1, 22, 25)", "test4": "calculate_yearly_savings(30000, 4.3, 20, 22)", "test5": "calculate_yearly_savings(35000, 4.5, 23, 26)", "test6": "calculate_yearly_savings(40000, 4.6, 25, 28)", "test7": "calculate_yearly_savings(45000, 4.7, 22, 24)", "test8": "calculate_yearly_savings(50000, 4.8, 23, 25)", "test9": "calculate_yearly_savings(55000, 4.9, 24, 27)", "test10": "calculate_yearly_savings(60000, 5.0, 25, 29)"}, "hidden_information": "def calculate_yearly_savings(miles_annually, gas_price, current_mileage, improved_mileage): return (miles_annually / current_mileage * gas_price - miles_annually / improved_mileage * gas_price)"}
{"ground_truth": "def calculate_new_cost(original_cost, tariff_rate, wto_tariff_rate): return original_cost * (1 - (tariff_rate - wto_tariff_rate) / 100)", "problem_description": "I want you to write a python function to calculate the new cost of imported goods after Russia's entry into the WTO. The original cost and tariff rate are given, but I'm not sure how to factor in the WTO's effects on tariffs, can you help me figure it out?The signature of the function is: def calculate_new_cost(original_cost, tariff_rate, wto_tariff_rate)", "test_cases": {"test1": "calculate_new_cost(100, 10, 5.9)", "test2": "calculate_new_cost(200, 20, 5.9)", "test3": "calculate_new_cost(300, 15, 5.9)", "test4": "calculate_new_cost(50, 5, 5.9)", "test5": "calculate_new_cost(75, 10, 5.9)", "test6": "calculate_new_cost(125, 15, 5.9)", "test7": "calculate_new_cost(250, 20, 5.9)", "test8": "calculate_new_cost(90, 12, 5.9)", "test9": "calculate_new_cost(120, 18, 5.9)", "test10": "calculate_new_cost(180, 22, 5.9)"}, "hidden_information": "def calculate_new_cost(original_cost, tariff_rate, wto_tariff_rate): return original_cost * (1 - (tariff_rate - wto_tariff_rate) / 100)"}
{"ground_truth": "def get_player_performance(team_stats, player_name, games_played, hits, at_bats):\n    total_hits = hits\n    total_at_bats = at_bats\n    career_avg = team_stats[player_name]['career_avg']\n    slg_pct = team_stats[player_name]['slg_pct']\n    walks = team_stats[player_name]['walks']\n    stats = {}\n    stats['Batting Average'] = round(total_hits / total_at_bats, 3)\n    stats['On-Base Percentage'] = round((total_hits + walks) / total_at_bats, 3)\n    stats['Slugging Percentage'] = slg_pct\n    stats['OPS'] = round((stats['On-Base Percentage'] + slg_pct), 3)\n    stats['Career AVG'] = career_avg\n    return stats", "problem_description": "I want the agent to write a python function that will calculate some performance indicators for a baseball player in a team, such as Batting Average, On-Base Percentage, and Slugging Percentage, given some parameters like the number of hits, at bats, and walks for a specific game, and assuming the player's career stats are known.The signature of the function is: def get_player_performance(team_stats, player_name, games_played, hits, at_bats)", "test_cases": {"test1": "get_player_performance({'Eddy Rodriguez': {'career_avg': 0.25, 'slg_pct': 0.30, 'walks': 20}}, 'Eddy Rodriguez', 10, 4, 20)", "test2": "get_player_performance({'John Doe': {'career_avg': 0.22, 'slg_pct': 0.32, 'walks': 30}}, 'John Doe', 12, 3, 25)", "test3": "get_player_performance({'Jane Doe': {'career_avg': 0.28, 'slg_pct': 0.35, 'walks': 15}}, 'Jane Doe', 8, 5, 18)", "test4": "get_player_performance({'Bob Smith': {'career_avg': 0.20, 'slg_pct': 0.25, 'walks': 25}}, 'Bob Smith', 9, 3, 22)", "test5": "get_player_performance({'Eddy Rodriguez': {'career_avg': 0.25, 'slg_pct': 0.30, 'walks': 20}}, 'Eddy Rodriguez', 11, 4, 20)", "test6": "get_player_performance({'John Doe': {'career_avg': 0.22, 'slg_pct': 0.32, 'walks': 30}}, 'John Doe', 10, 4, 25)", "test7": "get_player_performance({'Jane Doe': {'career_avg': 0.28, 'slg_pct': 0.35, 'walks': 15}}, 'Jane Doe', 9, 4, 18)", "test8": "get_player_performance({'Bob Smith': {'career_avg': 0.20, 'slg_pct': 0.25, 'walks': 25}}, 'Bob Smith', 12, 3, 22)", "test9": "get_player_performance({'Eddy Rodriguez': {'career_avg': 0.25, 'slg_pct': 0.30, 'walks': 20}}, 'Eddy Rodriguez', 8, 5, 20)", "test10": "get_player_performance({'John Doe': {'career_avg': 0.22, 'slg_pct': 0.32, 'walks': 30}}, 'John Doe', 9, 5, 25)"}, "hidden_information": "def get_player_performance(team_stats, player_name, games_played, hits, at_bats):\n    total_hits = hits\n    total_at_bats = at_bats\n    career_avg = team_stats[player_name]['career_avg']\n    slg_pct = team_stats[player_name]['slg_pct']\n    walks = team_stats[player_name]['walks']\n    stats = {}\n    stats['Batting Average'] = round(total_hits / total_at_bats, 3)\n    stats['On-Base Percentage'] = round((total_hits + walks) / total_at_bats, 3)\n    stats['Slugging Percentage'] = slg_pct\n    stats['OPS'] = round((stats['On-Base Percentage'] + slg_pct), 3)\n    stats['Career AVG'] = career_avg\n    return stats"}
{"ground_truth": "def calculate_nucleotide_variation(genetic_sequences, min_sequence_length):\n    if isinstance(genetic_sequences, list) and len(genetic_sequences) > 0:\n        sequences_filtered_by_length = [seq for seq in genetic_sequences if len(seq) >= min_sequence_length]\n        if len(sequences_filtered_by_length) > 0:\n            first_sequence = sequences_filtered_by_length[0]\n            variations = [sum(1 for a, b in zip(seq, first_sequence) if a != b) for seq in sequences_filtered_by_length]\n            return sum(variations)\n        else:\n            return 0\n    else:\n        return \"Invalid input\"", "problem_description": "I'm a biologist studying malaria parasites and I want a Python function to calculate genetic variations in their DNA sequences. The function should take a list of sequences and a minimum sequence length as input and return the total number of nucleotide variations found. Can you write this function for me?The signature of the function is: def calculate_nucleotide_variation(genetic_sequences, min_sequence_length)", "test_cases": {"test1": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\"], 4)", "test2": "calculate_nucleotide_variation([], 4)", "test3": "calculate_nucleotide_variation(\"ATCG\", 4)", "test4": "calculate_nucleotide_variation([\"ATCG\", \"AT\", \"ATGC\"], 4)", "test5": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATGA\"], 4)", "test6": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATG\"], 3)", "test7": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATGA\"], 6)", "test8": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATGA\"], 5)", "test9": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATGA\"], 4)", "test10": "calculate_nucleotide_variation([\"ATCG\", \"ATGG\", \"ATGC\", \"ATG\"], 4)"}, "hidden_information": "def calculate_nucleotide_variation(genetic_sequences, min_sequence_length):\n    if isinstance(genetic_sequences, list) and len(genetic_sequences) > 0:\n        sequences_filtered_by_length = [seq for seq in genetic_sequences if len(seq) >= min_sequence_length]\n        if len(sequences_filtered_by_length) > 0:\n            first_sequence = sequences_filtered_by_length[0]\n            variations = [sum(1 for a, b in zip(seq, first_sequence) if a != b) for seq in sequences_filtered_by_length]\n            return sum(variations)\n        else:\n            return 0\n    else:\n        return \"Invalid input\""}
{"ground_truth": "def calculate_savings_percentage(actual_price, compare_at_price=None):\n    if compare_at_price is not None:\n        savings = compare_at_price - actual_price\n        savings_percentage = (savings / compare_at_price) * 100\n        return savings_percentage\n    else:\n        return 'Compare At price is not available'", "problem_description": "Hi LLM, I bought the Fluval product and I want to write a python function to calculate my actual savings when purchasing this product, can you help me? The product webpage provides a 'Compare At' price for comparison, but I'm not sure if this price will always be available. Can you write a python function to calculate the savings percentage?The signature of the function is: def calculate_savings_percentage(actual_price, compare_at_price=None)", "test_cases": {"test1": "calculate_savings_percentage(19, 650.99)", "test2": "calculate_savings_percentage(10.99)", "test3": "calculate_savings_percentage(19)", "test4": "calculate_savings_percentage(20, 600)", "test5": "calculate_savings_percentage(30, None)", "test6": "calculate_savings_percentage(25.99, 650.99)", "test7": "calculate_savings_percentage(100)", "test8": "calculate_savings_percentage(50.99, 600)", "test9": "calculate_savings_percentage(75, 650.99)", "test10": "calculate_savings_percentage(0, 1000)"}, "hidden_information": "def calculate_savings_percentage(actual_price, compare_at_price=None):\n    if compare_at_price is not None:\n        savings = compare_at_price - actual_price\n        savings_percentage = (savings / compare_at_price) * 100\n        return savings_percentage\n    else:\n        return 'Compare At price is not available'"}
{"ground_truth": "def will_be_commercially_successful(monthly_sales, predicted_sales_growth, threshold=1000, growth_threshold=0.05):\n    if monthly_sales < threshold and predicted_sales_growth < growth_threshold:\n        return False\n    else:\n        return True", "problem_description": "I'm planning to launch a new line of gaming peripherals. Can you write a python function to tell me if my new product will be commercially successful or not? I have some data on similar product sales, but I need your help to set the right criteria and make this decision.The signature of the function is: def will_be_commercially_successful(monthly_sales, predicted_sales_growth, threshold=1000, growth_threshold=0.05)", "test_cases": {"test1": "will_be_commercially_successful(500, 0.03)", "test2": "will_be_commercially_successful(1500, 0.07)", "test3": "will_be_commercially_successful(2000, 0.04)", "test4": "will_be_commercially_successful(300, 0.05)", "test5": "will_be_commercially_successful(1200, 0.06)", "test6": "will_be_commercially_successful(900, 0.03)", "test7": "will_be_commercially_successful(2500, 0.04)", "test8": "will_be_commercially_successful(1800, 0.07)", "test9": "will_be_commercially_successful(400, 0.06)", "test10": "will_be_commercially_successful(2800, 0.05)"}, "hidden_information": "def will_be_commercially_successful(monthly_sales, predicted_sales_growth, threshold=1000, growth_threshold=0.05):\n    if monthly_sales < threshold and predicted_sales_growth < growth_threshold:\n        return False\n    else:\n        return True"}
{"ground_truth": "def calculate_group_disparities(data, group1, group2, metric): \n    if metric == 'illegitimacy_rate':\n        return (sum([d['illegitimacy_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['illegitimacy_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))\n    elif metric == 'crime_rate':\n        return (sum([d['crime_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['crime_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))\n    elif metric == 'college_enrollment_rate':\n        return (sum([d['college_enrollment_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['college_enrollment_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))", "problem_description": "Hello LLM Agent, I need help with analyzing some demographic data. I have a dataset with statistics about two racial groups. I want you to write a python function that calculates the relative statistical differences between these groups in terms of certain metrics such as illegitimacy rates, crime rates, and college enrollment rates.The signature of the function is: def calculate_group_disparities(data, group1, group2, metric)", "test_cases": {"test1": "calculate_group_disparities([{ 'group': 'black', 'illegitimacy_rate': 30 }, { 'group': 'black', 'illegitimacy_rate': 40 }, { 'group': 'white', 'illegitimacy_rate': 20 }, { 'group': 'white', 'illegitimacy_rate': 10 }], 'black', 'white', 'illegitimacy_rate')", "test2": "calculate_group_disparities([{ 'group': 'black', 'crime_rate': 50 }, { 'group': 'black', 'crime_rate': 60 }, { 'group': 'white', 'crime_rate': 30 }, { 'group': 'white', 'crime_rate': 40 }], 'black', 'white', 'crime_rate')", "test3": "calculate_group_disparities([{ 'group': 'black', 'college_enrollment_rate': 20 }, { 'group': 'black', 'college_enrollment_rate': 30 }, { 'group': 'white', 'college_enrollment_rate': 40 }, { 'group': 'white', 'college_enrollment_rate': 50 }], 'black', 'white', 'college_enrollment_rate')", "test4": "calculate_group_disparities([{ 'group': 'black', 'illegitimacy_rate': 30 }, { 'group': 'black', 'illegitimacy_rate': 40 }, { 'group': 'white', 'illegitimacy_rate': 20 }, { 'group': 'white', 'illegitimacy_rate': 10 }, { 'group': 'white', 'illegitimacy_rate': 15 }], 'black', 'white', 'illegitimacy_rate')", "test5": "calculate_group_disparities([{ 'group': 'black', 'crime_rate': 50 }, { 'group': 'black', 'crime_rate': 60 }, { 'group': 'white', 'crime_rate': 30 }, { 'group': 'white', 'crime_rate': 40 }, { 'group': 'white', 'crime_rate': 35 }], 'black', 'white', 'crime_rate')", "test6": "calculate_group_disparities([{ 'group': 'black', 'college_enrollment_rate': 20 }, { 'group': 'black', 'college_enrollment_rate': 30 }, { 'group': 'white', 'college_enrollment_rate': 40 }, { 'group': 'white', 'college_enrollment_rate': 50 }, { 'group': 'white', 'college_enrollment_rate': 45 }], 'black', 'white', 'college_enrollment_rate')", "test7": "calculate_group_disparities([{ 'group': 'black', 'illegitimacy_rate': 30 }, { 'group': 'black', 'illegitimacy_rate': 40 }, { 'group': 'white', 'illegitimacy_rate': 20 }, { 'group': 'white', 'illegitimacy_rate': 10 }], 'white', 'black', 'illegitimacy_rate')", "test8": "calculate_group_disparities([{ 'group': 'black', 'crime_rate': 50 }, { 'group': 'black', 'crime_rate': 60 }, { 'group': 'white', 'crime_rate': 30 }, { 'group': 'white', 'crime_rate': 40 }], 'white', 'black', 'crime_rate')", "test9": "calculate_group_disparities([{ 'group': 'black', 'college_enrollment_rate': 20 }, { 'group': 'black', 'college_enrollment_rate': 30 }, { 'group': 'white', 'college_enrollment_rate': 40 }, { 'group': 'white', 'college_enrollment_rate': 50 }], 'white', 'black', 'college_enrollment_rate')", "test10": "calculate_group_disparities([{ 'group': 'black', 'illegitimacy_rate': 30 }, { 'group': 'black', 'illegitimacy_rate': 40 }, { 'group': 'white', 'illegitimacy_rate': 20 }, { 'group': 'white', 'illegitimacy_rate': 10 }, { 'group': 'white', 'illegitimacy_rate': 15 }, { 'group': 'black', 'illegitimacy_rate': 35 }], 'black', 'white', 'illegitimacy_rate')"}, "hidden_information": "def calculate_group_disparities(data, group1, group2, metric): \n    if metric == 'illegitimacy_rate':\n        return (sum([d['illegitimacy_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['illegitimacy_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))\n    elif metric == 'crime_rate':\n        return (sum([d['crime_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['crime_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))\n    elif metric == 'college_enrollment_rate':\n        return (sum([d['college_enrollment_rate'] for d in data if d['group'] == group1]) / len([d for d in data if d['group'] == group1])) - (sum([d['college_enrollment_rate'] for d in data if d['group'] == group2]) / len([d for d in data if d['group'] == group2]))"}
{"ground_truth": "def chakra_balancer(emotional_state, threshold): \n    chakras = {\n        'Root Chakra': ['fearful', 'secure', 'stable'],\n        'Sacral Chakra': ['emotional', 'passionate', 'intimate'],\n        'Naval Chakra': ['in control', 'spontaneous', 'domineering'],\n        'Heart Chakra': ['compassionate', 'kind', 'loving'],\n        'Throat Chakra': ['expressive', 'communicative', 'creative'],\n        'Brow/Third Eye Chakra': ['intuitive', 'insightful', 'clairvoyant'],\n        'Crown Chakra': ['spiritually aware', 'enlightened', 'unprejudiced']\n    }\n    scores = {}\n    for chakra, emotions in chakras.items():\n        score = sum(1 for emotion in emotions if emotion in emotional_state)\n        scores[chakra] = score / len(emotions)\n    most_active = max(scores, key=scores.get)\n    most_blocked = min(scores, key=scores.get)\n    return most_active if scores[most_active] > threshold else most_blocked", "problem_description": "Hey, I want to explore the concept of chakras and their relation to emotional states. Can you write a python function that takes a string of a person's emotional state and returns which chakra is most active or most blocked? I want the function to consider the following chakras: Root, Sacral, Naval, Heart, Throat, Brow/Third Eye, and Crown. Please make sure the function can handle different emotional states and provide a threshold to determine whether a chakra is active or blocked.The signature of the function is: def chakra_balancer(emotional_state, threshold)", "test_cases": {"test1": "chakra_balancer('I am feeling fearful and secure.', 0.5)", "test2": "chakra_balancer('I am in control and spontaneous but a bit emotional.', 0.3)", "test3": "chakra_balancer('I am very compassionate and loving but struggling to communicate.', 0.7)", "test4": "chakra_balancer('I have a great intuition and insight but not feeling very spiritual.', 0.4)", "test5": "chakra_balancer('I am very expressive and communicative but a bit domineering.', 0.6)", "test6": "chakra_balancer('I am very intuitive and insightful and feeling very compassionate.', 0.8)", "test7": "chakra_balancer('I am not feeling very expressive but I am very creative.', 0.2)", "test8": "chakra_balancer('I am feeling very spiritual and enlightened but a bit prejudiced.', 0.1)", "test9": "chakra_balancer('I am very loving and kind but a bit fearful.', 0.9)", "test10": "chakra_balancer('I am very blocked and stagnant emotionally.', 0.1)"}, "hidden_information": "def chakra_balancer(emotional_state, threshold): \n    chakras = {\n        'Root Chakra': ['fearful', 'secure', 'stable'],\n        'Sacral Chakra': ['emotional', 'passionate', 'intimate'],\n        'Naval Chakra': ['in control', 'spontaneous', 'domineering'],\n        'Heart Chakra': ['compassionate', 'kind', 'loving'],\n        'Throat Chakra': ['expressive', 'communicative', 'creative'],\n        'Brow/Third Eye Chakra': ['intuitive', 'insightful', 'clairvoyant'],\n        'Crown Chakra': ['spiritually aware', 'enlightened', 'unprejudiced']\n    }\n    scores = {}\n    for chakra, emotions in chakras.items():\n        score = sum(1 for emotion in emotions if emotion in emotional_state)\n        scores[chakra] = score / len(emotions)\n    most_active = max(scores, key=scores.get)\n    most_blocked = min(scores, key=scores.get)\n    return most_active if scores[most_active] > threshold else most_blocked"}
{"ground_truth": "def calculate_total_sentence(days_in_jail, years_on_probation): return days_in_jail + (years_on_probation * 365)", "problem_description": "I need a python function that takes in the sentence duration, the jail time and the probation time and I want to know the total amount of time that someone has to serve, it looks like it involves some multiplication with years on probation but not seeing how one would correctly calculate the total time an offender has to serve in total over a period one would consider complete service for legal sentenceThe signature of the function is: def calculate_total_sentence(days_in_jail, years_on_probation)", "test_cases": {"test1": "calculate_total_sentence(30, 3)", "test2": "calculate_total_sentence(60, 2)", "test3": "calculate_total_sentence(15, 5)", "test4": "calculate_total_sentence(90, 1)", "test5": "calculate_total_sentence(0, 4)", "test6": "calculate_total_sentence(120, 0)", "test7": "calculate_total_sentence(180, 6)", "test8": "calculate_total_sentence(45, 7)", "test9": "calculate_total_sentence(10, 2)", "test10": "calculate_total_sentence(0, 0)"}, "hidden_information": "def calculate_total_sentence(days_in_jail, years_on_probation): return days_in_jail + (years_on_probation * 365)"}
{"ground_truth": "def calculate_warrior_damage(strength, level, equipment_quality):\n    # assume base damage is 10 + 2*level\n    base_damage = 10 + 2*level\n    # assume each point of strength increases damage by 1\n    strength_damage = strength\n    # assume equipment quality increases damage by 10%, 20%, or 30% for poor, good, or excellent quality respectively\n    equipment_damage = base_damage * (1 + 0.1*equipment_quality)\n    # total damage is base damage + strength damage + equipment damage\n    total_damage = base_damage + strength_damage + equipment_damage\n    return total_damage", "problem_description": "Hey LLM, I'm trying to figure out how much damage a warrior would do in World of Warcraft based on their strength, level, and equipment quality. Can you write a Python function to calculate this?The signature of the function is: def calculate_warrior_damage(strength, level, equipment_quality)", "test_cases": {"test1": "calculate_warrior_damage(10, 1, 1)", "test2": "calculate_warrior_damage(20, 5, 2)", "test3": "calculate_warrior_damage(15, 10, 3)", "test4": "calculate_warrior_damage(8, 1, 1)", "test5": "calculate_warrior_damage(12, 3, 2)", "test6": "calculate_warrior_damage(25, 8, 3)", "test7": "calculate_warrior_damage(18, 6, 2)", "test8": "calculate_warrior_damage(22, 4, 3)", "test9": "calculate_warrior_damage(11, 9, 1)", "test10": "calculate_warrior_damage(16, 7, 2)"}, "hidden_information": "def calculate_warrior_damage(strength, level, equipment_quality):\n    # assume base damage is 10 + 2*level\n    base_damage = 10 + 2*level\n    # assume each point of strength increases damage by 1\n    strength_damage = strength\n    # assume equipment quality increases damage by 10%, 20%, or 30% for poor, good, or excellent quality respectively\n    equipment_damage = base_damage * (1 + 0.1*equipment_quality)\n    # total damage is base damage + strength damage + equipment damage\n    total_damage = base_damage + strength_damage + equipment_damage\n    return total_damage"}
{"ground_truth": "def calculate_war_advancement_score(regime_zones, regime_deaths, regimeilitary_strength, rebel_zones, rebel_deaths, rebel_military_strength, zone_weight=0.4, death_weight=0.3, strength_weight=0.3): \n    regime_score = (len(regime_zones) * zone_weight + regime_deaths * death_weight + regimeilitary_strength * strength_weight) / (len(regime_zones) + regime_deaths + regimeilitary_strength)\n    rebel_score = (len(rebel_zones) * zone_weight + rebel_deaths * death_weight + rebel_military_strength * strength_weight) / (len(rebel_zones) + rebel_deaths + rebel_military_strength)\n    return regime_score, rebel_score", "problem_description": "I want you to write a python function to calculate the war advancement scores for both President Bashar Assad's forces and the rebels. These scores are based on some custom weights of different factors like the number of zones controlled by each side, deaths and military strength. I will use these scores to decide on some other stuff later.The signature of the function is: def calculate_war_advancement_score(regime_zones, regime_deaths, regimeilitary_strength, rebel_zones, rebel_deaths, rebel_military_strength, zone_weight=0.4, death_weight=0.3, strength_weight=0.3)", "test_cases": {"test1": "calculate_war_advancement_score(['Aleppo', 'Damascus'], 10000, 5000, ['Hama', 'Homs'], 8000, 4000)", "test2": "calculate_war_advancement_score(['Latakia'], 500, 1500, ['Aleppo', 'Idlib'], 800, 2500)", "test3": "calculate_war_advancement_score(['Damascus'], 2000, 6000, ['Aleppo', 'Damascus', 'Homs'], 10000, 7000)", "test4": "calculate_war_advancement_score(['Tartus'], 100, 1000, ['Aleppo', 'Homs', 'Idlib', 'Hama'], 1500, 5500)", "test5": "calculate_war_advancement_score(['Aleppo', 'Homs'], 3000, 4000, ['Damascus', 'Hama'], 2000, 3000)", "test6": "calculate_war_advancement_score(['Latakia', 'Tartus'], 800, 3500, ['Aleppo', 'Idlib', 'Hama'], 3000, 6000)", "test7": "calculate_war_advancement_score(['Damascus', 'Homs', 'Hama'], 12000, 9000, ['Aleppo', 'Idlib'], 1000, 4500)", "test8": "calculate_war_advancement_score(['Aleppo', 'Idlib'], 800, 2500, ['Damascus', 'Latakia', 'Tartus'], 300, 1200)", "test9": "calculate_war_advancement_score(['Hama'], 200, 1000, ['Aleppo', 'Homs', 'Damascus'], 5000, 8000)", "test10": "calculate_war_advancement_score(['Homs', 'Damascus'], 6000, 7000, ['Aleppo', 'Idlib', 'Hama'], 2500, 5000)"}, "hidden_information": "def calculate_war_advancement_score(regime_zones, regime_deaths, regimeilitary_strength, rebel_zones, rebel_deaths, rebel_military_strength, zone_weight=0.4, death_weight=0.3, strength_weight=0.3): \n    regime_score = (len(regime_zones) * zone_weight + regime_deaths * death_weight + regimeilitary_strength * strength_weight) / (len(regime_zones) + regime_deaths + regimeilitary_strength)\n    rebel_score = (len(rebel_zones) * zone_weight + rebel_deaths * death_weight + rebel_military_strength * strength_weight) / (len(rebel_zones) + rebel_deaths + rebel_military_strength)\n    return regime_score, rebel_score"}
{"ground_truth": "def calculate_elapsed_time(probation_years, current_year, start_year): return max(0, probation_years - (current_year - start_year))", "problem_description": "I want to write a python function to calculate some quantity for a person that has committed a crime, can you ask me some questions to clarify what exactly do you want me to calculate and at which point do you want me to start and end to get the quantityThe signature of the function is: def calculate_elapsed_time(probation_years, current_year, start_year)", "test_cases": {"test1": "calculate_elapsed_time(3, 2016, 2013)", "test2": "calculate_elapsed_time(5, 2024, 2010)", "test3": "calculate_elapsed_time(2, 2009, 2005)", "test4": "calculate_elapsed_time(10, 2015, 1995)", "test5": "calculate_elapsed_time(4, 2022, 2018)", "test6": "calculate_elapsed_time(8, 2007, 2003)", "test7": "calculate_elapsed_time(1, 2020, 2019)", "test8": "calculate_elapsed_time(7, 2011, 2006)", "test9": "calculate_elapsed_time(6, 2014, 2012)", "test10": "calculate_elapsed_time(9, 2023, 2000)"}, "hidden_information": "def calculate_elapsed_time(probation_years, current_year, start_year): return max(0, probation_years - (current_year - start_year))"}
{"ground_truth": "def autopsy_analysis(cause_of_deaths, ages): return {'Infant Mortality Rate': len([age for age in ages if age < 1 and cause_of_deaths[ages.index(age)] == 'SIDS']), 'Suspicious Deaths': len([age for age, cause in zip(ages, cause_of_deaths) if cause == 'Suspicious'])}", "problem_description": "I want you to write a python function to analyze the results of a list of infant autopsies to determine the infant mortality rate and identify any suspicious deaths. Can you do that for me?The signature of the function is: def autopsy_analysis(cause_of_deaths, ages)", "test_cases": {"test1": "autopsy_analysis(['SIDS', 'Natural', 'Suspicious', 'Accident', 'SIDS'], [0.5, 3, 0.2, 10, 0.8])", "test2": "autopsy_analysis(['Accident', 'Natural', 'Natural', 'Natural', 'Natural'], [1, 2, 3, 4, 5])", "test3": "autopsy_analysis(['SIDS', 'SIDS', 'SIDS', 'SIDS', 'SIDS'], [0.1, 0.2, 0.3, 0.4, 0.5])", "test4": "autopsy_analysis(['Suspicious', 'Suspicious', 'Suspicious', 'Suspicious', 'Suspicious'], [0.5, 1, 1.5, 2, 2.5])", "test5": "autopsy_analysis([], [])", "test6": "autopsy_analysis(['SIDS', 'Natural'], [0.5, 3])", "test7": "autopsy_analysis(['Accident', 'Suspicious'], [10, 0.2])", "test8": "autopsy_analysis(['SIDS', 'SIDS', 'SIDS'], [0.1, 0.2, 0.3])", "test9": "autopsy_analysis(['Natural', 'Natural', 'Natural'], [1, 2, 3])", "test10": "autopsy_analysis(['Suspicious', 'Accident', 'Natural'], [0.5, 10, 2])"}, "hidden_information": "def autopsy_analysis(cause_of_deaths, ages): return {'Infant Mortality Rate': len([age for age in ages if age < 1 and cause_of_deaths[ages.index(age)] == 'SIDS']), 'Suspicious Deaths': len([age for age, cause in zip(ages, cause_of_deaths) if cause == 'Suspicious'])}"}
{"ground_truth": "def calculate_remmission_probability(probiotic_dosage): \n   remission_rates = {10: 0.6, 20: 0.7, 30: 0.8} \n   if probiotic_dosage in remission_rates: \n       return remission_rates[probiotic_dosage] \n   else: \n       return 0.0", "problem_description": "I want you to write a Python function to help patients with ulcerative colitis determine the probability of achieving remission based on the dosage of a specific probiotic bacteria. Can you create a function that takes the dosage as an input and returns the remission probability?The signature of the function is: def calculate_remmission_probability(probiotic_dosage)", "test_cases": {"test1": "calculate_remmission_probability(10)", "test2": "calculate_remmission_probability(20)", "test3": "calculate_remmission_probability(30)", "test4": "calculate_remmission_probability(25)", "test5": "calculate_remmission_probability(0)", "test6": "calculate_remmission_probability(40)", "test7": "calculate_remmission_probability(15)", "test8": "calculate_remmission_probability(5)", "test9": "calculate_remmission_probability(35)", "test10": "calculate_remmission_probability(10)"}, "hidden_information": "def calculate_remmission_probability(probiotic_dosage): \n   remission_rates = {10: 0.6, 20: 0.7, 30: 0.8} \n   if probiotic_dosage in remission_rates: \n       return remission_rates[probiotic_dosage] \n   else: \n       return 0.0"}
{"ground_truth": "def is_jvm_vulnerable(jvm_versions, vulnerable_versions, exploit_version):\n  vulnerable_jvms = [jvm for jvm in jvm_versions if any(jvm.startswith(version) for version in vulnerable_versions) and jvm >= exploit_version]\n  return vulnerable_jvms", "problem_description": "Write a python function to identify potential security risks in a list of JVM versions. The function should take into account a hypothetical security exploit that affects certain JVM versions.The signature of the function is: def is_jvm_vulnerable(jvm_versions, vulnerable_versions, exploit_version)", "test_cases": {"test1": "is_jvm_vulnerable(['1.8.0_121', '1.8.0_144', '11.0.2'], ['1.8.0_121', '11.0.1'], '1.8.0_121')", "test2": "is_jvm_vulnerable(['1.8.0_144', '11.0.2'], ['1.8.0_121', '11.0.1'], '1.8.0_121')", "test3": "is_jvm_vulnerable(['1.8.0_121', '11.0.1'], ['1.8.0_121', '11.0.1'], '1.8.0_121')", "test4": "is_jvm_vulnerable(['10.0.2', '11.0.2'], ['1.8.0_121', '11.0.1'], '10.0.2')", "test5": "is_jvm_vulnerable([], ['1.8.0_121', '11.0.1'], '1.8.0_121')", "test6": "is_jvm_vulnerable(['1.8.0_121', '11.0.1'], [], '1.8.0_121')", "test7": "is_jvm_vulnerable(['1.8.0_121', '11.0.1'], ['1.8.0_121'], '1.8.0_120')", "test8": "is_jvm_vulnerable(['10.0.2', '11.0.2'], ['1.8.0_121', '11.0.2'], '10.0.2')", "test9": "is_jvm_vulnerable(['1.8.0_121', '11.0.1'], ['1.8.0_122'], '1.8.0_121')", "test10": "is_jvm_vulnerable(['1.7.0_121', '1.8.0_144', '11.0.2'], ['1.7.0_121'], '1.7.0_121')"}, "hidden_information": "def is_jvm_vulnerable(jvm_versions, vulnerable_versions, exploit_version):\n  vulnerable_jvms = [jvm for jvm in jvm_versions if any(jvm.startswith(version) for version in vulnerable_versions) and jvm >= exploit_version]\n  return vulnerable_jvms"}
{"ground_truth": "def calculate_quarterly_growth_rate(revenue_current, revenue_previous):\n    if revenue_previous == 0:\n        return 'undefined'\n    else:\n        return ((revenue_current - revenue_previous) / revenue_previous) * 100", "problem_description": "Hey agent, can you write a Python function to calculate the growth rate of Microsoft's revenue? I want to know how well they're doing quarter over quarter.The signature of the function is: def calculate_quarterly_growth_rate(revenue_current, revenue_previous)", "test_cases": {"test1": "calculate_quarterly_growth_rate(100, 80)", "test2": "calculate_quarterly_growth_rate(120, 100)", "test3": "calculate_quarterly_growth_rate(90, 100)", "test4": "calculate_quarterly_growth_rate(0, 100)", "test5": "calculate_quarterly_growth_rate(110, 85)", "test6": "calculate_quarterly_growth_rate(105, 95)", "test7": "calculate_quarterly_growth_rate(80, 60)", "test8": "calculate_quarterly_growth_rate(70, 80)", "test9": "calculate_quarterly_growth_rate(130, 110)", "test10": "calculate_quarterly_growth_rate(0, 0)"}, "hidden_information": "def calculate_quarterly_growth_rate(revenue_current, revenue_previous):\n    if revenue_previous == 0:\n        return 'undefined'\n    else:\n        return ((revenue_current - revenue_previous) / revenue_previous) * 100"}
{"ground_truth": "def calculate_cost_difference(num_devices, price_windows, price_ipad, discount_windows=None, discount_ipad=None):\n    total_cost_windows = num_devices * price_windows\n    total_cost_ipad = num_devices * price_ipad\n    \n    if discount_windows is not None:\n        total_cost_windows *= (1 - discount_windows)\n    if discount_ipad is not None:\n        total_cost_ipad *= (1 - discount_ipad)\n    \n    cost_difference = total_cost_windows - total_cost_ipad\n    return cost_difference", "problem_description": "Can you write a Python function to calculate the cost difference between deploying Windows 8 tablets and iPads for our university? We need to consider the prices of the devices and any discounts we might get from the vendors. Please make it flexible so we can adjust the number of devices and prices.The signature of the function is: def calculate_cost_difference(num_devices, price_windows, price_ipad, discount_windows=None, discount_ipad=None)", "test_cases": {"test1": "calculate_cost_difference(2500, 1100, 499)", "test2": "calculate_cost_difference(2500, 1100, 499, discount_windows=0.1)", "test3": "calculate_cost_difference(2500, 1100, 499, discount_ipad=0.05)", "test4": "calculate_cost_difference(2500, 1100, 499, discount_windows=0.1, discount_ipad=0.05)", "test5": "calculate_cost_difference(1000, 1200, 600)", "test6": "calculate_cost_difference(1000, 1200, 600, discount_windows=0.15)", "test7": "calculate_cost_difference(1000, 1200, 600, discount_ipad=0.10)", "test8": "calculate_cost_difference(1000, 1200, 600, discount_windows=0.15, discount_ipad=0.10)", "test9": "calculate_cost_difference(500, 1000, 400)", "test10": "calculate_cost_difference(500, 1000, 400, discount_windows=0.20, discount_ipad=0.15)"}, "hidden_information": "def calculate_cost_difference(num_devices, price_windows, price_ipad, discount_windows=None, discount_ipad=None):\n    total_cost_windows = num_devices * price_windows\n    total_cost_ipad = num_devices * price_ipad\n    \n    if discount_windows is not None:\n        total_cost_windows *= (1 - discount_windows)\n    if discount_ipad is not None:\n        total_cost_ipad *= (1 - discount_ipad)\n    \n    cost_difference = total_cost_windows - total_cost_ipad\n    return cost_difference"}
{"ground_truth": "def analyze_shooting_incident(shooting_details, exhibit_photos, police_timeline):\n    shots_fired = shooting_details['shots_fired']\n    time_elapsed = police_timeline['time_elapsed']\n    exhibit_photos_url = exhibit_photos['exhibit_photos_url']\n    if shots_fired > 5 and time_elapsed < 10:\n        return {'status': 'excessive_force', 'evidence': exhibit_photos_url}\n    else:\n        return {'status': 'under_investigation', 'evidence': exhibit_photos_url}", "problem_description": "Can you help me write a Python function to analyze the details of a police shooting incident? The function should take into account the number of shots fired and the time elapsed between the police encounter and the shooting. It should also consider exhibit photos of the incident.The signature of the function is: def analyze_shooting_incident(shooting_details, exhibit_photos, police_timeline)", "test_cases": {"test1": "analyze_shooting_incident({'shots_fired': 7, 'time_elapsed': 10}, {'exhibit_photos_url': 'https://example.com/exhibit1.jpg'}, {'time_elapsed': 10})", "test2": "analyze_shooting_incident({'shots_fired': 3, 'time_elapsed': 15}, {'exhibit_photos_url': 'https://example.com/exhibit2.jpg'}, {'time_elapsed': 15})", "test3": "analyze_shooting_incident({'shots_fired': 5, 'time_elapsed': 5}, {'exhibit_photos_url': 'https://example.com/exhibit3.jpg'}, {'time_elapsed': 5})", "test4": "analyze_shooting_incident({'shots_fired': 1, 'time_elapsed': 20}, {'exhibit_photos_url': 'https://example.com/exhibit4.jpg'}, {'time_elapsed': 20})", "test5": "analyze_shooting_incident({'shots_fired': 10, 'time_elapsed': 10}, {'exhibit_photos_url': 'https://example.com/exhibit5.jpg'}, {'time_elapsed': 10})", "test6": "analyze_shooting_incident({'shots_fired': 7, 'time_elapsed': 8}, {'exhibit_photos_url': 'https://example.com/exhibit6.jpg'}, {'time_elapsed': 8})", "test7": "analyze_shooting_incident({'shots_fired': 9, 'time_elapsed': 12}, {'exhibit_photos_url': 'https://example.com/exhibit7.jpg'}, {'time_elapsed': 12})", "test8": "analyze_shooting_incident({'shots_fired': 4, 'time_elapsed': 18}, {'exhibit_photos_url': 'https://example.com/exhibit8.jpg'}, {'time_elapsed': 18})", "test9": "analyze_shooting_incident({'shots_fired': 6, 'time_elapsed': 6}, {'exhibit_photos_url': 'https://example.com/exhibit9.jpg'}, {'time_elapsed': 6})", "test10": "analyze_shooting_incident({'shots_fired': 8, 'time_elapsed': 9}, {'exhibit_photos_url': 'https://example.com/exhibit10.jpg'}, {'time_elapsed': 9})"}, "hidden_information": "def analyze_shooting_incident(shooting_details, exhibit_photos, police_timeline):\n    shots_fired = shooting_details['shots_fired']\n    time_elapsed = police_timeline['time_elapsed']\n    exhibit_photos_url = exhibit_photos['exhibit_photos_url']\n    if shots_fired > 5 and time_elapsed < 10:\n        return {'status': 'excessive_force', 'evidence': exhibit_photos_url}\n    else:\n        return {'status': 'under_investigation', 'evidence': exhibit_photos_url}"}
{"ground_truth": "def get_kamboj_community(names, locations): \n    kamboj_communities = {\n        'India': {'North': 'Kshatriya', 'Northwest': 'Indo-Scythian', 'Northwest-9th-10th-BCE': 'Scytho-Aryan'},\n        'Pakistan': {'Northwest': 'Indo-Scythian'},\n        'Afghanistan': {'Northwest': 'Indo-Scythian'}\n    }\n    communities = {}\n    for name, location in zip(names, locations):\n        location_parts = location.split(', ')\n        country = location_parts[0]\n        region = location_parts[1]\n        if country in kamboj_communities and region in kamboj_communities[country]:\n            communities[name] = kamboj_communities[country][region]\n        else:\n            communities[name] = 'Unknown'\n    return communities", "problem_description": "I want you to write a python function that can determine the Kshatriya community of a given list of names based on their geographical locations and ethnic groups. The locations will be specified as country and region, but the regions may not always be specific or clear. The agent needs to ask clarifying questions to resolve any ambiguities.The signature of the function is: def get_kamboj_community(names, locations)", "test_cases": {"test1": "get_kamboj_community(['John', 'Alice'], ['India, North', 'Pakistan, Northwest'])", "test2": "get_kamboj_community(['Bob', 'Eve'], ['Afghanistan, Northwest', 'USA, South'])", "test3": "get_kamboj_community(['Mike', 'Sophia'], ['India, Northwest', 'India, Northwest-9th-10th-BCE'])", "test4": "get_kamboj_community(['Tom', 'Emma'], ['India, North', 'Pakistan, North'])", "test5": "get_kamboj_community(['David', 'Olivia'], ['Afghanistan, North', 'USA, Northwest'])", "test6": "get_kamboj_community(['William', 'Ava'], ['India, Northwest', 'India, North'])", "test7": "get_kamboj_community(['James', 'Isabella'], ['Pakistan, Northwest', 'Pakistan, North'])", "test8": "get_kamboj_community(['George', 'Charlotte'], ['Afghanistan, Northwest', 'Afghanistan, North'])", "test9": "get_kamboj_community(['Charles', 'Amelia'], ['India, North', 'India, Northwest-9th-10th-BCE'])", "test10": "get_kamboj_community(['Frank', 'Harper'], ['USA, Northwest', 'USA, South'])"}, "hidden_information": "def get_kamboj_community(names, locations): \n    kamboj_communities = {\n        'India': {'North': 'Kshatriya', 'Northwest': 'Indo-Scythian', 'Northwest-9th-10th-BCE': 'Scytho-Aryan'},\n        'Pakistan': {'Northwest': 'Indo-Scythian'},\n        'Afghanistan': {'Northwest': 'Indo-Scythian'}\n    }\n    communities = {}\n    for name, location in zip(names, locations):\n        location_parts = location.split(', ')\n        country = location_parts[0]\n        region = location_parts[1]\n        if country in kamboj_communities and region in kamboj_communities[country]:\n            communities[name] = kamboj_communities[country][region]\n        else:\n            communities[name] = 'Unknown'\n    return communities"}
{"ground_truth": "def calculate_employee_payroll(employee_hours_worked, employee_rate, bonus=None):\n    if bonus is None:\n        return sum(hours * rate for hours, rate in zip(employee_hours_worked, employee_rate))\n    else:\n        return sum(hours * rate + bonus for hours, rate, bonus in zip(employee_hours_worked, employee_rate, bonus))", "problem_description": "Hello LLM, I need your collaboration in writing a python function that calculates an employee's payroll. Can you please help me come up with a function that would take in hours worked and rate per hour for multiple employees in a company and outputs the total payroll. There are some special cases where certain employees get a bonus per hour. Please ask me any questions that would clarify the problem to you.The signature of the function is: def calculate_employee_payroll(employee_hours_worked, employee_rate, bonus=None)", "test_cases": {"test1": "calculate_employee_payroll([40, 30, 20], [10, 20, 30])", "test2": "calculate_employee_payroll([40, 30, 20], [10, 20, 30], [0, 0, 5])", "test3": "calculate_employee_payroll([], [])", "test4": "calculate_employee_payroll([10], [20])", "test5": "calculate_employee_payroll([10, 20], [30, 40], [5, 10])", "test6": "calculate_employee_payroll([10, 0, 20, 0], [30, 40, 50, 60])", "test7": "calculate_employee_payroll([10, 20, 30, 40], [50, 60, 70, 80], [0, 10, 20, 30])", "test8": "calculate_employee_payroll([10, 0, 20, 30], [50, 0, 70, 80])", "test9": "calculate_employee_payroll([0, 20, 30, 40], [0, 60, 70, 80], [0, 0, 20, 30])", "test10": "calculate_employee_payroll([10, 20, 30], [50, 60, 70], [5, 10, 15])"}, "hidden_information": "def calculate_employee_payroll(employee_hours_worked, employee_rate, bonus=None):\n    if bonus is None:\n        return sum(hours * rate for hours, rate in zip(employee_hours_worked, employee_rate))\n    else:\n        return sum(hours * rate + bonus for hours, rate, bonus in zip(employee_hours_worked, employee_rate, bonus))"}
{"ground_truth": "def summarize_test_results(test_cases, ways, test_results):\n    summary = {}\n    for test, results in test_results.items():\n        summary[test] = {}\n        for way, result in results.items():\n            if way in ways:\n                summary[test][way] = result\n    return summary", "problem_description": "I need you to write a Python function that can summarize test results from a test suite. The function should take a list of test cases, a list of ways to run the tests, and the test results. The test results are a dictionary where the keys are test cases and the values are dictionaries with ways as keys and results as values. The function should return a dictionary with a summary of the test results, but only include the ways that are specified in the list of ways. I'm not sure how to structure the data or how to implement the function, so you'll need to ask me questions to clarify the requirements.The signature of the function is: def summarize_test_results(test_cases, ways, test_results)", "test_cases": {"test1": "summarize_test_results(['test1', 'test2'], ['way1', 'way2'], {'test1': {'way1': 'pass', 'way2': 'fail'}, 'test2': {'way1': 'pass', 'way3': 'fail'}})", "test2": "summarize_test_results(['test1', 'test3'], ['way1', 'way3'], {'test1': {'way1': 'pass', 'way2': 'fail'}, 'test3': {'way1': 'fail', 'way3': 'pass'}})", "test3": "summarize_test_results(['test2', 'test4'], ['way2', 'way3'], {'test2': {'way1': 'pass', 'way3': 'fail'}, 'test4': {'way2': 'fail', 'way3': 'pass'}})", "test4": "summarize_test_results(['test1', 'test2'], ['way1', 'way2'], {'test1': {'way1': 'pass', 'way2': 'fail'}, 'test2': {'way1': 'pass'}})", "test5": "summarize_test_results(['test1', 'test3'], ['way1', 'way3'], {'test1': {'way1': 'pass'}, 'test3': {'way1': 'fail', 'way3': 'pass'}})", "test6": "summarize_test_results(['test2', 'test4'], ['way2', 'way3'], {'test2': {'way1': 'pass', 'way3': 'fail'}, 'test4': {'way2': 'fail', 'way3': 'pass'}})", "test7": "summarize_test_results(['test1', 'test2'], ['way1', 'way2'], {'test1': {'way1': 'pass', 'way2': 'fail'}, 'test2': {'way1': 'pass', 'way3': 'fail'}})", "test8": "summarize_test_results(['test1', 'test3'], ['way1', 'way3'], {'test1': {'way1': 'pass'}, 'test3': {'way1': 'fail', 'way3': 'pass'}})", "test9": "summarize_test_results(['test2', 'test4'], ['way2', 'way3'], {'test2': {'way1': 'pass', 'way3': 'fail'}, 'test4': {'way2': 'fail', 'way3': 'pass'}})", "test10": "summarize_test_results(['test1', 'test2'], ['way1', 'way2'], {'test1': {'way1': 'pass', 'way2': 'fail'}, 'test2': {'way1': 'pass', 'way3': 'fail'}})"}, "hidden_information": "def summarize_test_results(test_cases, ways, test_results):\n    summary = {}\n    for test, results in test_results.items():\n        summary[test] = {}\n        for way, result in results.items():\n            if way in ways:\n                summary[test][way] = result\n    return summary"}
{"ground_truth": "def calculate_influence(speaker_charisma, initial_opinions, speech_effectiveness):\n    influence = 0\n    for opinion in initial_opinions:\n        influence += (speaker_charisma * speech_effectiveness) / (opinion + 1)\n    return influence\n", "problem_description": "Write a Python function to calculate the influence of an oratory on a group of people. The function should take into account the speaker's charisma, the audience's initial opinions, and the effectiveness of the speech. The function should return a value representing the total influence of the oratory.The signature of the function is: def calculate_influence(speaker_charisma, initial_opinions, speech_effectiveness)", "test_cases": {"test1": "calculate_influence(0.8, [0.2, 0.5, 0.8], 0.9)", "test2": "calculate_influence(0.5, [0.1, 0.3, 0.6], 0.7)", "test3": "calculate_influence(0.9, [0.4, 0.7, 0.9], 0.8)", "test4": "calculate_influence(0.7, [0.1, 0.2, 0.3], 0.6)", "test5": "calculate_influence(0.4, [0.8, 0.9, 0.95], 0.5)", "test6": "calculate_influence(0.9, [0.1, 0.1, 0.1], 0.9)", "test7": "calculate_influence(0.1, [0.8, 0.8, 0.8], 0.1)", "test8": "calculate_influence(0.8, [0.5, 0.5, 0.5], 0.8)", "test9": "calculate_influence(0.6, [0.2, 0.4, 0.6], 0.7)", "test10": "calculate_influence(0.3, [0.9, 0.95, 0.99], 0.4)"}, "hidden_information": "def calculate_influence(speaker_charisma, initial_opinions, speech_effectiveness):\n    influence = 0\n    for opinion in initial_opinions:\n        influence += (speaker_charisma * speech_effectiveness) / (opinion + 1)\n    return influence\n"}
{"ground_truth": "def calculate_average_lifespan(missions_flown_by_old_pete, total_pilots_killed):\n    return (missions_flown_by_old_pete / total_pilots_killed) * 100", "problem_description": "I need a python function to calculate the average lifespan of a Typhoon pilot based on the number of missions flown by pilot 'Old Pete' and the total number of pilots killed. I'm thinking of a function that takes two parameters - the number of missions flown by Old Pete and the total number of pilots killed. The function should return a value that represents the average lifespan of a Typhoon pilot. Can you create such a function?The signature of the function is: def calculate_average_lifespan(missions_flown_by_old_pete, total_pilots_killed)", "test_cases": {"test1": "calculate_average_lifespan(93, 151)", "test2": "calculate_average_lifespan(100, 200)", "test3": "calculate_average_lifespan(50, 75)", "test4": "calculate_average_lifespan(150, 300)", "test5": "calculate_average_lifespan(25, 50)", "test6": "calculate_average_lifespan(200, 400)", "test7": "calculate_average_lifespan(75, 150)", "test8": "calculate_average_lifespan(120, 240)", "test9": "calculate_average_lifespan(180, 360)", "test10": "calculate_average_lifespan(60, 120)"}, "hidden_information": "def calculate_average_lifespan(missions_flown_by_old_pete, total_pilots_killed):\n    return (missions_flown_by_old_pete / total_pilots_killed) * 100"}
{"ground_truth": "def calculate_clafoutis_ingredients(servings, ingredient):\n    # base ingredients per 5 servings\n    ingredients = {\n        'eggs': 3,\n        'sugar': 130,\n        'milk': 30,\n        'heavy cream': 20,\n        'vanilla extract': 1,\n        'melted butter': 40,\n        'flour': 80,\n        'rhum': 2,\n        'blackberries': 300\n    }\n    # conversion rates\n    conversion_rates = {\n        'eggs': 1,\n        'sugar': 1,\n        'milk': 1,\n        'heavy cream': 1,\n        'vanilla extract': 1,\n        'melted butter': 1,\n        'flour': 1,\n        'rhum': 1,\n        'blackberries': 1\n    }\n\n    if ingredient not in ingredients:\n        raise ValueError('Invalid ingredient')\n\n    base_value = ingredients[ingredient]\n    value_per_serving = base_value / 5\n    return value_per_serving * servings", "problem_description": "Can you write a python function to calculate the amount of an ingredient needed for a specific number of servings of a dessert recipe? I want to give you a single ingredient and the number of servings I want to make and have the function return the amount needed.The signature of the function is: def calculate_clafoutis_ingredients(servings, ingredient)", "test_cases": {"test1": "calculate_clafoutis_ingredients(10, 'eggs')", "test2": "calculate_clafoutis_ingredients(3, 'sugar')", "test3": "calculate_clafoutis_ingredients(2, 'milk')", "test4": "calculate_clafoutis_ingredients(7, 'heavy cream')", "test5": "calculate_clafoutis_ingredients(1, 'vanilla extract')", "test6": "calculate_clafoutis_ingredients(9, 'melted butter')", "test7": "calculate_clafoutis_ingredients(4, 'flour')", "test8": "calculate_clafoutis_ingredients(8, 'rhum')", "test9": "calculate_clafoutis_ingredients(6, 'blackberries')", "test10": "calculate_clafoutis_ingredients(5, 'eggs')"}, "hidden_information": "def calculate_clafoutis_ingredients(servings, ingredient):\n    # base ingredients per 5 servings\n    ingredients = {\n        'eggs': 3,\n        'sugar': 130,\n        'milk': 30,\n        'heavy cream': 20,\n        'vanilla extract': 1,\n        'melted butter': 40,\n        'flour': 80,\n        'rhum': 2,\n        'blackberries': 300\n    }\n    # conversion rates\n    conversion_rates = {\n        'eggs': 1,\n        'sugar': 1,\n        'milk': 1,\n        'heavy cream': 1,\n        'vanilla extract': 1,\n        'melted butter': 1,\n        'flour': 1,\n        'rhum': 1,\n        'blackberries': 1\n    }\n\n    if ingredient not in ingredients:\n        raise ValueError('Invalid ingredient')\n\n    base_value = ingredients[ingredient]\n    value_per_serving = base_value / 5\n    return value_per_serving * servings"}
{"ground_truth": "def calculate_quasiturbine_efficiency(conventional_engine_efficiency, load_factor, quasiturbine_type='QT-AC'): \n    if quasiturbine_type == 'QT-AC':\n        return conventional_engine_efficiency * 0.5 / (1 + 0.1 * (1 - load_factor))\n    else:\n        return conventional_engine_efficiency * 0.6 / (1 + 0.1 * (1 - load_factor))", "problem_description": "I want you to write a Python function to calculate the efficiency of a Quasiturbine engine. I have a conventional engine with a certain efficiency, and I want to compare it to the Quasiturbine engine. The Quasiturbine engine has different types, and I want the function to take that into account.The signature of the function is: def calculate_quasiturbine_efficiency(conventional_engine_efficiency, load_factor, quasiturbine_type='QT-AC')", "test_cases": {"test1": "calculate_quasiturbine_efficiency(0.3, 0.5, 'QT-AC')", "test2": "calculate_quasiturbine_efficiency(0.25, 0.8, 'QT-B')", "test3": "calculate_quasiturbine_efficiency(0.4, 0.2, 'QT-AC')", "test4": "calculate_quasiturbine_efficiency(0.35, 0.6, 'QT-C')", "test5": "calculate_quasiturbine_efficiency(0.2, 0.3, 'QT-AC')", "test6": "calculate_quasiturbine_efficiency(0.45, 0.9, 'QT-B')", "test7": "calculate_quasiturbine_efficiency(0.38, 0.4, 'QT-AC')", "test8": "calculate_quasiturbine_efficiency(0.22, 0.7, 'QT-C')", "test9": "calculate_quasiturbine_efficiency(0.48, 0.1, 'QT-AC')", "test10": "calculate_quasiturbine_efficiency(0.32, 0.85, 'QT-B')"}, "hidden_information": "def calculate_quasiturbine_efficiency(conventional_engine_efficiency, load_factor, quasiturbine_type='QT-AC'): \n    if quasiturbine_type == 'QT-AC':\n        return conventional_engine_efficiency * 0.5 / (1 + 0.1 * (1 - load_factor))\n    else:\n        return conventional_engine_efficiency * 0.6 / (1 + 0.1 * (1 - load_factor))"}
{"ground_truth": "def evaluate_righteousness(actions, hearts):\n    righteous_people = []\n    for i in range(len(actions)):\n        if actions[i] == 'good' and hearts[i] == 'pure':\n            righteous_people.append(True)\n        else:\n            righteous_people.append(False)\n    return righteous_people", "problem_description": "I want you to write a python function to categorize people as righteous or not based on their actions and heart. Can you help me to develop a function in python that would take a list of people's actions and a list of their heart states, and return a list of boolean values indicating who is righteous and who is not?The signature of the function is: def evaluate_righteousness(actions, hearts)", "test_cases": {"test1": "evaluate_righteousness(['good', 'bad', 'good'], ['pure', 'impure', 'pure'])", "test2": "evaluate_righteousness(['good', 'good', 'good'], ['pure', 'pure', 'impure'])", "test3": "evaluate_righteousness(['bad', 'bad', 'bad'], ['impure', 'impure', 'impure'])", "test4": "evaluate_righteousness(['good', 'good'], ['pure', 'pure'])", "test5": "evaluate_righteousness(['bad', 'bad'], ['impure', 'impure'])", "test6": "evaluate_righteousness(['good', 'bad', 'good', 'bad'], ['pure', 'impure', 'pure', 'impure'])", "test7": "evaluate_righteousness(['good'], ['pure'])", "test8": "evaluate_righteousness(['bad'], ['impure'])", "test9": "evaluate_righteousness([], [])", "test10": "evaluate_righteousness(['good', 'bad', 'good', 'bad', 'good', 'bad'], ['pure', 'impure', 'pure', 'impure', 'pure', 'impure'])"}, "hidden_information": "def evaluate_righteousness(actions, hearts):\n    righteous_people = []\n    for i in range(len(actions)):\n        if actions[i] == 'good' and hearts[i] == 'pure':\n            righteous_people.append(True)\n        else:\n            righteous_people.append(False)\n    return righteous_people"}
{"ground_truth": "def get_shared_interests(harry_interests, ginny_interests):\n    shared_interests = [value for value in harry_interests if value in ginny_interests]\n    return shared_interests", "problem_description": "Can you write a python function that determines the shared interests between Harry Potter and Ginny Weasley, based on lists of their favorite things?The signature of the function is: def get_shared_interests(harry_interests, ginny_interests)", "test_cases": {"test1": "get_shared_interests(['Quidditch', 'Flying', 'Treacle Tart'], ['Quidditch', 'Fighting Dark Magic', 'Listening to wizarding radio'])", "test2": "get_shared_interests(['Broomsticks', 'Chocolate Frogs', 'Hogwarts'], ['Pumpkin Juice', 'Butterbeer', 'Broomsticks'])", "test3": "get_shared_interests(['Gryffindor', 'Exploring Hogwarts'], ['Gryffindor', 'Pranks', 'Exploring Hogwarts'])", "test4": "get_shared_interests(['Ron Weasley', 'Hermione Granger'], ['Ron Weasley', 'Hermione Granger', 'Luna Lovegood'])", "test5": "get_shared_interests(['Cauldron Cakes', 'Pumpkin Pasties'], ['Pumpkin Juice', 'Butterbeer', 'Cauldron Cakes'])", "test6": "get_shared_interests(['Divination', 'Potions'], ['Transfiguration', 'Herbology', 'Divination'])", "test7": "get_shared_interests(['Wizard Chess', 'Gobstones'], ['Wizard Chess', 'Exploding Snap', 'Gobstones'])", "test8": "get_shared_interests(['Hagrid', 'Professor McGonagall'], ['Hagrid', 'Professor Sprout', 'Professor McGonagall'])", "test9": "get_shared_interests(['Flying Cars', 'The Burrow'], ['Flying Cars', 'The Hogwarts Express', 'The Burrow'])", "test10": "get_shared_interests(['Magic Creatures', 'Pumpkin Juice'], ['Magic Creatures', 'Cauldron Cakes', 'Butterbeer'])"}, "hidden_information": "def get_shared_interests(harry_interests, ginny_interests):\n    shared_interests = [value for value in harry_interests if value in ginny_interests]\n    return shared_interests"}
{"ground_truth": "def analyze_sentiment(text): \n    emotions = {'anger': 0, 'sadness': 0, 'fear': 0, 'joy': 0}\n    words = text.split()\n    for word in words:\n        if word in ['anger', 'hate', 'hates', 'hated']:\n            emotions['anger'] += 1\n        elif word in ['sad', 'sadly', 'sadness']:\n            emotions['sadness'] += 1\n        elif word in ['fear', 'feared', 'fearing']:\n            emotions['fear'] += 1\n        elif word in ['joy', 'happy', 'happiness']:\n            emotions['joy'] += 1\n    max_emotion = max(emotions, key=emotions.get)\n    return max_emotion", "problem_description": "I want the agent to write a python function that can analyze a text and determine the dominant emotion expressed in it. The function should return the emotion as a string. Please collaborate with me to create a robust function that can handle various texts.The signature of the function is: def analyze_sentiment(text)", "test_cases": {"test1": "analyze_sentiment('I am so angry with the world')", "test2": "analyze_sentiment('I am feeling extremely sad today')", "test3": "analyze_sentiment('I am really happy with my new job')", "test4": "analyze_sentiment('I am afraid of the dark')", "test5": "analyze_sentiment('I love playing football with my friends')", "test6": "analyze_sentiment('I hate watching horror movies')", "test7": "analyze_sentiment('I am feeling joyful today')", "test8": "analyze_sentiment('I am so frustrated with this task')", "test9": "analyze_sentiment('I am feeling really happy and sad at the same time')", "test10": "analyze_sentiment('I am feeling nothing')"}, "hidden_information": "def analyze_sentiment(text): \n    emotions = {'anger': 0, 'sadness': 0, 'fear': 0, 'joy': 0}\n    words = text.split()\n    for word in words:\n        if word in ['anger', 'hate', 'hates', 'hated']:\n            emotions['anger'] += 1\n        elif word in ['sad', 'sadly', 'sadness']:\n            emotions['sadness'] += 1\n        elif word in ['fear', 'feared', 'fearing']:\n            emotions['fear'] += 1\n        elif word in ['joy', 'happy', 'happiness']:\n            emotions['joy'] += 1\n    max_emotion = max(emotions, key=emotions.get)\n    return max_emotion"}
{"ground_truth": "def decide_to_leave(freedom_importance, love_importance, change_tolerance):\n    if freedom_importance > love_importance - change_tolerance * 0.5:\n        return False\n    else:\n        return True", "problem_description": "I want you to write a Python function that helps me decide whether I should leave my life of freedom to be with the person I love. I value my freedom a lot, but I also love this person. However, I'm afraid that being with them would require me to change too much and become someone I'm not. Can you help me create a function that takes into account these factors and gives me a decision?The signature of the function is: def decide_to_leave(freedom_importance, love_importance, change_tolerance)", "test_cases": {"test1": "decide_to_leave(0.8, 0.7, 0.2)", "test2": "decide_to_leave(0.9, 0.6, 0.3)", "test3": "decide_to_leave(0.5, 0.9, 0.4)", "test4": "decide_to_leave(0.1, 0.5, 0.6)", "test5": "decide_to_leave(0.6, 0.2, 0.7)", "test6": "decide_to_leave(0.3, 0.8, 0.1)", "test7": "decide_to_leave(0.4, 0.4, 0.3)", "test8": "decide_to_leave(0.7, 0.1, 0.4)", "test9": "decide_to_leave(0.2, 0.6, 0.8)", "test10": "decide_to_leave(0.1, 0.1, 0.1)"}, "hidden_information": "def decide_to_leave(freedom_importance, love_importance, change_tolerance):\n    if freedom_importance > love_importance - change_tolerance * 0.5:\n        return False\n    else:\n        return True"}
{"ground_truth": "def get_employee_performance(employee_monthly_stats, employee_names):\n    # Calculate the average performance of each employee\n    performances = [sum(stats) / len(stats) for stats in employee_monthly_stats]\n    # Return a dictionary with employee names and their performances\n    return dict(zip(employee_names, performances))", "problem_description": "Hey, can you write a Python function that calculates the performance of employees based on their monthly statistics? I have a list of lists where each inner list contains the monthly stats of an employee, and another list with the names of the employees. The function should return a dictionary with the employee names and their average performance.The signature of the function is: def get_employee_performance(employee_monthly_stats, employee_names)", "test_cases": {"test1": "get_employee_performance([[80, 70, 90, 85], [75, 65, 95, 90], [90, 85, 95, 90]], ['John', 'Alice', 'Bob'])", "test2": "get_employee_performance([[90, 95, 92, 88], [70, 75, 80, 85], [85, 90, 92, 95]], ['Jane', 'Mike', 'Sarah'])", "test3": "get_employee_performance([[70, 75, 80, 85], [90, 95, 92, 88], [85, 90, 92, 95]], ['Emily', 'Tom', 'Jerry'])", "test4": "get_employee_performance([[95, 92, 90, 88], [75, 80, 85, 90], [90, 95, 92, 88]], ['Linda', 'Sam', 'Diana'])", "test5": "get_employee_performance([[80, 85, 90, 95], [70, 75, 80, 85], [85, 90, 92, 95]], ['Mary', 'David', 'Jessica'])", "test6": "get_employee_performance([[90, 92, 95, 90], [75, 80, 85, 90], [85, 90, 92, 95]], ['Tom', 'Mike', 'Sophia'])", "test7": "get_employee_performance([[85, 90, 92, 95], [70, 75, 80, 85], [90, 95, 92, 88]], ['John', 'Alice', 'Bob'])", "test8": "get_employee_performance([[80, 85, 90, 95], [75, 80, 85, 90], [90, 92, 95, 90]], ['Jane', 'Mike', 'Sarah'])", "test9": "get_employee_performance([[70, 75, 80, 85], [90, 92, 95, 90], [85, 90, 92, 95]], ['Emily', 'Tom', 'Jerry'])", "test10": "get_employee_performance([[95, 90, 92, 88], [75, 80, 85, 90], [90, 95, 92, 95]], ['Linda', 'Sam', 'Diana'])"}, "hidden_information": "def get_employee_performance(employee_monthly_stats, employee_names):\n    # Calculate the average performance of each employee\n    performances = [sum(stats) / len(stats) for stats in employee_monthly_stats]\n    # Return a dictionary with employee names and their performances\n    return dict(zip(employee_names, performances))"}
{"ground_truth": "def get_closest_sibling_in_age(sibling_ages, matt_age):\n    if len(sibling_ages) == 0:\n        return \"No siblings\"\n    return min(sibling_ages, key=lambda x:abs(x-matt_age))", "problem_description": "Hi, I want you to write a Python function. I am looking at my family situation and I have siblings of various ages and I want to know which sibling is closest in age to me. Given the ages of my siblings and my age, can you write a function that returns the age of the sibling that is closest to mine?The signature of the function is: def get_closest_sibling_in_age(sibling_ages, matt_age)", "test_cases": {"test1": "get_closest_sibling_in_age([2, 4, 6, 1], 4)", "test2": "get_closest_sibling_in_age([11, 6, 15, 0], 11)", "test3": "get_closest_sibling_in_age([], 6)", "test4": "get_closest_sibling_in_age([3, 5], 4)", "test5": "get_closest_sibling_in_age([16, 12, 8, 9, 10], 11)", "test6": "get_closest_sibling_in_age([1, 1, 2, 1, 0], 1)", "test7": "get_closest_sibling_in_age([19, 14, 7, 17, 16], 16)", "test8": "get_closest_sibling_in_age([20, 0, 1, 18, 19], 19)", "test9": "get_closest_sibling_in_age([7, 3, 7, 12], 8)", "test10": "get_closest_sibling_in_age([4, 4, 4, 2], 4)"}, "hidden_information": "def get_closest_sibling_in_age(sibling_ages, matt_age):\n    if len(sibling_ages) == 0:\n        return \"No siblings\"\n    return min(sibling_ages, key=lambda x:abs(x-matt_age))"}
{"ground_truth": "def generate_issues(series, min_value, publisher, hero_name): return [f'{series} {issue}' for issue in range(1, 200) if issue > min_value and (publisher == 'Metro Comix' or hero_name == 'Metro Man')]", "problem_description": "Hi, I need a function that generates a list of comic book issues for a specific series, with some conditions applied. Can you write a python function that takes in a series name, a minimum issue number, a publisher, and a hero name as arguments, and returns a list of issues that meet the conditions?The signature of the function is: def generate_issues(series, min_value, publisher, hero_name)", "test_cases": {"test1": "generate_issues('Justice Companions', 10, 'Metro Comix', 'Metro Man')", "test2": "generate_issues('Masters of the Planet', 100, 'DC Comics', 'Phenom-Man')", "test3": "generate_issues('Amazing Tales', 1, 'Marvel Comics', 'Spider-Man')", "test4": "generate_issues('Justice Companions', 5, 'Metro Comix', 'Tat-Two')", "test5": "generate_issues('Masters of the Planet', 50, 'DC Comics', 'Gargantua')", "test6": "generate_issues('Amazing Tales', 20, 'Marvel Comics', 'Wolverine')", "test7": "generate_issues('Justice Companions', 15, 'Metro Comix', 'Tarantular')", "test8": "generate_issues('Masters of the Planet', 80, 'DC Comics', 'Buddha-Pest')", "test9": "generate_issues('Amazing Tales', 10, 'Marvel Comics', 'X-Men')", "test10": "generate_issues('Justice Companions', 25, 'Metro Comix', 'Metro Man')"}, "hidden_information": "def generate_issues(series, min_value, publisher, hero_name): return [f'{series} {issue}' for issue in range(1, 200) if issue > min_value and (publisher == 'Metro Comix' or hero_name == 'Metro Man')]"}
{"ground_truth": "def calculate_family_stats(birth_years, ages):\n    # Calculate the average age\n    avg_age = sum(ages) / len(ages)\n    \n    # Find the youngest and oldest persons\n    youngest_person = min(zip(birth_years, ages), key=lambda x: (x[1]))[1]\n    oldest_person = max(zip(birth_years, ages), key=lambda x: (x[1]))[1]\n    \n    return avg_age, youngest_person, oldest_person", "problem_description": "Write a python function that can take in two lists as arguments  - one for birth years and one for their age, the function should return the average age, the youngest year of birth and the oldest year of birth that was given in the lists.The signature of the function is: def calculate_family_stats(birth_years, ages)", "test_cases": {"test1": "calculate_family_stats([1998, 1987, 1976], [24, 35, 46])", "test2": "calculate_family_stats([2001, 1990, 1985], [21, 32, 37])", "test3": "calculate_family_stats([1960, 1982, 1995], [62, 40, 27])", "test4": "calculate_family_stats([2010, 1998, 1992], [12, 24, 30])", "test5": "calculate_family_stats([2005, 1975, 1945], [17, 47, 77])", "test6": "calculate_family_stats([1999, 1980, 1965], [23, 42, 57])", "test7": "calculate_family_stats([2003, 1993, 1988], [19, 29, 34])", "test8": "calculate_family_stats([1970, 1960, 1950], [52, 62, 72])", "test9": "calculate_family_stats([2008, 1991, 1986], [14, 31, 36])", "test10": "calculate_family_stats([1969, 1974, 1981], [53, 48, 41])"}, "hidden_information": "def calculate_family_stats(birth_years, ages):\n    # Calculate the average age\n    avg_age = sum(ages) / len(ages)\n    \n    # Find the youngest and oldest persons\n    youngest_person = min(zip(birth_years, ages), key=lambda x: (x[1]))[1]\n    oldest_person = max(zip(birth_years, ages), key=lambda x: (x[1]))[1]\n    \n    return avg_age, youngest_person, oldest_person"}
{"ground_truth": "def calculate_merchant_profit(expenses, selling_prices, items_sold):\n    total_expenses = sum(expenses.values())\n    total_revenue = sum([selling_prices[item] * quantity for item, quantity in items_sold.items()])\n    profit = total_revenue - total_expenses\n    return profit", "problem_description": "I need a python function that can help my family's grocery store in the district calculate our daily profit. We have a list of expenses, such as rent and unsold items, and we also have the selling prices of our items. I can provide the quantities of items we sold. Can you create a function that can calculate our total profit?The signature of the function is: def calculate_merchant_profit(expenses, selling_prices, items_sold)", "test_cases": {"test1": "calculate_merchant_profit({'rent': 10, 'unsold_item': 5}, {'apple': 1.5, 'orange': 2}, {'apple': 10, 'orange': 15})", "test2": "calculate_merchant_profit({'rent': 15, 'electricity': 5}, {'bread': 2, 'milk': 3}, {'bread': 20, 'milk': 10})", "test3": "calculate_merchant_profit({'water': 5, 'unsold_item': 3}, {'water_bottle': 1, 'can_of_soup': 2}, {'water_bottle': 15, 'can_of_soup': 10})", "test4": "calculate_merchant_profit({'rent': 20, 'food': 10}, {'apple': 1, 'orange': 1.5}, {'apple': 20, 'orange': 10})", "test5": "calculate_merchant_profit({'items_sold': 10, 'unsold_item': 5}, {'apple': 1, 'orange': 2}, {'apple': 10, 'orange': 20})", "test6": "calculate_merchant_profit({'rent': 15, 'electricity': 10}, {'bread': 2, 'milk': 3}, {'bread': 10, 'milk': 20})", "test7": "calculate_merchant_profit({'water': 3, 'unsold_item': 2}, {'water_bottle': 1, 'can_of_soup': 2}, {'water_bottle': 20, 'can_of_soup': 15})", "test8": "calculate_merchant_profit({'rent': 10, 'food': 5}, {'apple': 2, 'orange': 3}, {'apple': 15, 'orange': 10})", "test9": "calculate_merchant_profit({'items_sold': 5, 'unsold_item': 3}, {'apple': 1.5, 'orange': 2}, {'apple': 10, 'orange': 15})", "test10": "calculate_merchant_profit({'rent': 20, 'electricity': 15}, {'bread': 2.5, 'milk': 3.5}, {'bread': 15, 'milk': 10})"}, "hidden_information": "def calculate_merchant_profit(expenses, selling_prices, items_sold):\n    total_expenses = sum(expenses.values())\n    total_revenue = sum([selling_prices[item] * quantity for item, quantity in items_sold.items()])\n    profit = total_revenue - total_expenses\n    return profit"}
{"ground_truth": "def get_highest_laff_points(toons):\n    highest_laff_points = max(toon['laff_points'] for toon in toons)\n    highest_laff_points_toons = [toon['name'] for toon in toons if toon['laff_points'] == highest_laff_points]\n    return highest_laff_points_toons", "problem_description": "Write a Python function that determines which Toon in Toontown has the highest laff points. The function should take a list of Toons, each represented as a dictionary with 'name' and 'laff_points' keys, and return the name(s) of the Toon(s) with the highest laff points.The signature of the function is: def get_highest_laff_points(toons)", "test_cases": {"test1": "get_highest_laff_points([{'name': 'Flapjack Supertooth', 'laff_points': 106}, {'name': 'The Catfish', 'laff_points': 27}, {'name': 'Heat Wave', 'laff_points': 15}])", "test2": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 100}, {'name': 'Toon2', 'laff_points': 100}, {'name': 'Toon3', 'laff_points': 50}])", "test3": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 50}, {'name': 'Toon2', 'laff_points': 100}, {'name': 'Toon3', 'laff_points': 200}])", "test4": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 100}, {'name': 'Toon2', 'laff_points': 200}, {'name': 'Toon3', 'laff_points': 300}])", "test5": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 500}])", "test6": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 10}, {'name': 'Toon2', 'laff_points': 5}, {'name': 'Toon3', 'laff_points': 15}, {'name': 'Toon4', 'laff_points': 20}, {'name': 'Toon5', 'laff_points': 25}])", "test7": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 0}, {'name': 'Toon2', 'laff_points': 0}])", "test8": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 10}, {'name': 'Toon2', 'laff_points': 10}, {'name': 'Toon3', 'laff_points': 10}])", "test9": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 20}, {'name': 'Toon2', 'laff_points': 10}, {'name': 'Toon3', 'laff_points': 10}])", "test10": "get_highest_laff_points([{'name': 'Toon1', 'laff_points': 10}, {'name': 'Toon2', 'laff_points': 20}, {'name': 'Toon3', 'laff_points': 30}, {'name': 'Toon4', 'laff_points': 40}, {'name': 'Toon5', 'laff_points': 50}])"}, "hidden_information": "def get_highest_laff_points(toons):\n    highest_laff_points = max(toon['laff_points'] for toon in toons)\n    highest_laff_points_toons = [toon['name'] for toon in toons if toon['laff_points'] == highest_laff_points]\n    return highest_laff_points_toons"}
{"ground_truth": "def calculate_optimal_pages(total_results, results_per_page):\n    return -(-total_results // results_per_page)", "problem_description": "Write a python function to determine the optimal number of pages for the website's search functionality given a certain number of search results per page and a certain total number of search results. The optimal number of pages should be the minimum required to show all results.The signature of the function is: def calculate_optimal_pages(total_results, results_per_page)", "test_cases": {"test1": "calculate_optimal_pages(10, 5)", "test2": "calculate_optimal_pages(0, 10)", "test3": "calculate_optimal_pages(1, 10)", "test4": "calculate_optimal_pages(15, 3)", "test5": "calculate_optimal_pages(50, 10)", "test6": "calculate_optimal_pages(23, 5)", "test7": "calculate_optimal_pages(34, 7)", "test8": "calculate_optimal_pages(99, 9)", "test9": "calculate_optimal_pages(123, 8)", "test10": "calculate_optimal_pages(200, 10)"}, "hidden_information": "def calculate_optimal_pages(total_results, results_per_page):\n    return -(-total_results // results_per_page)"}
{"ground_truth": "def calculate_ingredient_proportions(total_amount, ingredients):\n    proportions = {}\n    for ingredient, amount in ingredients.items():\n        proportion = (amount / total_amount) * 100\n        proportions[ingredient] = proportion\n    return proportions", "problem_description": "I need your help to write a Python function that calculates the proportion of each ingredient in a product given the total amount of the product and a dictionary of ingredients with their respective amounts. The function should return a dictionary with the ingredients as keys and their proportions as values. Can you help me?The signature of the function is: def calculate_ingredient_proportions(total_amount, ingredients)", "test_cases": {"test1": "calculate_ingredient_proportions(100, {'Spices': 10, 'Herbs': 20, 'Sugar': 30, 'Salt': 40})", "test2": "calculate_ingredient_proportions(500, {'Tomato Paste': 200, 'Vinegar': 150, 'Corn Syrup': 50, 'Salt': 100})", "test3": "calculate_ingredient_proportions(200, {'Crushed Orange Puree': 50, 'Raisin Paste': 30, 'Dried Garlic': 20, 'Dried Onion': 20, 'Caramel Color': 30, 'Potassium Sorbate': 10, 'Xanthan Gum': 40})", "test4": "calculate_ingredient_proportions(1000, {'TOMATO PUREE': 400, 'DISTILLED VINEGAR': 200, 'CORN SYRUP': 100, 'SALT': 100, 'RAISIN PASTE': 50, 'CRUSHED ORANGE PUREE': 50, 'SPICES AND HERBS': 50, 'DRIED GARLIC AND ONION': 50, 'CARAMEL COLOR': 10, 'POTASSIUM SORBATE': 10, 'XANTHAN GUM': 30})", "test5": "calculate_ingredient_proportions(500, {'Water': 100, 'Sugar': 100, 'Cream': 150, 'Vanilla': 50, 'Eggs': 50, 'Flour': 50})", "test6": "calculate_ingredient_proportions(1000, {'Flour': 600, 'Sugar': 200, 'Eggs': 100, 'Butter': 50, 'Vanilla': 50})", "test7": "calculate_ingredient_proportions(2000, {'Rice': 1000, 'Chicken Broth': 400, 'Vegetable Oil': 200, 'Soy Sauce': 100, 'Ginger': 50, 'Garlic': 50, 'Salt': 100, 'Pepper': 50})", "test8": "calculate_ingredient_proportions(1000, {'Coffee': 800, 'Sugar': 100, 'Cream': 50, 'Vanilla': 50})", "test9": "calculate_ingredient_proportions(500, {'Tomatoes': 200, 'Onions': 100, 'Garlic': 50, 'Olive Oil': 50, 'Basil': 50, 'Mozzarella Cheese': 50})", "test10": "calculate_ingredient_proportions(1000, {'Protein Powder': 500, 'Almond Milk': 200, 'Banana': 100, 'Honey': 50, 'Ice': 50, 'Spinach': 50, 'Peanut Butter': 50})"}, "hidden_information": "def calculate_ingredient_proportions(total_amount, ingredients):\n    proportions = {}\n    for ingredient, amount in ingredients.items():\n        proportion = (amount / total_amount) * 100\n        proportions[ingredient] = proportion\n    return proportions"}
{"ground_truth": "def gnome_device_effectiveness(devices, tasks, gnome_skill_levels): \n    # Initialize a dictionary to store the effectiveness of each device\n    effectiveness = {}\n    \n    # Calculate the effectiveness of each device based on the tasks and gnome skill levels\n    for device in devices:\n        effectiveness[device] = 0\n        for task in tasks:\n            if task['device'] == device:\n                effectiveness[device] += task['difficulty'] * gnome_skill_levels[task['skill']]\n    \n    # Return the effectiveness of each device\n    return effectiveness", "problem_description": "I want you to write a Python function that determines the effectiveness of gnomish devices in various tasks. The function should take into account the type of device, the task requirements, and the skill levels of the gnomes operating the devices. Can you collaborate with me to create such a function?The signature of the function is: def gnome_device_effectiveness(devices, tasks, gnome_skill_levels)", "test_cases": {"test1": "gnome_device_effectiveness(['clockwork', 'pulley'], [{'device': 'clockwork', 'difficulty': 5, 'skill': 'engineering'}, {'device': 'pulley', 'difficulty': 3, 'skill': 'mechanics'}], {'engineering': 8, 'mechanics': 6})", "test2": "gnome_device_effectiveness(['array', 'conveyance'], [{'device': 'array', 'difficulty': 4, 'skill': 'mathematics'}, {'device': 'conveyance', 'difficulty': 2, 'skill': 'physics'}], {'mathematics': 9, 'physics': 7})", "test3": "gnome_device_effectiveness(['trap', 'alarm'], [{'device': 'trap', 'difficulty': 6, 'skill': 'trapsmithing'}, {'device': 'alarm', 'difficulty': 1, 'skill': 'electronics'}], {'trapsmithing': 10, 'electronics': 5})", "test4": "gnome_device_effectiveness(['lock', 'key'], [{'device': 'lock', 'difficulty': 8, 'skill': 'lockpicking'}, {'device': 'key', 'difficulty': 0, 'skill': 'thievery'}], {'lockpicking': 12, 'thievery': 4})", "test5": "gnome_device_effectiveness(['array', 'trap'], [{'device': 'array', 'difficulty': 4, 'skill': 'mathematics'}, {'device': 'trap', 'difficulty': 6, 'skill': 'trapsmithing'}], {'mathematics': 9, 'trapsmithing': 10})", "test6": "gnome_device_effectiveness(['conveyance', 'lock'], [{'device': 'conveyance', 'difficulty': 2, 'skill': 'physics'}, {'device': 'lock', 'difficulty': 8, 'skill': 'lockpicking'}], {'physics': 7, 'lockpicking': 12})", "test7": "gnome_device_effectiveness(['alarm', 'key'], [{'device': 'alarm', 'difficulty': 1, 'skill': 'electronics'}, {'device': 'key', 'difficulty': 0, 'skill': 'thievery'}], {'electronics': 5, 'thievery': 4})", "test8": "gnome_device_effectiveness(['clockwork', 'array'], [{'device': 'clockwork', 'difficulty': 5, 'skill': 'engineering'}, {'device': 'array', 'difficulty': 4, 'skill': 'mathematics'}], {'engineering': 8, 'mathematics': 9})", "test9": "gnome_device_effectiveness(['pulley', 'trap'], [{'device': 'pulley', 'difficulty': 3, 'skill': 'mechanics'}, {'device': 'trap', 'difficulty': 6, 'skill': 'trapsmithing'}], {'mechanics': 6, 'trapsmithing': 10})", "test10": "gnome_device_effectiveness(['lock', 'alarm'], [{'device': 'lock', 'difficulty': 8, 'skill': 'lockpicking'}, {'device': 'alarm', 'difficulty': 1, 'skill': 'electronics'}], {'lockpicking': 12, 'electronics': 5})"}, "hidden_information": "def gnome_device_effectiveness(devices, tasks, gnome_skill_levels): \n    # Initialize a dictionary to store the effectiveness of each device\n    effectiveness = {}\n    \n    # Calculate the effectiveness of each device based on the tasks and gnome skill levels\n    for device in devices:\n        effectiveness[device] = 0\n        for task in tasks:\n            if task['device'] == device:\n                effectiveness[device] += task['difficulty'] * gnome_skill_levels[task['skill']]\n    \n    # Return the effectiveness of each device\n    return effectiveness"}
{"ground_truth": "def calculate_sales_change(vehicle_types, current_sales, gas_price_increase):\n    # Assume vehicle_types is a dictionary with vehicle type as key and its current sales as value\n    # Assume current_sales is a dictionary with vehicle type as key and its sales change as value for $1 gas price increase\n    if gas_price_increase == 1:\n        sales_change = {vehicle: current_sales[vehicle] for vehicle in vehicle_types}\n    else:\n        sales_change = {vehicle: (gas_price_increase / 1.0) * current_sales[vehicle] for vehicle in vehicle_types}\n    return sales_change", "problem_description": "I want a function that calculates the expected change in sales for different vehicle types given a certain gas price increase. Can you write a Python function that does that?The signature of the function is: def calculate_sales_change(vehicle_types, current_sales, gas_price_increase)", "test_cases": {"test1": "calculate_sales_change({'small': 70000, 'hybrid': 20000, 'electric': 10000, 'upscale/ultra': 5000}, {'small': 0.7, 'hybrid': 0.2, 'electric': 0.1, 'upscale/ultra': 0}, 1)", "test2": "calculate_sales_change({'small': 70000, 'hybrid': 20000, 'electric': 10000, 'upscale/ultra': 5000}, {'small': 0.7, 'hybrid': 0.2, 'electric': 0.1, 'upscale/ultra': 0}, 0.5)", "test3": "calculate_sales_change({'small': 70000, 'hybrid': 20000, 'electric': 10000}, {'small': 0.7, 'hybrid': 0.2, 'electric': 0.1}, 2)", "test4": "calculate_sales_change({'small': 70000, 'hybrid': 20000, 'upscale/ultra': 5000}, {'small': 0.7, 'hybrid': 0.2, 'upscale/ultra': 0}, 1.5)", "test5": "calculate_sales_change({'electric': 10000, 'upscale/ultra': 5000}, {'electric': 0.1, 'upscale/ultra': 0}, 0.5)", "test6": "calculate_sales_change({'small': 70000, 'hybrid': 20000}, {'small': 0.7, 'hybrid': 0.2}, 1)", "test7": "calculate_sales_change({'small': 70000, 'hybrid': 20000}, {'small': 0.7, 'hybrid': 0.2}, 2)", "test8": "calculate_sales_change({'small': 70000, 'electric': 10000}, {'small': 0.7, 'electric': 0.1}, 1.5)", "test9": "calculate_sales_change({'small': 70000, 'upscale/ultra': 5000}, {'small': 0.7, 'upscale/ultra': 0}, 0.5)", "test10": "calculate_sales_change({'hybrid': 20000, 'electric': 10000, 'upscale/ultra': 5000}, {'hybrid': 0.2, 'electric': 0.1, 'upscale/ultra': 0}, 1)"}, "hidden_information": "def calculate_sales_change(vehicle_types, current_sales, gas_price_increase):\n    # Assume vehicle_types is a dictionary with vehicle type as key and its current sales as value\n    # Assume current_sales is a dictionary with vehicle type as key and its sales change as value for $1 gas price increase\n    if gas_price_increase == 1:\n        sales_change = {vehicle: current_sales[vehicle] for vehicle in vehicle_types}\n    else:\n        sales_change = {vehicle: (gas_price_increase / 1.0) * current_sales[vehicle] for vehicle in vehicle_types}\n    return sales_change"}
{"ground_truth": "def disable_zeitgeist(uninstall=False):\n    if uninstall:\n        return \"sudo apt-get remove zeitgeist zeitgeist-core zeitgeist-datahub\"\n    else:\n        return \"System Settings... > Privacy, toggle the 'Record activity' switch to the OFF position\"", "problem_description": "I want you to write a python function that helps me totally remove zeitgeist, I don't want it on my ubuntu in anyway. Can you help compose a python function that takes care of all that?The signature of the function is: def disable_zeitgeist(uninstall=False)", "test_cases": {"test1": "disable_zeitgeist(uninstall=True)", "test2": "disable_zeitgeist(uninstall=False)", "test3": "disable_zeitgeist(uninstall=True)", "test4": "disable_zeitgeist(uninstall=False)", "test5": "disable_zeitgeist(uninstall=True)", "test6": "disable_zeitgeist(uninstall=False)", "test7": "disable_zeitgeist(uninstall=True)", "test8": "disable_zeitgeist(uninstall=False)", "test9": "disable_zeitgeist(uninstall=True)", "test10": "disable_zeitgeist(uninstall=False)"}, "hidden_information": "def disable_zeitgeist(uninstall=False):\n    if uninstall:\n        return \"sudo apt-get remove zeitgeist zeitgeist-core zeitgeist-datahub\"\n    else:\n        return \"System Settings... > Privacy, toggle the 'Record activity' switch to the OFF position\""}
{"ground_truth": "def is_eligible_fcs(gpa, years_played): return years_played < 2 and gpa >= 3.0 or years_played >= 2 and gpa >= 3.5", "problem_description": "Hey agent, I want you to write a Python function to determine if a student can play at an FCS school after transferring from a Division One school. The function should take the student's GPA and number of years played at their previous school as inputs. Can you help me out?The signature of the function is: def is_eligible_fcs(gpa, years_played)", "test_cases": {"test1": "is_eligible_fcs(3.5, 1)", "test2": "is_eligible_fcs(3.2, 2)", "test3": "is_eligible_fcs(2.9, 2)", "test4": "is_eligible_fcs(3.8, 0)", "test5": "is_eligible_fcs(2.5, 1)", "test6": "is_eligible_fcs(3.1, 3)", "test7": "is_eligible_fcs(3.6, 1)", "test8": "is_eligible_fcs(2.8, 2)", "test9": "is_eligible_fcs(3.3, 0)", "test10": "is_eligible_fcs(2.6, 1)"}, "hidden_information": "def is_eligible_fcs(gpa, years_played): return years_played < 2 and gpa >= 3.0 or years_played >= 2 and gpa >= 3.5"}
{"ground_truth": "def evaluate_nba_player(player_name, stats): \n    if stats['rebounds'] > 18 and stats['points'] > 27: \n        return 'Exceptional Performance'\n    elif stats['rebounds'] > 10 and stats['points'] > 20: \n        return 'Good Performance'\n    else: \n        return 'Average Performance'", "problem_description": "Hey agent, write a Python function to evaluate an NBA player's performance based on their stats. I want to input stats like rebounds and points, and the function should return a string describing the player's performance. Can you help me create this function?The signature of the function is: def evaluate_nba_player(player_name, stats)", "test_cases": {"test1": "evaluate_nba_player('Demarcus Cousins', {'rebounds': 18, 'points': 27})", "test2": "evaluate_nba_player('John Doe', {'rebounds': 15, 'points': 25})", "test3": "evaluate_nba_player('Jane Smith', {'rebounds': 8, 'points': 18})", "test4": "evaluate_nba_player('Player A', {'rebounds': 20, 'points': 30})", "test5": "evaluate_nba_player('Player B', {'rebounds': 12, 'points': 22})", "test6": "evaluate_nba_player('Player C', {'rebounds': 9, 'points': 19})", "test7": "evaluate_nba_player('Player D', {'rebounds': 19, 'points': 28})", "test8": "evaluate_nba_player('Player E', {'rebounds': 11, 'points': 21})", "test9": "evaluate_nba_player('Player F', {'rebounds': 7, 'points': 17})", "test10": "evaluate_nba_player('Player G', {'rebounds': 16, 'points': 26})"}, "hidden_information": "def evaluate_nba_player(player_name, stats): \n    if stats['rebounds'] > 18 and stats['points'] > 27: \n        return 'Exceptional Performance'\n    elif stats['rebounds'] > 10 and stats['points'] > 20: \n        return 'Good Performance'\n    else: \n        return 'Average Performance'"}
{"ground_truth": "def calculate_total_cost(resort_name, room_type, stay_duration, golf_activities):\n\tif resort_name == 'Grand Wailea Resort':\n\t\tbase_rate = 350\n\telif resort_name == 'Four Seasons Resort Maile':\n\t\tbase_rate = 365\n\telif resort_name == 'Fairmont Kea Lani':\n\t\tbase_rate = 385\n\telif resort_name == 'Renaissance Beach Resort':\n\t\tbase_rate = 329\n\telif resort_name == 'Wailea Marriott Resort':\n\t\tbase_rate = 309\n\tif room_type == 'suite':\n\t\tbase_rate *= 2\n\tif golf_activities:\n\t\tgolf_cost = 190 * golf_activities\n\t\treturn base_rate * stay_duration + golf_cost * stay_duration\n\telse:\n\t\treturn base_rate * stay_duration", "problem_description": "Hey, I want you to write a python function to calculate the total cost of staying at a resort in Wailea, Hawaii. I found this article online, but it's not convenient to look up prices for each resort every time. I want you to consider factors like room type, how long I'll be staying, and whether I'll be playing golf or not.The signature of the function is: def calculate_total_cost(resort_name, room_type, stay_duration, golf_activities)", "test_cases": {"test1": "calculate_total_cost('Grand Wailea Resort', 'normal', 5, False)", "test2": "calculate_total_cost('Four Seasons Resort Maile', 'suite', 3, True)", "test3": "calculate_total_cost('Fairmont Kea Lani', 'normal', 4, False)", "test4": "calculate_total_cost('Renaissance Beach Resort', 'suite', 6, True)", "test5": "calculate_total_cost('Wailea Marriott Resort', 'normal', 2, False)", "test6": "calculate_total_cost('Grand Wailea Resort', 'suite', 7, True)", "test7": "calculate_total_cost('Four Seasons Resort Maile', 'normal', 1, False)", "test8": "calculate_total_cost('Fairmont Kea Lani', 'suite', 8, True)", "test9": "calculate_total_cost('Renaissance Beach Resort', 'normal', 9, False)", "test10": "calculate_total_cost('Wailea Marriott Resort', 'suite', 10, True)"}, "hidden_information": "def calculate_total_cost(resort_name, room_type, stay_duration, golf_activities):\n\tif resort_name == 'Grand Wailea Resort':\n\t\tbase_rate = 350\n\telif resort_name == 'Four Seasons Resort Maile':\n\t\tbase_rate = 365\n\telif resort_name == 'Fairmont Kea Lani':\n\t\tbase_rate = 385\n\telif resort_name == 'Renaissance Beach Resort':\n\t\tbase_rate = 329\n\telif resort_name == 'Wailea Marriott Resort':\n\t\tbase_rate = 309\n\tif room_type == 'suite':\n\t\tbase_rate *= 2\n\tif golf_activities:\n\t\tgolf_cost = 190 * golf_activities\n\t\treturn base_rate * stay_duration + golf_cost * stay_duration\n\telse:\n\t\treturn base_rate * stay_duration"}
{"ground_truth": "def calculate_rating(stars, likes, dislikes, comments):\n    rating = (stars + (likes - dislikes) / (likes + dislikes) + len(comments) * 0.1) / 3\n    return round(rating, 2)", "problem_description": "I need a python function to calculate a rating score based on a movie review. The rating score should take into account the number of stars given to the movie, the ratio of likes to dislikes, and the number of comments. Can you write a function to calculate this score?The signature of the function is: def calculate_rating(stars, likes, dislikes, comments)", "test_cases": {"test1": "calculate_rating(4, 100, 20, ['good', 'bad', 'ok'])", "test2": "calculate_rating(2, 50, 50, ['great', 'poor'])", "test3": "calculate_rating(5, 200, 10, ['excellent', 'poor', 'average'])", "test4": "calculate_rating(1, 10, 100, ['bad'])", "test5": "calculate_rating(3, 50, 20, ['good', 'very good'])", "test6": "calculate_rating(4, 100, 0, ['excellent', 'good'])", "test7": "calculate_rating(2, 20, 50, ['bad', 'very bad'])", "test8": "calculate_rating(5, 200, 50, ['excellent', 'very good', 'good'])", "test9": "calculate_rating(3, 50, 50, ['good', 'very good', 'bad'])", "test10": "calculate_rating(1, 10, 100, ['bad', 'very bad', 'terrible'])"}, "hidden_information": "def calculate_rating(stars, likes, dislikes, comments):\n    rating = (stars + (likes - dislikes) / (likes + dislikes) + len(comments) * 0.1) / 3\n    return round(rating, 2)"}
{"ground_truth": "def detect_fabricated_quote(quote, attributes, fact_checking_results):\n    for attribute in attributes:\n        if fact_checking_results[attribute] and not quote.get(attribute, False):\n            return True\n    return False", "problem_description": "I need a python function that can detect fabricated quotes. The function should take some parameters that the function will use to verify if a quote is fabricated or not. I am tired of sports news using fake quotes and I want to automate this process. However, I am not sure what parameters the function should take or how it should work. Can you help?The signature of the function is: def detect_fabricated_quote(quote, attributes, fact_checking_results)", "test_cases": {"test1": "detect_fabricated_quote({'said_by': 'Gary Sheffield', 'verified': True}, ['said_by'], {'said_by': True, 'verified': True})", "test2": "detect_fabricated_quote({'said_by': 'P. Diddy', 'verified': False}, ['said_by'], {'said_by': False, 'verified': True})", "test3": "detect_fabricated_quote({'said_by': 'Ian Thomsen', 'verified': True}, ['said_by', 'verified'], {'said_by': True, 'verified': True})", "test4": "detect_fabricated_quote({'said_by': 'Magglio Ordonez', 'context': 'News'}, ['said_by', 'context'], {'said_by': True, 'context': True})", "test5": "detect_fabricated_quote({'said_by': 'Barry Bonds', 'verified': True}, ['verified'], {'verified': True})", "test6": "detect_fabricated_quote({'said_by': 'Vladimir Guerrero', 'verified': False}, ['verified'], {'verified': True})", "test7": "detect_fabricated_quote({'said_by': 'Miguel Cabrera', 'verified': True}, ['verified'], {'verified': True})", "test8": "detect_fabricated_quote({'said_by': 'Gary Sheffield', 'verified': True}, ['said_by', 'context'], {'said_by': True, 'context': False})", "test9": "detect_fabricated_quote({'said_by': 'Ian Thomsen', 'verified': False}, ['said_by', 'context'], {'said_by': True, 'context': True})", "test10": "detect_fabricated_quote({'said_by': 'P. Diddy', 'verified': True}, ['said_by', 'verified'], {'said_by': False, 'verified': True})"}, "hidden_information": "def detect_fabricated_quote(quote, attributes, fact_checking_results):\n    for attribute in attributes:\n        if fact_checking_results[attribute] and not quote.get(attribute, False):\n            return True\n    return False"}
{"ground_truth": "def determine_shower_mixer_Type(hot_cold_control, temperature_control, radiator_heatingBehaviour):\n    if hot_cold_control == \"single\" and temperature_control == \"left_right\" and radiator_heatingBehaviour == True:\n        return \"non-thermostatic\"\n    elif hot_cold_control == \"single\" and temperature_control == \"left_right\" and radiator_heatingBehaviour == False:\n        return \"unsure\"\n    else:\n        return \"thermostatic\"", "problem_description": "Can you write a python function that determines whether my shower mixer is thermostatic or non-thermostatic? The function should ask me about the types of controls and the behavior of the radiator, and based on that information, tell me what type of shower mixer I have.The signature of the function is: def determine_shower_mixer_Type(hot_cold_control, temperature_control, radiator_heatingBehaviour)", "test_cases": {"test1": "determine_shower_mixer_Type(\"single\", \"left_right\", True)", "test2": "determine_shower_mixer_Type(\"single\", \"left_right\", False)", "test3": "determine_shower_mixer_Type(\"separate\", \"left_right\", True)", "test4": "determine_shower_mixer_Type(\"separate\", \"in_out\", False)", "test5": "determine_shower_mixer_Type(\"single\", \"in_out\", True)", "test6": "determine_shower_mixer_Type(\"single\", \"in_out\", False)", "test7": "determine_shower_mixer_Type(\"separate\", \"left_right\", False)", "test8": "determine_shower_mixer_Type(\"single\", \"separate\", True)", "test9": "determine_shower_mixer_Type(\"separate\", \"separate\", False)", "test10": "determine_shower_mixer_Type(\"single\", \"none\", True)"}, "hidden_information": "def determine_shower_mixer_Type(hot_cold_control, temperature_control, radiator_heatingBehaviour):\n    if hot_cold_control == \"single\" and temperature_control == \"left_right\" and radiator_heatingBehaviour == True:\n        return \"non-thermostatic\"\n    elif hot_cold_control == \"single\" and temperature_control == \"left_right\" and radiator_heatingBehaviour == False:\n        return \"unsure\"\n    else:\n        return \"thermostatic\""}
{"ground_truth": "def character_survival(uses_magic, is_giant, weapon_used):\n    if uses_magic and is_giant:\n        if weapon_used == 'Stunning spell' or weapon_used == 'arrows':\n            return 'Character likely to survive'\n        else:\n            return 'Character likely to be injured'\n    elif uses_magic and not is_giant:\n        return 'Character likely to be injured'\n    else:\n        return 'Not enough information'\n", "problem_description": "Write a python function to model the survival of a character in the Harry Potter universe when attacked, using the data on characters like Grawp and Hagrid as reference. Consider the type of attack (magic, physical, Stunning spell, arrows), and the character's Giant heritage.The signature of the function is: def character_survival(uses_magic, is_giant, weapon_used)", "test_cases": {"test1": "character_survival(True, True, 'Stunning spell')", "test2": "character_survival(True, True, 'arrows')", "test3": "character_survival(True, True, 'sword')", "test4": "character_survival(True, False, 'Stunning spell')", "test5": "character_survival(True, False, 'arrows')", "test6": "character_survival(False, True, 'arrows')", "test7": "character_survival(False, False, 'arrows')", "test8": "character_survival(True, True, 'Physical attack')", "test9": "character_survival(False, True, 'Physical attack')", "test10": "character_survival(False, False, 'Physical attack')"}, "hidden_information": "def character_survival(uses_magic, is_giant, weapon_used):\n    if uses_magic and is_giant:\n        if weapon_used == 'Stunning spell' or weapon_used == 'arrows':\n            return 'Character likely to survive'\n        else:\n            return 'Character likely to be injured'\n    elif uses_magic and not is_giant:\n        return 'Character likely to be injured'\n    else:\n        return 'Not enough information'\n"}
{"ground_truth": "def calculate_destruction_scale(city_map, barricade_coords, destruction_radius):\n    # city_map: a 2D grid representing the city's buildings\n    # barricade_coords: a list of coordinates where barricades are placed\n    # destruction_radius: the radius of destruction caused by each barricade\n    \n    destruction_count = 0\n    for x, row in enumerate(city_map):\n        for y, building in enumerate(row):\n            if building == 1:  # 1 represents a building\n                for barricade_x, barricade_y in barricade_coords:\n                    distance_to_barricade = ((x - barricade_x) ** 2 + (y - barricade_y) ** 2) ** 0.5\n                    if distance_to_barricade <= destruction_radius:\n                        destruction_count += 1\n                        break\n    return destruction_count", "problem_description": "I need to write a function to calculate the scale of destruction in a city due to several barricades being set on fire. The city is represented as a grid, where buildings are marked with a '1' and empty spaces with '0'. There are several barricades placed in the city, and each one causes a certain amount of destruction, represented as a radius. Can you help me come up with a Python function to calculate the number of buildings affected by the barricades?The signature of the function is: def calculate_destruction_scale(city_map, barricade_coords, destruction_radius)", "test_cases": {"test1": "calculate_destruction_scale([[1, 0, 1], [0, 1, 0], [1, 0, 1]], [(1, 1)], 2)", "test2": "calculate_destruction_scale([[1, 1, 1], [1, 0, 1], [1, 1, 1]], [(0, 0), (2, 2)], 1)", "test3": "calculate_destruction_scale([[0, 0, 0], [0, 0, 0], [0, 0, 0]], [(1, 1)], 3)", "test4": "calculate_destruction_scale([[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]], [(1, 1), (2, 2)], 1)", "test5": "calculate_destruction_scale([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [(0, 0), (1, 1), (2, 2)], 0)", "test6": "calculate_destruction_scale([[1, 1, 0, 0], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], [(0, 0), (1, 1), (2, 2)], 2)", "test7": "calculate_destruction_scale([[0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 0], [1, 1, 1, 1]], [(2, 2), (1, 1), (0, 0)], 0)", "test8": "calculate_destruction_scale([[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0], [0, 0, 0, 1]], [(0, 0), (1, 1), (3, 3)], 1)", "test9": "calculate_destruction_scale([[0, 1, 0, 1], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]], [(1, 1), (3, 3)], 3)", "test10": "calculate_destruction_scale([[0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [1, 1, 1, 0, 1], [0, 0, 1, 0, 1]], [(1, 1), (0, 0), (3, 3), (2, 2)], 0)"}, "hidden_information": "def calculate_destruction_scale(city_map, barricade_coords, destruction_radius):\n    # city_map: a 2D grid representing the city's buildings\n    # barricade_coords: a list of coordinates where barricades are placed\n    # destruction_radius: the radius of destruction caused by each barricade\n    \n    destruction_count = 0\n    for x, row in enumerate(city_map):\n        for y, building in enumerate(row):\n            if building == 1:  # 1 represents a building\n                for barricade_x, barricade_y in barricade_coords:\n                    distance_to_barricade = ((x - barricade_x) ** 2 + (y - barricade_y) ** 2) ** 0.5\n                    if distance_to_barricade <= destruction_radius:\n                        destruction_count += 1\n                        break\n    return destruction_count"}
{"ground_truth": "def get_loyalty(character, actions):\n    if character == 'Buffy' or character == 'Tara' or character == 'Willow' or character == 'Xander' or character == 'Oz' or character == 'Giles' or character == 'Faith':\n        if 'help humans' in actions or 'fight demons' in actions or 'attend Congress' in actions:\n            return 'Loyal to humans'\n        elif 'betray humans' in actions or 'join demons' in actions or 'cause chaos' in actions:\n            return 'Disloyal to humans'\n    elif character == 'Kandida' or character == 'Trabajo' or character == 'Haarmann' or character == 'Malik':\n        if 'help demons' in actions or 'cause chaos' in actions:\n            return 'Loyal to demons'\n        elif 'betray demons' in actions or 'join humans' in actions:\n            return 'Disloyal to demons'\n    else:\n        return 'Unknown loyalty'\n", "problem_description": "I need you to create a Python function that can determine the loyalty of a character in the Dark Congress story. I want to be able to input the character's name and their actions and get their loyalty status as output. Can you write this function for me?The signature of the function is: def get_loyalty(character, actions)", "test_cases": {"test1": "get_loyalty('Buffy', 'fight demons, attend Congress')", "test2": "get_loyalty('Trabajo', 'help demons, cause chaos')", "test3": "get_loyalty('Willow', 'help humans, betray demons')", "test4": "get_loyalty('Malik', 'join humans, fight demons')", "test5": "get_loyalty('Kandida', 'betray demons, join humans')", "test6": "get_loyalty('Oz', 'attend Congress, cause chaos')", "test7": "get_loyalty('Giles', 'help humans, fight demons')", "test8": "get_loyalty('Faith', 'betray humans, join demons')", "test9": "get_loyalty('Haarmann', 'help demons, cause chaos')", "test10": "get_loyalty('Random Character', 'random actions')"}, "hidden_information": "def get_loyalty(character, actions):\n    if character == 'Buffy' or character == 'Tara' or character == 'Willow' or character == 'Xander' or character == 'Oz' or character == 'Giles' or character == 'Faith':\n        if 'help humans' in actions or 'fight demons' in actions or 'attend Congress' in actions:\n            return 'Loyal to humans'\n        elif 'betray humans' in actions or 'join demons' in actions or 'cause chaos' in actions:\n            return 'Disloyal to humans'\n    elif character == 'Kandida' or character == 'Trabajo' or character == 'Haarmann' or character == 'Malik':\n        if 'help demons' in actions or 'cause chaos' in actions:\n            return 'Loyal to demons'\n        elif 'betray demons' in actions or 'join humans' in actions:\n            return 'Disloyal to demons'\n    else:\n        return 'Unknown loyalty'\n"}
{"ground_truth": "def calculate_reign_length(birth_date, death_date, ascension_date, abdication_date):\n  from datetime import datetime\n  birth_date = datetime.strptime(birth_date, '%d-%m-%Y')\n  death_date = datetime.strptime(death_date, '%d-%m-%Y')\n  ascension_date = datetime.strptime(ascension_date, '%d-%m-%Y')\n  abdication_date = datetime.strptime(abdication_date, '%d-%m-%Y')\n  if abdication_date > death_date:\n    reign_date = death_date\n  else:\n    reign_date = abdication_date\n  reign_length = (reign_date - ascension_date).days\n  return abs(reign_length)", "problem_description": "Can you write a Python function to calculate the length of reign in days for a monarch given their birth and death dates, as well as the dates of their ascension and abdication? The function should return the absolute number of days, and use the date of abdication if it is earlier than the date of death.The signature of the function is: def calculate_reign_length(birth_date, death_date, ascension_date, abdication_date)", "test_cases": {"test1": "calculate_reign_length('13-11-1907', '13-05-1978', '29-10-1959', '02-12-1975')", "test2": "calculate_reign_length('01-01-1990', '31-12-2000', '01-01-1995', '31-12-2000')", "test3": "calculate_reign_length('15-03-1947', '25-05-2015', '21-01-1950', '26-01-1974')", "test4": "calculate_reign_length('12-08-1823', '28-02-1899', '01-04-1831', '28-02-1899')", "test5": "calculate_reign_length('03-06-1865', '13-04-1917', '28-09-1885', '24-04-1909')", "test6": "calculate_reign_length('04-11-1906', '15-04-1986', '23-01-1933', '02-09-1969')", "test7": "calculate_reign_length('19-08-1848', '04-12-1850', '01-01-1849', '04-12-1850')", "test8": "calculate_reign_length('25-05-1803', '08-04-1893', '14-01-1859', '25-05-1886')", "test9": "calculate_reign_length('29-10-1897', '28-04-1959', '24-02-1922', '15-04-1947')", "test10": "calculate_reign_length('06-06-1884', '07-03-1972', '11-03-1924', '11-06-1952')"}, "hidden_information": "def calculate_reign_length(birth_date, death_date, ascension_date, abdication_date):\n  from datetime import datetime\n  birth_date = datetime.strptime(birth_date, '%d-%m-%Y')\n  death_date = datetime.strptime(death_date, '%d-%m-%Y')\n  ascension_date = datetime.strptime(ascension_date, '%d-%m-%Y')\n  abdication_date = datetime.strptime(abdication_date, '%d-%m-%Y')\n  if abdication_date > death_date:\n    reign_date = death_date\n  else:\n    reign_date = abdication_date\n  reign_length = (reign_date - ascension_date).days\n  return abs(reign_length)"}
{"ground_truth": "def is_legitimate_atm(atm_serial_number, atm_monitor_resolution_width, atm_monitor_resolution_height, atm_pinpad_color, atm_camera_present):\n    known_skimmers = [(123456, 480, 800, 'blue', True), (789012, 640, 400, 'red', True)]\n    return (atm_serial_number, atm_monitor_resolution_width, atm_monitor_resolution_height, atm_pinpad_color, atm_camera_present) not in known_skimmers", "problem_description": "Hey LLM agent, can you write a Python function that determines if an ATM is legitimate or not? I don't want to get scammed anymore!The signature of the function is: def is_legitimate_atm(atm_serial_number, atm_monitor_resolution_width, atm_monitor_resolution_height, atm_pinpad_color, atm_camera_present)", "test_cases": {"test1": "is_legitimate_atm(111111, 800, 600, 'blue', False)", "test2": "is_legitimate_atm(123456, 480, 800, 'blue', True)", "test3": "is_legitimate_atm(987654, 640, 400, 'red', True)", "test4": "is_legitimate_atm(123456, 1024, 768, 'black', False)", "test5": "is_legitimate_atm(789012, 640, 400, 'red', True)", "test6": "is_legitimate_atm(111111, 800, 600, 'blue', True)", "test7": "is_legitimate_atm(123456, 480, 800, 'red', True)", "test8": "is_legitimate_atm(987654, 640, 400, 'blue', False)", "test9": "is_legitimate_atm(123456, 800, 600, 'blue', True)", "test10": "is_legitimate_atm(111111, 640, 400, 'red', True)"}, "hidden_information": "def is_legitimate_atm(atm_serial_number, atm_monitor_resolution_width, atm_monitor_resolution_height, atm_pinpad_color, atm_camera_present):\n    known_skimmers = [(123456, 480, 800, 'blue', True), (789012, 640, 400, 'red', True)]\n    return (atm_serial_number, atm_monitor_resolution_width, atm_monitor_resolution_height, atm_pinpad_color, atm_camera_present) not in known_skimmers"}
{"ground_truth": "def suggest_movies(viewing_history, genres_to_avoid):\n    suggested_movies = []\n    for movie in viewing_history:\n        if movie['genre'] not in genres_to_avoid:\n            suggested_movies.append(movie['title'])\n    return suggested_movies", "problem_description": "Write a python function that takes into account my Netflix viewing history and suggests some movies for me, but please make sure to avoid some genres that I might find embarrassing if they appeared in the suggestions.The signature of the function is: def suggest_movies(viewing_history, genres_to_avoid)", "test_cases": {"test1": "suggest_movies([{\"title\": 'Movie A', 'genre': 'Comedy'}, {\"title\": 'Movie B', 'genre': 'Drama'}], ['Drama'])", "test2": "suggest_movies([{\"title\": 'Movie C', 'genre': 'Comedy'}, {\"title\": 'Movie D', 'genre': 'Horror'}], ['Romance', 'Action'])", "test3": "suggest_movies([{\"title\": 'Movie E', 'genre': 'Documentary'}, {\"title\": 'Movie F', 'genre': 'Comedy'}], ['Comedy'])", "test4": "suggest_movies([{\"title\": 'Movie G', 'genre': 'Romance'}, {\"title\": 'Movie H', 'genre': 'Action'}], ['Documentary'])", "test5": "suggest_movies([{\"title\": 'Movie I', 'genre': 'Action'}, {\"title\": 'Movie J', 'genre': 'Horror'}], [])", "test6": "suggest_movies([{\"title\": 'Movie K', 'genre': 'Comedy'}, {\"title\": 'Movie L', 'genre': 'Drama'}], ['Action', 'Horror'])", "test7": "suggest_movies([{\"title\": 'Movie M', 'genre': 'Romance'}, {\"title\": 'Movie N', 'genre': 'Documentary'}], ['Comedy', 'Drama'])", "test8": "suggest_movies([{\"title\": 'Movie O', 'genre': 'Horror'}, {\"title\": 'Movie P', 'genre': 'Action'}], ['Romance'])", "test9": "suggest_movies([{\"title\": 'Movie Q', 'genre': 'Drama'}, {\"title\": 'Movie R', 'genre': 'Comedy'}], ['Documentary', 'Horror'])", "test10": "suggest_movies([{\"title\": 'Movie S', 'genre': 'Documentary'}, {\"title\": 'Movie T', 'genre': 'Romance'}], ['Action', 'Comedy'])"}, "hidden_information": "def suggest_movies(viewing_history, genres_to_avoid):\n    suggested_movies = []\n    for movie in viewing_history:\n        if movie['genre'] not in genres_to_avoid:\n            suggested_movies.append(movie['title'])\n    return suggested_movies"}
{"ground_truth": "def generate_sequent_latex(sequent): \n  sequent_str = ''\n  for i, elem in enumerate(sequent):\n    if elem == '\u2227':\n      sequent_str += ' \\land ' if i != 0 else ''\n    elif elem == '\u2228':\n      sequent_str += ' \\lor ' if i != 0 else ''\n    elif elem == '\u00ac':\n      sequent_str += ' \\lnot ' if i == 0 else ''\n    elif elem == '\u2192':\n      sequent_str += ' \\to ' if i != 0 else ''\n    elif elem == '\u2194':\n      sequent_str += ' \\leftrightarrow ' if i != 0 else ''\n    else:\n      sequent_str += elem\n  return '$ ' + sequent_str + ' $'", "problem_description": "Write a Python function that takes a list of strings representing a sequent and generates the corresponding LaTeX code that represents the sequent.The signature of the function is: def generate_sequent_latex(sequent)", "test_cases": {"test1": "generate_sequent_latex(['A', '\u2227', 'B'])", "test2": "generate_sequent_latex(['\u00ac', 'A', '\u2192', 'B'])", "test3": "generate_sequent_latex(['A', '\u2228', 'B', '\u2227', 'C'])", "test4": "generate_sequent_latex(['A', '\u2192', 'B', '\u2227', 'C'])", "test5": "generate_sequent_latex(['\u00ac', 'A', '\u2227', '\u00ac', 'B'])", "test6": "generate_sequent_latex(['A', '\u2228', 'B', '\u2228', 'C'])", "test7": "generate_sequent_latex(['A', '\u2192', 'B', '\u2192', 'C'])", "test8": "generate_sequent_latex(['A', '\u2227', 'B', '\u2227', 'C'])", "test9": "generate_sequent_latex(['\u00ac', 'A', '\u2228', 'B'])", "test10": "generate_sequent_latex(['A', '\u2194', 'B'])"}, "hidden_information": "def generate_sequent_latex(sequent): \n  sequent_str = ''\n  for i, elem in enumerate(sequent):\n    if elem == '\u2227':\n      sequent_str += ' \\land ' if i != 0 else ''\n    elif elem == '\u2228':\n      sequent_str += ' \\lor ' if i != 0 else ''\n    elif elem == '\u00ac':\n      sequent_str += ' \\lnot ' if i == 0 else ''\n    elif elem == '\u2192':\n      sequent_str += ' \\to ' if i != 0 else ''\n    elif elem == '\u2194':\n      sequent_str += ' \\leftrightarrow ' if i != 0 else ''\n    else:\n      sequent_str += elem\n  return '$ ' + sequent_str + ' $'"}
{"ground_truth": "def plan_event_schedule(performance_durations, start_time, end_time):\n    # Convert start_time and end_time to minutes\n    start_time_minutes = start_time[0] * 60 + start_time[1]\n    end_time_minutes = end_time[0] * 60 + end_time[1]\n    total_available_time = end_time_minutes - start_time_minutes\n    \n    # Initialize the schedule and the current time\n    schedule = {}\n    current_time_minutes = start_time_minutes\n    \n    # Iterate over the performances and their durations\n    for performance, duration in performance_durations.items():\n        # Calculate the end time of the current performance\n        performance_end_time_minutes = current_time_minutes + duration * 60\n        \n        # Check if the performance fits within the available time\n        if performance_end_time_minutes <= end_time_minutes:\n            # Add the performance to the schedule\n            schedule[performance] = (current_time_minutes, performance_end_time_minutes)\n            # Update the current time\n            current_time_minutes = performance_end_time_minutes\n        else:\n            # If the performance does not fit, add it to the schedule with a note\n            schedule[performance] = (None, None, \"Does not fit within the available time\")\n    return schedule", "problem_description": "Can you write a Python function to help plan the schedule for our upcoming event, the Chinese New Year celebration at the Nelson-Atkins Museum of Art? We have several performances with different durations, and we need to fit them within a certain time frame.The signature of the function is: def plan_event_schedule(performance_durations, start_time, end_time)", "test_cases": {"test1": "plan_event_schedule({\"Bian Lian\": 1, \"Balloon Twisting\": 30, \"Dance Performance\": 45}, (17, 0), (21, 0))", "test2": "plan_event_schedule({\"Magic Show\": 2, \"Music Performance\": 1, \"Chinese Painting\": 30}, (10, 0), (13, 0))", "test3": "plan_event_schedule({\"Bian Lian\": 1, \"Balloon Twisting\": 30, \"Dance Performance\": 45}, (18, 0), (22, 0))", "test4": "plan_event_schedule({\"Magic Show\": 2, \"Music Performance\": 1, \"Chinese Painting\": 30}, (11, 0), (14, 0))", "test5": "plan_event_schedule({\"Balloon Twisting\": 30, \"Dance Performance\": 45}, (17, 0), (20, 0))", "test6": "plan_event_schedule({\"Magic Show\": 2, \"Music Performance\": 1}, (10, 0), (12, 0))", "test7": "plan_event_schedule({\"Bian Lian\": 1, \"Balloon Twisting\": 30, \"Dance Performance\": 45, \"Music Performance\": 60}, (17, 0), (22, 0))", "test8": "plan_event_schedule({\"Magic Show\": 2, \"Chinese Painting\": 30, \"Dance Performance\": 45}, (10, 0), (14, 0))", "test9": "plan_event_schedule({\"Bian Lian\": 1, \"Balloon Twisting\": 30}, (17, 0), (19, 0))", "test10": "plan_event_schedule({\"Magic Show\": 2, \"Music Performance\": 1, \"Chinese Painting\": 30, \"Dance Performance\": 45}, (10, 0), (15, 0))"}, "hidden_information": "def plan_event_schedule(performance_durations, start_time, end_time):\n    # Convert start_time and end_time to minutes\n    start_time_minutes = start_time[0] * 60 + start_time[1]\n    end_time_minutes = end_time[0] * 60 + end_time[1]\n    total_available_time = end_time_minutes - start_time_minutes\n    \n    # Initialize the schedule and the current time\n    schedule = {}\n    current_time_minutes = start_time_minutes\n    \n    # Iterate over the performances and their durations\n    for performance, duration in performance_durations.items():\n        # Calculate the end time of the current performance\n        performance_end_time_minutes = current_time_minutes + duration * 60\n        \n        # Check if the performance fits within the available time\n        if performance_end_time_minutes <= end_time_minutes:\n            # Add the performance to the schedule\n            schedule[performance] = (current_time_minutes, performance_end_time_minutes)\n            # Update the current time\n            current_time_minutes = performance_end_time_minutes\n        else:\n            # If the performance does not fit, add it to the schedule with a note\n            schedule[performance] = (None, None, \"Does not fit within the available time\")\n    return schedule"}
{"ground_truth": "def calculate_video_game_rating(metacritic_score, rotten_tomato_score, awards_won, is_PartOfAMajorFranchise):\n    weights = {'metacritic_score': 0.4, 'rotten_tomato_score': 0.3, 'awards_won': 0.2, 'is_PartOfAMajorFranchise': 0.1}\n    rating = (weights['metacritic_score'] * metacritic_score +\n             weights['rotten_tomato_score'] * rotten_tomato_score +\n             weights['awards_won'] * (awards_won * 5) +\n             weights['is_PartOfAMajorFranchise'] * (1 if is_PartOfAMajorFranchise else 0))\n    return max(0, min(rating, 100))", "problem_description": "I want a python script to rate a video game based on its movie adaptation. Can you help me write a function that takes some factors into account and returns a rating score?The signature of the function is: def calculate_video_game_rating(metacritic_score, rotten_tomato_score, awards_won, is_PartOfAMajorFranchise)", "test_cases": {"test1": "calculate_video_game_rating(80, 70, 5, True)", "test2": "calculate_video_game_rating(50, 40, 0, False)", "test3": "calculate_video_game_rating(90, 85, 10, True)", "test4": "calculate_video_game_rating(60, 50, 2, False)", "test5": "calculate_video_game_rating(95, 90, 8, True)", "test6": "calculate_video_game_rating(70, 60, 4, False)", "test7": "calculate_video_game_rating(80, 80, 6, True)", "test8": "calculate_video_game_rating(40, 30, 1, False)", "test9": "calculate_video_game_rating(85, 75, 7, True)", "test10": "calculate_video_game_rating(55, 45, 3, False)"}, "hidden_information": "def calculate_video_game_rating(metacritic_score, rotten_tomato_score, awards_won, is_PartOfAMajorFranchise):\n    weights = {'metacritic_score': 0.4, 'rotten_tomato_score': 0.3, 'awards_won': 0.2, 'is_PartOfAMajorFranchise': 0.1}\n    rating = (weights['metacritic_score'] * metacritic_score +\n             weights['rotten_tomato_score'] * rotten_tomato_score +\n             weights['awards_won'] * (awards_won * 5) +\n             weights['is_PartOfAMajorFranchise'] * (1 if is_PartOfAMajorFranchise else 0))\n    return max(0, min(rating, 100))"}
{"ground_truth": "def translate_keycode(keycode):\n    keycodes = {\n        2: '1', 3: '2', 4: '3', 5: '4', 6: '5', 7: '6', 8: '7', 9: '8', 10: '9', 11: '0',\n        16: 'q', 17: 'w', 18: 'e', 19: 'r', 20: 't', 21: 'y', 22: 'u', 23: 'i', 24: 'o', 25: 'p',\n        30: 'a', 31: 's', 32: 'd', 33: 'f', 34: 'g', 35: 'h', 36: 'j', 37: 'k', 38: 'l',\n        44: 'z', 45: 'x', 46: 'c', 47: 'v', 48: 'b', 49: 'n', 50: 'm', 51: ' ',\n        65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F', 71: 'G', 72: 'H', 73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M',\n        78: 'N', 79: 'O', 80: 'P', 81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X', 89: 'Y', 90: 'Z'\n    }\n    return keycodes.get(keycode, 'Unknown')", "problem_description": "Write a Python function that translates AT keycodes to a human-readable format. What I'm looking for is a function that can take an integer keycode as input and output the corresponding character. For example, I want to use this function to see what character corresponds to the keycode 65.The signature of the function is: def translate_keycode(keycode)", "test_cases": {"test1": "translate_keycode(2)", "test2": "translate_keycode(17)", "test3": "translate_keycode(65)", "test4": "translate_keycode(32)", "test5": "translate_keycode(12345)", "test6": "translate_keycode(16)", "test7": "translate_keycode(44)", "test8": "translate_keycode(80)", "test9": "translate_keycode(67)", "test10": "translate_keycode(9)"}, "hidden_information": "def translate_keycode(keycode):\n    keycodes = {\n        2: '1', 3: '2', 4: '3', 5: '4', 6: '5', 7: '6', 8: '7', 9: '8', 10: '9', 11: '0',\n        16: 'q', 17: 'w', 18: 'e', 19: 'r', 20: 't', 21: 'y', 22: 'u', 23: 'i', 24: 'o', 25: 'p',\n        30: 'a', 31: 's', 32: 'd', 33: 'f', 34: 'g', 35: 'h', 36: 'j', 37: 'k', 38: 'l',\n        44: 'z', 45: 'x', 46: 'c', 47: 'v', 48: 'b', 49: 'n', 50: 'm', 51: ' ',\n        65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F', 71: 'G', 72: 'H', 73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M',\n        78: 'N', 79: 'O', 80: 'P', 81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X', 89: 'Y', 90: 'Z'\n    }\n    return keycodes.get(keycode, 'Unknown')"}
{"ground_truth": "def calculate_required_majority(electoral_districts, total_votes, winning_votes_per_district):\n    total_votes_required = sum(winning_votes_per_district)\n    return total_votes_required", "problem_description": "I want the LLM agent to write a python function to determine what it takes for a politician to win an election. Can it create something based on the number of electoral districts? How about the total number of votes?The signature of the function is: def calculate_required_majority(electoral_districts, total_votes, winning_votes_per_district)", "test_cases": {"test1": "calculate_required_majority(10, 1000, [50, 75, 90, 60, 70, 80, 40, 30, 20, 10])", "test2": "calculate_required_majority(5, 500, [200, 150, 100, 75, 50])", "test3": "calculate_required_majority(20, 2000, [50, 75, 50, 60, 70, 80, 40, 30, 20, 10, 90, 85, 65, 55, 35, 45, 25, 15, 105, 95])", "test4": "calculate_required_majority(1, 100, [100])", "test5": "calculate_required_majority(3, 300, [150, 75, 75])", "test6": "calculate_required_majority(12, 1200, [50, 75, 50, 60, 70, 80, 40, 30, 20, 10, 90, 85])", "test7": "calculate_required_majority(25, 2500, [50, 75, 50, 60, 70, 80, 40, 30, 20, 10, 90, 85, 65, 55, 35, 45, 25, 15, 105, 95, 110, 90, 80, 70, 60])", "test8": "calculate_required_majority(5, 500, [100, 100, 100, 100, 100])", "test9": "calculate_required_majority(8, 800, [100, 75, 50, 60, 70, 80, 40, 30])", "test10": "calculate_required_majority(2, 200, [150, 50])"}, "hidden_information": "def calculate_required_majority(electoral_districts, total_votes, winning_votes_per_district):\n    total_votes_required = sum(winning_votes_per_district)\n    return total_votes_required"}
{"ground_truth": "def sum_of_squares(n, m, k): return (m+1) * (n**2 + k*n*m + (k**2 * m * (2*m+1)) // 6)", "problem_description": "I need a python function to calculate a sum of squares, but it's a bit complicated. I have a sequence of numbers that starts at n, and each subsequent number increases by k. I want to sum the squares of these numbers up to the m-th number in the sequence. Can you write a function to do this?The signature of the function is: def sum_of_squares(n, m, k)", "test_cases": {"test1": "sum_of_squares(1, 2, 3)", "test2": "sum_of_squares(0, 5, 1)", "test3": "sum_of_squares(10, 1, 1)", "test4": "sum_of_squares(0, 0, 0)", "test5": "sum_of_squares(-2, 4, 2)", "test6": "sum_of_squares(5, 3, 2)", "test7": "sum_of_squares(0, 10, 5)", "test8": "sum_of_squares(2, 8, 3)", "test9": "sum_of_squares(-1, 9, 1)", "test10": "sum_of_squares(20, 2, 4)"}, "hidden_information": "def sum_of_squares(n, m, k): return (m+1) * (n**2 + k*n*m + (k**2 * m * (2*m+1)) // 6)"}
{"ground_truth": "def calculate_reputation_points(initial_reputation, bounty_amount): return max(initial_reputation - bounty_amount, 0)", "problem_description": "Can you write a Python function that calculates how many reputation points are left for a user after awarding a bounty? I don't remember the exact formula used by Stack Overflow.The signature of the function is: def calculate_reputation_points(initial_reputation, bounty_amount)", "test_cases": {"test1": "calculate_reputation_points(100, 50)", "test2": "calculate_reputation_points(200, 0)", "test3": "calculate_reputation_points(500, 1000)", "test4": "calculate_reputation_points(1000, 500)", "test5": "calculate_reputation_points(50, 25)", "test6": "calculate_reputation_points(150, 75)", "test7": "calculate_reputation_points(0, 100)", "test8": "calculate_reputation_points(100, 100)", "test9": "calculate_reputation_points(500, 0)", "test10": "calculate_reputation_points(1000, 1000)"}, "hidden_information": "def calculate_reputation_points(initial_reputation, bounty_amount): return max(initial_reputation - bounty_amount, 0)"}
{"ground_truth": "def calculate_long_toss_distance(age, velocity):\n    # Assume a linear decrease in distance with age, and a linear increase with velocity\n    if age < 25:\n        distance = (30 - age) * (velocity / 100) * 50\n    elif age < 31:\n        distance = (35 - age) * (velocity / 100) * 40\n    else:\n        distance = (40 - age) * (velocity / 100) * 30\n    return distance", "problem_description": "I need a Python function to calculate the optimal long-toss distance for a pitcher based on their age and velocity. Can you write a function that takes these two parameters as input and returns the distance? I'm not sure how the age and velocity should affect the distance, so you may need to ask me some questions to clarify.The signature of the function is: def calculate_long_toss_distance(age, velocity)", "test_cases": {"test1": "calculate_long_toss_distance(20, 95)", "test2": "calculate_long_toss_distance(30, 100)", "test3": "calculate_long_toss_distance(35, 90)", "test4": "calculate_long_toss_distance(25, 105)", "test5": "calculate_long_toss_distance(40, 85)", "test6": "calculate_long_toss_distance(22, 92)", "test7": "calculate_long_toss_distance(28, 98)", "test8": "calculate_long_toss_distance(38, 88)", "test9": "calculate_long_toss_distance(32, 102)", "test10": "calculate_long_toss_distance(45, 80)"}, "hidden_information": "def calculate_long_toss_distance(age, velocity):\n    # Assume a linear decrease in distance with age, and a linear increase with velocity\n    if age < 25:\n        distance = (30 - age) * (velocity / 100) * 50\n    elif age < 31:\n        distance = (35 - age) * (velocity / 100) * 40\n    else:\n        distance = (40 - age) * (velocity / 100) * 30\n    return distance"}
{"ground_truth": "def should_continue_business(venture_progress, time_frame, customer_growth_rate, revenue_target):\n    if len(venture_progress) < time_frame:\n        return 'Continue'\n    recent_progress = venture_progress[-time_frame:]\n    recent_average_customers = sum([progress['customers'] for progress in recent_progress]) / time_frame\n    recent_average_revenue = sum([progress['revenue'] for progress in recent_progress]) / time_frame\n    if recent_average_customers >= customer_growth_rate * recent_average_revenue >= revenue_target:\n        return 'Continue'\n    else:\n        return 'Quit'", "problem_description": "I need an agent to write a Python function that determines whether I should continue or quit a business venture based on its progress. Can you write a function that takes into account the time frame, customer growth rate, and revenue targets to make this decision?The signature of the function is: def should_continue_business(venture_progress, time_frame, customer_growth_rate, revenue_target)", "test_cases": {"test1": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 15, \"revenue\": 150}, {\"customers\": 20, \"revenue\": 200}], 2, 1.5, 100)", "test2": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 12, \"revenue\": 120}, {\"customers\": 15, \"revenue\": 150}], 3, 2, 150)", "test3": "should_continue_business([{\"customers\": 20, \"revenue\": 200}, {\"customers\": 18, \"revenue\": 180}, {\"customers\": 15, \"revenue\": 150}], 2, 1.5, 100)", "test4": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 20, \"revenue\": 200}, {\"customers\": 30, \"revenue\": 300}], 1, 1, 100)", "test5": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 15, \"revenue\": 150}, {\"customers\": 20, \"revenue\": 200}, {\"customers\": 25, \"revenue\": 250}], 2, 2, 200)", "test6": "should_continue_business([{\"customers\": 20, \"revenue\": 200}, {\"customers\": 25, \"revenue\": 250}, {\"customers\": 30, \"revenue\": 300}, {\"customers\": 35, \"revenue\": 350}], 3, 3, 300)", "test7": "should_continue_business([{\"customers\": 10, \"revenue\": 100}], 1, 1, 100)", "test8": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 20, \"revenue\": 200}, {\"customers\": 30, \"revenue\": 300}, {\"customers\": 40, \"revenue\": 400}], 4, 4, 400)", "test9": "should_continue_business([{\"customers\": 20, \"revenue\": 200}, {\"customers\": 25, \"revenue\": 250}, {\"customers\": 30, \"revenue\": 300}, {\"customers\": 35, \"revenue\": 350}], 2, 2, 200)", "test10": "should_continue_business([{\"customers\": 10, \"revenue\": 100}, {\"customers\": 15, \"revenue\": 150}, {\"customers\": 20, \"revenue\": 200}, {\"customers\": 25, \"revenue\": 250}], 3, 3, 300)"}, "hidden_information": "def should_continue_business(venture_progress, time_frame, customer_growth_rate, revenue_target):\n    if len(venture_progress) < time_frame:\n        return 'Continue'\n    recent_progress = venture_progress[-time_frame:]\n    recent_average_customers = sum([progress['customers'] for progress in recent_progress]) / time_frame\n    recent_average_revenue = sum([progress['revenue'] for progress in recent_progress]) / time_frame\n    if recent_average_customers >= customer_growth_rate * recent_average_revenue >= revenue_target:\n        return 'Continue'\n    else:\n        return 'Quit'"}
{"ground_truth": "def calculate_wheel_capacity(num_pods, pod_capacity): return num_pods * pod_capacity", "problem_description": "Hey, I need a python function to determine how many people can fit on the Wheel of Sheffield at a given time. I know it has multiple pods, but I don't know how to relate that to the overall capacity.The signature of the function is: def calculate_wheel_capacity(num_pods, pod_capacity)", "test_cases": {"test1": "calculate_wheel_capacity(42, 8)", "test2": "calculate_wheel_capacity(30, 10)", "test3": "calculate_wheel_capacity(50, 6)", "test4": "calculate_wheel_capacity(20, 12)", "test5": "calculate_wheel_capacity(15, 8)", "test6": "calculate_wheel_capacity(60, 9)", "test7": "calculate_wheel_capacity(48, 7)", "test8": "calculate_wheel_capacity(36, 11)", "test9": "calculate_wheel_capacity(25, 10)", "test10": "calculate_wheel_capacity(40, 8)"}, "hidden_information": "def calculate_wheel_capacity(num_pods, pod_capacity): return num_pods * pod_capacity"}
{"ground_truth": "def calculate_player_performance(player_stats, weights = {'points': 1, 'rebounds': 0.5, 'assists': 0.2, 'steals': 0.1, 'blocks': 0.1}): return sum(weights[stat] * player_stats[stat] for stat in weights)", "problem_description": "I need help writing a Python function to calculate a basketball player's performance based on their game statistics such as points, rebounds, assists, steals, and blocks. Can you help me write this function?The signature of the function is: def calculate_player_performance(player_stats, weights = {'points'", "test_cases": {"test1": "calculate_player_performance({'points': 20, 'rebounds': 10, 'assists': 5, 'steals': 2, 'blocks': 1})", "test2": "calculate_player_performance({'points': 30, 'rebounds': 15, 'assists': 7, 'steals': 3, 'blocks': 2}, weights={'points': 1.5, 'rebounds': 0.8, 'assists': 0.3, 'steals': 0.2, 'blocks': 0.2})", "test3": "calculate_player_performance({'points': 10, 'rebounds': 5, 'assists': 2, 'steals': 1, 'blocks': 0})", "test4": "calculate_player_performance({'points': 40, 'rebounds': 20, 'assists': 10, 'steals': 4, 'blocks': 3}, weights={'points': 2, 'rebounds': 1, 'assists': 0.5, 'steals': 0.25, 'blocks': 0.25})", "test5": "calculate_player_performance({'points': 25, 'rebounds': 12, 'assists': 6, 'steals': 2, 'blocks': 1})", "test6": "calculate_player_performance({'points': 35, 'rebounds': 18, 'assists': 8, 'steals': 3, 'blocks': 2}, weights={'points': 1.2, 'rebounds': 0.6, 'assists': 0.2, 'steals': 0.1, 'blocks': 0.1})", "test7": "calculate_player_performance({'points': 15, 'rebounds': 8, 'assists': 3, 'steals': 1, 'blocks': 0})", "test8": "calculate_player_performance({'points': 45, 'rebounds': 22, 'assists': 11, 'steals': 4, 'blocks': 3}, weights={'points': 2.5, 'rebounds': 1.2, 'assists': 0.6, 'steals': 0.3, 'blocks': 0.3})", "test9": "calculate_player_performance({'points': 28, 'rebounds': 14, 'assists': 7, 'steals': 2, 'blocks': 1})", "test10": "calculate_player_performance({'points': 32, 'rebounds': 16, 'assists': 8, 'steals': 3, 'blocks': 2}, weights={'points': 1.8, 'rebounds': 0.9, 'assists': 0.3, 'steals': 0.2, 'blocks': 0.2})"}, "hidden_information": "def calculate_player_performance(player_stats, weights = {'points': 1, 'rebounds': 0.5, 'assists': 0.2, 'steals': 0.1, 'blocks': 0.1}): return sum(weights[stat] * player_stats[stat] for stat in weights)"}
{"ground_truth": "def filter_meiotic_genes(gene_list, species, meiotic_genes):\n    meiotic_genes_for_species = [gene for gene in gene_list if gene in meiotic_genes]\n    return meiotic_genes_for_species", "problem_description": "I need a python function to determine if certain genes are meiotic in nature from a list of genes in a particular arthropod species. Can you help me write a function to filter the meiotic genes? For example, if I pass a list of genes from Nasonia and a list of known meiotic genes, the function should return a list of meiotic genes found in Nasonia.The signature of the function is: def filter_meiotic_genes(gene_list, species, meiotic_genes)", "test_cases": {"test1": "filter_meiotic_genes(['gene1', 'gene2', 'bol', 'crl'], 'Nasonia', ['bol', 'crl', 'mei1', 'mei2'])", "test2": "filter_meiotic_genes(['gene3', 'gene4', 'mei1', 'mei2'], 'Apis mellifera', ['bol', 'crl', 'mei1', 'mei2'])", "test3": "filter_meiotic_genes(['gene5', 'gene6', 'gene7', 'gene8'], 'Drosophila', ['bol', 'crl', 'mei1', 'mei2'])", "test4": "filter_meiotic_genes(['bol', 'crl', 'gene9', 'gene10'], 'Nasonia', ['bol', 'crl', 'mei1', 'mei2'])", "test5": "filter_meiotic_genes([], 'Apis mellifera', ['bol', 'crl', 'mei1', 'mei2'])", "test6": "filter_meiotic_genes(['gene11', 'gene12'], 'Drosophila', [])", "test7": "filter_meiotic_genes(['bol', 'crl', 'mei1', 'mei2'], 'Nasonia', ['gene13', 'gene14'])", "test8": "filter_meiotic_genes(['gene15', 'gene16', 'bol', 'crl'], 'Apis mellifera', ['bol', 'crl', 'mei1', 'mei2'])", "test9": "filter_meiotic_genes(['gene17', 'gene18', 'mei1', 'mei2'], 'Drosophila', ['bol', 'crl', 'mei1', 'mei2'])", "test10": "filter_meiotic_genes(['gene19', 'gene20'], 'Nasonia', ['gene21', 'gene22', 'bol', 'crl', 'mei1', 'mei2'])"}, "hidden_information": "def filter_meiotic_genes(gene_list, species, meiotic_genes):\n    meiotic_genes_for_species = [gene for gene in gene_list if gene in meiotic_genes]\n    return meiotic_genes_for_species"}
{"ground_truth": "def calculate_research_needed(assignment_type, research_guidelines): research_hours_per_type = { 'research_paper': 10, 'term_paper': 20, 'thesis': 50 }; research_multiplier = { 'short': 0.5, 'average': 1, 'long': 2 }; return research_hours_per_type.get(assignment_type, 0) * research_multiplier.get(research_guidelines.get('length', 'average'), 1)", "problem_description": "Can you help me write a python function that determines how many hours of research I need for this assignment based on its type and other guidelines the professor might have?The signature of the function is: def calculate_research_needed(assignment_type, research_guidelines)", "test_cases": {"test_case_1": "calculate_research_needed('research_paper', {'length': 'short'})", "test_case_2": "calculate_research_needed('term_paper', {'length': 'average'})", "test_case_3": "calculate_research_needed('thesis', {'length': 'long'})", "test_case_4": "calculate_research_needed('presentation', {'length': 'long'})", "test_case_5": "calculate_research_needed('research_paper', {'length': 'average'})", "test_case_6": "calculate_research_needed('term_paper', {'length': 'short'})", "test_case_7": "calculate_research_needed('thesis', {'length': 'average'})", "test_case_8": "calculate_research_needed('thesis', {})", "test_case_9": "calculate_research_needed('project', {'length': 'long'})", "test_case_10": "calculate_research_needed('research_paper', {'length': 'extra_long'})"}, "hidden_information": "def calculate_research_needed(assignment_type, research_guidelines): research_hours_per_type = { 'research_paper': 10, 'term_paper': 20, 'thesis': 50 }; research_multiplier = { 'short': 0.5, 'average': 1, 'long': 2 }; return research_hours_per_type.get(assignment_type, 0) * research_multiplier.get(research_guidelines.get('length', 'average'), 1)"}
{"ground_truth": "def phrase_sound_similar(input_phrase, target_phrase, tolerance=0.7):\n    input_phrase = input_phrase.replace(' ', '').lower()\n    target_phrase = target_phrase.replace(' ', '').lower()\n    similar_score = 0\n    for char1, char2 in zip(input_phrase, target_phrase):\n        if char1 == char2:\n            similar_score += 1\n    similar_score /= len(target_phrase)\n    return similar_score >= tolerance", "problem_description": "Write a python function to determine if a phrase sounds similar to another, given a high tolerance factor. For example 'do want to' almost sounds like '212'. Talk to me about how to make it so your function can make this decision.The signature of the function is: def phrase_sound_similar(input_phrase, target_phrase, tolerance=0.7)", "test_cases": {"test1": "phrase_sound_similar('do want to', '212', 0.7)", "test2": "phrase_sound_similar('listen', 'silent', 0.7)", "test3": "phrase_sound_similar('hello', 'world', 0.7)", "test4": "phrase_sound_similar('I am a creative genius', 'I m a gniyrt evitaerc', 0.7)", "test5": "phrase_sound_similar('the quick brown fox', 'the uick bown foc', 0.7)", "test6": "phrase_sound_similar('minimum', 'minumm', 0.7)", "test7": "phrase_sound_similar('goal keeper upper', 'goaul keiper uuper', 0.6)", "test8": "phrase_sound_similar('higher level think', 'highr evel tnkinh', 0.7)", "test9": "phrase_sound_similar('character skill leader', 'charaakter sckill leiider', 0.7)", "test10": "phrase_sound_similar('beta standard version', 'beeta estznrd vsson', 0.7)"}, "hidden_information": "def phrase_sound_similar(input_phrase, target_phrase, tolerance=0.7):\n    input_phrase = input_phrase.replace(' ', '').lower()\n    target_phrase = target_phrase.replace(' ', '').lower()\n    similar_score = 0\n    for char1, char2 in zip(input_phrase, target_phrase):\n        if char1 == char2:\n            similar_score += 1\n    similar_score /= len(target_phrase)\n    return similar_score >= tolerance"}
{"ground_truth": "def assess_key_player(candidate_traits): \n  required_traits = ['selfless_collaborator', 'sense_of_urgency', 'risk_tolerance', 'strength_in_interpersonal_relationships']\n  score = 0\n  for trait in required_traits:\n    if trait in candidate_traits and candidate_traits[trait] > 0.5:\n      score += 1\n  return score >= 4", "problem_description": "Can you write a python function that identifies and assesses key players in an industry setting based on certain traits discussed in this article about industry and academia?The signature of the function is: def assess_key_player(candidate_traits)", "test_cases": {"test1": "assess_key_player({'selfless_collaborator': 0.8, 'sense_of_urgency': 0.6, 'risk_tolerance': 0.7, 'strength_in_interpersonal_relationships': 0.9})", "test2": "assess_key_player({'selfless_collaborator': 0.4, 'sense_of_urgency': 0.6, 'risk_tolerance': 0.7, 'strength_in_interpersonal_relationships': 0.9})", "test3": "assess_key_player({'selfless_collaborator': 0.8, 'sense_of_urgency': 0.6, 'risk_tolerance': 0.7, 'other_trait': 0.9})", "test4": "assess_key_player({'selfless_collaborator': 0.8, 'sense_of_urgency': 0.6, 'risk_tolerance': 0.7, 'strength_in_interpersonal_relationships': 0})", "test5": "assess_key_player({'selfless_collaborator': 0.8, 'sense_of_urgency': 0.6, 'risk_tolerance': 0, 'strength_in_interpersonal_relationships': 0.9})", "test6": "assess_key_player({'selfless_collaborator': 0.8, 'sense_of_urgency': 0, 'risk_tolerance': 0.7, 'strength_in_interpersonal_relationships': 0.9})", "test7": "assess_key_player({'selfless_collaborator': 0, 'sense_of_urgency': 0.6, 'risk_tolerance': 0.7, 'strength_in_interpersonal_relationships': 0.9})", "test8": "assess_key_player({'selfless_collaborator': 1, 'sense_of_urgency': 1, 'risk_tolerance': 1, 'strength_in_interpersonal_relationships': 1})", "test9": "assess_key_player({'selfless_collaborator': 0, 'sense_of_urgency': 0, 'risk_tolerance': 0, 'strength_in_interpersonal_relationships': 0})", "test10": "assess_key_player({'selfless_collaborator': 0.5, 'sense_of_urgency': 0.5, 'risk_tolerance': 0.5, 'strength_in_interpersonal_relationships': 0.5})"}, "hidden_information": "def assess_key_player(candidate_traits): \n  required_traits = ['selfless_collaborator', 'sense_of_urgency', 'risk_tolerance', 'strength_in_interpersonal_relationships']\n  score = 0\n  for trait in required_traits:\n    if trait in candidate_traits and candidate_traits[trait] > 0.5:\n      score += 1\n  return score >= 4"}
{"ground_truth": "def simulate_asexual_reproduction(initial_cells, num_divisions):\n    cells = [{'flagella': 2} for _ in range(initial_cells)]\n    for _ in range(num_divisions):\n        new_cells = []\n        for cell in cells:\n            cell['flagella'] = 0\n            new_cells.extend([{'flagella': 2} for _ in range(4)])\n        cells = new_cells\n    return cells", "problem_description": "Write a Python function that simulates the asexual reproduction of Chlamydomonas reinhardtii algae. The function should take into account the number of initial cells and the number of times they divide. I want the function to return a list of cells, where each cell is represented as a dictionary with a 'flagella' key.The signature of the function is: def simulate_asexual_reproduction(initial_cells, num_divisions)", "test_cases": {"test1": "simulate_asexual_reproduction(1, 1)", "test2": "simulate_asexual_reproduction(2, 2)", "test3": "simulate_asexual_reproduction(4, 0)", "test4": "simulate_asexual_reproduction(8, 3)", "test5": "simulate_asexual_reproduction(16, 1)", "test6": "simulate_asexual_reproduction(32, 2)", "test7": "simulate_asexual_reproduction(64, 0)", "test8": "simulate_asexual_reproduction(128, 3)", "test9": "simulate_asexual_reproduction(256, 1)", "test10": "simulate_asexual_reproduction(512, 2)"}, "hidden_information": "def simulate_asexual_reproduction(initial_cells, num_divisions):\n    cells = [{'flagella': 2} for _ in range(initial_cells)]\n    for _ in range(num_divisions):\n        new_cells = []\n        for cell in cells:\n            cell['flagella'] = 0\n            new_cells.extend([{'flagella': 2} for _ in range(4)])\n        cells = new_cells\n    return cells"}
{"ground_truth": "def calculate_fair_value(current_price, expected_earnings, growth_rate, dividend_yield, required_return): \n    required_return = required_return / 100\n    fair_value = (expected_earnings * (1 + growth_rate)) / (required_return - growth_rate) - (dividend_yield / required_return) * current_price\n    return fair_value", "problem_description": "I want you to write a Python function to calculate the fair value of a stock based on its current price, expected earnings, earnings growth rate, dividend yield, and the required return on investment. I'm not sure how to define the fair value formula, can you help me with that?The signature of the function is: def calculate_fair_value(current_price, expected_earnings, growth_rate, dividend_yield, required_return)", "test_cases": {"test1": "calculate_fair_value(418.49, 43.62, 0.2088, 0.0292, 0.10)", "test2": "calculate_fair_value(500.0, 50.0, 0.20, 0.03, 0.12)", "test3": "calculate_fair_value(654.30, 54.31, 0.2099, 0.0292, 0.11)", "test4": "calculate_fair_value(372.12, 40.0, 0.15, 0.025, 0.09)", "test5": "calculate_fair_value(437.68, 45.0, 0.22, 0.031, 0.13)", "test6": "calculate_fair_value(400.0, 42.0, 0.21, 0.028, 0.10)", "test7": "calculate_fair_value(450.0, 46.0, 0.23, 0.033, 0.14)", "test8": "calculate_fair_value(350.0, 38.0, 0.19, 0.024, 0.08)", "test9": "calculate_fair_value(480.0, 50.0, 0.25, 0.036, 0.15)", "test10": "calculate_fair_value(550.0, 58.0, 0.27, 0.039, 0.16)"}, "hidden_information": "def calculate_fair_value(current_price, expected_earnings, growth_rate, dividend_yield, required_return): \n    required_return = required_return / 100\n    fair_value = (expected_earnings * (1 + growth_rate)) / (required_return - growth_rate) - (dividend_yield / required_return) * current_price\n    return fair_value"}
{"ground_truth": "def calculate_optimal_insulin_dosage(glucose_level, meal_carbs, patient_weight, sensitivity_factor):\n    # calculate insulin dosage based on glucose level, meal carbs, patient weight, and sensitivity factor\n    insulin_dosage = (glucose_level * 0.1) + (meal_carbs * 0.2) - (patient_weight * 0.1) + sensitivity_factor\n    return insulin_dosage", "problem_description": "I need a python function to calculate the optimal insulin dosage for a patient. The dosage should depend on the patient's current glucose level, the number of carbs they'll be eating, their weight, and some sensitivity factor, but I'm not sure what the exact formula should be. Can you help me write this function?The signature of the function is: def calculate_optimal_insulin_dosage(glucose_level, meal_carbs, patient_weight, sensitivity_factor)", "test_cases": {"test1": "calculate_optimal_insulin_dosage(150, 30, 70, 1.2)", "test2": "calculate_optimal_insulin_dosage(180, 40, 60, 1.5)", "test3": "calculate_optimal_insulin_dosage(120, 20, 80, 1.0)", "test4": "calculate_optimal_insulin_dosage(200, 50, 90, 1.8)", "test5": "calculate_optimal_insulin_dosage(100, 10, 40, 0.8)", "test6": "calculate_optimal_insulin_dosage(250, 60, 100, 2.0)", "test7": "calculate_optimal_insulin_dosage(220, 30, 60, 1.6)", "test8": "calculate_optimal_insulin_dosage(180, 20, 50, 1.4)", "test9": "calculate_optimal_insulin_dosage(280, 40, 80, 1.9)", "test10": "calculate_optimal_insulin_dosage(160, 25, 70, 1.3)"}, "hidden_information": "def calculate_optimal_insulin_dosage(glucose_level, meal_carbs, patient_weight, sensitivity_factor):\n    # calculate insulin dosage based on glucose level, meal carbs, patient weight, and sensitivity factor\n    insulin_dosage = (glucose_level * 0.1) + (meal_carbs * 0.2) - (patient_weight * 0.1) + sensitivity_factor\n    return insulin_dosage"}
{"ground_truth": "def calculate_acquisition_cost(acquisition_price, number_of_patents, years_of_profit, patent_license_agreement_price):\n    if number_of_patents * patent_license_agreement_price < acquisition_price:\n        return acquisition_price\n    else:\n        return number_of_patents * patent_license_agreement_price", "problem_description": "Can you write a python function to calculate the total acquisition cost for a company, considering the price of acquisition, the number of patents acquired, the profit made by the company over a certain period, and the cost of a patent license agreement? I need this function to determine the more costly scenario.The signature of the function is: def calculate_acquisition_cost(acquisition_price, number_of_patents, years_of_profit, patent_license_agreement_price)", "test_cases": {"test1": "calculate_acquisition_cost(12500000000, 25000, 2, 500000)", "test2": "calculate_acquisition_cost(15000000000, 30000, 5, 600000)", "test3": "calculate_acquisition_cost(10000000000, 20000, 3, 550000)", "test4": "calculate_acquisition_cost(12000000000, 25000, 2, 525000)", "test5": "calculate_acquisition_cost(18000000000, 35000, 4, 650000)", "test6": "calculate_acquisition_cost(9000000000, 15000, 1, 400000)", "test7": "calculate_acquisition_cost(16000000000, 32000, 6, 700000)", "test8": "calculate_acquisition_cost(11000000000, 22000, 3, 500000)", "test9": "calculate_acquisition_cost(14000000000, 28000, 2, 450000)", "test10": "calculate_acquisition_cost(13000000000, 26000, 5, 575000)"}, "hidden_information": "def calculate_acquisition_cost(acquisition_price, number_of_patents, years_of_profit, patent_license_agreement_price):\n    if number_of_patents * patent_license_agreement_price < acquisition_price:\n        return acquisition_price\n    else:\n        return number_of_patents * patent_license_agreement_price"}
{"ground_truth": "def categorize_errors(log_file, error_types):\n    categorized_errors = {}\n    for error in log_file:\n        error_type = error.split(':')[0].strip()\n        if error_type in error_types:\n            if error_type not in categorized_errors:\n                categorized_errors[error_type] = []\n            categorized_errors[error_type].append(error)\n    return categorized_errors", "problem_description": "Can you write a Python function that takes a log file and a list of error types as input and returns a dictionary with error types as keys and a list of corresponding error messages as values?The signature of the function is: def categorize_errors(log_file, error_types)", "test_cases": {"test1": "categorize_errors(['Error: Syntax error', 'Warning: unused variable', 'Error: undefined reference'], ['Error', 'Warning'])", "test2": "categorize_errors(['Error: divide by zero', 'Warning: deprecated function', 'Error: invalid input'], ['Error', 'Warning'])", "test3": "categorize_errors(['Info: program started', 'Warning: low disk space', 'Error: file not found'], ['Error', 'Warning', 'Info'])", "test4": "categorize_errors(['Error: network connection failed', 'Warning: timeout', 'Error: database error'], ['Error', 'Warning'])", "test5": "categorize_errors(['Info: user logged in', 'Warning: session expired', 'Error: invalid credentials'], ['Error', 'Warning', 'Info'])", "test6": "categorize_errors(['Error: unknown error', 'Warning: unknown warning'], ['Error', 'Warning'])", "test7": "categorize_errors(['Info: program ended', 'Warning: resources exhausted', 'Error: system crash'], ['Error', 'Warning', 'Info'])", "test8": "categorize_errors(['Error: invalid data', 'Warning: data truncated', 'Error: data corruption'], ['Error', 'Warning'])", "test9": "categorize_errors(['Info: user logged out', 'Warning: session timeout', 'Error: authentication failed'], ['Error', 'Warning', 'Info'])", "test10": "categorize_errors(['Error: unknown error', 'Warning: unknown warning'], ['Error', 'Warning'])"}, "hidden_information": "def categorize_errors(log_file, error_types):\n    categorized_errors = {}\n    for error in log_file:\n        error_type = error.split(':')[0].strip()\n        if error_type in error_types:\n            if error_type not in categorized_errors:\n                categorized_errors[error_type] = []\n            categorized_errors[error_type].append(error)\n    return categorized_errors"}
{"ground_truth": "def analyze_device_usage(device_stats, threshold_hours):\n    efficient_users = [user for user, stats in device_stats.items() if stats['hours_used'] / stats['days_used'] < threshold_hours]\n    return efficient_users", "problem_description": "I need a Python function to analyze device usage. I have a bunch of data on how people are using their devices, and I want to figure out who's using them the most efficiently. Can you write a function to help me do that?The signature of the function is: def analyze_device_usage(device_stats, threshold_hours)", "test_cases": {"test1": "analyze_device_usage({'user1': {'hours_used': 10, 'days_used': 5}, 'user2': {'hours_used': 5, 'days_used': 5}}, 2)", "test2": "analyze_device_usage({'user3': {'hours_used': 20, 'days_used': 10}, 'user4': {'hours_used': 10, 'days_used': 3}}, 2)", "test3": "analyze_device_usage({'user5': {'hours_used': 15, 'days_used': 7}, 'user6': {'hours_used': 8, 'days_used': 4}}, 2)", "test4": "analyze_device_usage({'user7': {'hours_used': 12, 'days_used': 6}, 'user8': {'hours_used': 18, 'days_used': 9}}, 2)", "test5": "analyze_device_usage({'user9': {'hours_used': 9, 'days_used': 3}, 'user10': {'hours_used': 21, 'days_used': 11}}, 2)", "test6": "analyze_device_usage({'user11': {'hours_used': 8, 'days_used': 4}, 'user12': {'hours_used': 16, 'days_used': 8}}, 2)", "test7": "analyze_device_usage({'user13': {'hours_used': 25, 'days_used': 13}, 'user14': {'hours_used': 11, 'days_used': 5}}, 2)", "test8": "analyze_device_usage({'user15': {'hours_used': 14, 'days_used': 7}, 'user16': {'hours_used': 6, 'days_used': 3}}, 2)", "test9": "analyze_device_usage({'user17': {'hours_used': 22, 'days_used': 12}, 'user18': {'hours_used': 13, 'days_used': 6}}, 2)", "test10": "analyze_device_usage({'user19': {'hours_used': 19, 'days_used': 10}, 'user20': {'hours_used': 7, 'days_used': 3}}, 2)"}, "hidden_information": "def analyze_device_usage(device_stats, threshold_hours):\n    efficient_users = [user for user, stats in device_stats.items() if stats['hours_used'] / stats['days_used'] < threshold_hours]\n    return efficient_users"}
{"ground_truth": "def calculate_performance(game_stats, team_stats): return (sum(game_stats) / len(game_stats)) * sum(team_stats) / len(team_stats)", "problem_description": "Hey, I need a python function that calculates performance based on some statistics. I had a coach who used to calculate this kind of thing and I want to replicate it, but I'm not exactly sure how he did it. He was a big believer in discipline and consistency. He also used to track a bunch of numbers and stats. The function should take into account the importance of teamwork and consistency. Can you write a python function to do this?The signature of the function is: def calculate_performance(game_stats, team_stats)", "test_cases": {"test1": "calculate_performance([10, 20, 30], [0.5, 0.7, 0.9])", "test2": "calculate_performance([40, 50, 60], [0.2, 0.4, 0.6])", "test3": "calculate_performance([2, 4, 6], [0.1, 0.3, 0.5])", "test4": "calculate_performance([100, 200, 300], [0.8, 0.9, 1.0])", "test5": "calculate_performance([5, 10, 15], [0.6, 0.7, 0.8])", "test6": "calculate_performance([8, 16, 24], [0.3, 0.4, 0.5])", "test7": "calculate_performance([20, 30, 40], [0.9, 1.0, 1.1])", "test8": "calculate_performance([1, 2, 3], [0.2, 0.3, 0.4])", "test9": "calculate_performance([50, 60, 70], [0.5, 0.6, 0.7])", "test10": "calculate_performance([25, 35, 45], [0.4, 0.5, 0.6])"}, "hidden_information": "def calculate_performance(game_stats, team_stats): return (sum(game_stats) / len(game_stats)) * sum(team_stats) / len(team_stats)"}
{"ground_truth": "def should_serve_cache(max_age, cache_response_code, backend_response_code, is_backend_down, cache_current_age):\n    if is_backend_down or (400 <= backend_response_code <= 599):\n        return True\n    else:\n        return cache_current_age <= max_age and cache_response_code < 400", "problem_description": "I'd like you to write a Python function that determines whether a cached HTTP response should be served to the user instead of making a new request to the backend. The function should consider several factors, including the maximum age of the cache, the response code of the cached response, the response code of the backend, and whether the backend is down or not. If the backend is down or returns an error response code (5xx), the cached response should be served only if it's not too old. If the backend is up and returns a non-error response code, the cached response should be served only if it's fresh enough. Can you write this function for me?The signature of the function is: def should_serve_cache(max_age, cache_response_code, backend_response_code, is_backend_down, cache_current_age)", "test_cases": {"test1": "should_serve_cache(1, 200, 500, True, 0.5)", "test2": "should_serve_cache(1, 200, 200, False, 0.5)", "test3": "should_serve_cache(1, 200, 500, False, 2)", "test4": "should_serve_cache(1, 404, 200, True, 0.5)", "test5": "should_serve_cache(1, 200, 404, False, 1.5)", "test6": "should_serve_cache(1, 200, 200, True, 0.5)", "test7": "should_serve_cache(0, 200, 500, True, 0.5)", "test8": "should_serve_cache(1, 200, 200, False, 2)", "test9": "should_serve_cache(10, 200, 500, False, 5)", "test10": "should_serve_cache(1, 200, 500, True, 1.5)"}, "hidden_information": "def should_serve_cache(max_age, cache_response_code, backend_response_code, is_backend_down, cache_current_age):\n    if is_backend_down or (400 <= backend_response_code <= 599):\n        return True\n    else:\n        return cache_current_age <= max_age and cache_response_code < 400"}
{"ground_truth": "def manipulate_multiline_text(text, action, line_number, new_text=None):\n  lines = text.split('\\n')\n  if action == 'clear':\n    lines[line_number - 1] = ''\n  elif action == 'update':\n    lines[line_number - 1] = new_text\n  return '\\n'.join(lines)", "problem_description": "I need a python function to clear or update a specific line in a multiline string, can you help me with that?The signature of the function is: def manipulate_multiline_text(text, action, line_number, new_text=None)", "test_cases": {"test1": "manipulate_multiline_text('Hello\\nWorld\\nPython', 'clear', 2)", "test2": "manipulate_multiline_text('Hello\\nWorld\\nPython', 'update', 1, 'Hi')", "test3": "manipulate_multiline_text('Line1\\nLine2\\nLine3', 'clear', 3)", "test4": "manipulate_multiline_text('This is\\na multiline\\nstring', 'update', 2, 'multilined')", "test5": "manipulate_multiline_text('Single line', 'clear', 1)", "test6": "manipulate_multiline_text('Multiple\\nlines of\\ntext', 'update', 2, 'line')", "test7": "manipulate_multiline_text('One\\nTwo\\nThree', 'clear', 2)", "test8": "manipulate_multiline_text('I am\\na\\nmultiline', 'update', 3, 'multilin')", "test9": "manipulate_multiline_text('1\\n2\\n3\\n4', 'clear', 4)", "test10": "manipulate_multiline_text('abc\\ndef\\nghi', 'update', 1, 'new')"}, "hidden_information": "def manipulate_multiline_text(text, action, line_number, new_text=None):\n  lines = text.split('\\n')\n  if action == 'clear':\n    lines[line_number - 1] = ''\n  elif action == 'update':\n    lines[line_number - 1] = new_text\n  return '\\n'.join(lines)"}
{"ground_truth": "def check_svg_file(svg_file_path):\n    return svg_file_path.lower().endswith('.svg')", "problem_description": "Can you help me write a python function to determine if an SVG file generated by my web application can be opened in Adobe Illustrator? The files seem exactly the same but one works and the other does not.The signature of the function is: def check_svg_file(svg_file_path)", "test_cases": {"test1": "check_svg_file('test.svg')", "test2": "check_svg_file('test.SVG')", "test3": "check_svg_file('test.jpg')", "test4": "check_svg_file('map.svg')", "test5": "check_svg_file('MAP.svg')", "test6": "check_svg_file('image.svg')", "test7": "check_svg_file('Invalid.File')", "test8": "check_svg_file('valid_file.SVG')", "test9": "check_svg_file('file_without_extension')", "test10": "check_svg_file('another_valid_file.svg')"}, "hidden_information": "def check_svg_file(svg_file_path):\n    return svg_file_path.lower().endswith('.svg')"}
{"ground_truth": "def invert_text_colors(text):\n    inverted_colors = {'black': 'white', 'white': 'black', 'Black': 'White', 'White': 'Black'}\n    words = text.split()\n    inverted_text = ' '.join(word if word.lower() not in ['black', 'white'] else inverted_colors[word] for word in words)\n    return inverted_text", "problem_description": "I'm having trouble reading some text because it's white on black background. I need a Python function that can invert the colors of certain words in a given text. Can you write a function that takes a string as input and outputs the text with 'black' and 'white' swapped?The signature of the function is: def invert_text_colors(text)", "test_cases": {"test1": "invert_text_colors('This text is written in black ink on white paper.')", "test2": "invert_text_colors('The black cat slept on the white bed.')", "test3": "invert_text_colors('I love reading books with black font on white background.')", "test4": "invert_text_colors('The white wedding dress looked beautiful against the black tuxedo.')", "test5": "invert_text_colors('Black and white are my favorite colors.')", "test6": "invert_text_colors('This text has no black or white colors.')", "test7": "invert_text_colors('Black White black white Black White.')", "test8": "invert_text_colors('The blackboard was filled with white chalk.')", "test9": "invert_text_colors('White noise is better than black silence.')", "test10": "invert_text_colors('The black holes in space are not white.')"}, "hidden_information": "def invert_text_colors(text):\n    inverted_colors = {'black': 'white', 'white': 'black', 'Black': 'White', 'White': 'Black'}\n    words = text.split()\n    inverted_text = ' '.join(word if word.lower() not in ['black', 'white'] else inverted_colors[word] for word in words)\n    return inverted_text"}
{"ground_truth": "def get_espada_member_status(member_number, is_band_active, has_phantom\u0395\u039bNumbers_released):\n    if has_phantom\u0395\u039bNumbers_released and member_number == 1:\n        return 'Is the strongest'\n    elif has_phantom\u0395\u039bNumbers_released and member_number > 1:\n        return 'The strongest Espada'\n    elif is_band_active and has_phantom\u0395\u039bNumbers_released and member_number == 2:\n        return 'Awesome'\n    elif member_number == 4:\n        return 'Emo as hell'\n    elif is_band_active and has_phantom\u0395\u039bNumbers_released and member_number > 9:\n        return 'Has left the Espada to pursue in Baker'\n    elif not is_band_active and member_number < 11:\n        return ' The 11th seat is unworthy of him'\n    else:\n        return 'No clue. Care to elaborate?'", "problem_description": "I need your help, can you write a python function that determines the status of an Espada band member based on their hierarchy ranking in the band (i.e number in the lineup) and potentially some other important information (IM not sure yet) as we might have some extra requirementsThe signature of the function is: def get_espada_member_status(member_number, is_band_active, has_phantom\u0395\u039bNumbers_released)", "test_cases": {"test1": "get_espada_member_status(4, True, True)", "test2": "get_espada_member_status(1, False, False)", "test3": "get_espada_member_status(10, True, False)", "test4": "get_espada_member_status(4, True, True)", "test5": "get_espada_member_status(3, False, False)", "test6": "get_espada_member_status(2, True, False)", "test7": "get_espada_member_status(15, True, True)", "test8": "get_espada_member_status(4, False, False)", "test9": "get_espada_member_status(9, True, True)", "test10": "get_espada_member_status(1, True, True)"}, "hidden_information": "def get_espada_member_status(member_number, is_band_active, has_phantom\u0395\u039bNumbers_released):\n    if has_phantom\u0395\u039bNumbers_released and member_number == 1:\n        return 'Is the strongest'\n    elif has_phantom\u0395\u039bNumbers_released and member_number > 1:\n        return 'The strongest Espada'\n    elif is_band_active and has_phantom\u0395\u039bNumbers_released and member_number == 2:\n        return 'Awesome'\n    elif member_number == 4:\n        return 'Emo as hell'\n    elif is_band_active and has_phantom\u0395\u039bNumbers_released and member_number > 9:\n        return 'Has left the Espada to pursue in Baker'\n    elif not is_band_active and member_number < 11:\n        return ' The 11th seat is unworthy of him'\n    else:\n        return 'No clue. Care to elaborate?'"}
{"ground_truth": "def assess_panda_risk(pandas, bamboo_consumption, reproduction_rate, hobbies):\n    extinction_threshold = 10  # arbitrary threshold\n    if bamboo_consumption > extinction_threshold:\n        return True\n    if reproduction_rate < 0.5:\n        return True\n    if ' DDR dancing' in hobbies or 'plotting to hunt down Edward Cullen' in hobbies:\n        return True\n    return False", "problem_description": "Can you write a Python function that takes in a list of pandas, their bamboo consumption rates, reproduction rates, and various hobbies, and determines whether they are at risk of extinction? The function should return True if the pandas are at risk and False otherwise. We want to account for factors such as high bamboo consumption, low reproduction rates, and other hobbies that may impact their survival.The signature of the function is: def assess_panda_risk(pandas, bamboo_consumption, reproduction_rate, hobbies)", "test_cases": {"test1": "assess_panda_risk([{'name': 'Panda1', 'bamboo_consumption': 15, 'reproduction_rate': 0.6, 'hobbies': ['DDR dancing']}], 15, 0.6, ['DDR dancing'])", "test2": "assess_panda_risk([{'name': 'Panda2', 'bamboo_consumption': 5, 'reproduction_rate': 0.6, 'hobbies': ['plotting to hunt down Edward Cullen']}], 5, 0.6, ['plotting to hunt down Edward Cullen'])", "test3": "assess_panda_risk([{'name': 'Panda3', 'bamboo_consumption': 10, 'reproduction_rate': 0.7, 'hobbies': ['backstabbing people']}], 10, 0.7, ['backstabbing people'])", "test4": "assess_panda_risk([{'name': 'Panda4', 'bamboo_consumption': 8, 'reproduction_rate': 0.8, 'hobbies': [' DDR dancing', 'plotting to hunt down Edward Cullen']}], 8, 0.8, [' DDR dancing', 'plotting to hunt down Edward Cullen'])", "test5": "assess_panda_risk([{'name': 'Panda5', 'bamboo_consumption': 12, 'reproduction_rate': 0.4, 'hobbies': ['backstabbing people', ' DDR dancing']}], 12, 0.4, ['backstabbing people', ' DDR dancing'])", "test6": "assess_panda_risk([{'name': 'Panda6', 'bamboo_consumption': 6, 'reproduction_rate': 0.9, 'hobbies': []}], 6, 0.9, [])", "test7": "assess_panda_risk([{'name': 'Panda7', 'bamboo_consumption': 9, 'reproduction_rate': 0.5, 'hobbies': [' DDR dancing']}], 9, 0.5, [' DDR dancing'])", "test8": "assess_panda_risk([{'name': 'Panda8', 'bamboo_consumption': 11, 'reproduction_rate': 0.6, 'hobbies': ['plotting to hunt down Edward Cullen']}], 11, 0.6, ['plotting to hunt down Edward Cullen'])", "test9": "assess_panda_risk([{'name': 'Panda9', 'bamboo_consumption': 7, 'reproduction_rate': 0.7, 'hobbies': ['backstabbing people']}], 7, 0.7, ['backstabbing people'])", "test10": "assess_panda_risk([{'name': 'Panda10', 'bamboo_consumption': 13, 'reproduction_rate': 0.8, 'hobbies': [' DDR dancing', 'plotting to hunt down Edward Cullen']}], 13, 0.8, [' DDR dancing', 'plotting to hunt down Edward Cullen'])"}, "hidden_information": "def assess_panda_risk(pandas, bamboo_consumption, reproduction_rate, hobbies):\n    extinction_threshold = 10  # arbitrary threshold\n    if bamboo_consumption > extinction_threshold:\n        return True\n    if reproduction_rate < 0.5:\n        return True\n    if ' DDR dancing' in hobbies or 'plotting to hunt down Edward Cullen' in hobbies:\n        return True\n    return False"}
{"ground_truth": "def calculate_average_score(scores): return sum(scores) / len(scores)", "problem_description": "Can you write a python function for me to calculate the average score? I want to be able to find the average of any set of scores...The signature of the function is: def calculate_average_score(scores)", "test_cases": {"test1": "calculate_average_score([5, 5, 5, 5, 5])", "test2": "calculate_average_score([1, 2, 3, 4, 5, 6])", "test3": "calculate_average_score([10, 20, 30, 40, 50])", "test4": "calculate_average_score([1, 1, 1, 1, 1])", "test5": "calculate_average_score([18.75, 18.75, 18.75, 18.75, 18.75])", "test6": "calculate_average_score([2.5, 5, 7.5, 10])", "test7": "calculate_average_score([3, 6, 9, 12, 15])", "test8": "calculate_average_score([8, 16, 24, 32, 40])", "test9": "calculate_average_score([1.25, 2.5, 3.75, 5])", "test10": "calculate_average_score([22, 22, 22, 22, 22])"}, "hidden_information": "def calculate_average_score(scores): return sum(scores) / len(scores)"}
{"ground_truth": "def calculate_vote_share(candidate_votes, total_votes, party_vote_share): return round((candidate_votes / total_votes) * party_vote_share, 2)", "problem_description": "Politicians often need to estimate their vote share in various elections to make informed decisions. Can you write a python function to calculate the vote share of a candidate in an election given the number of votes they received, the total votes, and the vote share of their party?The signature of the function is: def calculate_vote_share(candidate_votes, total_votes, party_vote_share)", "test_cases": {"test1": "calculate_vote_share(10000, 50000, 0.6)", "test2": "calculate_vote_share(2000, 10000, 0.8)", "test3": "calculate_vote_share(5000, 20000, 0.4)", "test4": "calculate_vote_share(7500, 30000, 0.7)", "test5": "calculate_vote_share(12000, 60000, 0.9)", "test6": "calculate_vote_share(18000, 90000, 0.5)", "test7": "calculate_vote_share(22000, 110000, 0.3)", "test8": "calculate_vote_share(28000, 140000, 0.8)", "test9": "calculate_vote_share(33000, 165000, 0.2)", "test10": "calculate_vote_share(38000, 190000, 0.6)"}, "hidden_information": "def calculate_vote_share(candidate_votes, total_votes, party_vote_share): return round((candidate_votes / total_votes) * party_vote_share, 2)"}
{"ground_truth": "def apply_pricing_changes(prices, margins, threshold_1=80, threshold_2=200, add_1=10, add_2=25):\n    for i in range(len(prices)):\n        if prices[i] < threshold_1:\n            prices[i] += add_1\n        elif prices[i] > threshold_2:\n            prices[i] += add_2\n        if prices[i] * (1 - margins[i]) < 0:\n            raise ValueError(\"Margin not met for product {}\")\n    return prices", "problem_description": "Hi, I need you to write a Python function that can apply pricing changes to a list of products based on certain rules. The rules are: if the price is less than $80, add $10; if the price is more than $200, add $25. Also, the function should ensure that the margin for each product is being met. Can you help me with this?The signature of the function is: def apply_pricing_changes(prices, margins, threshold_1=80, threshold_2=200, add_1=10, add_2=25)", "test_cases": {"test1": "apply_pricing_changes([50, 100, 250], [0.2, 0.3, 0.1])", "test2": "apply_pricing_changes([70, 250, 300], [0.1, 0.2, 0.3])", "test3": "apply_pricing_changes([60, 80, 200], [0.15, 0.25, 0.1])", "test4": "apply_pricing_changes([50, 100, 250], [0.3, 0.2, 0.1])", "test5": "apply_pricing_changes([60, 80, 200], [0.1, 0.2, 0.3])", "test6": "apply_pricing_changes([70, 250, 300], [0.2, 0.1, 0.3])", "test7": "apply_pricing_changes([50, 100, 250], [0.1, 0.2, 0.3])", "test8": "apply_pricing_changes([60, 80, 200], [0.2, 0.3, 0.1])", "test9": "apply_pricing_changes([70, 250, 300], [0.3, 0.1, 0.2])", "test10": "apply_pricing_changes([50, 100, 250], [0.2, 0.1, 0.3])"}, "hidden_information": "def apply_pricing_changes(prices, margins, threshold_1=80, threshold_2=200, add_1=10, add_2=25):\n    for i in range(len(prices)):\n        if prices[i] < threshold_1:\n            prices[i] += add_1\n        elif prices[i] > threshold_2:\n            prices[i] += add_2\n        if prices[i] * (1 - margins[i]) < 0:\n            raise ValueError(\"Margin not met for product {}\")\n    return prices"}
{"ground_truth": "def locate_family_members(names_and_locations):\n    locations = {}\n    for name_location in names_and_locations:\n        name, location = name_location.split(', ')\n        if location in locations:\n            locations[location].append(name)\n        else:\n            locations[location] = [name]\n    return locations", "problem_description": "I want to write a python function that can help me track the locations of my ancestors from an old family photo. The function should take a list of names and locations and return something that shows me where each person is from and how many people are from each location. Can you help me write it?The signature of the function is: def locate_family_members(names_and_locations)", "test_cases": {"test1": "locate_family_members(['John C. Debus, Pennsylvania', 'Eva Catherine, New York', 'Carlyle Reck, California'])", "test2": "locate_family_members(['Libby Reck, Pennsylvania', 'John C. Debus, Pennsylvania', 'Eva Catherine, New York'])", "test3": "locate_family_members(['Carlyle Reck, Pennsylvania', 'Eva Catherine, New York', 'John C. Debus, Pennsylvania'])", "test4": "locate_family_members(['Eva Catherine, New York', 'Carlyle Reck, California', 'Libby Reck, Pennsylvania'])", "test5": "locate_family_members([])", "test6": "locate_family_members(['John C. Debus, Pennsylvania'])", "test7": "locate_family_members(['Eva Catherine, New York', 'Carlyle Reck, California', 'Libby Reck, Pennsylvania', 'John C. Debus, Pennsylvania'])", "test8": "locate_family_members(['Eva Catherine, New York', 'John C. Debus, Pennsylvania', 'Libby Reck, Pennsylvania', 'Carlyle Reck, California'])", "test9": "locate_family_members(['Carlyle Reck, Pennsylvania', 'Libby Reck, Pennsylvania', 'Eva Catherine, New York', 'John C. Debus, Pennsylvania'])", "test10": "locate_family_members(['Libby Reck, Pennsylvania', 'John C. Debus, Pennsylvania', 'Eva Catherine, New York', 'Carlyle Reck, California'])"}, "hidden_information": "def locate_family_members(names_and_locations):\n    locations = {}\n    for name_location in names_and_locations:\n        name, location = name_location.split(', ')\n        if location in locations:\n            locations[location].append(name)\n        else:\n            locations[location] = [name]\n    return locations"}
{"ground_truth": "def categorize_phones(phones): \n    categorized_phones = {}\n    for phone in phones:\n        features = phone.get('features', [])\n        if 'waterproof' in features:\n            categorized_phones.setdefault('waterproof', []).append(phone.get('name'))\n        if 'dual_core' in features:\n            categorized_phones.setdefault('dual_core', []).append(phone.get('name'))\n    return categorized_phones", "problem_description": "I want you to write a Python function that can help me categorize phones based on their features. I have a list of phones with their features, and I want the function to group them into categories like 'waterproof' and 'dual_core'. How would you approach this problem?The signature of the function is: def categorize_phones(phones)", "test_cases": {"test1": "categorize_phones([{'name': 'Galaxy Xcover', 'features': ['waterproof', 'gingerbread', 'touchwiz']}, {'name': 'Defy', 'features': ['waterproof', 'single_core']}, {'name': 'Galaxy SII', 'features': ['dual_core', 'high_end']}])", "test2": "categorize_phones([{'name': 'HTC Desire', 'features': ['high_end', 'single_core']}, {'name': 'iPhone', 'features': ['waterproof', 'dual_core']}])", "test3": "categorize_phones([{'name': 'Moto G', 'features': ['mid_grade', 'single_core']}, {'name': 'Moto X', 'features': ['high_end', 'dual_core']}])", "test4": "categorize_phones([{'name': 'Nokia Lumia', 'features': ['waterproof', 'single_core']}, {'name': 'Nokia 3310', 'features': ['mid_grade', 'single_core']}])", "test5": "categorize_phones([{'name': 'Samsung Galaxy', 'features': ['high_end', 'dual_core']}, {'name': 'Samsung Note', 'features': ['high_end', 'single_core']}])", "test6": "categorize_phones([{'name': 'Google Pixel', 'features': ['high_end', 'dual_core']}, {'name': 'Google Nexus', 'features': ['high_end', 'single_core']}])", "test7": "categorize_phones([{'name': 'OnePlus One', 'features': ['high_end', 'dual_core']}, {'name': 'OnePlus Two', 'features': ['high_end', 'single_core']}])", "test8": "categorize_phones([{'name': 'Huawei P30', 'features': ['high_end', 'dual_core']}, {'name': 'Huawei P20', 'features': ['high_end', 'single_core']}])", "test9": "categorize_phones([{'name': 'Xiaomi Redmi', 'features': ['mid_grade', 'single_core']}, {'name': 'Xiaomi Mi', 'features': ['high_end', 'dual_core']}])", "test10": "categorize_phones([{'name': 'Oppo Reno', 'features': ['high_end', 'dual_core']}, {'name': 'Oppo A52', 'features': ['mid_grade', 'single_core']}])"}, "hidden_information": "def categorize_phones(phones): \n    categorized_phones = {}\n    for phone in phones:\n        features = phone.get('features', [])\n        if 'waterproof' in features:\n            categorized_phones.setdefault('waterproof', []).append(phone.get('name'))\n        if 'dual_core' in features:\n            categorized_phones.setdefault('dual_core', []).append(phone.get('name'))\n    return categorized_phones"}
{"ground_truth": "def categorize_criticism(criticism_text):\n    if 'but' in criticism_text or 'however' in criticism_text:\n        parts = criticism_text.split('but') if 'but' in criticism_text else criticism_text.split('however')\n        if len(parts) > 1 and ('suggest' in parts[1].lower() or 'alternative' in parts[1].lower()):\n            return 'constructive'\n    return 'non-constructive'", "problem_description": "I want the agent to write a python function that can help scientists to determine if a criticism towards their theory is constructive or not. The function should take a string of text describing the criticism as input and output a string 'constructive' or 'non-constructive'. Can you help me with that?The signature of the function is: def categorize_criticism(criticism_text)", "test_cases": {"test1": "categorize_criticism('I disagree, but I have an alternative explanation')", "test2": "categorize_criticism('I do not agree with your theory')", "test3": "categorize_criticism('I think this is wrong; however, I suggest we do more research')", "test4": "categorize_criticism('Your theory is stupid, I have nothing to add.')", "test5": "categorize_criticism('I see some discrepancies, but they can be explained by our current understanding.')", "test6": "categorize_criticism('I think we need more data to convince everyone.')", "test7": "categorize_criticism('Your theory is not testable and cannot be proven or disproven; however, I agree with its implications')", "test8": "categorize_criticism('It is impossible to test this theory with current technology.')", "test9": "categorize_criticism('I have a different opinion based on my personal experience, but I have no evidence to support it')", "test10": "categorize_criticism('The theory is incomplete, but let us add these additional facts.')"}, "hidden_information": "def categorize_criticism(criticism_text):\n    if 'but' in criticism_text or 'however' in criticism_text:\n        parts = criticism_text.split('but') if 'but' in criticism_text else criticism_text.split('however')\n        if len(parts) > 1 and ('suggest' in parts[1].lower() or 'alternative' in parts[1].lower()):\n            return 'constructive'\n    return 'non-constructive'"}
{"ground_truth": "def calculate_sbr(incident_reading_bright, incident_reading_dark): return abs(incident_reading_bright - incident_reading_dark)", "problem_description": "I want you to help write a Python function to calculate the dynamic range of a scene in photography. I need to know how to get the brightest and darkest areas of my photo to set the exposure correctly. Can you create a function that takes some kind of measurement as input and gives me the range?The signature of the function is: def calculate_sbr(incident_reading_bright, incident_reading_dark)", "test_cases": {"test1": "calculate_sbr(10.5, 5.2)", "test2": "calculate_sbr(7.8, 3.1)", "test3": "calculate_sbr(12.1, 6.5)", "test4": "calculate_sbr(9.2, 4.8)", "test5": "calculate_sbr(8.5, 3.8)", "test6": "calculate_sbr(11.6, 6.2)", "test7": "calculate_sbr(7.2, 2.9)", "test8": "calculate_sbr(10.9, 5.6)", "test9": "calculate_sbr(8.8, 4.2)", "test10": "calculate_sbr(9.5, 4.9)"}, "hidden_information": "def calculate_sbr(incident_reading_bright, incident_reading_dark): return abs(incident_reading_bright - incident_reading_dark)"}
{"ground_truth": "def calculate_delay_time(flights_handled, certified_staff_available, break_time, num_flights_queued): return break_time + (num_flights_queued * 3 if certified_staff_available else num_flights_queued * 5) if flights_handled > 50 else break_time + (num_flights_queued * 2 if certified_staff_available else num_flights_queued * 4)", "problem_description": "Create a python function to calculate the delay time of flights when an air traffic controller takes an unscheduled break, taking into account the number of flights they've handled, the availability of certified staff to take over, and the number of flights waiting to land.The signature of the function is: def calculate_delay_time(flights_handled, certified_staff_available, break_time, num_flights_queued)", "test_cases": {"test1": "calculate_delay_time(60, False, 12, 2)", "test2": "calculate_delay_time(30, True, 10, 1)", "test3": "calculate_delay_time(70, False, 15, 3)", "test4": "calculate_delay_time(40, True, 8, 2)", "test5": "calculate_delay_time(90, False, 12, 1)", "test6": "calculate_delay_time(50, True, 10, 1)", "test7": "calculate_delay_time(75, False, 18, 2)", "test8": "calculate_delay_time(35, True, 12, 3)", "test9": "calculate_delay_time(85, False, 15, 2)", "test10": "calculate_delay_time(45, True, 8, 1)"}, "hidden_information": "def calculate_delay_time(flights_handled, certified_staff_available, break_time, num_flights_queued): return break_time + (num_flights_queued * 3 if certified_staff_available else num_flights_queued * 5) if flights_handled > 50 else break_time + (num_flights_queued * 2 if certified_staff_available else num_flights_queued * 4)"}
{"ground_truth": "def optimal_projector_settings(watching_distance, room_light, content_type, screen_size, user_preferences):\n    if watching_distance <= 2 * screen_size:\n        brightness_setting = 'low'\n    else:\n        brightness_setting = 'medium'\n\n    if room_light == 'low':\n        contrast_setting = 'high'\n    else:\n        contrast_setting = 'medium'\n\n    if content_type == 'movies' and user_preferences['color_accuracy']:\n        color_setting = 'cinema'\n    else:\n        color_setting = 'standard'\n\n    return {'brightness': brightness_setting, 'contrast': contrast_setting, 'color': color_setting}", "problem_description": "I want a Python function that can help me figure out the best projector settings for my home theater. I watch a mix of movies and sports, sometimes with a lot of ambient light in the room and other times with blackout curtains. Can the agent write a function that takes these factors into account to provide me with optimal brightness, contrast, and color settings?The signature of the function is: def optimal_projector_settings(watching_distance, room_light, content_type, screen_size, user_preferences)", "test_cases": {"test1": "optimal_projector_settings(2.5, 'low', 'movies', 100, {'color_accuracy': True})", "test2": "optimal_projector_settings(1.0, 'medium', 'sports', 80, {'color_accuracy': False})", "test3": "optimal_projector_settings(3.0, 'low', 'gaming', 120, {'color_accuracy': True})", "test4": "optimal_projector_settings(1.5, 'high', 'movies', 90, {'color_accuracy': False})", "test5": "optimal_projector_settings(2.0, 'medium', 'TV', 110, {'color_accuracy': True})", "test6": "optimal_projector_settings(2.8, 'low', 'movies', 100, {'color_accuracy': False})", "test7": "optimal_projector_settings(1.2, 'high', 'sports', 80, {'color_accuracy': True})", "test8": "optimal_projector_settings(2.2, 'medium', 'gaming', 120, {'color_accuracy': False})", "test9": "optimal_projector_settings(3.5, 'low', 'TV', 90, {'color_accuracy': True})", "test10": "optimal_projector_settings(1.8, 'medium', 'movies', 110, {'color_accuracy': False})"}, "hidden_information": "def optimal_projector_settings(watching_distance, room_light, content_type, screen_size, user_preferences):\n    if watching_distance <= 2 * screen_size:\n        brightness_setting = 'low'\n    else:\n        brightness_setting = 'medium'\n\n    if room_light == 'low':\n        contrast_setting = 'high'\n    else:\n        contrast_setting = 'medium'\n\n    if content_type == 'movies' and user_preferences['color_accuracy']:\n        color_setting = 'cinema'\n    else:\n        color_setting = 'standard'\n\n    return {'brightness': brightness_setting, 'contrast': contrast_setting, 'color': color_setting}"}
{"ground_truth": "def estimate_unclaimed_funds(total_settlement_amount, eligible_investors_percentage, unclaimed_percentage): return total_settlement_amount * (eligible_investors_percentage / 100) * (unclaimed_percentage / 100)", "problem_description": "Design a python function to calculate the estimated amount of unclaimed funds in a securities class action settlement. The function should take into account the total settlement amount and the percentage of eligible investors and unclaimed funds. However, the exact percentages and settlement amount are not provided, so the agent will need to collaborate with the user to obtain these parameters.The signature of the function is: def estimate_unclaimed_funds(total_settlement_amount, eligible_investors_percentage, unclaimed_percentage)", "test_cases": {"test1": "estimate_unclaimed_funds(1000000, 50, 30)", "test2": "estimate_unclaimed_funds(5000000, 70, 20)", "test3": "estimate_unclaimed_funds(2000000, 60, 40)", "test4": "estimate_unclaimed_funds(1500000, 55, 35)", "test5": "estimate_unclaimed_funds(8000000, 80, 10)", "test6": "estimate_unclaimed_funds(1200000, 65, 25)", "test7": "estimate_unclaimed_funds(2500000, 75, 15)", "test8": "estimate_unclaimed_funds(1800000, 58, 42)", "test9": "estimate_unclaimed_funds(3000000, 72, 28)", "test10": "estimate_unclaimed_funds(10000000, 85, 5)"}, "hidden_information": "def estimate_unclaimed_funds(total_settlement_amount, eligible_investors_percentage, unclaimed_percentage): return total_settlement_amount * (eligible_investors_percentage / 100) * (unclaimed_percentage / 100)"}
{"ground_truth": "def sort_dogs(dogs): \n    dogs.sort(key=lambda x: (x['size'], x['breed'])) \n    return dogs", "problem_description": "Hey agent, can you write a python function that sorts the list of dogs I have, but I have a specific order in mind, can you help me clarify what that order is?The signature of the function is: def sort_dogs(dogs)", "test_cases": {"test1": "sort_dogs([{'name': 'Fido', 'size': 'small', 'breed': 'Terrier'}, {'name': 'Max', 'size': 'large', 'breed': 'Golden Retriever'}, {'name': 'Bella', 'size': 'small', 'breed': 'Chihuahua'}])", "test2": "sort_dogs([{'name': 'Buddy', 'size': 'medium', 'breed': 'Labrador'}, {'name': 'Charlie', 'size': 'large', 'breed': 'German Shepherd'}, {'name': 'Lucy', 'size': 'medium', 'breed': 'French Bulldog'}])", "test3": "sort_dogs([{'name': 'Rocky', 'size': 'small', 'breed': 'Poodle'}, {'name': 'Luna', 'size': 'small', 'breed': 'Poodle'}, {'name': 'Gruffy', 'size': 'large', 'breed': 'Poodle'}])", "test4": "sort_dogs([{'name': 'Daisy', 'size': 'medium', 'breed': 'Corgi'}, {'name': 'Ginger', 'size': 'medium', 'breed': 'Corgi'}, {'name': 'Bear', 'size': 'large', 'breed': 'Corgi'}])", "test5": "sort_dogs([{'name': 'Toby', 'size': 'small', 'breed': 'Pug'}, {'name': 'Duke', 'size': 'small', 'breed': 'Pug'}, {'name': 'Doug', 'size': 'small', 'breed': 'Pug'}])", "test6": "sort_dogs([{'name': 'Molly', 'size': 'medium', 'breed': 'Beagle'}, {'name': 'Bingo', 'size': 'medium', 'breed': 'Beagle'}, {'name': 'Hunter', 'size': 'large', 'breed': 'Beagle'}])", "test7": "sort_dogs([{'name': 'Finn', 'size': 'small', 'breed': 'Yorkshire Terrier'}, {'name': 'Gizmo', 'size': 'small', 'breed': 'Yorkshire Terrier'}, {'name': 'Brady', 'size': 'large', 'breed': 'Yorkshire Terrier'}])", "test8": "sort_dogs([{'name': 'Bailey', 'size': 'medium', 'breed': 'Cocker Spaniel'}, {'name': 'Coco', 'size': 'medium', 'breed': 'Cocker Spaniel'}, {'name': 'Rocky', 'size': 'large', 'breed': 'Cocker Spaniel'}])", "test9": "sort_dogs([{'name': 'Lola', 'size': 'small', 'breed': 'Shih Tzu'}, {'name': 'Sophie', 'size': 'small', 'breed': 'Shih Tzu'}, {'name': 'Macy', 'size': 'large', 'breed': 'Shih Tzu'}])", "test10": "sort_dogs([{'name': 'Sadie', 'size': 'medium', 'breed': 'Boxer'}, {'name': 'Abby', 'size': 'medium', 'breed': 'Boxer'}, {'name': 'Fargo', 'size': 'large', 'breed': 'Boxer'}])"}, "hidden_information": "def sort_dogs(dogs): \n    dogs.sort(key=lambda x: (x['size'], x['breed'])) \n    return dogs"}
{"ground_truth": "def simulate_test(questions, answers, student_answers): \n    score = 0\n    for i in range(len(questions)):\n        if student_answers[i].lower() == answers[i].lower():\n            score += 1\n    return score / len(questions)", "problem_description": "Hey agent, I am a teacher and I need your help in writing a python function to simulate a multiple choice test where there are questions and answers and the students give their own answers, can you write such a python functionThe signature of the function is: def simulate_test(questions, answers, student_answers)", "test_cases": {"test1": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '4', '5*', '5'], ['4', '25', '5*', '5'])", "test2": "simulate_test(['What is the capital of France?', 'What is the capital of Germany?', 'What is the capital of USA'], ['Paris', 'Berlin', 'Washington'], ['Lyon', 'Berlin', 'Washington'])", "test3": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '5', '5*', '5'], ['4', '5', '25', '5'])", "test4": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '5', '5*', '5'], ['4', '4', '5*', '5'])", "test5": "simulate_test(['What is the capital of France?', 'What is the capital of Germany?', 'What is the capital of USA'], ['Paris', 'Berlin', 'Washington'], ['Paris', 'Berlin', 'New York'])", "test6": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '4', '5*', '5'], ['4', '4', '25', '5'])", "test7": "simulate_test(['What is the capital of France?', 'What is the capital of Germany?', 'What is the capital of USA'], ['Paris', 'Berlin', 'Washington'], ['Lyon', 'Munich', 'New York'])", "test8": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '5', '5*', '5'], ['4', '5', '5*', '5'])", "test9": "simulate_test(['What is the capital of France?', 'What is the capital of Germany?', 'What is the capital of USA'], ['Paris', 'Berlin', 'Washington'], ['Paris', 'Berlin', 'Washington'])", "test10": "simulate_test(['What is 2+2?', 'What is 5-1?', 'What is 5*', 'What is 10/2'], ['4', '4', '5*', '5'], ['4', '4', '5*', '5'])"}, "hidden_information": "def simulate_test(questions, answers, student_answers): \n    score = 0\n    for i in range(len(questions)):\n        if student_answers[i].lower() == answers[i].lower():\n            score += 1\n    return score / len(questions)"}
{"ground_truth": "def scare_prank_success_rate(victim_reactions, prank_types):\n    success_rates = {}\n    for prank in prank_types:\n        total_pranks = len([reaction for reaction in victim_reactions if reaction['prank'] == prank])\n        successful_pranks = len([reaction for reaction in victim_reactions if reaction['prank'] == prank and reaction['reaction'] == 'hilarious'])\n        success_rates[prank] = successful_pranks / total_pranks if total_pranks > 0 else 0\n    return success_rates", "problem_description": "I want you to write a python function. The function should calculate the success rate of different scare prank types based on the victim's reactions. The human wants to know which scare pranks are the most successful and has a huge collection of different reactions from previous pranks.The signature of the function is: def scare_prank_success_rate(victim_reactions, prank_types)", "test_cases": {"test1": "scare_prank_success_rate([{'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'fake spider in shower', 'reaction': 'angry'}, {'prank': 'jumping out of fridge', 'reaction': 'scared'}], ['jumping out of fridge', 'fake spider in shower'])", "test2": "scare_prank_success_rate([{'prank': 'axe murderer', 'reaction': 'hilarious'}, {'prank': 'axe murderer', 'reaction': 'hilarious'}, {'prank': 'fake spider in shower', 'reaction': 'angry'}], ['axe murderer', 'fake spider in shower'])", "test3": "scare_prank_success_rate([{'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'jumping out of fridge', 'reaction': 'angry'}, {'prank': 'fake spider in shower', 'reaction': 'hilarious'}], ['jumping out of fridge', 'fake spider in shower'])", "test4": "scare_prank_success_rate([{'prank': 'axe murderer', 'reaction': 'hilarious'}, {'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'ax murderer', 'reaction': None}], ['axe murderer', 'jumping out of fridge'])", "test5": "scare_prank_success_rate([{'prank': 'fake spider in shower', 'reaction': 'angry'}, {'prank': 'fake spider in shower', 'reaction': 'scared'}, {'prank': 'axe murderer', 'reaction': 'hilarious'}], ['fake spider in shower', 'axe murderer'])", "test6": "scare_prank_success_rate([{'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'fake spider in shower', 'reaction': 'hilarious'}], ['jumping out of fridge', 'fake spider in shower'])", "test7": "scare_prank_success_rate([{'prank': 'axe murderer', 'reaction': 'hilarious'}, {'prank': 'axe murderer', 'reaction': 'angry'}, {'prank': 'jumping out of fridge', 'reaction': 'scared'}], ['axe murderer', 'jumping out of fridge'])", "test8": "scare_prank_success_rate([{'prank': 'fake spider in shower', 'reaction': 'hilarious'}, {'prank': 'fake spider in shower', 'reaction': 'angry'}, {'prank': 'axe murderer', 'reaction': 'hilarious'}], ['fake spider in shower', 'axe murderer'])", "test9": "scare_prank_success_rate([{'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'jumping out of fridge', 'reaction': 'hilarious'}, {'prank': 'fake spider in shower', 'reaction': 'angry'}], ['jumping out of fridge', 'fake spider in shower'])", "test10": "scare_prank_success_rate([{'prank': 'axe murderer', 'reaction': 'hilarious'}, {'prank': 'axe murderer', 'reaction': 'angry'}, {'prank': 'axe murderer', 'reaction': 'hilarious'}], ['axe murderer'])"}, "hidden_information": "def scare_prank_success_rate(victim_reactions, prank_types):\n    success_rates = {}\n    for prank in prank_types:\n        total_pranks = len([reaction for reaction in victim_reactions if reaction['prank'] == prank])\n        successful_pranks = len([reaction for reaction in victim_reactions if reaction['prank'] == prank and reaction['reaction'] == 'hilarious'])\n        success_rates[prank] = successful_pranks / total_pranks if total_pranks > 0 else 0\n    return success_rates"}
{"ground_truth": "def check_blood_compatibility(donor_rh, donor_abo, recipient_rh, recipient_abo):\n    if recipient_rh == 'negative' and donor_rh == 'positive':\n        return False\n    if recipient_abo == 'A' and donor_abo in ['B', 'AB']:\n        return False\n    if recipient_abo == 'B' and donor_abo in ['A', 'AB']:\n        return False\n    if recipient_abo == 'AB' and donor_abo in ['A', 'B']:\n        return False\n    if recipient_abo == 'O' and donor_abo != 'O':\n        return False\n    return True", "problem_description": "I need a Python function that determines if a blood transfusion is compatible between a donor and a recipient based on their Rh and ABO blood types. Can you write a function that takes the Rh and ABO types of both the donor and the recipient as input and returns True if the transfusion is compatible and False otherwise?The signature of the function is: def check_blood_compatibility(donor_rh, donor_abo, recipient_rh, recipient_abo)", "test_cases": {"test1": "check_blood_compatibility('positive', 'A', 'positive', 'A')", "test2": "check_blood_compatibility('negative', 'A', 'positive', 'A')", "test3": "check_blood_compatibility('positive', 'A', 'negative', 'A')", "test4": "check_blood_compatibility('positive', 'B', 'positive', 'A')", "test5": "check_blood_compatibility('positive', 'AB', 'positive', 'A')", "test6": "check_blood_compatibility('positive', 'AB', 'positive', 'AB')", "test7": "check_blood_compatibility('negative', 'O', 'positive', 'A')", "test8": "check_blood_compatibility('positive', 'O', 'positive', 'A')", "test9": "check_blood_compatibility('positive', 'A', 'positive', 'O')", "test10": "check_blood_compatibility('negative', 'AB', 'positive', 'AB')"}, "hidden_information": "def check_blood_compatibility(donor_rh, donor_abo, recipient_rh, recipient_abo):\n    if recipient_rh == 'negative' and donor_rh == 'positive':\n        return False\n    if recipient_abo == 'A' and donor_abo in ['B', 'AB']:\n        return False\n    if recipient_abo == 'B' and donor_abo in ['A', 'AB']:\n        return False\n    if recipient_abo == 'AB' and donor_abo in ['A', 'B']:\n        return False\n    if recipient_abo == 'O' and donor_abo != 'O':\n        return False\n    return True"}
{"ground_truth": "def is_international_school_kid(characteristics):\n  # Create a dictionary of likely characteristics of international school kids\n  int_school_kid_chars = {\n    'has_friends_from_all_around_world': 1,\n    'has_di.format_parents': 1,\n    'speaks_multiple_languages': 1,\n    'has Been_to_multiple_countries': 1,\n    'has_participated_in_model_un': 1,\n  }\n\n  score = 0\n  for char, value in characteristics.items():\n    if char in int_school_kid_chars and value:\n      score += 1\n\n  # if at least 3 characteristics match, consider the person an international school kid\n  return score >= 3", "problem_description": "Hello, I need you to write a python function to identify if someone was likely an international school kid. They have some characteristics like having friends from around the world, speaking multiple languages, having diplomat parents, etc. Can you write a function that takes these characteristics as input and returns whether the person was an international school kid?The signature of the function is: def is_international_school_kid(characteristics)", "test_cases": {"test1": "is_international_school_kid({'has_friends_from_all_around_world': True, 'has_di.format_parents': True, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': False, 'has_participated_in_model_un': True})", "test2": "is_international_school_kid({'has_friends_from_all_around_world': False, 'has_di.format_parents': True, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': True, 'has_participated_in_model_un': False})", "test3": "is_international_school_kid({'has_friends_from_all_around_world': True, 'has_di.format_parents': True, 'speaks_multiple_languages': False, 'has_Been_to_multiple_countries': True, 'has_participated_in_model_un': True})", "test4": "is_international_school_kid({'has_friends_from_all_around_world': True, 'has_di.format_parents': False, 'speaks_multiple_languages': False, 'has_Been_to_multiple_countries': True, 'has_participated_in_model_un': True})", "test5": "is_international_school_kid({'has_friends_from_all_around_world': True, 'has_di.format_parents': True, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': True, 'has_participated_in_model_un': True})", "test6": "is_international_school_kid({'has_friends_from_all_around_world': False, 'has_di.format_parents': False, 'speaks_multiple_languages': False, 'has_Been_to_multiple_countries': False, 'has_participated_in_model_un': False})", "test7": "is_international_school_kid({'has_friends_from_all_around_world': True, 'has_di.format_parents': True, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': False, 'has_participated_in_model_un': False})", "test8": "is_international_school_kid({'has_friends_from_all_around_world': False, 'has_di.format_parents': True, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': False, 'has_participated_in_model_un': False})", "test9": "is_international_school_kid({'has_friends_from_all_around_world': False, 'has_di.format_parents': False, 'speaks_multiple_languages': True, 'has_Been_to_multiple_countries': True, 'has_participated_in_model_un': False})", "test10": "is_international_school_kid({'has_friends_from_all_around_world': False, 'has_di.format_parents': True, 'speaks_multiple_languages': False, 'has_Been_to_multiple_countries': False, 'has_participated_in_model_un': True})"}, "hidden_information": "def is_international_school_kid(characteristics):\n  # Create a dictionary of likely characteristics of international school kids\n  int_school_kid_chars = {\n    'has_friends_from_all_around_world': 1,\n    'has_di.format_parents': 1,\n    'speaks_multiple_languages': 1,\n    'has Been_to_multiple_countries': 1,\n    'has_participated_in_model_un': 1,\n  }\n\n  score = 0\n  for char, value in characteristics.items():\n    if char in int_school_kid_chars and value:\n      score += 1\n\n  # if at least 3 characteristics match, consider the person an international school kid\n  return score >= 3"}
{"ground_truth": "def is_safe_to_reverse(equipment_speed, passenger_on_board, equipment_state):\n    if equipment_speed > 0 or passenger_on_board:\n        return False\n    elif equipment_state == 'reverse_locked':\n        return False\n    else:\n        return True", "problem_description": "I want you to write a python function that determines if a front end loader's reversing direction is safe. The function should consider the equipment's current state (moving or stationary), whether or not there are passengers on board, and whether the equipment has a safety interlock system in place.The signature of the function is: def is_safe_to_reverse(equipment_speed, passenger_on_board, equipment_state)", "test_cases": {"test1": "is_safe_to_reverse(10, True, 'moving')", "test2": "is_safe_to_reverse(0, True, 'stationary')", "test3": "is_safe_to_reverse(0, False, 'reverse_locked')", "test4": "is_safe_to_reverse(5, False, 'moving')", "test5": "is_safe_to_reverse(0, False, 'stationary')", "test6": "is_safe_to_reverse(15, True, 'reverse_locked')", "test7": "is_safe_to_reverse(0, True, 'reverse_locked')", "test8": "is_safe_to_reverse(0, False, 'moving')", "test9": "is_safe_to_reverse(10, False, 'stationary')", "test10": "is_safe_to_reverse(0, True, 'moving')"}, "hidden_information": "def is_safe_to_reverse(equipment_speed, passenger_on_board, equipment_state):\n    if equipment_speed > 0 or passenger_on_board:\n        return False\n    elif equipment_state == 'reverse_locked':\n        return False\n    else:\n        return True"}
{"ground_truth": "def manage_p2p_traffic(current_bandwidth, total_bandwidth, p2p_sessions, priority_packets):\n    if p2p_sessions > 0.7 * total_bandwidth:\n        # delay P2P traffic\n        return current_bandwidth * 0.5\n    elif priority_packets > 0.5 * total_bandwidth:\n        # prioritize packets\n        return current_bandwidth * 0.8\n    else:\n        # no delay or prioritization needed\n        return current_bandwidth", "problem_description": "Can you write a Python function to simulate the decision-making process of a network operator when dealing with P2P traffic? The goal is to manage P2P sessions in a way that complies with net neutrality principles while also ensuring smooth network operation. The input parameters are current bandwidth, total bandwidth, number of P2P sessions, and priority packets. The function should return the adjusted bandwidth allocation for P2P traffic.The signature of the function is: def manage_p2p_traffic(current_bandwidth, total_bandwidth, p2p_sessions, priority_packets)", "test_cases": {"test1": "manage_p2p_traffic(100, 1000, 500, 200)", "test2": "manage_p2p_traffic(50, 500, 200, 50)", "test3": "manage_p2p_traffic(200, 2000, 1500, 800)", "test4": "manage_p2p_traffic(30, 300, 100, 20)", "test5": "manage_p2p_traffic(150, 1500, 700, 400)", "test6": "manage_p2p_traffic(80, 800, 300, 150)", "test7": "manage_p2p_traffic(250, 2500, 1800, 900)", "test8": "manage_p2p_traffic(40, 400, 200, 30)", "test9": "manage_p2p_traffic(120, 1200, 600, 300)", "test10": "manage_p2p_traffic(60, 600, 400, 250)"}, "hidden_information": "def manage_p2p_traffic(current_bandwidth, total_bandwidth, p2p_sessions, priority_packets):\n    if p2p_sessions > 0.7 * total_bandwidth:\n        # delay P2P traffic\n        return current_bandwidth * 0.5\n    elif priority_packets > 0.5 * total_bandwidth:\n        # prioritize packets\n        return current_bandwidth * 0.8\n    else:\n        # no delay or prioritization needed\n        return current_bandwidth"}
{"ground_truth": "def order_book_by_travel_destination(book_dict, destination):\n    ordered_books = sorted(book_dict.items(), key=lambda x: x[1].index(destination) if destination in x[1] else float('inf'))\n    return ordered_books", "problem_description": "Hey LLM agent, can you write a python function for me to order some books based on a certain geographical location? I have a collection of books, and each book is associated with a list of regions like Egypt, Mesopotamia, Russia, etc. The goal is to order these books in such a way that the books with a certain destination appear first in the listThe signature of the function is: def order_book_by_travel_destination(book_dict, destination)", "test_cases": {"test1": "order_book_by_travel_destination({\"Old Worlds\": [\"Egypt\", \"Mesopotamia\"], \"New Worlds\": [\"America\"]}, \"Egypt\")", "test2": "order_book_by_travel_destination({\"Paradise Lost\": [\"Southwest Asia\"], \"Milton's Muscovia\": [\"Russia\"]}, \"Russia\")", "test3": "order_book_by_travel_destination({\"Love's Labour's Lost\": [\"Russia\", \"Spain\"], \"Aureng-Zebe\": [\"India\"]}, \"India\")", "test4": "order_book_by_travel_destination({\"Antony and Cleopatra\": [\"Egypt\", \"Ethiopia\"], \"Shakespeare's works\": [\"Europe\"]}, \"Ethiopia\")", "test5": "order_book_by_travel_destination({\"Dryden's works\": [\"India\"], \"Shakespeare's works\": [\"Europe\"]}, \"Europe\")", "test6": "order_book_by_travel_destination({\"Milton's Paradise Lost\": [\"Southwest Asia\"], \"Milton's other works\": [\"Heaven\", \"Hell\"]}, \"Earth\")", "test7": "order_book_by_travel_destination({\"Herodotus' Scythia\": [\"Russia\"], \"Herodotus' other works\": [\"Greece\"]}, \"Russia\")", "test8": "order_book_by_travel_destination({\"Book1\": [\"Europe\"], \"Book2\": [\"Europe\", \"Asia\"]}, \"Europe\")", "test9": "order_book_by_travel_destination({\"Book1\": [\"Egypt\"], \"Book2\": [\"Egypt\", \"Mesopotamia\"]}, \"Egypt\")", "test10": "order_book_by_travel_destination({\"Book1\": [\"Russia\"], \"Book2\": [\"Russia\", \"Asia\"], \"Book3\": [\"Asia\"]}, \"Russia\")"}, "hidden_information": "def order_book_by_travel_destination(book_dict, destination):\n    ordered_books = sorted(book_dict.items(), key=lambda x: x[1].index(destination) if destination in x[1] else float('inf'))\n    return ordered_books"}
{"ground_truth": "def get_books_published_in_year_or_later(book_titles, book_years, year):\n    return [(title, book_year) for title, book_year in zip(book_titles, book_years) if book_year >= year]", "problem_description": "Can you write a python function that takes information about books and filter them based on their publication years? For example, let's say I have a list of book titles and another list with their corresponding publication years. How can I use this function to get a list of books published in a certain year or later?The signature of the function is: def get_books_published_in_year_or_later(book_titles, book_years, year)", "test_cases": {"test1": "get_books_published_in_year_or_later(['Reich of Passage', 'Book2', 'Book3'], [2020, 2019, 2021], 2020)", "test2": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3'], [2018, 2020, 2022], 2020)", "test3": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3'], [2018, 2019, 2020], 2019)", "test4": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3'], [2020, 2020, 2020], 2020)", "test5": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3'], [2015, 2016, 2017], 2018)", "test6": "get_books_published_in_year_or_later(['Book1', 'Book2'], [2018, 2020], 2020)", "test7": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3', 'Book4'], [2018, 2020, 2022, 2023], 2021)", "test8": "get_books_published_in_year_or_later(['Book1'], [2020], 2020)", "test9": "get_books_published_in_year_or_later([], [], 2020)", "test10": "get_books_published_in_year_or_later(['Book1', 'Book2', 'Book3'], [2018, 2019, 2020], 2025)"}, "hidden_information": "def get_books_published_in_year_or_later(book_titles, book_years, year):\n    return [(title, book_year) for title, book_year in zip(book_titles, book_years) if book_year >= year]"}
{"ground_truth": "def calculate_performance_rating(total_yards, points_scored, opposing_points_scored, turnovers, turnovers_given, third_down_conversions, total_plays): rating = (total_yards / 100) + (points_scored / 10) - (opposing_points_scored / 10) - (turnovers * 5) + (turnovers_given * 5) + (third_down_conversions / 10) - (total_plays / 100); return rating", "problem_description": "I need a Python function that calculates a team's performance rating for a game based on various metrics, can you write it for me?The signature of the function is: def calculate_performance_rating(total_yards, points_scored, opposing_points_scored, turnovers, turnovers_given, third_down_conversions, total_plays)", "test_cases": {"test1": "calculate_performance_rating(400, 31, 17, 2, 1, 5, 60)", "test2": "calculate_performance_rating(350, 20, 30, 1, 2, 4, 55)", "test3": "calculate_performance_rating(300, 20, 20, 0, 1, 3, 50)", "test4": "calculate_performance_rating(500, 40, 10, 1, 2, 6, 70)", "test5": "calculate_performance_rating(200, 10, 40, 3, 1, 2, 45)", "test6": "calculate_performance_rating(420, 30, 25, 2, 1, 5, 65)", "test7": "calculate_performance_rating(280, 25, 20, 1, 2, 4, 58)", "test8": "calculate_performance_rating(360, 35, 30, 2, 1, 6, 68)", "test9": "calculate_performance_rating(380, 20, 25, 1, 1, 5, 60)", "test10": "calculate_performance_rating(220, 15, 35, 2, 1, 3, 48)"}, "hidden_information": "def calculate_performance_rating(total_yards, points_scored, opposing_points_scored, turnovers, turnovers_given, third_down_conversions, total_plays): rating = (total_yards / 100) + (points_scored / 10) - (opposing_points_scored / 10) - (turnovers * 5) + (turnovers_given * 5) + (third_down_conversions / 10) - (total_plays / 100); return rating"}
{"ground_truth": "def extract_sentiment(articles, entity_name):\n    # Initialize an empty list to store the sentiments\n    sentiments = []\n\n    # Iterate over each article\n    for article in articles:\n        # Initialize a counter for the number of positive and negative sentences\n        positive_count = 0\n        negative_count = 0\n\n        # Split the article into sentences\n        sentences = article.split('. ')\n\n        # Iterate over each sentence\n        for sentence in sentences:\n            # Check if the entity name is in the sentence\n            if entity_name.lower() in sentence.lower():\n                # Check if the sentence contains positive or negative words\n                if 'good' in sentence.lower() or 'great' in sentence.lower():\n                    positive_count += 1\n                elif 'bad' in sentence.lower() or 'wrong' in sentence.lower():\n                    negative_count += 1\n\n        # Determine the overall sentiment of the article\n        if positive_count > negative_count:\n            sentiments.append('Positive')\n        elif negative_count > positive_count:\n            sentiments.append('Negative')\n        else:\n            sentiments.append('Neutral')\n\n    # Return the list of sentiments\n    return sentiments", "problem_description": "I want you to write a Python function that can extract the sentiment of news articles towards a specific entity, like a government administration. The function should analyze the text of the articles and return a list of sentiments, either 'Positive', 'Negative', or 'Neutral'. I'm not sure what kind of input the function should take or how it should handle the analysis, so please figure that out.The signature of the function is: def extract_sentiment(articles, entity_name)", "test_cases": {"test1": "extract_sentiment(['The Obama administration has been doing a great job.', 'However, some critics have been vocal about their disapproval.'], 'Obama administration')", "test2": "extract_sentiment(['The president has made some good decisions.', 'But his policies have been met with opposition.', 'The economy is recovering, thanks to the government.'], 'president')", "test3": "extract_sentiment(['The government has been accused of being corrupt.', 'The opposition party has been critical of the administration.'], 'government')", "test4": "extract_sentiment(['The new policy has been met with praise.', 'It is seen as a step in the right direction.'], 'policy')", "test5": "extract_sentiment(['The economy is struggling.', 'The government has been criticized for its handling of the crisis.'], 'government')", "test6": "extract_sentiment(['The president has been doing well.', 'He has made some tough decisions.'], 'president')", "test7": "extract_sentiment(['The administration has been accused of being out of touch.', 'The opposition party has been critical of the government.'], 'administration')", "test8": "extract_sentiment(['The government has been working hard.', 'But its efforts have been met with skepticism.'], 'government')", "test9": "extract_sentiment(['The policy has been met with opposition.', 'It is seen as a bad move.'], 'policy')", "test10": "extract_sentiment(['The president has been doing a bad job.', 'He has made some poor decisions.'], 'president')"}, "hidden_information": "def extract_sentiment(articles, entity_name):\n    # Initialize an empty list to store the sentiments\n    sentiments = []\n\n    # Iterate over each article\n    for article in articles:\n        # Initialize a counter for the number of positive and negative sentences\n        positive_count = 0\n        negative_count = 0\n\n        # Split the article into sentences\n        sentences = article.split('. ')\n\n        # Iterate over each sentence\n        for sentence in sentences:\n            # Check if the entity name is in the sentence\n            if entity_name.lower() in sentence.lower():\n                # Check if the sentence contains positive or negative words\n                if 'good' in sentence.lower() or 'great' in sentence.lower():\n                    positive_count += 1\n                elif 'bad' in sentence.lower() or 'wrong' in sentence.lower():\n                    negative_count += 1\n\n        # Determine the overall sentiment of the article\n        if positive_count > negative_count:\n            sentiments.append('Positive')\n        elif negative_count > positive_count:\n            sentiments.append('Negative')\n        else:\n            sentiments.append('Neutral')\n\n    # Return the list of sentiments\n    return sentiments"}
{"ground_truth": "def get_title_info(anime_entries):\n    title_info = {}\n    for entry in anime_entries:\n        if 'original_title' in entry:\n            title_info[entry['title']] = {'original': entry['original_title'], 'adapted': entry.get('adapted_title', None)}\n        else:\n            title_info[entry['title']] = {'original': entry['title'], 'adapted': None}\n    return title_info", "problem_description": "Write a Python function to process a list of anime/manga entries and return a dictionary with title information. Each entry may contain original and adapted titles, and the function should handle different scenarios such as missing or incorrect information.The signature of the function is: def get_title_info(anime_entries)", "test_cases": {"test1": "get_title_info([{'title': 'Neko Musume', 'original_title': 'Hakaba Kitar\u014d'}])", "test2": "get_title_info([{'title': 'Another Anime', 'adapted_title': 'Adapted Title'}])", "test3": "get_title_info([{'title': 'Missing Original Title'}])", "test4": "get_title_info([{'title': 'Entry with redundant info', 'original_title': 'Original Title', 'adapted_title': 'Adapted Title'}])", "test5": "get_title_info([{'title': 'Without adapted title', 'original_title': 'Original Title'}])", "test6": "get_title_info([{'title': 'Without both titles'}])", "test7": "get_title_info([{'title': 'Same Original and Adapted', 'original_title': 'Same Title', 'adapted_title': 'Same Title'}])", "test8": "get_title_info([{'title': 'Only adapted title', 'adapted_title': 'Adapted Title'}])", "test9": "get_title_info([{'title': 'Anime Entry', 'not_title': 'Invalid Key'}])", "test10": "get_title_info([{'title': 'Single Entry', 'original_title': 'Original Title'}, {'title': 'Another Anime'}])"}, "hidden_information": "def get_title_info(anime_entries):\n    title_info = {}\n    for entry in anime_entries:\n        if 'original_title' in entry:\n            title_info[entry['title']] = {'original': entry['original_title'], 'adapted': entry.get('adapted_title', None)}\n        else:\n            title_info[entry['title']] = {'original': entry['title'], 'adapted': None}\n    return title_info"}
{"ground_truth": "def calculate_reserve_currency_loss(initial_value, exchange_rate_change): return initial_value * exchange_rate_change", "problem_description": "I want you to write a Python function to calculate the potential loss in value of a foreign central banker's reserve currency holdings if the US dollar depreciates. The function should take into account the initial value of the holdings and the percentage change in the exchange rate.The signature of the function is: def calculate_reserve_currency_loss(initial_value, exchange_rate_change)", "test_cases": {"test1": "calculate_reserve_currency_loss(1000000000, 0.05)", "test2": "calculate_reserve_currency_loss(700000000000, 0.1)", "test3": "calculate_reserve_currency_loss(500000000, 0.025)", "test4": "calculate_reserve_currency_loss(2000000000, 0.01)", "test5": "calculate_reserve_currency_loss(3000000000, 0.15)", "test6": "calculate_reserve_currency_loss(400000000, 0.03)", "test7": "calculate_reserve_currency_loss(600000000, 0.02)", "test8": "calculate_reserve_currency_loss(2500000000, 0.12)", "test9": "calculate_reserve_currency_loss(800000000, 0.08)", "test10": "calculate_reserve_currency_loss(10000000000, 0.06)"}, "hidden_information": "def calculate_reserve_currency_loss(initial_value, exchange_rate_change): return initial_value * exchange_rate_change"}
{"ground_truth": "def calculate_players(skill_points, budget, player_cost):\n    return budget // (skill_points * player_cost)", "problem_description": "I want the agent to write a python function for a fantasy football game, where  I have a certain budget, and footballers have a skill level and a fixed cost. The agent should create a function that can calculate the maximum number of footballers I can buy with my budget without exceeding it, given their skill level.The signature of the function is: def calculate_players(skill_points, budget, player_cost)", "test_cases": {"test1": "calculate_players(10, 100, 5)", "test2": "calculate_players(5, 500, 20)", "test3": "calculate_players(7, 200, 10)", "test4": "calculate_players(3, 150, 25)", "test5": "calculate_players(12, 800, 8)", "test6": "calculate_players(9, 300, 15)", "test7": "calculate_players(1, 50, 5)", "test8": "calculate_players(11, 420, 12)", "test9": "calculate_players(6, 900, 18)", "test10": "calculate_players(4, 220, 22)"}, "hidden_information": "def calculate_players(skill_points, budget, player_cost):\n    return budget // (skill_points * player_cost)"}
{"ground_truth": "def categorize_toiletries(hotel_brand, toiletry_items):\n  hotel_toiletries = {\n    'HRH': ['shower gel', 'shampoo', 'conditioner', 'body lotion', 'bar soap']\n  }\n  categorized_toiletries = {hotel: [] for hotel in hotel_toiletries.keys()}\n  for item in toiletry_items:\n    for hotel, toiletries in hotel_toiletries.items():      \n      if item.lower() in [toiletry.lower() for toiletry in toiletries]:\n        categorized_toiletries[hotel].append(item)\n  return categorized_toiletries if hotel_brand in hotel_toiletries else {'Unknown': toiletry_items}", "problem_description": "Write a python function to categorize toiletries by hotel brand. I have a list of hotel brands and toiletries but I'm not sure how to categorize them.The signature of the function is: def categorize_toiletries(hotel_brand, toiletry_items)", "test_cases": {"test1": "categorize_toiletries('HRH', ['shower gel', 'shampoo', 'toothpaste'])", "test2": "categorize_toiletries('HRH', ['conditioner', 'body lotion', 'shaving cream'])", "test3": "categorize_toiletries('PBH', ['shower gel', 'shampoo'])", "test4": "categorize_toiletries('RPR', ['bar soap', 'toothbrush'])", "test5": "categorize_toiletries('HRH', [])", "test6": "categorize_toiletries('Unknown', ['shower gel', 'shampoo', 'conditioner'])", "test7": "categorize_toiletries('HRH', ['shower gel', 'Toilet Paper'])", "test8": "categorize_toiletries('HRH', ['Showergel', 'shampoo', 'conditioner'])", "test9": "categorize_toiletries('HRH', ['toothpaste', 'toothbrush'])", "test10": "categorize_toiletries('HRH', ['conditioner', 'Body Lotion'])"}, "hidden_information": "def categorize_toiletries(hotel_brand, toiletry_items):\n  hotel_toiletries = {\n    'HRH': ['shower gel', 'shampoo', 'conditioner', 'body lotion', 'bar soap']\n  }\n  categorized_toiletries = {hotel: [] for hotel in hotel_toiletries.keys()}\n  for item in toiletry_items:\n    for hotel, toiletries in hotel_toiletries.items():      \n      if item.lower() in [toiletry.lower() for toiletry in toiletries]:\n        categorized_toiletries[hotel].append(item)\n  return categorized_toiletries if hotel_brand in hotel_toiletries else {'Unknown': toiletry_items}"}
{"ground_truth": "def get_designers_by_location_and_category(designers, location, category):\n    return [designer for designer in designers if designer.get('location') == location and category in designer.get('categories', [])]", "problem_description": "I want you to write a Python function that takes a list of furniture designers and returns a list of designers based on a specific location and category. The designers have details like name, location, and categories. I want to filter them in a way that I can get the designers from a specific location and category.The signature of the function is: def get_designers_by_location_and_category(designers, location, category)", "test_cases": {"test1": "get_designers_by_location_and_category([{'name': 'Greg Klassen Furniture', 'location': 'Washington', 'categories': ['furniture']}, {'name': 'Kerf Design, Inc.', 'location': 'Seattle, Washington', 'categories': ['custom furniture', 'cabinet shop']}], 'Washington', 'furniture')", "test2": "get_designers_by_location_and_category([{'name': 'Henrybuilt', 'location': 'Washington', 'categories': ['kitchen design']}, {'name': 'Graypants', 'location': 'Washington', 'categories': ['furniture']}], 'Washington', 'kitchen design')", "test3": "get_designers_by_location_and_category([{'name': 'Chadhaus', 'location': 'Seattle, Washington', 'categories': ['furniture']}, {'name': 'Semigood Design', 'location': 'Washington', 'categories': ['design']}], 'Seattle, Washington', 'furniture')", "test4": "get_designers_by_location_and_category([{'name': 'urbancase', 'location': 'Washington', 'categories': ['furniture']}, {'name': 'Bitters', 'location': 'Washington', 'categories': ['design']}], 'Washington', 'furniture')", "test5": "get_designers_by_location_and_category([{'name': 'Kerf Design, Inc.', 'location': 'Seattle, Washington', 'categories': ['custom furniture', 'cabinet shop']}], 'Seattle, Washington', 'custom furniture')", "test6": "get_designers_by_location_and_category([{'name': '16th Workshop', 'location': 'Washington', 'categories': ['furniture']}], 'Washington', 'furniture')", "test7": "get_designers_by_location_and_category([{'name': 'Greg Klassen Furniture', 'location': 'Washington', 'categories': ['furniture']}, {'name': 'Graypants', 'location': 'Washington', 'categories': ['furniture']}], 'Washington', 'furniture')", "test8": "get_designers_by_location_and_category([{'name': 'Henrybuilt', 'location': 'Washington', 'categories': ['kitchen design']}, {'name': 'Kerf Design, Inc.', 'location': 'Seattle, Washington', 'categories': ['custom furniture', 'cabinet shop']}], 'Washington', 'kitchen design')", "test9": "get_designers_by_location_and_category([{'name': 'Chadhaus', 'location': 'Seattle, Washington', 'categories': ['furniture']}, {'name': 'Semigood Design', 'location': 'Washington', 'categories': ['design']}], 'Seattle, Washington', 'design')", "test10": "get_designers_by_location_and_category([{'name': 'urbancase', 'location': 'Washington', 'categories': ['furniture']}, {'name': 'Bitters', 'location': 'Washington', 'categories': ['design']}], 'Washington', 'design')"}, "hidden_information": "def get_designers_by_location_and_category(designers, location, category):\n    return [designer for designer in designers if designer.get('location') == location and category in designer.get('categories', [])]"}
{"ground_truth": "def calculate_economic_dominance(gdp_share, trade_share, foreign_investment_share):\n    return (0.4 * gdp_share) + (0.3 * trade_share) + (0.3 * foreign_investment_share)", "problem_description": "I want you to write a Python function to calculate the economic dominance index of a country. The function should take into account the country's share of world GDP, trade, and foreign investment. I read an article about a new book that combines these factors into an index, but it didn't explain the formula. Can you figure it out and write the function?The signature of the function is: def calculate_economic_dominance(gdp_share, trade_share, foreign_investment_share)", "test_cases": {"test1": "calculate_economic_dominance(0.2, 0.3, 0.1)", "test2": "calculate_economic_dominance(0.1, 0.2, 0.3)", "test3": "calculate_economic_dominance(0.5, 0.2, 0.1)", "test4": "calculate_economic_dominance(0.1, 0.5, 0.2)", "test5": "calculate_economic_dominance(0.2, 0.1, 0.5)", "test6": "calculate_economic_dominance(0.3, 0.3, 0.3)", "test7": "calculate_economic_dominance(0.25, 0.25, 0.25)", "test8": "calculate_economic_dominance(0.4, 0.3, 0.2)", "test9": "calculate_economic_dominance(0.35, 0.35, 0.2)", "test10": "calculate_economic_dominance(0.45, 0.2, 0.25)"}, "hidden_information": "def calculate_economic_dominance(gdp_share, trade_share, foreign_investment_share):\n    return (0.4 * gdp_share) + (0.3 * trade_share) + (0.3 * foreign_investment_share)"}
{"ground_truth": "def rank_universities(universities, criteria): \n    # universities: a list of dictionaries containing university data\n    # criteria: a dictionary of weights for each criterion\n    rankings = {}\n    for university in universities:\n        score = 0\n        for criterion, weight in criteria.items():\n            score += university[criterion] * weight\n        rankings[university['name']] = score\n    return sorted(rankings.items(), key=lambda x: x[1], reverse=True)", "problem_description": "I want you to write a Python function to rank universities based on various criteria such as research output, student satisfaction, and faculty quality. The function should take a list of universities and a dictionary of criteria as input and return a list of universities ranked according to their overall score.The signature of the function is: def rank_universities(universities, criteria)", "test_cases": {"test1": "rank_universities([{'name': 'University A', 'research_output': 0.8, 'student_satisfaction': 0.7, 'faculty_quality': 0.9}, {'name': 'University B', 'research_output': 0.9, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}], {'research_output': 0.4, 'student_satisfaction': 0.3, 'faculty_quality': 0.3})", "test2": "rank_universities([{'name': 'University C', 'research_output': 0.6, 'student_satisfaction': 0.9, 'faculty_quality': 0.8}, {'name': 'University D', 'research_output': 0.7, 'student_satisfaction': 0.6, 'faculty_quality': 0.9}], {'research_output': 0.5, 'student_satisfaction': 0.3, 'faculty_quality': 0.2})", "test3": "rank_universities([{'name': 'University E', 'research_output': 0.9, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}, {'name': 'University F', 'research_output': 0.8, 'student_satisfaction': 0.9, 'faculty_quality': 0.6}], {'research_output': 0.4, 'student_satisfaction': 0.4, 'faculty_quality': 0.2})", "test4": "rank_universities([{'name': 'University G', 'research_output': 0.7, 'student_satisfaction': 0.7, 'faculty_quality': 0.8}, {'name': 'University H', 'research_output': 0.6, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}], {'research_output': 0.3, 'student_satisfaction': 0.3, 'faculty_quality': 0.4})", "test5": "rank_universities([{'name': 'University I', 'research_output': 0.8, 'student_satisfaction': 0.6, 'faculty_quality': 0.9}, {'name': 'University J', 'research_output': 0.7, 'student_satisfaction': 0.7, 'faculty_quality': 0.8}], {'research_output': 0.5, 'student_satisfaction': 0.4, 'faculty_quality': 0.1})", "test6": "rank_universities([{'name': 'University K', 'research_output': 0.9, 'student_satisfaction': 0.9, 'faculty_quality': 0.8}, {'name': 'University L', 'research_output': 0.8, 'student_satisfaction': 0.7, 'faculty_quality': 0.9}], {'research_output': 0.4, 'student_satisfaction': 0.3, 'faculty_quality': 0.3})", "test7": "rank_universities([{'name': 'University M', 'research_output': 0.7, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}, {'name': 'University N', 'research_output': 0.6, 'student_satisfaction': 0.9, 'faculty_quality': 0.8}], {'research_output': 0.5, 'student_satisfaction': 0.4, 'faculty_quality': 0.1})", "test8": "rank_universities([{'name': 'University O', 'research_output': 0.8, 'student_satisfaction': 0.7, 'faculty_quality': 0.9}, {'name': 'University P', 'research_output': 0.9, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}], {'research_output': 0.4, 'student_satisfaction': 0.3, 'faculty_quality': 0.3})", "test9": "rank_universities([{'name': 'University Q', 'research_output': 0.6, 'student_satisfaction': 0.9, 'faculty_quality': 0.8}, {'name': 'University R', 'research_output': 0.7, 'student_satisfaction': 0.6, 'faculty_quality': 0.9}], {'research_output': 0.5, 'student_satisfaction': 0.4, 'faculty_quality': 0.1})", "test10": "rank_universities([{'name': 'University S', 'research_output': 0.9, 'student_satisfaction': 0.8, 'faculty_quality': 0.7}, {'name': 'University T', 'research_output': 0.8, 'student_satisfaction': 0.9, 'faculty_quality': 0.6}], {'research_output': 0.4, 'student_satisfaction': 0.3, 'faculty_quality': 0.3})"}, "hidden_information": "def rank_universities(universities, criteria): \n    # universities: a list of dictionaries containing university data\n    # criteria: a dictionary of weights for each criterion\n    rankings = {}\n    for university in universities:\n        score = 0\n        for criterion, weight in criteria.items():\n            score += university[criterion] * weight\n        rankings[university['name']] = score\n    return sorted(rankings.items(), key=lambda x: x[1], reverse=True)"}
{"ground_truth": "def calculate_corruption_index(stability, transparency, accountability, weight_stability=0.3, weight_transparency=0.4, weight_accountability=0.3): return weight_stability * stability + weight_transparency * transparency + weight_accountability * accountability", "problem_description": "I want to create a python function to calculate the corruption index of a country. I know it should take into account institutional stability, transparency, and accountability, but I'm not sure how to weight them. Can you help me write this function? The corruption index should be a value between 0 and 1, where 1 is the most corrupt.The signature of the function is: def calculate_corruption_index(stability, transparency, accountability, weight_stability=0.3, weight_transparency=0.4, weight_accountability=0.3)", "test_cases": {"test1": "calculate_corruption_index(0.8, 0.7, 0.9)", "test2": "calculate_corruption_index(0.4, 0.6, 0.8, weight_stability=0.5)", "test3": "calculate_corruption_index(0.9, 0.3, 0.5, weight_transparency=0.6, weight_accountability=0.1)", "test4": "calculate_corruption_index(0.2, 0.1, 0.3)", "test5": "calculate_corruption_index(0.95, 0.85, 0.9)", "test6": "calculate_corruption_index(0.3, 0.4, 0.2, weight_stability=0.7)", "test7": "calculate_corruption_index(0.1, 0.9, 0.8, weight_transparency=0.8)", "test8": "calculate_corruption_index(0.6, 0.7, 0.3, weight_accountability=0.6)", "test9": "calculate_corruption_index(0.8, 0.9, 0.95, weight_stability=0.2)", "test10": "calculate_corruption_index(0.5, 0.6, 0.7, weight_transparency=0.3, weight_accountability=0.5)"}, "hidden_information": "def calculate_corruption_index(stability, transparency, accountability, weight_stability=0.3, weight_transparency=0.4, weight_accountability=0.3): return weight_stability * stability + weight_transparency * transparency + weight_accountability * accountability"}
{"ground_truth": "def moving_average_crossover(short_window, long_window, signal):\n    if short_window > long_window and signal == 'golden_cross':\n        return True\n    elif short_window < long_window and signal == 'death_cross':\n        return True\n    else:\n        return False", "problem_description": "I want the LLM agent to write a Python function that can identify moving average crossovers in a trading strategy, like the Golden Cross and Death Cross. The agent needs to collaborate with me to understand what inputs and logic are required for this function.The signature of the function is: def moving_average_crossover(short_window, long_window, signal)", "test_cases": {"test1": "moving_average_crossover(10, 5, 'golden_cross')", "test2": "moving_average_crossover(5, 10, 'death_cross')", "test3": "moving_average_crossover(10, 10, 'golden_cross')", "test4": "moving_average_crossover(5, 5, 'death_cross')", "test5": "moving_average_crossover(15, 20, 'golden_cross')", "test6": "moving_average_crossover(20, 15, 'death_cross')", "test7": "moving_average_crossover(10, 5, 'death_cross')", "test8": "moving_average_crossover(5, 10, 'golden_cross')", "test9": "moving_average_crossover(10, 10, 'death_cross')", "test10": "moving_average_crossover(5, 5, 'golden_cross')"}, "hidden_information": "def moving_average_crossover(short_window, long_window, signal):\n    if short_window > long_window and signal == 'golden_cross':\n        return True\n    elif short_window < long_window and signal == 'death_cross':\n        return True\n    else:\n        return False"}
{"ground_truth": "def is_sqeenix_game(title):\n    sqeenix_games = ['Final Fantasy Versus XIII', 'Final Fantasy VI', 'Final Fantasy XIV', 'Final Fantasy XIII-2', 'Deus Ex', 'Hitman', 'Sleeping Dogs', 'Final Fantasy Agito XIII']\n    if title in sqeenix_games:\n        return True\n    return False", "problem_description": "can you write a python function that takes in a string as the input, and returns true if the game title is from Squeenix and false otherwise?The signature of the function is: def is_sqeenix_game(title)", "test_cases": {"test1": "is_sqeenix_game('Final Fantasy Versus XIII')", "test2": "is_sqeenix_game('Assassins Creed')", "test3": "is_sqeenix_game('Final Fantasy VI')", "test4": "is_sqeenix_game('God of War')", "test5": "is_sqeenix_game('Deus Ex')", "test6": "is_sqeenix_game('The Last of Us')", "test7": "is_sqeenix_game('Hitman')", "test8": "is_sqeenix_game('Sleeping Dogs')", "test9": "is_sqeenix_game('Final Fantasy Agito XIII')", "test10": "is_sqeenix_game('BioShock')"}, "hidden_information": "def is_sqeenix_game(title):\n    sqeenix_games = ['Final Fantasy Versus XIII', 'Final Fantasy VI', 'Final Fantasy XIV', 'Final Fantasy XIII-2', 'Deus Ex', 'Hitman', 'Sleeping Dogs', 'Final Fantasy Agito XIII']\n    if title in sqeenix_games:\n        return True\n    return False"}
{"ground_truth": "def filter_beta_players(applications, min_videos, min_forums, min_connections):\n    filtered_players = []\n    for player in applications:\n        if player['videos'] >= min_videos and player['forums'] >= min_forums and player['connections'] >= min_connections:\n            filtered_players.append(player)\n    return filtered_players", "problem_description": "Imagine you are working for a game development company and your boss asks you to write a function that filters a list of potential beta players for your new game. The function should filter the players based on their online presence, specifically the number of videos they've posted, the number of forums they're active in, and the number of connections they have within the gaming community. Write a python function that takes a list of applications, and minimum number of videos, forums, and connections as parameters, and returns a list of the filtered players.The signature of the function is: def filter_beta_players(applications, min_videos, min_forums, min_connections)", "test_cases": {"test1": "filter_beta_players([{'videos': 10, 'forums': 5, 'connections': 20}, {'videos': 5, 'forums': 10, 'connections': 30}], 5, 5, 20)", "test2": "filter_beta_players([{'videos': 20, 'forums': 10, 'connections': 40}, {'videos': 15, 'forums': 15, 'connections': 50}], 10, 10, 30)", "test3": "filter_beta_players([{'videos': 0, 'forums': 0, 'connections': 0}, {'videos': 20, 'forums': 20, 'connections': 60}], 10, 10, 30)", "test4": "filter_beta_players([{'videos': 15, 'forums': 20, 'connections': 40}, {'videos': 25, 'forums': 15, 'connections': 50}], 15, 15, 35)", "test5": "filter_beta_players([{'videos': 10, 'forums': 20, 'connections': 60}, {'videos': 30, 'forums': 10, 'connections': 40}], 15, 10, 30)", "test6": "filter_beta_players([{'videos': 20, 'forums': 15, 'connections': 50}, {'videos': 25, 'forums': 20, 'connections': 40}], 15, 10, 30)", "test7": "filter_beta_players([{'videos': 0, 'forums': 10, 'connections': 30}, {'videos': 20, 'forums': 20, 'connections': 50}], 5, 5, 20)", "test8": "filter_beta_players([{'videos': 30, 'forums': 15, 'connections': 40}, {'videos': 20, 'forums': 20, 'connections': 60}], 20, 10, 30)", "test9": "filter_beta_players([{'videos': 15, 'forums': 10, 'connections': 20}, {'videos': 25, 'forums': 20, 'connections': 50}], 10, 5, 20)", "test10": "filter_beta_players([{'videos': 10, 'forums': 15, 'connections': 30}, {'videos': 30, 'forums': 10, 'connections': 40}], 5, 5, 20)"}, "hidden_information": "def filter_beta_players(applications, min_videos, min_forums, min_connections):\n    filtered_players = []\n    for player in applications:\n        if player['videos'] >= min_videos and player['forums'] >= min_forums and player['connections'] >= min_connections:\n            filtered_players.append(player)\n    return filtered_players"}
{"ground_truth": "def calculate_gear_rarity(gear_distribution, target_rarity): return dict((rarity, freq * 100 / sum(gear_distribution.values())) for rarity, freq in gear_distribution.items()) if target_rarity in gear_distribution else 'Invalid target rarity'", "problem_description": "I have a Mass Effect 3 multiplayer game, and I want the agent to write a python function to calculate the rarity of my gears based on their frequencies. The function should take in a dictionary where the keys are the gear rarities (Common, Uncommon, Rare, etc.) and the values are their frequencies. It should also take in a target rarity and return the rarity as a string if it exists in the distribution. However, I want the frequency to be a percentage of the total gears. The agent should ask questions like what are the actual frequencies, what's the type of distribution (absolute frequencies or relative frequencies), etc.The signature of the function is: def calculate_gear_rarity(gear_distribution, target_rarity)", "test_cases": {"test1": "calculate_gear_rarity({'Common': 50, 'Uncommon': 30, 'Rare': 20}, 'Uncommon')", "test2": "calculate_gear_rarity({'Common': 100, 'Uncommon': 50, 'Rare': 20, 'Legendary': 10}, 'Legendary')", "test3": "calculate_gear_rarity({'Common': 50, 'Uncommon': 30, 'Rare': 20}, 'Epic')", "test4": "calculate_gear_rarity({'Common': 100, 'Uncommon': 50, 'Rare': 20, 'Legendary': 10}, 'Common')", "test5": "calculate_gear_rarity({'Common': 0, 'Uncommon': 50, 'Rare': 20, 'Legendary': 10}, 'Common')", "test6": "calculate_gear_rarity({'Common': 50, 'Uncommon': 50}, 'Rare')", "test7": "calculate_gear_rarity({'Legendary': 100}, 'Legendary')", "test8": "calculate_gear_rarity({'Common': 50, 'Uncommon': 30, 'Rare': 20}, 'Common')", "test9": "calculate_gear_rarity({'Common': 100, 'Uncommon': 50, 'Rare': 20, 'Legendary': 0}, 'Legendary')", "test10": "calculate_gear_rarity({'Common': 50, 'Uncommon': 30, 'Rare': 20}, 'Common')"}, "hidden_information": "def calculate_gear_rarity(gear_distribution, target_rarity): return dict((rarity, freq * 100 / sum(gear_distribution.values())) for rarity, freq in gear_distribution.items()) if target_rarity in gear_distribution else 'Invalid target rarity'"}
{"ground_truth": "def calculate_average_review_score(gameplay_score, story_score, graphics_sound_score, playtime_replayability_score):\n    return (gameplay_score + story_score + graphics_sound_score + playtime_replayability_score) / 4", "problem_description": "Can you write a python function that calculates the average review score of a video game based on the gameplay, story, graphics and sound, and playtime/replayability scores? The scores are given out of 10.The signature of the function is: def calculate_average_review_score(gameplay_score, story_score, graphics_sound_score, playtime_replayability_score)", "test_cases": {"test1": "calculate_average_review_score(10, 10, 9, 9)", "test2": "calculate_average_review_score(8, 9, 8, 7)", "test3": "calculate_average_review_score(9, 9, 8, 8)", "test4": "calculate_average_review_score(7, 8, 6, 6)", "test5": "calculate_average_review_score(8, 7, 7, 6)", "test6": "calculate_average_review_score(9, 8, 9, 8)", "test7": "calculate_average_review_score(6, 6, 5, 5)", "test8": "calculate_average_review_score(8, 9, 7, 7)", "test9": "calculate_average_review_score(7, 6, 8, 6)", "test10": "calculate_average_review_score(9, 9, 9, 9)"}, "hidden_information": "def calculate_average_review_score(gameplay_score, story_score, graphics_sound_score, playtime_replayability_score):\n    return (gameplay_score + story_score + graphics_sound_score + playtime_replayability_score) / 4"}
{"ground_truth": "def find_missing_fragments(collected_fragments, all_fragments): return [fragment for fragment in all_fragments if fragment not in collected_fragments]", "problem_description": "Hey LLM agent, I need your help with a problem I'm having in Final Fantasy XIII-2. I'm trying to collect all the fragments, but I'm not sure which ones I'm missing. Can you write a Python function that will help me figure out which fragments I need to find? The function should take in a list of the fragments I've already collected and a list of all the possible fragments, and then output the fragments that I'm missing.The signature of the function is: def find_missing_fragments(collected_fragments, all_fragments)", "test_cases": {"test1": "find_missing_fragments(['fragment1', 'fragment2', 'fragment3'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test2": "find_missing_fragments([], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test3": "find_missing_fragments(['fragment1', 'fragment2'], ['fragment1', 'fragment2', 'fragment3'])", "test4": "find_missing_fragments(['fragment4'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test5": "find_missing_fragments(['fragment1', 'fragment3'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test6": "find_missing_fragments(['fragment2', 'fragment3'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test7": "find_missing_fragments(['fragment1', 'fragment2', 'fragment3', 'fragment4'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test8": "find_missing_fragments(['fragment2'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test9": "find_missing_fragments(['fragment3'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])", "test10": "find_missing_fragments(['fragment4', 'fragment1'], ['fragment1', 'fragment2', 'fragment3', 'fragment4'])"}, "hidden_information": "def find_missing_fragments(collected_fragments, all_fragments): return [fragment for fragment in all_fragments if fragment not in collected_fragments]"}
{"ground_truth": "def calculate_puzzle_completion_rate(puzzle_times, total_puzzles):\n    total_time = sum(puzzle_times)\n    average_time_per_puzzle = total_time / total_puzzles\n    return average_time_per_puzzle, total_time", "problem_description": "I need a python function to calculate the rate of puzzle completion in the Da Vinci Code game. I want the function to take into account the time taken to complete each puzzle and the total number of puzzles.The signature of the function is: def calculate_puzzle_completion_rate(puzzle_times, total_puzzles)", "test_cases": {"test1": "calculate_puzzle_completion_rate([10, 20, 30], 3)", "test2": "calculate_puzzle_completion_rate([5, 15, 25, 35], 4)", "test3": "calculate_puzzle_completion_rate([40], 1)", "test4": "calculate_puzzle_completion_rate([10, 20, 30, 40, 50], 5)", "test5": "calculate_puzzle_completion_rate([2, 4, 6, 8, 10], 5)", "test6": "calculate_puzzle_completion_rate([1, 2, 3, 4, 5], 5)", "test7": "calculate_puzzle_completion_rate([10, 20, 30, 40], 4)", "test8": "calculate_puzzle_completion_rate([50, 40, 30, 20, 10], 5)", "test9": "calculate_puzzle_completion_rate([5, 5, 5, 5, 5], 5)", "test10": "calculate_puzzle_completion_rate([10, 20], 2)"}, "hidden_information": "def calculate_puzzle_completion_rate(puzzle_times, total_puzzles):\n    total_time = sum(puzzle_times)\n    average_time_per_puzzle = total_time / total_puzzles\n    return average_time_per_puzzle, total_time"}
{"ground_truth": "def get_legends(weapon_type, conquest_mode_completed, enemyuderfeat):\n    weapon_dict = {\n        'Pike Conquest Mode': 'Golden Glory'\n    }\n    if weapon_type == 'Blue/Green Dragon' and not conquest_mode_completed:\n        return False\n    if conquest_mode_completed and enemyuderfeat == True and weapon_type == 'Blue/Green Dragon':\n        return 'Blue/Green Dragon'\n    else:\n        return weapon_dict.get('Pike Conquest Mode')\n", "problem_description": "I'm trying to find out how to get legendary weapon in Pirate mode of a fictional game and my current game intelligence does not work well with Player vs environment mode but work perfectly well in player to player mode - I need you to write me a python function to help me deduce my out game legendary weapon - can you help me write it so that this can work for any player, weapon types and weapon rarity? Please take in consideration that my current AI ability can defeat an enemy.The signature of the function is: def get_legends(weapon_type, conquest_mode_completed, enemyuderfeat)", "test_cases": {"test1": "get_legends('Blue/Green Dragon', True, True)", "test2": "get_legends('Golden Glory', True, True)", "test3": "get_legends('Blue/Green Dragon', False, True)", "test4": "get_legends('Blue/Green Dragon', True, False)", "test5": "get_legends('Dark crystal', False, True)", "test6": "get_legends('Heroic', True, False)", "test7": "get_legends('Dragon of Eternity', True, False)", "test8": "get_legends('Magic ring of Sorcery', True, True)", "test9": "get_legends('Sword breaker', False, False)", "test10": "get_legends('Golden Arbalest', False, True)"}, "hidden_information": "def get_legends(weapon_type, conquest_mode_completed, enemyuderfeat):\n    weapon_dict = {\n        'Pike Conquest Mode': 'Golden Glory'\n    }\n    if weapon_type == 'Blue/Green Dragon' and not conquest_mode_completed:\n        return False\n    if conquest_mode_completed and enemyuderfeat == True and weapon_type == 'Blue/Green Dragon':\n        return 'Blue/Green Dragon'\n    else:\n        return weapon_dict.get('Pike Conquest Mode')\n"}
{"ground_truth": "def calculate_performance(speed, strength, speed_weight=0.6, strength_weight=0.4):\n    return (speed * speed_weight + strength * strength_weight) / (speed_weight + strength_weight)", "problem_description": "Hey AI, I want you to write a Python function that calculates an athlete's performance score. It should take into account their speed and strength, but I'm not sure how to combine these two metrics. Can you come up with a function that does this?The signature of the function is: def calculate_performance(speed, strength, speed_weight=0.6, strength_weight=0.4)", "test_cases": {"test1": "calculate_performance(10, 15)", "test2": "calculate_performance(20, 8)", "test3": "calculate_performance(8, 12)", "test4": "calculate_performance(12, 20)", "test5": "calculate_performance(16, 16)", "test6": "calculate_performance(0, 0)", "test7": "calculate_performance(10, 10)", "test8": "calculate_performance(5, 25)", "test9": "calculate_performance(25, 5)", "test10": "calculate_performance(15, 15)"}, "hidden_information": "def calculate_performance(speed, strength, speed_weight=0.6, strength_weight=0.4):\n    return (speed * speed_weight + strength * strength_weight) / (speed_weight + strength_weight)"}
{"ground_truth": "def parse_xml(xml_string):\n    import xml.etree.ElementTree as ET\n    root = ET.fromstring(xml_string)\n    result = []\n    for thing in root.findall(\"thing\"):\n        first = thing.find(\"first\").text if thing.find(\"first\") is not None else \"\"\n        second = thing.find(\"second\").text if thing.find(\"second\") is not None else \"\"\n        result.append({\"first\": first, \"second\": second})\n    return result", "problem_description": "Write a Python function to parse an XML file and handle missing or null values. The XML file has a structure with 'thing' elements that contain 'first' and 'second' elements. If either 'first' or 'second' is missing, I want the function to insert an empty string instead of skipping the entire entry. Can you help me create a function that can do this?The signature of the function is: def parse_xml(xml_string)", "test_cases": {"test1": "parse_xml(\"<things><thing><first>val1</first><second>val2</second></thing></things>\")", "test2": "parse_xml(\"<things><thing><first>val1</first></thing><thing><second>val2</second></thing></things>\")", "test3": "parse_xml(\"<things><thing></thing></things>\")", "test4": "parse_xml(\"<things><thing><first>val1</first><second/></thing></things>\")", "test5": "parse_xml(\"<things><thing><first/><second>val2</second></thing></things>\")", "test6": "parse_xml(\"<things><thing>val</thing></things>\")", "test7": "parse_xml(\"<things></things>\")", "test8": "parse_xml(\"<things><thing><first>val1</first><second>val2</second><extra>val3</extra></thing></things>\")", "test9": "parse_xml(\"<things><thing><first>val1</first></thing><thing><second>val2</second></thing></things>\")", "test10": "parse_xml(\"<things><thing><first/><second/></thing></things>\")"}, "hidden_information": "def parse_xml(xml_string):\n    import xml.etree.ElementTree as ET\n    root = ET.fromstring(xml_string)\n    result = []\n    for thing in root.findall(\"thing\"):\n        first = thing.find(\"first\").text if thing.find(\"first\") is not None else \"\"\n        second = thing.find(\"second\").text if thing.find(\"second\") is not None else \"\"\n        result.append({\"first\": first, \"second\": second})\n    return result"}
{"ground_truth": "def calculate_search_result_score(days_taken_to_respond): return 1 / (sum(days_taken_to_respond) / len(days_taken_to_respond) + 1)", "problem_description": "I want the agent to write a python function to calculate a score for holiday lettings search results based on how quickly responses are made to enquiries. The function needs to take into account the days taken to respond to find the score, but I'm not quite sure how it should be calculated.The signature of the function is: def calculate_search_result_score(days_taken_to_respond)", "test_cases": {"test1": "calculate_search_result_score([1, 2, 3, 4, 5])", "test2": "calculate_search_result_score([0, 1, 2, 3])", "test3": "calculate_search_result_score([2, 2, 2, 2, 2])", "test4": "calculate_search_result_score([1, 1, 1, 1, 1])", "test5": "calculate_search_result_score([5, 4, 3, 2, 1])", "test6": "calculate_search_result_score([0, 0, 0, 0, 0])", "test7": "calculate_search_result_score([3, 4, 2, 5])", "test8": "calculate_search_result_score([1, 3, 2, 4, 5, 6])", "test9": "calculate_search_result_score([2, 5, 1, 4, 3, 2, 5])", "test10": "calculate_search_result_score([10, 0, 5, 1, 0])"}, "hidden_information": "def calculate_search_result_score(days_taken_to_respond): return 1 / (sum(days_taken_to_respond) / len(days_taken_to_respond) + 1)"}
{"ground_truth": "def calculate_disaster_probability(predicted_disasters, actual_disasters):\n    if predicted_disasters == 0:\n        return 0\n    else:\n        return actual_disasters / predicted_disasters", "problem_description": "I want you to write a Python function to calculate the probability of a disaster occurring based on the number of predicted disasters and the actual disasters that occurred. The function should take two parameters, the number of predicted disasters and the number of actual disasters, and return the probability as a float between 0 and 1.The signature of the function is: def calculate_disaster_probability(predicted_disasters, actual_disasters)", "test_cases": {"test1": "calculate_disaster_probability(10, 1) == 0.1", "test2": "calculate_disaster_probability(20, 5) == 0.25", "test3": "calculate_disaster_probability(50, 10) == 0.2", "test4": "calculate_disaster_probability(100, 20) == 0.2", "test5": "calculate_disaster_probability(0, 10) == 0", "test6": "calculate_disaster_probability(5, 5) == 1.0", "test7": "calculate_disaster_probability(10, 0) == 0.0", "test8": "calculate_disaster_probability(1000, 100) == 0.1", "test9": "calculate_disaster_probability(500, 50) == 0.1", "test10": "calculate_disaster_probability(2000, 200) == 0.1"}, "hidden_information": "def calculate_disaster_probability(predicted_disasters, actual_disasters):\n    if predicted_disasters == 0:\n        return 0\n    else:\n        return actual_disasters / predicted_disasters"}
{"ground_truth": "def calculate_animal_kill_rate(total_animals_killed, animals_killed_per_day, total_days, unintended_kills, targeted_kills):\n    kill_rate = (total_animals_killed - unintended_kills) / total_days\n    efficiency_rate = (targeted_kills / total_animals_killed) * 100\n    return kill_rate, efficiency_rate", "problem_description": "I want to write a Python function to calculate the animal kill rate of a wildlife service agency. They kill animals for various reasons, including protection of endangered species, damage to crops, and other reasons. I have the total number of animals killed, the number of animals killed per day, and the total number of days. However, some of these kills are unintended, and some are targeted. Can you help me write a function to calculate the animal kill rate, taking into account the different circumstances?The signature of the function is: def calculate_animal_kill_rate(total_animals_killed, animals_killed_per_day, total_days, unintended_kills, targeted_kills)", "test_cases": {"test1": "calculate_animal_kill_rate(100, 5, 20, 10, 90)", "test2": "calculate_animal_kill_rate(50, 2, 30, 5, 45)", "test3": "calculate_animal_kill_rate(200, 10, 40, 20, 180)", "test4": "calculate_animal_kill_rate(75, 3, 25, 10, 65)", "test5": "calculate_animal_kill_rate(120, 4, 30, 15, 105)", "test6": "calculate_animal_kill_rate(80, 4, 20, 10, 70)", "test7": "calculate_animal_kill_rate(150, 5, 30, 20, 130)", "test8": "calculate_animal_kill_rate(100, 3, 25, 10, 90)", "test9": "calculate_animal_kill_rate(60, 2, 20, 5, 55)", "test10": "calculate_animal_kill_rate(180, 6, 30, 25, 155)"}, "hidden_information": "def calculate_animal_kill_rate(total_animals_killed, animals_killed_per_day, total_days, unintended_kills, targeted_kills):\n    kill_rate = (total_animals_killed - unintended_kills) / total_days\n    efficiency_rate = (targeted_kills / total_animals_killed) * 100\n    return kill_rate, efficiency_rate"}
{"ground_truth": "def find_suitable_coaches(coaches, min_minor_experience=1, latin_american_preference=True):\n    suitable_coaches = []\n    for coach in coaches:\n        if (latin_american_preference and coach['language'] == 'Spanish') or not latin_american_preference:\n            if coach['minor_experience'] >= min_minor_experience:\n                suitable_coaches.append(coach)\n    return suitable_coaches", "problem_description": "Can you write a python function to help filter a list of coaches for the Orioles team? The ideal staff should have a Latin American coach at third base who also could work with the infielders, and the coach should have previous experience in the minors.The signature of the function is: def find_suitable_coaches(coaches, min_minor_experience=1, latin_american_preference=True)", "test_cases": {"test1": "find_suitable_coaches([{ 'name': 'John', 'language': 'English', 'minor_experience': 2}, { 'name': 'Juan', 'language': 'Spanish', 'minor_experience': 3}], 1, True)", "test2": "find_suitable_coaches([{ 'name': 'Mike', 'language': 'English', 'minor_experience': 0}], 1, False)", "test3": "find_suitable_coaches([{ 'name': 'Kirby', 'language': 'English', 'minor_experience': 1}], 1, True)", "test4": "find_suitable_coaches([{ 'name': 'Scott', 'language': 'English', 'minor_experience': 2}, { 'name': 'Jos\u00e9', 'language': 'Spanish', 'minor_experience': 1}], 1, False)", "test5": "find_suitable_coaches([{ 'name': 'Griffin', 'language': 'English', 'minor_experience': 3}], 2, True)", "test6": "find_suitable_coaches([{ 'name': 'Samuel', 'language': 'Spanish', 'minor_experience': 3}], 1, True)", "test7": "find_suitable_coaches([], 1, True)", "test8": "find_suitable_coaches([{ 'name': 'Juan', 'language': 'Spanish', 'minor_experience': 3}, { 'name': 'John', 'language': 'English', 'minor_experience': 2}], 2, False)", "test9": "find_suitable_coaches([{ 'name': 'Kirby', 'language': 'English', 'minor_experience': 1}, { 'name': 'Scott', 'language': 'English', 'minor_experience': 2}], 1, True)", "test10": "find_suitable_coaches([{ 'name': 'Griffin', 'language': 'English', 'minor_experience': 3}, { 'name': 'Samuel', 'language': 'Spanish', 'minor_experience': 3}], 1, True)"}, "hidden_information": "def find_suitable_coaches(coaches, min_minor_experience=1, latin_american_preference=True):\n    suitable_coaches = []\n    for coach in coaches:\n        if (latin_american_preference and coach['language'] == 'Spanish') or not latin_american_preference:\n            if coach['minor_experience'] >= min_minor_experience:\n                suitable_coaches.append(coach)\n    return suitable_coaches"}
{"ground_truth": "def classify_movie_review(score):\n    if score < 40:\n        return 'Negative'\n    elif score < 60:\n        return 'Mixed'\n    else:\n        return 'Positive'", "problem_description": "I want you to write a python function that classifies movie reviews as Positive, Negative, or Mixed, based on their critic scores. The scores range from 12 to 70, and I want the function to accurately categorize the reviews.The signature of the function is: def classify_movie_review(score)", "test_cases": {"test1": "classify_movie_review(3)", "test2": "classify_movie_review(70)", "test3": "classify_movie_review(60)", "test4": "classify_movie_review(12)", "test5": "classify_movie_review(40)", "test6": "classify_movie_review(59)", "test7": "classify_movie_review(50)", "test8": "classify_movie_review(30)", "test9": "classify_movie_review(80)", "test10": "classify_movie_review(55)"}, "hidden_information": "def classify_movie_review(score):\n    if score < 40:\n        return 'Negative'\n    elif score < 60:\n        return 'Mixed'\n    else:\n        return 'Positive'"}
{"ground_truth": "def calculate_average_user_rating(tv_shows, critic_scores, user_scores):\n    total_user_scores = sum(user_scores)\n    if total_user_scores == 0:\n        return 'No user score yet'\n    return total_user_scores / len(user_scores)", "problem_description": "I need you to write a python function to calculate a tv show rating based on critic and user scores. I don't know how to start. I want you to take care of it.The signature of the function is: def calculate_average_user_rating(tv_shows, critic_scores, user_scores)", "test_cases": {"test1": "calculate_average_user_rating([], [1], [5, 4, 5])", "test2": "calculate_average_user_rating(['The Osbournes'], [1], [1])", "test3": "calculate_average_user_rating(['The Osbournes', 'The Cleavers'], [1, 5], [1, 5])", "test4": "calculate_average_user_rating(['The Osbournes', 'The Cleavers', 'The Bradys'], [1, 5, 3], [1, 5, 2])", "test5": "calculate_average_user_rating(['The Osbournes'], [], [])", "test6": "calculate_average_user_rating(['The Osbournes'], [1, 2, 3], [])", "test7": "calculate_average_user_rating(['The Osbournes'], [], [1, 2, 3, 4, 5])", "test8": "calculate_average_user_rating(['The Cleavers', 'The Bradys'], [2, 3], [4, 5])", "test9": "calculate_average_user_rating(['The Huxtables'], [4], [3])", "test10": "calculate_average_user_rating([], [], [1, 2, 3, 4, 5])"}, "hidden_information": "def calculate_average_user_rating(tv_shows, critic_scores, user_scores):\n    total_user_scores = sum(user_scores)\n    if total_user_scores == 0:\n        return 'No user score yet'\n    return total_user_scores / len(user_scores)"}
{"ground_truth": "def calculate_average_score(critic_scores, user_scores, critic_weight=0.8, user_weight=0.2):\n    critic_sum = sum(critic_scores)\n    user_sum = sum(user_scores)\n    critic_avg = critic_sum / len(critic_scores)\n    user_avg = user_sum / len(user_scores)\n    return (critic_avg * critic_weight) + (user_avg * user_weight)", "problem_description": "Can you write a python function that takes in different scores as input and calculates an overall score? I have 100 point scores from critics and 5 point scores from users. The function should give more weight to the critics' scores.The signature of the function is: def calculate_average_score(critic_scores, user_scores, critic_weight=0.8, user_weight=0.2)", "test_cases": {"test1": "calculate_average_score([90, 80, 95], [4, 5, 3])", "test2": "calculate_average_score([70, 85, 75], [2, 3, 4])", "test3": "calculate_average_score([98, 92, 88], [5, 4, 3])", "test4": "calculate_average_score([60, 70, 65], [3, 2, 1])", "test5": "calculate_average_score([80, 90, 85], [4, 5, 4])", "test6": "calculate_average_score([95, 98, 92], [5, 5, 4])", "test7": "calculate_average_score([75, 80, 85], [3, 4, 4])", "test8": "calculate_average_score([65, 70, 75], [2, 3, 3])", "test9": "calculate_average_score([90, 95, 92], [4, 5, 5])", "test10": "calculate_average_score([85, 90, 88], [4, 4, 5])"}, "hidden_information": "def calculate_average_score(critic_scores, user_scores, critic_weight=0.8, user_weight=0.2):\n    critic_sum = sum(critic_scores)\n    user_sum = sum(user_scores)\n    critic_avg = critic_sum / len(critic_scores)\n    user_avg = user_sum / len(user_scores)\n    return (critic_avg * critic_weight) + (user_avg * user_weight)"}
{"ground_truth": "def calculate_cholesterol_ratio(total_cholesterol, hdl): return total_cholesterol / hdl", "problem_description": "I want you to write a Python function to calculate my ideal cholesterol ratio. I think it's something like total cholesterol divided by HDL, but I'm not sure. Can you make it so that it takes two arguments, the total cholesterol and HDL values?The signature of the function is: def calculate_cholesterol_ratio(total_cholesterol, hdl)", "test_cases": {"test1": "calculate_cholesterol_ratio(200, 80)", "test2": "calculate_cholesterol_ratio(215, 79)", "test3": "calculate_cholesterol_ratio(180, 60)", "test4": "calculate_cholesterol_ratio(250, 90)", "test5": "calculate_cholesterol_ratio(220, 70)", "test6": "calculate_cholesterol_ratio(210, 85)", "test7": "calculate_cholesterol_ratio(230, 95)", "test8": "calculate_cholesterol_ratio(240, 80)", "test9": "calculate_cholesterol_ratio(260, 100)", "test10": "calculate_cholesterol_ratio(200, 50)"}, "hidden_information": "def calculate_cholesterol_ratio(total_cholesterol, hdl): return total_cholesterol / hdl"}
{"ground_truth": "def calculate_car_score(horsepower, torque, weight, speed, horsepower_weight=0.4, torque_weight=0.3, weight_weight=0.2, speed_weight=0.1):\n    return (horsepower * horsepower_weight + torque * torque_weight + weight * weight_weight + speed * speed_weight) / (horsepower_weight + torque_weight + weight_weight + speed_weight)", "problem_description": "Write a Python function that calculates the score of a car based on its performance attributes, such as horsepower, torque, weight, and speed, so that I can compare and choose between different cars.The signature of the function is: def calculate_car_score(horsepower, torque, weight, speed, horsepower_weight=0.4, torque_weight=0.3, weight_weight=0.2, speed_weight=0.1)", "test_cases": {"test1": "calculate_car_score(197, 170, 1500, 120)", "test2": "calculate_car_score(200, 180, 1650, 125)", "test3": "calculate_car_score(220, 200, 1600, 130)", "test4": "calculate_car_score(180, 160, 1550, 115)", "test5": "calculate_car_score(210, 190, 1625, 122)", "test6": "calculate_car_score(205, 185, 1580, 118)", "test7": "calculate_car_score(215, 195, 1590, 120)", "test8": "calculate_car_score(190, 165, 1525, 110)", "test9": "calculate_car_score(225, 205, 1630, 127)", "test10": "calculate_car_score(199, 169, 1510, 114)"}, "hidden_information": "def calculate_car_score(horsepower, torque, weight, speed, horsepower_weight=0.4, torque_weight=0.3, weight_weight=0.2, speed_weight=0.1):\n    return (horsepower * horsepower_weight + torque * torque_weight + weight * weight_weight + speed * speed_weight) / (horsepower_weight + torque_weight + weight_weight + speed_weight)"}
{"ground_truth": "def get_player_stats(team_roster, facial_hair):\n  stats = {'players': []}\n  for player in team_roster:\n    if player['name'] in facial_hair:\n      player_stats = {'name': player['name'], 'games_played': player['games_played']}\n      stats['players'].append(player_stats)\n  return stats", "problem_description": "I need a python function to get some information about football players that participated in the last couple of matches. Can you write a function that can find out how well each footballer did given their mustache or beard style during their match?The signature of the function is: def get_player_stats(team_roster, facial_hair)", "test_cases": {"test1": "get_player_stats([{'name': 'Peter Crouch', 'games_played': 3}, {'name': 'Michael Owen', 'games_played': 2}], {'Peter Crouch': 'pubic fluff', 'Michael Owen': 'stick-on'})", "test2": "get_player_stats([{'name': 'Robert Huth', 'games_played': 5}, {'name': 'Andrea Pirlo', 'games_played': 4}], {'Robert Huth': 'officer class', 'Andrea Pirlo': 'fabulously bushy beard'})", "test3": "get_player_stats([{'name': 'George Best', 'games_played': 1}], {'George Best': 'long, bushy sideboards'})", "test4": "get_player_stats([{'name': 'Hunter Davies', 'games_played': 0}], {})", "test5": "get_player_stats([], {})", "test6": "get_player_stats([{'name': 'Rafael Benitez', 'games_played': 2}, {'name': 'Roberto Di Matteo', 'games_played': 1}], {'Rafael Benitez': 'berk', 'Roberto Di Matteo': 'no facial hair'})", "test7": "get_player_stats([{'name': 'Player1', 'games_played': 3}, {'name': 'Player2', 'games_played': 2}], {'Player1': 'moustache', 'Player2': 'beard'})", "test8": "get_player_stats([{'name': 'Player1', 'games_played': 0}, {'name': 'Player2', 'games_played': 0}], {'Player1': 'no facial hair', 'Player2': 'no facial hair'})", "test9": "get_player_stats([{'name': 'Player1', 'games_played': 10}, {'name': 'Player2', 'games_played': 5}], {'Player1': 'goatee', 'Player2': 'handlebar'})", "test10": "get_player_stats([{'name': 'Player1', 'games_played': 2}, {'name': 'Player2', 'games_played': 3}], {})"}, "hidden_information": "def get_player_stats(team_roster, facial_hair):\n  stats = {'players': []}\n  for player in team_roster:\n    if player['name'] in facial_hair:\n      player_stats = {'name': player['name'], 'games_played': player['games_played']}\n      stats['players'].append(player_stats)\n  return stats"}
{"ground_truth": "def calculate_food_production_decrease(original_crop_yield, current_crop_yield):\n    return ((original_crop_yield - current_crop_yield) / original_crop_yield) * 100", "problem_description": "I want you to write a Python function that calculates the percentage decrease in food production due to Mugabe's land reform program. I have some data on the original crop yield and the current crop yield, but I'm not sure how to put it together. Can you help me?The signature of the function is: def calculate_food_production_decrease(original_crop_yield, current_crop_yield)", "test_cases": {"test1": "calculate_food_production_decrease(1800000, 75000)", "test2": "calculate_food_production_decrease(150000, 120000)", "test3": "calculate_food_production_decrease(100000, 80000)", "test4": "calculate_food_production_decrease(2000000, 1500000)", "test5": "calculate_food_production_decrease(250000, 200000)", "test6": "calculate_food_production_decrease(500000, 400000)", "test7": "calculate_food_production_decrease(3000000, 2500000)", "test8": "calculate_food_production_decrease(1200000, 900000)", "test9": "calculate_food_production_decrease(400000, 350000)", "test10": "calculate_food_production_decrease(1800000, 1700000)"}, "hidden_information": "def calculate_food_production_decrease(original_crop_yield, current_crop_yield):\n    return ((original_crop_yield - current_crop_yield) / original_crop_yield) * 100"}
{"ground_truth": "def calculate_pdvsa_revenue(barrels_sold, price_per_barrel):\n    return barrels_sold * price_per_barrel", "problem_description": "Write a Python function to calculate the total revenue generated by PDVSA from oil sales. The function should take into account the number of barrels sold and the price per barrel, both of which may vary. Please derive the function and ask me any clarifying questions you need to ensure the function is accurate.The signature of the function is: def calculate_pdvsa_revenue(barrels_sold, price_per_barrel)", "test_cases": {"test1": "calculate_pdvsa_revenue(1000000, 80)", "test2": "calculate_pdvsa_revenue(500000, 70)", "test3": "calculate_pdvsa_revenue(2000000, 90)", "test4": "calculate_pdvsa_revenue(750000, 85)", "test5": "calculate_pdvsa_revenue(3000000, 75)", "test6": "calculate_pdvsa_revenue(1000000, 65)", "test7": "calculate_pdvsa_revenue(2500000, 80)", "test8": "calculate_pdvsa_revenue(1200000, 70)", "test9": "calculate_pdvsa_revenue(1800000, 85)", "test10": "calculate_pdvsa_revenue(2200000, 75)"}, "hidden_information": "def calculate_pdvsa_revenue(barrels_sold, price_per_barrel):\n    return barrels_sold * price_per_barrel"}
{"ground_truth": "def needs_oil_filter_replacement(last_oil_change_mileage, last_oil_change_months, current_mileage, current_months):\n    mileage_diff = current_mileage - last_oil_change_mileage\n    months_diff = current_months - last_oil_change_months\n    if mileage_diff >= 3000 or months_diff >= 3:\n        return True\n    else:\n        return False", "problem_description": "I need a python function that determines when my Audi needs its oil filter replaced. Can the agent write something that takes into account the mileage and time elapsed since the last oil change? I remember reading something about 3,000 miles or 3 months, but I'm not sure how to implement it.The signature of the function is: def needs_oil_filter_replacement(last_oil_change_mileage, last_oil_change_months, current_mileage, current_months)", "test_cases": {"test1": "needs_oil_filter_replacement(0, 0, 2500, 2)", "test2": "needs_oil_filter_replacement(10000, 6, 13000, 9)", "test3": "needs_oil_filter_replacement(5000, 2, 7499, 2)", "test4": "needs_oil_filter_replacement(2000, 1, 4999, 1)", "test5": "needs_oil_filter_replacement(0, 0, 0, 4)", "test6": "needs_oil_filter_replacement(10000, 10, 9000, 8)", "test7": "needs_oil_filter_replacement(20000, 8, 24999, 9)", "test8": "needs_oil_filter_replacement(0, 1, 1000, 1)", "test9": "needs_oil_filter_replacement(3000, 3, 3000, 3)", "test10": "needs_oil_filter_replacement(4000, 1, 7000, 2)"}, "hidden_information": "def needs_oil_filter_replacement(last_oil_change_mileage, last_oil_change_months, current_mileage, current_months):\n    mileage_diff = current_mileage - last_oil_change_mileage\n    months_diff = current_months - last_oil_change_months\n    if mileage_diff >= 3000 or months_diff >= 3:\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_total_cost(car_year, num_regulators, regulator_price, is_electric):\n    if car_year < 2000:\n        return num_regulators * regulator_price * 1.1\n    elif is_electric:\n        return num_regulators * regulator_price * 1.2\n    else:\n        return num_regulators * regulator_price", "problem_description": "I want the LLM agent to write a Python function that calculates the total cost of replacing my Volvo Window Regulators. I just know that the price depends on the age of the car and whether the regulator is electric or not, can you help me figure out the formula?The signature of the function is: def calculate_total_cost(car_year, num_regulators, regulator_price, is_electric)", "test_cases": {"test1": "calculate_total_cost(1999, 2, 50.0, False)", "test2": "calculate_total_cost(2001, 1, 75.0, True)", "test3": "calculate_total_cost(1995, 4, 40.0, False)", "test4": "calculate_total_cost(2010, 2, 100.0, True)", "test5": "calculate_total_cost(2005, 1, 60.0, False)", "test6": "calculate_total_cost(1990, 3, 30.0, False)", "test7": "calculate_total_cost(2015, 2, 120.0, True)", "test8": "calculate_total_cost(2000, 1, 80.0, False)", "test9": "calculate_total_cost(1992, 2, 45.0, False)", "test10": "calculate_total_cost(2020, 3, 150.0, True)"}, "hidden_information": "def calculate_total_cost(car_year, num_regulators, regulator_price, is_electric):\n    if car_year < 2000:\n        return num_regulators * regulator_price * 1.1\n    elif is_electric:\n        return num_regulators * regulator_price * 1.2\n    else:\n        return num_regulators * regulator_price"}
{"ground_truth": "def calculate_white_student_percentage(total_students, white_students):\n    if total_students == 0:\n        return 0\n    return (white_students / total_students) * 100", "problem_description": "I want you to write a Python function that calculates the percentage of white students in a school. The problem is that some schools have a very low percentage of white students and I want to understand why this is happening. Can you write a function that takes in the total number of students and the number of white students as input and returns the percentage of white students?The signature of the function is: def calculate_white_student_percentage(total_students, white_students)", "test_cases": {"test1": "calculate_white_student_percentage(100, 60)", "test2": "calculate_white_student_percentage(413, 6)", "test3": "calculate_white_student_percentage(1000, 942)", "test4": "calculate_white_student_percentage(500, 0)", "test5": "calculate_white_student_percentage(200, 150)", "test6": "calculate_white_student_percentage(0, 0)", "test7": "calculate_white_student_percentage(100, 100)", "test8": "calculate_white_student_percentage(500, 250)", "test9": "calculate_white_student_percentage(200, 50)", "test10": "calculate_white_student_percentage(1000, 501)"}, "hidden_information": "def calculate_white_student_percentage(total_students, white_students):\n    if total_students == 0:\n        return 0\n    return (white_students / total_students) * 100"}
{"ground_truth": "def is_artist_christmas_song(artist_name, song_title, songs_info):\n    for song in songs_info:\n        if song['artist'] == artist_name and 'Christmas' in song['title'] or song['title'] == song_title:\n            return True\n    return False", "problem_description": "I need you write a python function to find a specific artist song based on some song information. I have a bunch of songs info and I just want to know if a particular artist has any Christmas song in my list. But could you also clarify how I could list Christmas songs from a specific artist? Something like a function but I have no idea what parameters are really needed for this function.The signature of the function is: def is_artist_christmas_song(artist_name, song_title, songs_info)", "test_cases": {"test1": "is_artist_christmas_song('Coldplay', None, [{'artist': 'Coldplay', 'title': 'Christmas Lights'}, {'artist': 'The Beatles', 'title': 'Hey Jude'}])", "test2": "is_artist_christmas_song('Radiohead', None, [{'artist': 'Radiohead', 'title': 'No Surprises'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test3": "is_artist_christmas_song('The Beatles', None, [{'artist': 'Radiohead', 'title': 'No Surprises'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test4": "is_artist_christmas_song('The Beatles', 'I Want To Hold Your Hand', [{'artist': 'The Beatles', 'title': 'I Want To Hold Your Hand'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test5": "is_artist_christmas_song('The Beatles', None, [{'artist': 'Radiohead', 'title': 'No Surprises'}, {'artist': 'The Beatles', 'title': 'I Want To Hold Your Hand'}])", "test6": "is_artist_christmas_song('Eminem', 'Lose Yourself', [{'artist': 'Eminem', 'title': 'Lose Yourself'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test7": "is_artist_christmas_song('Coldplay', 'Christmas Lights', [{'artist': 'Coldplay', 'title': 'Paradise'}, {'artist': 'The Beatles', 'title': 'Hey Jude'}])", "test8": "is_artist_christmas_song('Coldplay', 'The Scientist', [{'artist': 'Coldplay', 'title': 'The Scientist'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test9": "is_artist_christmas_song('Eminem', None, [{'artist': 'Eminem', 'title': 'Lose Yourself'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])", "test10": "is_artist_christmas_song('Maroon 5', None, [{'artist': 'Coldplay', 'title': 'Christmas Lights'}, {'artist': 'The Beatles', 'title': 'Christmas Time Is Here'}])"}, "hidden_information": "def is_artist_christmas_song(artist_name, song_title, songs_info):\n    for song in songs_info:\n        if song['artist'] == artist_name and 'Christmas' in song['title'] or song['title'] == song_title:\n            return True\n    return False"}
{"ground_truth": "def calculate_vote_result(votes, poll_type, total_users, results=None, users=None):\n    if results is None:\n        results = {}\n    if users is None:\n        users = []\n\n    for user, vote in votes.items():\n        if user not in users:\n            users.append(user)\n        if vote in results:\n            results[vote] += 1\n        else:\n            results[vote] = 1\n\n    if poll_type == 'majority':\n        max_votes = max(results.values())\n        majority_votes = {k for k, v in results.items() if v == max_votes}\n        return majority_votes\n    elif poll_type == 'percentage':\n        yes_votes = results.get('yes', 0)\n        return (yes_votes / len(users)) * 100\n    else:\n        raise ValueError('Invalid poll type')", "problem_description": "Hey LLM agent, can you write a Python function to calculate the result of a user poll? The poll type can vary, and we have different types of votes like yes, no or the user choosing not to vote. The function should take in the votes cast and the type of poll. How do I incorporate user data into the function? What should be the data type for votes?The signature of the function is: def calculate_vote_result(votes, poll_type, total_users, results=None, users=None)", "test_cases": {"test1": "calculate_vote_result({'John': 'yes', 'Alice': 'no', 'Bob': 'yes'}, 'majority', 3)", "test2": "calculate_vote_result({'User1': 'yes', 'User2': 'no', 'User3': 'yes', 'User4': 'yes'}, 'percentage', 5, {'yes': 0, 'no': 0}, ['User1', 'User2', 'User3'])", "test3": "calculate_vote_result({'John': 'yes', 'Alice': 'no', 'Bob': 'yes'}, 'majority', 5)", "test4": "calculate_vote_result({'User1': 'yes', 'User2': 'no', 'User3': 'yes', 'User4': 'yes'}, 'percentage', 4, {'yes': 0, 'no': 0}, ['User1', 'User2', 'User3', 'User4'])", "test5": "calculate_vote_result({'John': 'yes', 'Alice': 'no', 'Bob': 'yes', 'Charlie': 'no', 'Dave': 'yes'}, 'percentage', 5)", "test6": "calculate_vote_result({'User1': 'yes', 'User2': 'no', 'User3': 'yes', 'User4': 'yes', 'User5': 'no'}, 'percentage', 6, {'yes': 0, 'no': 0}, ['User1', 'User2', 'User3', 'User4', 'User5'])", "test7": "calculate_vote_result({'John': 'yes', 'Alice': 'yes', 'Bob': 'yes'}, 'majority', 5)", "test8": "calculate_vote_result({'User1': 'no', 'User2': 'no', 'User3': 'yes', 'User4': 'yes'}, 'majority', 6, {'yes': 0, 'no': 0}, ['User1', 'User2', 'User3', 'User4', 'User5'])", "test9": "calculate_vote_result({'John': 'yes', 'Alice': 'no', 'Bob': 'yes'}, 'percentage', 6)", "test10": "calculate_vote_result({'User1': 'yes', 'User2': 'yes', 'User3': 'yes', 'User4': 'yes'}, 'percentage', 4, {'yes': 0, 'no': 0}, ['User1', 'User2', 'User3', 'User4'])"}, "hidden_information": "def calculate_vote_result(votes, poll_type, total_users, results=None, users=None):\n    if results is None:\n        results = {}\n    if users is None:\n        users = []\n\n    for user, vote in votes.items():\n        if user not in users:\n            users.append(user)\n        if vote in results:\n            results[vote] += 1\n        else:\n            results[vote] = 1\n\n    if poll_type == 'majority':\n        max_votes = max(results.values())\n        majority_votes = {k for k, v in results.items() if v == max_votes}\n        return majority_votes\n    elif poll_type == 'percentage':\n        yes_votes = results.get('yes', 0)\n        return (yes_votes / len(users)) * 100\n    else:\n        raise ValueError('Invalid poll type')"}
{"ground_truth": "def get_relevant_code_snippets(query, code_snippets): return [snippet for snippet in code_snippets if query.lower() in snippet['description'].lower() or query.lower() in snippet['tags']]", "problem_description": "I want to build a code snippet repository where users can search for relevant snippets. Can you write a Python function that takes a query string and a list of code snippets as input and returns a list of snippets that match the query? Each snippet is a dictionary containing 'description' and 'tags' fields.The signature of the function is: def get_relevant_code_snippets(query, code_snippets)", "test_cases": {"test1": "get_relevant_code_snippets('perl', [{'description': 'A Perl solution for parsing', 'tags': ['perl', 'regex']}, {'description': 'A Python solution for parsing', 'tags': ['python', 'regex']}])", "test2": "get_relevant_code_snippets('golf', [{'description': 'A golf challenge solution', 'tags': ['golf', 'challenge']}, {'description': 'A Java solution for parsing', 'tags': ['java', 'regex']}])", "test3": "get_relevant_code_snippets('open source', [{'description': 'An open source project for machine learning', 'tags': ['open source', 'machine learning']}, {'description': 'A proprietary project for data analysis', 'tags': ['proprietary', 'data analysis']}])", "test4": "get_relevant_code_snippets('cryptocurrency', [{'description': 'A cryptocurrency trading platform', 'tags': ['cryptocurrency', 'trading']}, {'description': 'A sentiment analysis tool', 'tags': ['sentiment analysis', 'nlp']}])", "test5": "get_relevant_code_snippets('monk', [{'description': 'A Perl monk solution for parsing', 'tags': ['perl', 'monk']}, {'description': 'A Python solution for parsing', 'tags': ['python', 'regex']}])", "test6": "get_relevant_code_snippets('monastery', [{'description': 'A Perl solution for a monastery challenge', 'tags': ['perl', 'monastery']}, {'description': 'A Java solution for a monastery challenge', 'tags': ['java', 'monastery']}])", "test7": "get_relevant_code_snippets('ethics', [{'description': 'A discussion on ethics in coding', 'tags': ['ethics', 'coding']}, {'description': 'A solution for a coding challenge', 'tags': ['coding', 'challenge']}])", "test8": "get_relevant_code_snippets('cb clients', [{'description': 'A client for a chatbot', 'tags': ['cb clients', 'chatbot']}, {'description': 'A solution for a chatbot platform', 'tags': ['chatbot platform', 'nlp']}])", "test9": "get_relevant_code_snippets('polls', [{'description': 'A poll on cryptocurrency usage', 'tags': ['polls', 'cryptocurrency']}, {'description': 'A solution for a polling platform', 'tags': ['polling platform', 'voting system']}])", "test10": "get_relevant_code_snippets('voting booth', [{'description': 'A voting booth system', 'tags': ['voting booth', 'voting system']}, {'description': 'A solution for a voting platform', 'tags': ['voting platform', 'elections']}])"}, "hidden_information": "def get_relevant_code_snippets(query, code_snippets): return [snippet for snippet in code_snippets if query.lower() in snippet['description'].lower() or query.lower() in snippet['tags']]"}
{"ground_truth": "def calculate_town_happiness(num_shops, num_farmers, num_craftsmen, marriage_rate, average_crop_yield):\n    happiness = (num_shops * 0.1) + (num_farmers * 0.2) + (num_craftsmen * 0.15) + (marriage_rate * 0.2) + (average_crop_yield * 0.35)\n    return happiness", "problem_description": "Can you write a Python function to calculate the overall happiness of a town in Rune Factory Frontier? The function should take into account various factors such as the number of shops, farmers, craftsmen, marriage rate, and average crop yield. I want the function to return a score between 0 and 1 that represents the town's happiness.The signature of the function is: def calculate_town_happiness(num_shops, num_farmers, num_craftsmen, marriage_rate, average_crop_yield)", "test_cases": {"test1": "calculate_town_happiness(5, 10, 3, 0.5, 100)", "test2": "calculate_town_happiness(2, 5, 1, 0.2, 50)", "test3": "calculate_town_happiness(10, 20, 5, 0.8, 200)", "test4": "calculate_town_happiness(1, 1, 1, 0.1, 20)", "test5": "calculate_town_happiness(0, 0, 0, 0, 0)", "test6": "calculate_town_happiness(5, 10, 3, 1, 100)", "test7": "calculate_town_happiness(2, 5, 1, 0, 50)", "test8": "calculate_town_happiness(10, 20, 5, 0.5, 200)", "test9": "calculate_town_happiness(1, 1, 1, 0.5, 20)", "test10": "calculate_town_happiness(3, 6, 2, 0.3, 60)"}, "hidden_information": "def calculate_town_happiness(num_shops, num_farmers, num_craftsmen, marriage_rate, average_crop_yield):\n    happiness = (num_shops * 0.1) + (num_farmers * 0.2) + (num_craftsmen * 0.15) + (marriage_rate * 0.2) + (average_crop_yield * 0.35)\n    return happiness"}
{"ground_truth": "def calculate_review_score(reviews):\n    scores = {\n        '.Brilliant!': 5,\n        'MUST BUY!': 5,\n        'Almost!': 4,\n        'Amazing indeed': 5,\n        'Perfection!': 5,\n        '1 (100% helpful)': 1,\n    }\n    review_score = 0\n    for review in reviews:\n        must_buy = review.count('BUY')\n        for rating, score in scores.items():\n            if rating in review:\n                review_score += score + must_buy * 1\n    return review_score / len(reviews)", "problem_description": "Write a python function for me that takes a list of reviews and calculates an overall review score. The reviews are strings and are in different formats. Some reviews contain a helpfulness indicator and a comment, while others have a tone that indicates a good or bad review. If a review has the word 'BUY' in it, I want to give it a higher score. Can the function handle inconsistencies in user reviews?The signature of the function is: def calculate_review_score(reviews)", "test_cases": {"test1": "calculate_review_score(['Brilliant!', 'MUST BUY!', 'Almost!'])", "test2": "calculate_review_score(['1 (100% helpful)', 'The campaign was really good in my eyes, very interesting storyline with many twists and turns.'])", "test3": "calculate_review_score(['Amazing indeed', 'BUY IT!', 'Perfection!'])", "test4": "calculate_review_score(['Brilliant!', 'Almost!', 'The campaign was really good in my eyes, very interesting storyline with many twists and turns.'])", "test5": "calculate_review_score(['MUST BUY!', '1 (100% helpful)', 'Perfection!'])", "test6": "calculate_review_score(['Almost!', 'Amazing indeed', 'BUY IT!'])", "test7": "calculate_review_score(['Brilliant!', 'Almost!', 'Brilliant!'])", "test8": "calculate_review_score(['The campaign was really good in my eyes, very interesting storyline with many twists and turns.', 'Perfection!', 'BUY IT!'])", "test9": "calculate_review_score(['1 (100% helpful)', 'Amazing indeed', 'Almost!'])", "test10": "calculate_review_score(['Almost!', 'The campaign was really good in my eyes, very interesting storyline with many twists and turns.', 'BUY IT!'])"}, "hidden_information": "def calculate_review_score(reviews):\n    scores = {\n        '.Brilliant!': 5,\n        'MUST BUY!': 5,\n        'Almost!': 4,\n        'Amazing indeed': 5,\n        'Perfection!': 5,\n        '1 (100% helpful)': 1,\n    }\n    review_score = 0\n    for review in reviews:\n        must_buy = review.count('BUY')\n        for rating, score in scores.items():\n            if rating in review:\n                review_score += score + must_buy * 1\n    return review_score / len(reviews)"}
{"ground_truth": "def classify_institution(liberalness_score, liberal_threshold):\n    if liberalness_score > liberal_threshold:\n        return 'liberal'\n    else:\n        return 'conservative'", "problem_description": "I want you to write a python function that takes some values and determines whether an institution is liberal or not. The institution world is full of gray areas so make sure the function can call it liberal or conservative.The signature of the function is: def classify_institution(liberalness_score, liberal_threshold)", "test_cases": {"test1": "classify_institution(80.5, 75)", "test2": "classify_institution(60.2, 75)", "test3": "classify_institution(90.9, 80)", "test4": "classify_institution(50.1, 60)", "test5": "classify_institution(70.3, 80)", "test6": "classify_institution(85.6, 75)", "test7": "classify_institution(65.2, 60)", "test8": "classify_institution(95.8, 80)", "test9": "classify_institution(75.4, 65)", "test10": "classify_institution(82.1, 75)"}, "hidden_information": "def classify_institution(liberalness_score, liberal_threshold):\n    if liberalness_score > liberal_threshold:\n        return 'liberal'\n    else:\n        return 'conservative'"}
{"ground_truth": "def rate_album(review_text, keywords, weight_range=(1,5)):\n    rating = 0\n    review_words = review_text.split()\n    for word in review_words:\n        if word.lower() in [keyword.lower() for keyword in keywords]:\n            rating += 1\n    if len(review_words) > 0:\n        rating = (rating / len(review_words)) * (weight_range[1] - weight_range[0]) + weight_range[0]\n    return rating", "problem_description": "Write a python function to automatically rate an album based on a given review. The function should be able to identify the keywords that suggest a high rating and calculate the average rating based on the review. I want the function to be able to handle different rating ranges.The signature of the function is: def rate_album(review_text, keywords, weight_range=(1,5))", "test_cases": {"test1": "rate_album('A-Ha is an excellent band. Their music is unearthly excellent.', ['excellent', 'good', 'great'])", "test2": "rate_album('I love this album. It is the best album ever. It has beautiful melodies.', ['love', 'best', 'beautiful'])", "test3": "rate_album('The music is okay. It is not bad but not great either.', ['okay', 'bad', 'great'])", "test4": "rate_album('I hated this album. The music was terrible.', ['hated', 'terrible'])", "test5": "rate_album('The album is amazing. It is a masterpiece.', ['amazing', 'masterpiece'])", "test6": "rate_album('The review is empty.', [])", "test7": "rate_album('I love this album.', ['love'], weight_range=(1,10))", "test8": "rate_album('This is a fantastic album.', ['fantastic'])", "test9": "rate_album('The music is not good. It is terrible.', ['not good', 'terrible'])", "test10": "rate_album('This album is excellent. I love it.', ['excellent', 'love'], weight_range=(1,5))"}, "hidden_information": "def rate_album(review_text, keywords, weight_range=(1,5)):\n    rating = 0\n    review_words = review_text.split()\n    for word in review_words:\n        if word.lower() in [keyword.lower() for keyword in keywords]:\n            rating += 1\n    if len(review_words) > 0:\n        rating = (rating / len(review_words)) * (weight_range[1] - weight_range[0]) + weight_range[0]\n    return rating"}
{"ground_truth": "def categorize_heart_condition(symptoms):\n    conditions = {\n        'congenital_defect': ['shunts', 'valve malformations'],\n        'acquired_disease': ['valve problem', 'muscle problem']\n    }\n    for condition, condition_symptoms in conditions.items():\n        for symptom in symptoms:\n            if symptom.lower() in [s.lower() for s in condition_symptoms]:\n                return condition\n    return 'unknown'", "problem_description": "I need you to write a python function that categorizes heart conditions in pets based on symptoms. The condition is either a congenital defect or an acquired disease. The user will input the symptoms and the function should output the type of condition. You'll need to discuss with me to clarify what symptoms correspond to which conditions.The signature of the function is: def categorize_heart_condition(symptoms)", "test_cases": {"test1": "categorize_heart_condition(['shunt', 'exhaustion'])", "test2": "categorize_heart_condition(['valve problem', 'increased respiratory effort'])", "test3": "categorize_heart_condition(['coughing', 'muscle problem'])", "test4": "categorize_heart_condition(['valve malformation'])", "test5": "categorize_heart_condition(['lung disease', 'heartworm infection'])", "test6": "categorize_heart_condition(['heartworm infection', 'fluid around the heart'])", "test7": "categorize_heart_condition(['ruptured valve cord', 'heart disease'])", "test8": "categorize_heart_condition(['feline heart rate 200 beats per minute'])", "test9": "categorize_heart_condition(['heart chambers enlarged'])", "test10": "categorize_heart_condition([])"}, "hidden_information": "def categorize_heart_condition(symptoms):\n    conditions = {\n        'congenital_defect': ['shunts', 'valve malformations'],\n        'acquired_disease': ['valve problem', 'muscle problem']\n    }\n    for condition, condition_symptoms in conditions.items():\n        for symptom in symptoms:\n            if symptom.lower() in [s.lower() for s in condition_symptoms]:\n                return condition\n    return 'unknown'"}
{"ground_truth": "def calculate_wussiness_score(monster_characteristics): \n    wussiness_score = 0\n    for characteristic in monster_characteristics:\n        if characteristic['slow']:\n            wussiness_score += 1\n        if characteristic['scared_by_children']:\n            wussiness_score += 1\n        if characteristic['controlled_by_others']:\n            wussiness_score += 1\n        if characteristic['ineffective']:\n            wussiness_score += 1\n    return wussiness_score\n", "problem_description": "I want you to write a Python function that takes in a list of characteristics of a movie monster and returns a 'wussiness score' based on those characteristics. The function should assign points to monsters that are slow, scared by children, controlled by others, or ineffective. Can you help me come up with a function that does this?The signature of the function is: def calculate_wussiness_score(monster_characteristics)", "test_cases": {"test1": "calculate_wussiness_score([{'name': 'Imhotep', 'slow': True, 'scared_by_children': False, 'controlled_by_others': True, 'ineffective': False}])", "test2": "calculate_wussiness_score([{'name': 'Sully', 'slow': False, 'scared_by_children': True, 'controlled_by_others': False, 'ineffective': False}])", "test3": "calculate_wussiness_score([{'name': 'Frankenstein', 'slow': True, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': True}])", "test4": "calculate_wussiness_score([{'name': 'Audrey II', 'slow': False, 'scared_by_children': False, 'controlled_by_others': True, 'ineffective': True}])", "test5": "calculate_wussiness_score([{'name': 'The Ruler', 'slow': False, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': True}])", "test6": "calculate_wussiness_score([{'name': 'Superman', 'slow': False, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': False}])", "test7": "calculate_wussiness_score([{'name': 'Godzilla', 'slow': False, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': False}])", "test8": "calculate_wussiness_score([{'name': 'Jason Voorhees', 'slow': False, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': False}])", "test9": "calculate_wussiness_score([{'name': 'Michael Myers', 'slow': False, 'scared_by_children': False, 'controlled_by_others': False, 'ineffective': False}])", "test10": "calculate_wussiness_score([{'name': 'Freddy Krueger', 'slow': False, 'scared_by_children': True, 'controlled_by_others': False, 'ineffective': False}])"}, "hidden_information": "def calculate_wussiness_score(monster_characteristics): \n    wussiness_score = 0\n    for characteristic in monster_characteristics:\n        if characteristic['slow']:\n            wussiness_score += 1\n        if characteristic['scared_by_children']:\n            wussiness_score += 1\n        if characteristic['controlled_by_others']:\n            wussiness_score += 1\n        if characteristic['ineffective']:\n            wussiness_score += 1\n    return wussiness_score\n"}
{"ground_truth": "def process_opinion(opinions, keywords):\n    processed_opinions = {}\n    for opinion in opinions:\n        for keyword in keywords:\n            if keyword in opinion:\n                if keyword in processed_opinions:\n                    processed_opinions[keyword].append(opinion)\n                else:\n                    processed_opinions[keyword] = [opinion]\n    return processed_opinions", "problem_description": "I want a python function that can take in a list of opinions and a list of keywords. The function should process the opinions and group them based on the keywords. For example, if a keyword appears in an opinion, the opinion should be added to the list of opinions for that keyword. The function should return a dictionary where the keys are the keywords and the values are lists of opinions.The signature of the function is: def process_opinion(opinions, keywords)", "test_cases": {"test1": "process_opinion([\"I think guns should be allowed\", \"Guns are necessary for self defense\"], [\"guns\", \"self defense\"])", "test2": "process_opinion([\"The city should not ban guns\", \"Guns are a right\", \"The mayor is not doing his job\"], [\"guns\", \"mayor\", \"ban\"])", "test3": "process_opinion([\"I love the transportation service\", \"The service is always on time\"], [\"transportation\", \"on time\", \"service\"])", "test4": "process_opinion([\"The pipe band director is a great person\", \"I love the music\"], [\"pipe band\", \"music\", \"director\"])", "test5": "process_opinion([\"Guns are bad\", \"We should not have guns\"], [\"guns\", \"bad\"])", "test6": "process_opinion([\"I think the service is good\", \"The drivers are nice\"], [\"service\", \"drivers\", \"good\"])", "test7": "process_opinion([\"The city is great\", \"I love living here\"], [\"city\", \"living\"])", "test8": "process_opinion([\"The transportation service is terrible\", \"I hate the buses\"], [\"transportation\", \"buses\", \"terrible\"])", "test9": "process_opinion([\"Guns are necessary\", \"We need guns for protection\"], [\"guns\", \"protection\", \"necessary\"])", "test10": "process_opinion([\"The pipe band is amazing\", \"I love the performance\"], [\"pipe band\", \"performance\", \"amazing\"])"}, "hidden_information": "def process_opinion(opinions, keywords):\n    processed_opinions = {}\n    for opinion in opinions:\n        for keyword in keywords:\n            if keyword in opinion:\n                if keyword in processed_opinions:\n                    processed_opinions[keyword].append(opinion)\n                else:\n                    processed_opinions[keyword] = [opinion]\n    return processed_opinions"}
{"ground_truth": "def is_fundamentalist(text): return 'hate' in text.lower() or 'right' in text.lower() or 'superior' in text.lower() or 'enemy' in text.lower() or 'deserving' in text.lower() or 'scorn' in text.lower() or 'violence' in text.lower() or 'greed' in text.lower() or ' superiority' in text.lower() or 'contempt' in text.lower()", "problem_description": "I want you to write a python function to classify a piece of text as fundamentalist or not based on some characteristics of fundamentalist texts. Can you collaborate with me to figure out what words or patterns in the text can be used to determine if it's fundamentalist?The signature of the function is: def is_fundamentalist(text)", "test_cases": {"test1": "is_fundamentalist(\"The enemies of our nation will be destroyed.\")", "test2": "is_fundamentalist(\"We must show compassion and empathy towards all people.\")", "test3": "is_fundamentalist(\"Greed is the driving force behind human progress.\")", "test4": "is_fundamentalist(\"The superior nation will always prevail.\")", "test5": "is_fundamentalist(\"We must not use violence to resolve conflicts.\")", "test6": "is_fundamentalist(\"Hate speech has no place in our society.\")", "test7": "is_fundamentalist(\"The righteousness of our cause will guide us.\")", "test8": "is_fundamentalist(\"We must always strive for moderation and understanding.\")", "test9": "is_fundamentalist(\"Those who disagree with us are heretics.\")", "test10": "is_fundamentalist(\"We must not impose our beliefs on others.\")"}, "hidden_information": "def is_fundamentalist(text): return 'hate' in text.lower() or 'right' in text.lower() or 'superior' in text.lower() or 'enemy' in text.lower() or 'deserving' in text.lower() or 'scorn' in text.lower() or 'violence' in text.lower() or 'greed' in text.lower() or ' superiority' in text.lower() or 'contempt' in text.lower()"}
{"ground_truth": "def detect_confirmation_bias(statements, desired_outcome):\n    for statement in statements:\n        if statement.startswith(\"I think\") or statement.startswith(\"I believe\"):\n            return \"Confirmation bias detected\"\n    return desired_outcome if any(keyword in x for x in statements for keyword in [\"fact\", \"true\", \"evidence\"]) else \"Lack of confirmation\"", "problem_description": "Write a python function called detect_bias that takes in 2 parameters, a list of statements and an expected outcome and returns True when not all the statements confirm to the expected outcome and false otherwise.The signature of the function is: def detect_confirmation_bias(statements, desired_outcome)", "test_cases": {"test1": "detect_confirmation_bias([\"I think the teacher is nice\", \"The teacher gave me an A\"], \"The teacher is nice\")", "test2": "detect_confirmation_bias([\"I believe the teacher is mean\", \"The teacher gave me an F\"], \"The teacher is nice\")", "test3": "detect_confirmation_bias([\"The teacher is nice\", \"The teacher gave me an A\"], \"The teacher is nice\")", "test4": "detect_confirmation_bias([\"The teacher is mean\", \"The teacher gave me an F\"], \"The teacher is nice\")", "test5": "detect_confirmation_bias([\"The teacher is great\", \"He gave me an A\"], \"The teacher is bad\")", "test6": "detect_confirmation_bias([\"The teacher gave me an A\", \"He is the best teacher\"], \"The teacher is bad\")", "test7": "detect_confirmation_bias([\"The teacher is excellent\", \"The teacher gave me an A\", \"That's evidence\"], \"The teacher is nice\")", "test8": "detect_confirmation_bias([\"The teacher is terrible\", \"The teacher gave me an F\"], \"The teacher is nice\")", "test9": "detect_confirmation_bias([\"The teacher is good\", \"The teacher gave me a B\", \"The teacher knows his stuff\"], \"The teacher is nice\")", "test10": "detect_confirmation_bias([\"I think the teacher is nice\", \"He is a true educator\"], \"The teacher is nice\")"}, "hidden_information": "def detect_confirmation_bias(statements, desired_outcome):\n    for statement in statements:\n        if statement.startswith(\"I think\") or statement.startswith(\"I believe\"):\n            return \"Confirmation bias detected\"\n    return desired_outcome if any(keyword in x for x in statements for keyword in [\"fact\", \"true\", \"evidence\"]) else \"Lack of confirmation\""}
{"ground_truth": "def calculate_shopping_cost(store_items):\n    total_cost = 0\n    for item in store_items:\n        if item['type'] == 'superfood':\n            total_cost += item['quantity'] * (item['price_per_unit'] + 0.50)\n        elif item['type'] == 'luxury_food':\n            total_cost += item['quantity'] * (item['price_per_unit'] + 0.20)\n        else:\n            total_cost += item['quantity'] * item['price_per_unit']\n    return total_cost", "problem_description": "I need help writing a Python function to calculate the total cost of shopping at a luxury grocery store. The store sells a variety of high-end ingredients, including superfoods and luxury foods, which come with an extra markup. I want the function to take into account the type of item, its price per unit, and the quantity purchased. Can you help me write this function?The signature of the function is: def calculate_shopping_cost(store_items)", "test_cases": {"test1": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 10.0, 'quantity': 2}, {'type': 'luxury_food', 'price_per_unit': 8.0, 'quantity': 1}, {'type': 'regular_food', 'price_per_unit': 5.0, 'quantity': 3}])", "test2": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 15.0, 'quantity': 4}, {'type': 'luxury_food', 'price_per_unit': 12.0, 'quantity': 2}])", "test3": "calculate_shopping_cost([{'type': 'regular_food', 'price_per_unit': 6.0, 'quantity': 6}])", "test4": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 20.0, 'quantity': 3}, {'type': 'luxury_food', 'price_per_unit': 18.0, 'quantity': 2}, {'type': 'regular_food', 'price_per_unit': 10.0, 'quantity': 1}])", "test5": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 12.0, 'quantity': 5}, {'type': 'luxury_food', 'price_per_unit': 10.0, 'quantity': 3}])", "test6": "calculate_shopping_cost([{'type': 'regular_food', 'price_per_unit': 4.0, 'quantity': 8}])", "test7": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 25.0, 'quantity': 2}, {'type': 'luxury_food', 'price_per_unit': 20.0, 'quantity': 4}])", "test8": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 18.0, 'quantity': 6}, {'type': 'luxury_food', 'price_per_unit': 15.0, 'quantity': 1}])", "test9": "calculate_shopping_cost([{'type': 'luxury_food', 'price_per_unit': 8.0, 'quantity': 9}])", "test10": "calculate_shopping_cost([{'type': 'superfood', 'price_per_unit': 22.0, 'quantity': 1}, {'type': 'luxury_food', 'price_per_unit': 18.0, 'quantity': 5}])"}, "hidden_information": "def calculate_shopping_cost(store_items):\n    total_cost = 0\n    for item in store_items:\n        if item['type'] == 'superfood':\n            total_cost += item['quantity'] * (item['price_per_unit'] + 0.50)\n        elif item['type'] == 'luxury_food':\n            total_cost += item['quantity'] * (item['price_per_unit'] + 0.20)\n        else:\n            total_cost += item['quantity'] * item['price_per_unit']\n    return total_cost"}
{"ground_truth": "def calculate_dna_match_probability(num_matching_alleles, total_num_alleles, prior_probability=0.5):\n    # Calculate the likelihood ratio using Bayes' theorem\n    likelihood_ratio = (num_matching_alleles / total_num_alleles) / (1 - prior_probability)\n    # Calculate the posterior probability\n    posterior_probability = likelihood_ratio / (likelihood_ratio + 1)\n    return posterior_probability", "problem_description": "I want the agent to write a Python function to calculate the probability of a DNA match given the number of matching alleles and the total number of alleles. The function should take into account the prior probability of the accused being the perpetrator.The signature of the function is: def calculate_dna_match_probability(num_matching_alleles, total_num_alleles, prior_probability=0.5)", "test_cases": {"test1": "calculate_dna_match_probability(10, 20, 0.5)", "test2": "calculate_dna_match_probability(15, 30, 0.2)", "test3": "calculate_dna_match_probability(8, 16, 0.8)", "test4": "calculate_dna_match_probability(5, 10, 0.1)", "test5": "calculate_dna_match_probability(20, 40, 0.9)", "test6": "calculate_dna_match_probability(12, 24, 0.6)", "test7": "calculate_dna_match_probability(18, 36, 0.4)", "test8": "calculate_dna_match_probability(7, 14, 0.3)", "test9": "calculate_dna_match_probability(4, 8, 0.7)", "test10": "calculate_dna_match_probability(25, 50, 0.1)"}, "hidden_information": "def calculate_dna_match_probability(num_matching_alleles, total_num_alleles, prior_probability=0.5):\n    # Calculate the likelihood ratio using Bayes' theorem\n    likelihood_ratio = (num_matching_alleles / total_num_alleles) / (1 - prior_probability)\n    # Calculate the posterior probability\n    posterior_probability = likelihood_ratio / (likelihood_ratio + 1)\n    return posterior_probability"}
{"ground_truth": "def calculate_energy_cost_increase(current_consumption, fuel_type, price_increase, current_price):\n    # Calculate the current energy cost\n    current_cost = current_consumption * current_price\n\n    # Calculate the new price after the increase\n    new_price = current_price + (current_price * price_increase)\n\n    # Calculate the new energy cost\n    new_cost = current_consumption * new_price\n\n    # Calculate the increase in energy cost\n    cost_increase = new_cost - current_cost\n\n    return cost_increase", "problem_description": "Can you write a Python function to estimate the increase in energy costs for an American household due to a proposed cap-and-trade bill that would lead to higher fuel prices? I want to input the current energy consumption, fuel type, current fuel price, and expected price increase as percentages, and get the estimated increase in energy costs.The signature of the function is: def calculate_energy_cost_increase(current_consumption, fuel_type, price_increase, current_price)", "test_cases": {"test1": "calculate_energy_cost_increase(500, \"gasoline\", 0.1, 2.5)", "test2": "calculate_energy_cost_increase(1000, \"natural_gas\", 0.05, 1.5)", "test3": "calculate_energy_cost_increase(200, \"electricity\", 0.2, 0.5)", "test4": "calculate_energy_cost_increase(750, \"gasoline\", 0.15, 3.0)", "test5": "calculate_energy_cost_increase(1200, \"coal\", 0.1, 2.0)", "test6": "calculate_energy_cost_increase(300, \"solar\", 0.05, 1.0)", "test7": "calculate_energy_cost_increase(450, \"wind\", 0.1, 1.5)", "test8": "calculate_energy_cost_increase(800, \"hydro\", 0.2, 2.5)", "test9": "calculate_energy_cost_increase(900, \"geothermal\", 0.15, 3.0)", "test10": "calculate_energy_cost_increase(600, \"biomass\", 0.1, 2.0)"}, "hidden_information": "def calculate_energy_cost_increase(current_consumption, fuel_type, price_increase, current_price):\n    # Calculate the current energy cost\n    current_cost = current_consumption * current_price\n\n    # Calculate the new price after the increase\n    new_price = current_price + (current_price * price_increase)\n\n    # Calculate the new energy cost\n    new_cost = current_consumption * new_price\n\n    # Calculate the increase in energy cost\n    cost_increase = new_cost - current_cost\n\n    return cost_increase"}
{"ground_truth": "def calculate_ddos_cost(ddos_duration, traffic_loss_per_minute, lost_revenue_per_minute, security_cost_per_minute):\n    return (traffic_loss_per_minute + lost_revenue_per_minute + security_cost_per_minute) * ddos_duration", "problem_description": "I want you to write a Python function that will help me evaluate the cost of a DDoS attack on my business. I have some details about the attack but I need your help to clarify what exactly you need to know to come up with this function.The signature of the function is: def calculate_ddos_cost(ddos_duration, traffic_loss_per_minute, lost_revenue_per_minute, security_cost_per_minute)", "test_cases": {"test1": "calculate_ddos_cost(60, 1000, 500, 200)", "test2": "calculate_ddos_cost(30, 2000, 1000, 300)", "test3": "calculate_ddos_cost(120, 1500, 750, 250)", "test4": "calculate_ddos_cost(90, 2500, 1250, 350)", "test5": "calculate_ddos_cost(45, 1200, 600, 220)", "test6": "calculate_ddos_cost(180, 3000, 1500, 400)", "test7": "calculate_ddos_cost(20, 800, 400, 180)", "test8": "calculate_ddos_cost(60, 2200, 1100, 280)", "test9": "calculate_ddos_cost(90, 1800, 900, 260)", "test10": "calculate_ddos_cost(120, 2800, 1400, 320)"}, "hidden_information": "def calculate_ddos_cost(ddos_duration, traffic_loss_per_minute, lost_revenue_per_minute, security_cost_per_minute):\n    return (traffic_loss_per_minute + lost_revenue_per_minute + security_cost_per_minute) * ddos_duration"}
{"ground_truth": "def calculate_total_damages(num_infringed_works, min_damages, max_damages):\n    if num_infringed_works == 0:\n        return 0\n    elif num_infringed_works == 1:\n        return max_damages\n    else:\n        return num_infringed_works * min_damages", "problem_description": "Hey LLM agent, can you write a python function to calculate the total damages for copyright infringement for cases like Hotfile? I'm not sure what exact parameters we should use, so figure it out with me.The signature of the function is: def calculate_total_damages(num_infringed_works, min_damages, max_damages)", "test_cases": {"test1": "calculate_total_damages(1000, 750, 150000)", "test2": "calculate_total_damages(0, 750, 150000)", "test3": "calculate_total_damages(1, 750, 150000)", "test4": "calculate_total_damages(500, 750, 150000)", "test5": "calculate_total_damages(2000, 750, 150000)", "test6": "calculate_total_damages(100, 750, 150000)", "test7": "calculate_total_damages(50, 750, 150000)", "test8": "calculate_total_damages(10, 750, 150000)", "test9": "calculate_total_damages(5, 750, 150000)", "test10": "calculate_total_damages(10000, 750, 150000)"}, "hidden_information": "def calculate_total_damages(num_infringed_works, min_damages, max_damages):\n    if num_infringed_works == 0:\n        return 0\n    elif num_infringed_works == 1:\n        return max_damages\n    else:\n        return num_infringed_works * min_damages"}
{"ground_truth": "def calculate_wedding_cost(num_guests, venue_cost, catering_cost_per_guest, decoration_cost, music_cost): return num_guests * catering_cost_per_guest + venue_cost + decoration_cost + music_cost", "problem_description": "I'm planning a wedding and I want the LLM agent to write a Python function to help me estimate the total cost. I have multiple expenses to consider, like venue, catering, decorations, and music. Can the agent please write a function to calculate the total cost? I'm not sure what all the inputs should be yet, can we discuss?The signature of the function is: def calculate_wedding_cost(num_guests, venue_cost, catering_cost_per_guest, decoration_cost, music_cost)", "test_cases": {"test1": "calculate_wedding_cost(100, 5000, 50, 2000, 1000)", "test2": "calculate_wedding_cost(200, 8000, 75, 3000, 1500)", "test3": "calculate_wedding_cost(50, 2000, 30, 1000, 500)", "test4": "calculate_wedding_cost(150, 6000, 60, 2500, 1200)", "test5": "calculate_wedding_cost(250, 10000, 90, 4000, 2000)", "test6": "calculate_wedding_cost(300, 12000, 100, 5000, 2500)", "test7": "calculate_wedding_cost(400, 16000, 120, 6000, 3000)", "test8": "calculate_wedding_cost(500, 20000, 150, 8000, 4000)", "test9": "calculate_wedding_cost(600, 24000, 180, 10000, 5000)", "test10": "calculate_wedding_cost(700, 28000, 200, 12000, 6000)"}, "hidden_information": "def calculate_wedding_cost(num_guests, venue_cost, catering_cost_per_guest, decoration_cost, music_cost): return num_guests * catering_cost_per_guest + venue_cost + decoration_cost + music_cost"}
{"ground_truth": "def categorize_sentiment(comment): \n    # Initialize counters for positive and negative comments\n    positive_count = 0\n    negative_count = 0\n    # Initialize dictionaries for key words\n    positive_keywords = ['love', 'poetic', 'good', 'great', 'awesome', 'thank', 'support', 'praise']\n    negative_keywords = ['hate', 'fake', 'whore', 'liar', 'kill', 'bimbo', 'hath', 'fury', 'driven', 'hell']\n    # Count occurrences of positive and negative key words\n    for word in comment.lower().split():\n        if word in positive_keywords:\n            positive_count += 1\n        elif word in negative_keywords:\n            negative_count += 1\n    # Classify the sentiment based on counts\n    if positive_count > negative_count:\n        return 'positive'\n    elif positive_count < negative_count:\n        return 'negative'\n    else:\n        return 'neutral'", "problem_description": "I want you, LLM agent, to write a python function that can classify the sentiment of the comments as positive, negative or neutral based on the use of certain key words. I do not have a clear idea about how to implement this but I would like to give you some hints. Please take a look at these comments one-by-one and give me some idea. Take this as a starting point.The signature of the function is: def categorize_sentiment(comment)", "test_cases": {"test1": "categorize_sentiment('I think both sides are full of crap, but the pageant people are making themselves look immature and unprofessional when they bash the girl.')", "test2": "categorize_sentiment('You Can Do Better Moakler and Lewis should have kept their yaps shut and allowed Carrie to state her beliefs as she was asked.')", "test3": "categorize_sentiment('Hell hath no fury like a Miss without her crown.')", "test4": "categorize_sentiment('AwesomeDude\u2026 you have your facts wrong.')", "test5": "categorize_sentiment('Oh Lewis, shut up \u2013 you are still pissed off about her answer and the fact Prop 8 lost in Cali, get over it and go suck your boyfriend.')", "test6": "categorize_sentiment('I LOVE IT!!!!')", "test7": "categorize_sentiment('Regardless of what Carrie said, thinks or feels, she had no right to renege on her contractual obligations and trample all over the reign of the young woman who actually won.')", "test8": "categorize_sentiment('What a role model.')", "test9": "categorize_sentiment('God has other things to worry about than who won or lost a silly title due to personal opinion.')", "test10": "categorize_sentiment('lol wow this whore is grabbing onto any string she can to keep herself relevant, FAIL')"}, "hidden_information": "def categorize_sentiment(comment): \n    # Initialize counters for positive and negative comments\n    positive_count = 0\n    negative_count = 0\n    # Initialize dictionaries for key words\n    positive_keywords = ['love', 'poetic', 'good', 'great', 'awesome', 'thank', 'support', 'praise']\n    negative_keywords = ['hate', 'fake', 'whore', 'liar', 'kill', 'bimbo', 'hath', 'fury', 'driven', 'hell']\n    # Count occurrences of positive and negative key words\n    for word in comment.lower().split():\n        if word in positive_keywords:\n            positive_count += 1\n        elif word in negative_keywords:\n            negative_count += 1\n    # Classify the sentiment based on counts\n    if positive_count > negative_count:\n        return 'positive'\n    elif positive_count < negative_count:\n        return 'negative'\n    else:\n        return 'neutral'"}
{"ground_truth": "def calculate_cosmic_trip_cost(num_passengers, price_per_passenger, bonus_fees):\n    if num_passengers > 7:\n        return 'Sorry, Boeing CST-100 can only accommodate up to 7 people'\n    total_cost = num_passengers * price_per_passenger + bonus_fees\n    return total_cost", "problem_description": "I need a python function to figure out the total cost of a Boeing CST-100 space trip. I want to consider that the trip can have from 1 to 7 people, and it's supposed to accommodate people in lower earth orbit, just like the article says, but I don't know if there's a price per person yet, And what about other extra costs?The signature of the function is: def calculate_cosmic_trip_cost(num_passengers, price_per_passenger, bonus_fees)", "test_cases": {"test1": "calculate_cosmic_trip_cost(5, 100000, 0)", "test2": "calculate_cosmic_trip_cost(7, 100000, 10000)", "test3": "calculate_cosmic_trip_cost(10, 100000, 0)", "test4": "calculate_cosmic_trip_cost(3, 200000, 5000)", "test5": "calculate_cosmic_trip_cost(1, 150000, 0)", "test6": "calculate_cosmic_trip_cost(7, 100000, 50000)", "test7": "calculate_cosmic_trip_cost(5, 100000, 10000)", "test8": "calculate_cosmic_trip_cost(6, 120000, 5000)", "test9": "calculate_cosmic_trip_cost(7, 120000, 0)", "test10": "calculate_cosmic_trip_cost(7, 100000, 15000)"}, "hidden_information": "def calculate_cosmic_trip_cost(num_passengers, price_per_passenger, bonus_fees):\n    if num_passengers > 7:\n        return 'Sorry, Boeing CST-100 can only accommodate up to 7 people'\n    total_cost = num_passengers * price_per_passenger + bonus_fees\n    return total_cost"}
{"ground_truth": "def calculate_stadium_move_impact(team_stats, stadium_move_date, metric=\"points\"):\n    pre_move_stats = [stat for stat in team_stats if stat['date'] < stadium_move_date]\n    post_move_stats = [stat for stat in team_stats if stat['date'] >= stadium_move_date]\n    if metric == \"points\":\n        return sum(stat['points'] for stat in pre_move_stats), sum(stat['points'] for stat in post_move_stats)\n    elif metric == \"goals\" :\n        return sum(stat['goals'] for stat in pre_move_stats), sum(stat['goals'] for stat in post_move_stats)\n    else:\n        return sum(stat['wins'] for stat in pre_move_stats), sum(stat['wins'] for stat in post_move_stats)", "problem_description": "I want you to write a python function that calculates how Arsenal's performance changed after their stadium move. The function should take into account the team's statistics before and after the move.The signature of the function is: def calculate_stadium_move_impact(team_stats, stadium_move_date, metric=\"points\")", "test_cases": {"test1": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"points\")", "test2": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"goals\")", "test3": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"wins\")", "test4": "calculate_stadium_move_impact([{\"date\": \"2000-01-01\", \"points\": 5, \"goals\": 1, \"wins\": 1}, {\"date\": \"2002-01-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}], \"2010-01-01\", \"points\")", "test5": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}], \"2010-01-01\", \"points\")", "test6": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}, {\"date\": \"2006-02-01\", \"points\": 25, \"goals\": 4, \"wins\": 5}, {\"date\": \"2006-03-01\", \"points\": 22, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"points\")", "test7": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}, {\"date\": \"2006-02-01\", \"points\": 25, \"goals\": 4, \"wins\": 5}, {\"date\": \"2006-03-01\", \"points\": 22, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"goals\")", "test8": "calculate_stadium_move_impact([{\"date\": \"2005-01-01\", \"points\": 10, \"goals\": 2, \"wins\": 2}, {\"date\": \"2005-02-01\", \"points\": 15, \"goals\": 3, \"wins\": 3}, {\"date\": \"2005-03-01\", \"points\": 12, \"goals\": 2, \"wins\": 2}, {\"date\": \"2006-01-01\", \"points\": 20, \"goals\": 3, \"wins\": 4}, {\"date\": \"2006-02-01\", \"points\": 25, \"goals\": 4, \"wins\": 5}, {\"date\": \"2006-03-01\", \"points\": 22, \"goals\": 3, \"wins\": 4}], \"2005-05-01\", \"wins\")", "test9": "calculate_stadium_move_impact([{\"date\": \"2000-01-01\", \"points\": 5, \"goals\": 1, \"wins\": 1}], \"2005-05-01\", \"points\")", "test10": "calculate_stadium_move_impact([], \"2005-05-01\", \"points\")"}, "hidden_information": "def calculate_stadium_move_impact(team_stats, stadium_move_date, metric=\"points\"):\n    pre_move_stats = [stat for stat in team_stats if stat['date'] < stadium_move_date]\n    post_move_stats = [stat for stat in team_stats if stat['date'] >= stadium_move_date]\n    if metric == \"points\":\n        return sum(stat['points'] for stat in pre_move_stats), sum(stat['points'] for stat in post_move_stats)\n    elif metric == \"goals\" :\n        return sum(stat['goals'] for stat in pre_move_stats), sum(stat['goals'] for stat in post_move_stats)\n    else:\n        return sum(stat['wins'] for stat in pre_move_stats), sum(stat['wins'] for stat in post_move_stats)"}
{"ground_truth": "def create_evaluation_plan(program_context, stakeholders, central_questions):\n    # Create a dictionary to store the evaluation plan\n    evaluation_plan = {}\n\n    # Record program and service recipient characteristics\n    evaluation_plan['program_context'] = program_context\n\n    # Identify stakeholders and their needs\n    stakeholders_needs = {}\n    for stakeholder in stakeholders:\n        stakeholders_needs[stakeholder['name']] = stakeholder['needs']\n    evaluation_plan['stakeholders_needs'] = stakeholders_needs\n\n    # Determine the evaluation purpose using central questions\n    evaluation_purpose = {}\n    for question in central_questions:\n        evaluation_purpose[question['question']] = question['purpose']\n    evaluation_plan['evaluation_purpose'] = evaluation_purpose\n\n    return evaluation_plan", "problem_description": "Can you write a python function to create a customized program evaluation plan based on some information about the program and its stakeholders?The signature of the function is: def create_evaluation_plan(program_context, stakeholders, central_questions)", "test_cases": {"test1": "create_evaluation_plan({'name': 'Program 1', 'description': 'This is program 1'}, [{'name': 'Stakeholder 1', 'needs': ['need1', 'need2']}, {'name': 'Stakeholder 2', 'needs': ['need3', 'need4']}], [{'question': 'What is the impact of the program?', 'purpose': 'To understand the effectiveness of the program'}])", "test2": "create_evaluation_plan({'name': 'Program 2', 'description': 'This is program 2'}, [{'name': 'Stakeholder 3', 'needs': ['need5', 'need6']}, {'name': 'Stakeholder 4', 'needs': ['need7', 'need8']}], [{'question': 'What are the outcomes of the program?', 'purpose': 'To understand the outcomes of the program'}])", "test3": "create_evaluation_plan({'name': 'Program 3', 'description': 'This is program 3'}, [{'name': 'Stakeholder 5', 'needs': ['need9', 'need10']}, {'name': 'Stakeholder 6', 'needs': ['need11', 'need12']}], [{'question': 'How can the program be improved?', 'purpose': 'To understand the areas of improvement for the program'}])", "test4": "create_evaluation_plan({'name': 'Program 4', 'description': 'This is program 4'}, [{'name': 'Stakeholder 7', 'needs': ['need13', 'need14']}, {'name': 'Stakeholder 8', 'needs': ['need15', 'need16']}], [{'question': 'What are the lessons learned from the program?', 'purpose': 'To understand the lessons learned from the program'}])", "test5": "create_evaluation_plan({'name': 'Program 5', 'description': 'This is program 5'}, [{'name': 'Stakeholder 9', 'needs': ['need17', 'need18']}, {'name': 'Stakeholder 10', 'needs': ['need19', 'need20']}], [{'question': 'What are the recommendations for the program?', 'purpose': 'To understand the recommendations for the program'}])", "test6": "create_evaluation_plan({'name': 'Program 6', 'description': 'This is program 6'}, [{'name': 'Stakeholder 11', 'needs': ['need21', 'need22']}, {'name': 'Stakeholder 12', 'needs': ['need23', 'need24']}], [{'question': 'What are the goals of the program?', 'purpose': 'To understand the goals of the program'}])", "test7": "create_evaluation_plan({'name': 'Program 7', 'description': 'This is program 7'}, [{'name': 'Stakeholder 13', 'needs': ['need25', 'need26']}, {'name': 'Stakeholder 14', 'needs': ['need27', 'need28']}], [{'question': 'What are the objectives of the program?', 'purpose': 'To understand the objectives of the program'}])", "test8": "create_evaluation_plan({'name': 'Program 8', 'description': 'This is program 8'}, [{'name': 'Stakeholder 15', 'needs': ['need29', 'need30']}, {'name': 'Stakeholder 16', 'needs': ['need31', 'need32']}], [{'question': 'What are the outcomes of the program?', 'purpose': 'To understand the outcomes of the program'}])", "test9": "create_evaluation_plan({'name': 'Program 9', 'description': 'This is program 9'}, [{'name': 'Stakeholder 17', 'needs': ['need33', 'need34']}, {'name': 'Stakeholder 18', 'needs': ['need35', 'need36']}], [{'question': 'What are the lessons learned from the program?', 'purpose': 'To understand the lessons learned from the program'}])", "test10": "create_evaluation_plan({'name': 'Program 10', 'description': 'This is program 10'}, [{'name': 'Stakeholder 19', 'needs': ['need37', 'need38']}, {'name': 'Stakeholder 20', 'needs': ['need39', 'need40']}], [{'question': 'What are the recommendations for the program?', 'purpose': 'To understand the recommendations for the program'}])"}, "hidden_information": "def create_evaluation_plan(program_context, stakeholders, central_questions):\n    # Create a dictionary to store the evaluation plan\n    evaluation_plan = {}\n\n    # Record program and service recipient characteristics\n    evaluation_plan['program_context'] = program_context\n\n    # Identify stakeholders and their needs\n    stakeholders_needs = {}\n    for stakeholder in stakeholders:\n        stakeholders_needs[stakeholder['name']] = stakeholder['needs']\n    evaluation_plan['stakeholders_needs'] = stakeholders_needs\n\n    # Determine the evaluation purpose using central questions\n    evaluation_purpose = {}\n    for question in central_questions:\n        evaluation_purpose[question['question']] = question['purpose']\n    evaluation_plan['evaluation_purpose'] = evaluation_purpose\n\n    return evaluation_plan"}
{"ground_truth": "def is_pirated_software_installed(software_list, banned_software): return any(software in banned_software for software in software_list)", "problem_description": "I want a python function that checks if a PS3 has any pirated software installed. The function should take in a list of software installed on the PS3 and a list of banned software, and return True if any of the installed software is pirated, False otherwise. Can you help me write this function?The signature of the function is: def is_pirated_software_installed(software_list, banned_software)", "test_cases": {"test1": "is_pirated_software_installed(['Game1', 'Game2', 'PiratedGame'], ['PiratedGame', 'PiratedGame2'])", "test2": "is_pirated_software_installed(['Game1', 'Game2'], ['PiratedGame', 'PiratedGame2'])", "test3": "is_pirated_software_installed(['PiratedGame', 'Game2'], ['PiratedGame', 'PiratedGame2'])", "test4": "is_pirated_software_installed([], ['PiratedGame', 'PiratedGame2'])", "test5": "is_pirated_software_installed(['Game1', 'Game2'], [])", "test6": "is_pirated_software_installed(['PiratedGame'], ['PiratedGame', 'PiratedGame2'])", "test7": "is_pirated_software_installed(['Game1', 'Game2', 'PiratedGame2'], ['PiratedGame', 'PiratedGame2'])", "test8": "is_pirated_software_installed([], [])", "test9": "is_pirated_software_installed(['PiratedGame', 'PiratedGame2'], ['PiratedGame', 'PiratedGame2'])", "test10": "is_pirated_software_installed(['Game1', 'Game2', 'PiratedGame', 'PiratedGame2'], ['PiratedGame', 'PiratedGame2'])"}, "hidden_information": "def is_pirated_software_installed(software_list, banned_software): return any(software in banned_software for software in software_list)"}
{"ground_truth": "def categorize_relationship_status(age, personality_traits):\n    if age < 18:\n        if 'romantic' in personality_traits:\n            return 'romance'\n        else:\n            return 'uncertain'\n    elif age >= 18 and age < 30:\n        if 'suspicious' in personality_traits:\n            return 'doubt'\n        else:\n            return 'uncertain'\n    else:\n        if 'practical' in personality_traits:\n            return 'business'\n        else:\n            return 'uncertain'", "problem_description": "I want you to write a Python function that can categorize a person's relationship status based on their age and personality traits, inspired by Eric Rohmer's films about love and relationships. Can you do that for me?The signature of the function is: def categorize_relationship_status(age, personality_traits)", "test_cases": {"test1": "categorize_relationship_status(15, ['romantic', 'impulsive'])", "test2": "categorize_relationship_status(25, ['suspicious', 'brooding'])", "test3": "categorize_relationship_status(35, ['practical', 'down_to_earth'])", "test4": "categorize_relationship_status(20, ['idealistic', 'dreamy'])", "test5": "categorize_relationship_status(30, ['realistic', 'cautious'])", "test6": "categorize_relationship_status(10, ['trusting', 'naive'])", "test7": "categorize_relationship_status(40, ['mature', 'self-assured'])", "test8": "categorize_relationship_status(18, ['romantic', 'adventurous'])", "test9": "categorize_relationship_status(28, ['suspicious', 'moody'])", "test10": "categorize_relationship_status(50, ['practical', 'responsible'])"}, "hidden_information": "def categorize_relationship_status(age, personality_traits):\n    if age < 18:\n        if 'romantic' in personality_traits:\n            return 'romance'\n        else:\n            return 'uncertain'\n    elif age >= 18 and age < 30:\n        if 'suspicious' in personality_traits:\n            return 'doubt'\n        else:\n            return 'uncertain'\n    else:\n        if 'practical' in personality_traits:\n            return 'business'\n        else:\n            return 'uncertain'"}
{"ground_truth": "def analyze_brazil_blaze(casualties, injured, arrested): result = { 'total_victims': casualties, 'injured_people': injured, 'arrested_individuals': arrested, 'mortality_rate': (casualties / (casualties + injured)) * 100 }; return result", "problem_description": "Hey, I need a Python function that can help me understand the stats from the Brazil Blaze. Can you write something that will take in the number of casualties, injured people, and arrested individuals and provide me with some insights? I need to know the total number of victims, the number of injured people, the number of arrested individuals, and the mortality rate. I'm looking for a function that's readable and easy to use.The signature of the function is: def analyze_brazil_blaze(casualties, injured, arrested)", "test_cases": {"test1": "analyze_brazil_blaze(233, 0, 3)", "test2": "analyze_brazil_blaze(309, 50, 5)", "test3": "analyze_brazil_blaze(100, 200, 2)", "test4": "analyze_brazil_blaze(0, 100, 1)", "test5": "analyze_brazil_blaze(50, 50, 3)", "test6": "analyze_brazil_blaze(250, 30, 4)", "test7": "analyze_brazil_blaze(101, 102, 2)", "test8": "analyze_brazil_blaze(400, 100, 5)", "test9": "analyze_brazil_blaze(200, 300, 3)", "test10": "analyze_brazil_blaze(500, 0, 4)"}, "hidden_information": "def analyze_brazil_blaze(casualties, injured, arrested): result = { 'total_victims': casualties, 'injured_people': injured, 'arrested_individuals': arrested, 'mortality_rate': (casualties / (casualties + injured)) * 100 }; return result"}
{"ground_truth": "def calculate_spinal_dust(kills, rate_per_skeleton):\n    total_dust = kills * rate_per_skeleton\n    return total_dust", "problem_description": "I want you to write a python function that calculates the total amount of spinal dust collected. I'm killing these undead skeletons and i get some amount every time, but i need a function that takes into account how much dust I get from each, but I have no idea how I should structure this function, can you help me?The signature of the function is: def calculate_spinal_dust(kills, rate_per_skeleton)", "test_cases": {"test1": "calculate_spinal_dust(10, 2)", "test2": "calculate_spinal_dust(5, 3)", "test3": "calculate_spinal_dust(20, 1)", "test4": "calculate_spinal_dust(8, 4)", "test5": "calculate_spinal_dust(15, 2)", "test6": "calculate_spinal_dust(12, 3)", "test7": "calculate_spinal_dust(25, 1)", "test8": "calculate_spinal_dust(18, 4)", "test9": "calculate_spinal_dust(22, 2)", "test10": "calculate_spinal_dust(30, 3)"}, "hidden_information": "def calculate_spinal_dust(kills, rate_per_skeleton):\n    total_dust = kills * rate_per_skeleton\n    return total_dust"}
{"ground_truth": "def match_kidney_donors(recipient_profiles, donor_profiles):\n    matches = {}\n    for recipient in recipient_profiles:\n        for donor in donor_profiles:\n            if recipient['blood_type'] == donor['blood_type'] and recipient['age_range'][0] < donor['age'] < recipient['age_range'][1]:\n                matches[recipient['name']] = donor['name']\n    return matches", "problem_description": "I need a Python function that can match kidney donors with recipients. I've seen stories about people finding matches through websites, and I want to automate this process. The function should take into account some basic criteria, but I'm not sure what those are yet. Can you help me figure it out and write the function?The signature of the function is: def match_kidney_donors(recipient_profiles, donor_profiles)", "test_cases": {"test1": "match_kidney_donors([{'name': 'Rosie', 'blood_type': 'A', 'age_range': (4, 10)}], [{'name': 'Michelle', 'blood_type': 'A', 'age': 5}])", "test2": "match_kidney_donors([{'name': 'John', 'blood_type': 'B', 'age_range': (20, 30)}], [{'name': 'Jane', 'blood_type': 'A', 'age': 25}])", "test3": "match_kidney_donors([{'name': 'Emily', 'blood_type': 'AB', 'age_range': (0, 5)}], [{'name': 'Michael', 'blood_type': 'AB', 'age': 3}])", "test4": "match_kidney_donors([{'name': 'Sarah', 'blood_type': 'O', 'age_range': (10, 20)}], [{'name': 'Tom', 'blood_type': 'O', 'age': 12}])", "test5": "match_kidney_donors([{'name': 'Jack', 'blood_type': 'A', 'age_range': (15, 25)}], [{'name': 'Lily', 'blood_type': 'A', 'age': 18}])", "test6": "match_kidney_donors([{'name': 'Bob', 'blood_type': 'B', 'age_range': (5, 15)}], [{'name': 'Alice', 'blood_type': 'B', 'age': 9}])", "test7": "match_kidney_donors([{'name': 'Eve', 'blood_type': 'AB', 'age_range': (25, 35)}], [{'name': 'Charlie', 'blood_type': 'AB', 'age': 27}])", "test8": "match_kidney_donors([{'name': 'Frank', 'blood_type': 'O', 'age_range': (30, 40)}], [{'name': 'Helen', 'blood_type': 'O', 'age': 32}])", "test9": "match_kidney_donors([{'name': 'George', 'blood_type': 'A', 'age_range': (40, 50)}], [{'name': 'Mia', 'blood_type': 'A', 'age': 45}])", "test10": "match_kidney_donors([{'name': 'Henry', 'blood_type': 'B', 'age_range': (35, 45)}], [{'name': 'Sophia', 'blood_type': 'B', 'age': 38}])"}, "hidden_information": "def match_kidney_donors(recipient_profiles, donor_profiles):\n    matches = {}\n    for recipient in recipient_profiles:\n        for donor in donor_profiles:\n            if recipient['blood_type'] == donor['blood_type'] and recipient['age_range'][0] < donor['age'] < recipient['age_range'][1]:\n                matches[recipient['name']] = donor['name']\n    return matches"}
{"ground_truth": "def rank_players(player_stats): stats = sorted(player_stats.items(), key=lambda x: x[1]['points'] + x[1]['assists'] + x[1]['rebounds'], reverse=True); return [player for player, _ in stats]", "problem_description": "Write a Python function that ranks basketball players based on their performance. I want the function to take player statistics into account, but I'm not sure what specific stats are most important.The signature of the function is: def rank_players(player_stats)", "test_cases": {"test1": "rank_players({'John': {'points': 20, 'assists': 5, 'rebounds': 10}, 'Doe': {'points': 25, 'assists': 4, 'rebounds': 8}})", "test2": "rank_players({'Sean': {'points': 15, 'assists': 3, 'rebounds': 5}, 'Kilpatrick': {'points': 20, 'assists': 4, 'rebounds': 6}})", "test3": "rank_players({'Player1': {'points': 10, 'assists': 2, 'rebounds': 4}, 'Player2': {'points': 15, 'assists': 3, 'rebounds': 5}, 'Player3': {'points': 20, 'assists': 4, 'rebounds': 6}})", "test4": "rank_players({'John': {'points': 25, 'assists': 4, 'rebounds': 8}, 'Doe': {'points': 20, 'assists': 5, 'rebounds': 10}})", "test5": "rank_players({'Sean': {'points': 20, 'assists': 4, 'rebounds': 6}, 'Kilpatrick': {'points': 15, 'assists': 3, 'rebounds': 5}})", "test6": "rank_players({'Player1': {'points': 15, 'assists': 3, 'rebounds': 5}, 'Player2': {'points': 20, 'assists': 4, 'rebounds': 6}, 'Player3': {'points': 25, 'assists': 5, 'rebounds': 7}})", "test7": "rank_players({'John': {'points': 10, 'assists': 2, 'rebounds': 4}, 'Doe': {'points': 15, 'assists': 3, 'rebounds': 5}, 'Smith': {'points': 20, 'assists': 4, 'rebounds': 6}})", "test8": "rank_players({'Sean': {'points': 10, 'assists': 2, 'rebounds': 4}, 'Kilpatrick': {'points': 15, 'assists': 3, 'rebounds': 5}, 'Johnson': {'points': 20, 'assists': 4, 'rebounds': 6}})", "test9": "rank_players({'Player1': {'points': 25, 'assists': 5, 'rebounds': 7}, 'Player2': {'points': 20, 'assists': 4, 'rebounds': 6}, 'Player3': {'points': 15, 'assists': 3, 'rebounds': 5}})", "test10": "rank_players({'John': {'points': 20, 'assists': 4, 'rebounds': 6}, 'Doe': {'points': 25, 'assists': 5, 'rebounds': 7}, 'Smith': {'points': 30, 'assists': 6, 'rebounds': 8}})"}, "hidden_information": "def rank_players(player_stats): stats = sorted(player_stats.items(), key=lambda x: x[1]['points'] + x[1]['assists'] + x[1]['rebounds'], reverse=True); return [player for player, _ in stats]"}
{"ground_truth": "def calculate_total_service_years(politicians):\n  total_service_years = 0\n  for politician in politicians:\n    if politician['re_election_years']:\n      total_service_years += politician['re_election_years'][-1] - politician['election_year'] + len(politician['re_election_years'])\n    else:\n      total_service_years += 2023 - politician['election_year']\n  return total_service_years", "problem_description": "I need a python function that determines the total years of service for a list of politicians based on some rules. The function should take a list of politicians as input where each politician has an election year and possibly multiple re-election years. The function should return the sum of all years served by all politicians. The exact details of the calculation need to be figured out through conversation.The signature of the function is: def calculate_total_service_years(politicians)", "test_cases": {"test1": "calculate_total_service_years([{'election_year': 2000, 're_election_years': [2004, 2008, 2012]}])", "test2": "calculate_total_service_years([{'election_year': 2010, 're_election_years': []}])", "test3": "calculate_total_service_years([{'election_year': 2005, 're_election_years': [2010, 2015]}])", "test4": "calculate_total_service_years([{'election_year': 2002, 're_election_years': [2006, 2010, 2014, 2018]}])", "test5": "calculate_total_service_years([{'election_year': 2015, 're_election_years': []}])", "test6": "calculate_total_service_years([{'election_year': 2001, 're_election_years': [2005, 2009]}])", "test7": "calculate_total_service_years([{'election_year': 2003, 're_election_years': [2007, 2011, 2015]}])", "test8": "calculate_total_service_years([{'election_year': 2008, 're_election_years': []}])", "test9": "calculate_total_service_years([{'election_year': 2012, 're_election_years': [2016, 2020]}])", "test10": "calculate_total_service_years([{'election_year': 2006, 're_election_years': [2010, 2014, 2018, 2022]}])"}, "hidden_information": "def calculate_total_service_years(politicians):\n  total_service_years = 0\n  for politician in politicians:\n    if politician['re_election_years']:\n      total_service_years += politician['re_election_years'][-1] - politician['election_year'] + len(politician['re_election_years'])\n    else:\n      total_service_years += 2023 - politician['election_year']\n  return total_service_years"}
{"ground_truth": "def calculate_mosquito_population(rice_cultivation_area, insecticide_use, previous_population):\n    if rice_cultivation_area > 20000 and insecticide_use == 'high':\n        return previous_population * 0.5\n    elif rice_cultivation_area > 15000 and insecticide_use == 'medium':\n        return previous_population * 0.8\n    elif rice_cultivation_area > 10000 and insecticide_use == 'low':\n        return previous_population * 1.2\n    else:\n        return previous_population * 0.8", "problem_description": "I need help writing a Python function to calculate the potential mosquito population in the Camargue region of France. The function should take into account the area of rice cultivation, the level of insecticide use, and the previous mosquito population. Can you write a function that would accurately model this situation?The signature of the function is: def calculate_mosquito_population(rice_cultivation_area, insecticide_use, previous_population)", "test_cases": {"test1": "calculate_mosquito_population(25000, 'high', 1000)", "test2": "calculate_mosquito_population(18000, 'medium', 1200)", "test3": "calculate_mosquito_population(12000, 'low', 1500)", "test4": "calculate_mosquito_population(10000, 'high', 1800)", "test5": "calculate_mosquito_population(9000, 'medium', 2000)", "test6": "calculate_mosquito_population(8000, 'low', 2200)", "test7": "calculate_mosquito_population(25000, 'low', 1000)", "test8": "calculate_mosquito_population(18000, 'high', 1200)", "test9": "calculate_mosquito_population(12000, 'medium', 1500)", "test10": "calculate_mosquito_population(10000, 'low', 1800)"}, "hidden_information": "def calculate_mosquito_population(rice_cultivation_area, insecticide_use, previous_population):\n    if rice_cultivation_area > 20000 and insecticide_use == 'high':\n        return previous_population * 0.5\n    elif rice_cultivation_area > 15000 and insecticide_use == 'medium':\n        return previous_population * 0.8\n    elif rice_cultivation_area > 10000 and insecticide_use == 'low':\n        return previous_population * 1.2\n    else:\n        return previous_population * 0.8"}
{"ground_truth": "def evaluate_loaded_evidence(evidence_indicators, threshold):\n    loaded_evidence_count = sum(1 for indicator in evidence_indicators if indicator)\n    return loaded_evidence_count / len(evidence_indicators) > threshold", "problem_description": "I need your help, can you write a python function that will help to determine if a given set of evidence is 'loaded' in favor of a certain outcome? This function should take a list of indicators, each with a boolean value indicating whether or not the evidence is 'loaded', as well as a threshold between 0 and 1 that determines what proportion of indicators need to be 'loaded' for the evidence to be considered 'loaded'. The function should output a boolean indicating whether the evidence is 'loaded' or not.The signature of the function is: def evaluate_loaded_evidence(evidence_indicators, threshold)", "test_cases": {"test1": "evaluate_loaded_evidence([True, True, False], 0.5)", "test2": "evaluate_loaded_evidence([True, False, False, False], 0.75)", "test3": "evaluate_loaded_evidence([True, False, True, False], 0.6)", "test4": "evaluate_loaded_evidence([True, True, True, True], 0.3)", "test5": "evaluate_loaded_evidence([False, False, False, False], 0.3)", "test6": "evaluate_loaded_evidence([True, True, True, False], 0.5)", "test7": "evaluate_loaded_evidence([True, True, False, False, True], 0.5)", "test8": "evaluate_loaded_evidence([False, False, True, False, False, True], 0.3)", "test9": "evaluate_loaded_evidence([True, False, False, True, False, True, True], 0.5)", "test10": "evaluate_loaded_evidence([True, True, True, True, True], 0.7)"}, "hidden_information": "def evaluate_loaded_evidence(evidence_indicators, threshold):\n    loaded_evidence_count = sum(1 for indicator in evidence_indicators if indicator)\n    return loaded_evidence_count / len(evidence_indicators) > threshold"}
{"ground_truth": "def detect_patch_crash(error_messages, system_config, patch_version):\n    if system_config == 'Windows 7 64-bit' and patch_version == 'AVG 2011' and 'cannot complete boot cycle' in error_messages:\n        return 'Patch crash detected. Run AVG rescue CD to disable the update.'\n    else:\n        return 'No patch crash detected.'", "problem_description": "Can you write a Python function to determine whether a system crash is caused by a specific software patch? The function should take in some error messages, system configuration, and patch version as input and return a diagnosis message.The signature of the function is: def detect_patch_crash(error_messages, system_config, patch_version)", "test_cases": {"test1": "detect_patch_crash('cannot complete boot cycle', 'Windows 7 64-bit', 'AVG 2011')", "test2": "detect_patch_crash('disk full', 'Windows 10 32-bit', 'AVG 2020')", "test3": "detect_patch_crash('cannot complete boot cycle', 'Windows 8 64-bit', 'AVG 2012')", "test4": "detect_patch_crash('cannot complete boot cycle', 'Windows 7 32-bit', 'AVG 2011')", "test5": "detect_patch_crash('unknown error', 'Windows 7 64-bit', 'AVG 2011')", "test6": "detect_patch_crash('cannot complete boot cycle', 'Ubuntu 64-bit', 'AVG 2011')", "test7": "detect_patch_crash('disk error', 'Windows 7 64-bit', 'AVG 2010')", "test8": "detect_patch_crash('cannot complete boot cycle', 'Windows 7 64-bit', 'AVG 2011')", "test9": "detect_patch_crash('network error', 'Windows 10 64-bit', 'AVG 2020')", "test10": "detect_patch_crash('cannot complete boot cycle', 'Windows 7 64-bit', 'AVG 2015')"}, "hidden_information": "def detect_patch_crash(error_messages, system_config, patch_version):\n    if system_config == 'Windows 7 64-bit' and patch_version == 'AVG 2011' and 'cannot complete boot cycle' in error_messages:\n        return 'Patch crash detected. Run AVG rescue CD to disable the update.'\n    else:\n        return 'No patch crash detected.'"}
{"ground_truth": "def urlify(input_string): return '-'.join(word for word in input_string.lower().split() if word not in ['at', 'the', 'and']).replace(' ', '-')", "problem_description": "I want you to write a python function to convert any given string to a normalized slug format. The slug should be in lower case and separated by dashes instead of spaces. Also make sure the function handles certain words, but I'm not sure, can you ask me some questions to get it right?The signature of the function is: def urlify(input_string)", "test_cases": {"test1": "urlify('Hello World')", "test2": "urlify('Working at home')", "test3": "urlify('Django is great')", "test4": "urlify('This is a test with the word and')", "test5": "urlify('All new works')", "test6": "urlify('Python development')", "test7": "urlify('At home with the family')", "test8": "urlify('Great work and great love')", "test9": "urlify('The year of light')", "test10": "urlify('Working the land and sea')"}, "hidden_information": "def urlify(input_string): return '-'.join(word for word in input_string.lower().split() if word not in ['at', 'the', 'and']).replace(' ', '-')"}
{"ground_truth": "def categorize_music_genre(features, genres): genres_dict = {\"Jazz\": [0, 1, 1, 0, 0],\"Rock\": [1, 0, 0, 1, 1],\"Funk\": [0, 1, 0, 1, 0]}; closest_genre = min(genres, key=lambda x: sum(abs(a - b) for a, b in zip(features, genres_dict[x]))); return closest_genre", "problem_description": "I need to write a python function that can categorize music genres, the task is too big and ambiguous to be solved by myself and I have only some ideas and features, can you as a python expert can help me accomplish this complex task?The signature of the function is: def categorize_music_genre(features, genres)", "test_cases": {"test1": "categorize_music_genre([0, 1, 1, 0, 0], [\"Jazz\", \"Rock\", \"Funk\"])", "test2": "categorize_music_genre([1, 0, 0, 1, 1], [\"Jazz\", \"Rock\", \"Funk\"])", "test3": "categorize_music_genre([0, 1, 0, 1, 0], [\"Jazz\", \"Rock\", \"Funk\"])", "test4": "categorize_music_genre([0, 0, 1, 0, 1], [\"Jazz\", \"Rock\", \"Funk\"])", "test5": "categorize_music_genre([1, 1, 0, 0, 0], [\"Jazz\", \"Rock\", \"Funk\"])", "test6": "categorize_music_genre([0, 0, 0, 1, 1], [\"Jazz\", \"Rock\", \"Funk\"])", "test7": "categorize_music_genre([1, 0, 1, 0, 0], [\"Jazz\", \"Rock\", \"Funk\"])", "test8": "categorize_music_genre([0, 1, 1, 1, 0], [\"Jazz\", \"Rock\", \"Funk\"])", "test9": "categorize_music_genre([1, 1, 1, 0, 1], [\"Jazz\", \"Rock\", \"Funk\"])", "test10": "categorize_music_genre([0, 0, 0, 0, 0], [\"Jazz\", \"Rock\", \"Funk\"])"}, "hidden_information": "def categorize_music_genre(features, genres): genres_dict = {\"Jazz\": [0, 1, 1, 0, 0],\"Rock\": [1, 0, 0, 1, 1],\"Funk\": [0, 1, 0, 1, 0]}; closest_genre = min(genres, key=lambda x: sum(abs(a - b) for a, b in zip(features, genres_dict[x]))); return closest_genre"}
{"ground_truth": "def filter_and_recommend_packages(packages, restricted_types, recommended_names):\n    filtered_packages = [package for package in packages if package['type'] in restricted_types]\n    recommended_packages = [package for package in filtered_packages if package['name'] in recommended_names]\n    return recommended_packages", "problem_description": "I want you to write a python function that filters packages based on their types and recommends certain packages based on their names.The signature of the function is: def filter_and_recommend_packages(packages, restricted_types, recommended_names)", "test_cases": {"test1": "filter_and_recommend_packages([{'name': 'flash', 'type': 'restricted'}, {'name': 'Konqueror', 'type': 'free'}, {'name': 'Amarok', 'type': 'restricted'}], ['restricted'], ['flash', 'Amarok'])", "test2": "filter_and_recommend_packages([{'name': 'arora', 'type': 'free'}, {'name': 'Kaffeine', 'type': 'restricted'}, {'name': 'Ubuntu', 'type': 'free'}], ['restricted'], ['Kaffeine'])", "test3": "filter_and_recommend_packages([{'name': 'chrome', 'type': 'free'}, {'name': 'vlc', 'type': 'restricted'}, {'name': 'kubuntu', 'type': 'free'}], ['restricted', 'free'], ['chrome', 'vlc'])", "test4": "filter_and_recommend_packages([{'name': 'firefox', 'type': 'free'}, {'name': 'thunderbird', 'type': 'restricted'}, {'name': 'libreoffice', 'type': 'free'}], ['free'], ['firefox', 'libreoffice'])", "test5": "filter_and_recommend_packages([{'name': 'gimp', 'type': 'free'}, {'name': 'inkscape', 'type': 'restricted'}, {'name': 'blender', 'type': 'free'}], ['restricted'], ['inkscape'])", "test6": "filter_and_recommend_packages([{'name': 'skype', 'type': 'restricted'}, {'name': 'teamspeak', 'type': 'free'}, {'name': 'discord', 'type': 'restricted'}], ['free'], ['teamspeak'])", "test7": "filter_and_recommend_packages([{'name': 'spotify', 'type': 'free'}, {'name': 'appleMusic', 'type': 'restricted'}, {'name': 'googlePlay', 'type': 'free'}], ['free', 'restricted'], ['spotify', 'appleMusic'])", "test8": "filter_and_recommend_packages([{'name': 'notepad', 'type': 'free'}, {'name': 'sublimeText', 'type': 'restricted'}, {'name': 'atom', 'type': 'free'}], ['restricted'], ['sublimeText'])", "test9": "filter_and_recommend_packages([{'name': 'chrome', 'type': 'free'}, {'name': 'firefox', 'type': 'free'}, {'name': 'edge', 'type': 'restricted'}], ['free'], ['chrome', 'firefox'])", "test10": "filter_and_recommend_packages([{'name': 'python', 'type': 'free'}, {'name': 'java', 'type': 'restricted'}, {'name': 'c++', 'type': 'free'}], ['restricted'], ['java'])"}, "hidden_information": "def filter_and_recommend_packages(packages, restricted_types, recommended_names):\n    filtered_packages = [package for package in packages if package['type'] in restricted_types]\n    recommended_packages = [package for package in filtered_packages if package['name'] in recommended_names]\n    return recommended_packages"}
{"ground_truth": "def debug_mailman_setup(mailman_path, sendmail_path, gid):\n    try:\n        # Ensure mailman path is valid\n        if mailman_path is None or not mailman_path.endswith('/mailman'):\n            return 'Error: Invalid mailman path'\n        # Check sendmail path\n        if sendmail_path is None or not sendmail_path.endswith('/sendmail'):\n            return 'Error: Invalid sendmail path'\n        # Verify gid matches expected group id\n        if gid != 2000: # assuming expected gid is 2000\n            return 'Error: Group ID mismatch'\n        # If no errors, return success message\n        return 'Mailman setup is correct.'\n    except Exception as e:\n        return 'Error: ' + str(e)", "problem_description": "I'm trying to set up mailman to work with sendmail but I get an error when sending messages using the wrapper function. Can you write a python function to help me debug this issue?The signature of the function is: def debug_mailman_setup(mailman_path, sendmail_path, gid)", "test_cases": {"test1": "debug_mailman_setup('/opt/mailman', '/usr/sbin/sendmail', 2000)", "test2": "debug_mailman_setup('/invalid/path', '/usr/sbin/sendmail', 2000)", "test3": "debug_mailman_setup('/opt/mailman', '/invalid/sendmail/path', 2000)", "test4": "debug_mailman_setup('/opt/mailman', '/usr/sbin/sendmail', 1500)", "test5": "debug_mailman_setup(None, '/usr/sbin/sendmail', 2000)", "test6": "debug_mailman_setup('/opt/mailman', None, 2000)", "test7": "debug_mailman_setup('/opt/mailman/mail', '/usr/sbin/sendmail', 2000)", "test8": "debug_mailman_setup('/opt/mailman', '/usr/sbin/sendmail/sendmail', 2000)", "test9": "debug_mailman_setup('/opt/mailman', '/usr/sbin/sendmail', None)", "test10": "debug_mailman_setup('/opt/mailman', '/usr/sbin/sendmail', 'invalid_gid')"}, "hidden_information": "def debug_mailman_setup(mailman_path, sendmail_path, gid):\n    try:\n        # Ensure mailman path is valid\n        if mailman_path is None or not mailman_path.endswith('/mailman'):\n            return 'Error: Invalid mailman path'\n        # Check sendmail path\n        if sendmail_path is None or not sendmail_path.endswith('/sendmail'):\n            return 'Error: Invalid sendmail path'\n        # Verify gid matches expected group id\n        if gid != 2000: # assuming expected gid is 2000\n            return 'Error: Group ID mismatch'\n        # If no errors, return success message\n        return 'Mailman setup is correct.'\n    except Exception as e:\n        return 'Error: ' + str(e)"}
{"ground_truth": "def get_penalty(sin_type, person_or_animal_involved=None, related_party_involved=None):\n    penalties = {\n        'Molech': 'death',\n        'cursing_parents': 'death',\n        'adultery': 'death',\n        'incest_father_wife': 'death',\n        'incest_daughter_in_law': 'death',\n        'homosexuality': 'death',\n        'marrying_two_women': 'burning',\n        'bestiality': 'death',\n        'sister_incest': 'publicly_cut_off',\n        'menstrual_intercourse': 'cut_off',\n        'aunt_uncle_incest': 'death',\n        'brother_wife_incest': 'childlessness',\n        'medium_clairvoyant': 'death'\n    }\n    if sin_type == 'Molech':\n        return penalties['Molech']\n    elif sin_type == 'cursing_parents':\n        return penalties['cursing_parents']\n    elif sin_type == 'adultery':\n        return penalties['adultery']\n    elif sin_type == 'incest_father_wife':\n        return penalties['incest_father_wife']\n    elif sin_type == 'incest_daughter_in_law':\n        return penalties['incest_daughter_in_law']\n    elif sin_type == 'homosexuality':\n        return penalties['homosexuality']\n    elif sin_type == 'marrying_two_women':\n        return penalties['marrying_two_women']\n    elif sin_type == 'bestiality':\n        return penalties['bestiality']\n    elif sin_type == 'sister_incest' and related_party_involved == 'father':\n        return penalties['sister_incest']\n    elif sin_type == 'sister_incest' and related_party_involved == 'mother':\n        return penalties['sister_incest']\n    elif sin_type == 'menstrual_intercourse':\n        return penalties['menstrual_intercourse']\n    elif sin_type == 'aunt_uncle_incest':\n        return penalties['aunt_uncle_incest']\n    elif sin_type == 'brother_wife_incest':\n        return penalties['brother_wife_incest']\n    elif sin_type == 'medium_clairvoyant':\n        return penalties['medium_clairvoyant']\n    else:\n        return 'unknown'\n", "problem_description": "can you write a python function to determine the penalty for a given sin according to the biblical laws in Leviticus 20? For example, if I input 'cursing parents', the function should return 'death'.The signature of the function is: def get_penalty(sin_type, person_or_animal_involved=None, related_party_involved=None)", "test_cases": {"test1": "get_penalty('Molech')", "test2": "get_penalty('cursing_parents')", "test3": "get_penalty('adultery')", "test4": "get_penalty('incest_father_wife')", "test5": "get_penalty('incest_daughter_in_law')", "test6": "get_penalty('homosexuality')", "test7": "get_penalty('marrying_two_women')", "test8": "get_penalty('bestiality')", "test9": "get_penalty('sister_incest', related_party_involved='father')", "test10": "get_penalty('menstrual_intercourse')"}, "hidden_information": "def get_penalty(sin_type, person_or_animal_involved=None, related_party_involved=None):\n    penalties = {\n        'Molech': 'death',\n        'cursing_parents': 'death',\n        'adultery': 'death',\n        'incest_father_wife': 'death',\n        'incest_daughter_in_law': 'death',\n        'homosexuality': 'death',\n        'marrying_two_women': 'burning',\n        'bestiality': 'death',\n        'sister_incest': 'publicly_cut_off',\n        'menstrual_intercourse': 'cut_off',\n        'aunt_uncle_incest': 'death',\n        'brother_wife_incest': 'childlessness',\n        'medium_clairvoyant': 'death'\n    }\n    if sin_type == 'Molech':\n        return penalties['Molech']\n    elif sin_type == 'cursing_parents':\n        return penalties['cursing_parents']\n    elif sin_type == 'adultery':\n        return penalties['adultery']\n    elif sin_type == 'incest_father_wife':\n        return penalties['incest_father_wife']\n    elif sin_type == 'incest_daughter_in_law':\n        return penalties['incest_daughter_in_law']\n    elif sin_type == 'homosexuality':\n        return penalties['homosexuality']\n    elif sin_type == 'marrying_two_women':\n        return penalties['marrying_two_women']\n    elif sin_type == 'bestiality':\n        return penalties['bestiality']\n    elif sin_type == 'sister_incest' and related_party_involved == 'father':\n        return penalties['sister_incest']\n    elif sin_type == 'sister_incest' and related_party_involved == 'mother':\n        return penalties['sister_incest']\n    elif sin_type == 'menstrual_intercourse':\n        return penalties['menstrual_intercourse']\n    elif sin_type == 'aunt_uncle_incest':\n        return penalties['aunt_uncle_incest']\n    elif sin_type == 'brother_wife_incest':\n        return penalties['brother_wife_incest']\n    elif sin_type == 'medium_clairvoyant':\n        return penalties['medium_clairvoyant']\n    else:\n        return 'unknown'\n"}
{"ground_truth": "def calculate_slayer_stats(slippers, muscles, foe_boss,\n    foe_stamina=450000, weakness='Vulnerability to mix of blood and oil'):\n    max_health = (5 * (10 * slippers) + 1000 * muscles) / 7\n    stamina_loss = max_health * (1.9/100) if foe_boss else foe_stamina * (1.3/1000)\n    weakness_damage = max_health * 0.07 if foe_boss and weakness == 'Vulnerability to mix of blood and oil' else 0\n    return (max_health, stamina_loss, weakness_damage)", "problem_description": "Write a Python function that calculates the stats for a slayer in an RPG game. The slayer has several attributes such as the strength of their slippers and muscles. Additionally, the slayer faces a foe with certain properties like whether it's a boss or not, and its stamina. The stats to be calculated are the maximum health of the slayer, the stamina loss when facing the foe, and the damage taken due to a weakness.The signature of the function is: def calculate_slayer_stats(slippers, muscles, foe_boss,\n    foe_stamina=450000, weakness='Vulnerability to mix of blood and oil')", "test_cases": {"test1": "calculate_slayer_stats(2, 5, False, foe_stamina=50000)", "test2": "calculate_slayer_stats(7, 10, True, weakness='Vulnerability to mix of blood and oil')", "test3": "calculate_slayer_stats(4, 8, True, foe_stamina=85000)", "test4": "calculate_slayer_stats(6, 3, False, weakness='Vulnerability to mix of blood and oil')", "test5": "calculate_slayer_stats(9, 9, True, foe_stamina=2000)", "test6": "calculate_slayer_stats(8, 4, True, weakness='Vulnerability to mix of blood and oil')", "test7": "calculate_slayer_stats(7, 9, True, foe_stamina=150000)", "test8": "calculate_slayer_stats(6, 1, True, weakness='Vulnerability to mix of blood and oil')", "test9": "calculate_slayer_stats(5, 0, True, foe_stamina=1000)", "test10": "calculate_slayer_stats(10, 6, False, foe_stamina=250000)"}, "hidden_information": "def calculate_slayer_stats(slippers, muscles, foe_boss,\n    foe_stamina=450000, weakness='Vulnerability to mix of blood and oil'):\n    max_health = (5 * (10 * slippers) + 1000 * muscles) / 7\n    stamina_loss = max_health * (1.9/100) if foe_boss else foe_stamina * (1.3/1000)\n    weakness_damage = max_health * 0.07 if foe_boss and weakness == 'Vulnerability to mix of blood and oil' else 0\n    return (max_health, stamina_loss, weakness_damage)"}
{"ground_truth": "def generate_damage_quote(name1, name2):\n    quotes = [\n        f\"It got harder with every passing moment, and sometimes {name1} wondered if the world would be better off without this pitifully broken version of herself.\",\n        f\"She remembered the last time she saw {name2}. When she had knocked on {name2}'s door, desperate for some final link to him.\",\n        f\"{name1} hadn't cried when the doctors had told her. Not one tear shed at the hospital\u2026 Sometimes {name1} wondered if she was a horrible person for that.\",\n        f\"{name1} sees {name2} sometimes. Walking down the street, standing beside {name1} in the lab, smiling softly from the kitchen, just as {name2} had done every morning before greeting {name1} with a soft kiss\u2026 But then she blinks, and {name2} is gone and {name1} wonders what she could have possibly done in life to deserve so much pain.\",\n        f\"{name1} wants to remember {name2} by that charming smile, and those deep, soulful eyes. Not by some stone in the ground.\"\n    ]\n    return quotes\n", "problem_description": "Hey LLM Agent. Given two names, write a python function named 'generate_damage_quote' that would write five unique broken heart quotes for these two characters.The signature of the function is: def generate_damage_quote(name1, name2)", "test_cases": {"test1": "generate_damage_quote('Bones', 'Booth')", "test2": "generate_damage_quote('Polly', 'Kent')", "test3": "generate_damage_quote('Angela', 'Hodgins')", "test4": "generate_damage_quote('Temperance', 'Seeley')", "test5": "generate_damage_quote('Emily', 'Danny')", "test6": "generate_damage_quote('Ziva', 'Tony')", "test7": "generate_damage_quote('Robin', 'Barney')", "test8": "generate_damage_quote('DJ', 'Steve')", "test9": "generate_damage_quote('Haley', 'Nathan')", "test10": "generate_damage_quote('Lily', 'Marshall')"}, "hidden_information": "def generate_damage_quote(name1, name2):\n    quotes = [\n        f\"It got harder with every passing moment, and sometimes {name1} wondered if the world would be better off without this pitifully broken version of herself.\",\n        f\"She remembered the last time she saw {name2}. When she had knocked on {name2}'s door, desperate for some final link to him.\",\n        f\"{name1} hadn't cried when the doctors had told her. Not one tear shed at the hospital\u2026 Sometimes {name1} wondered if she was a horrible person for that.\",\n        f\"{name1} sees {name2} sometimes. Walking down the street, standing beside {name1} in the lab, smiling softly from the kitchen, just as {name2} had done every morning before greeting {name1} with a soft kiss\u2026 But then she blinks, and {name2} is gone and {name1} wonders what she could have possibly done in life to deserve so much pain.\",\n        f\"{name1} wants to remember {name2} by that charming smile, and those deep, soulful eyes. Not by some stone in the ground.\"\n    ]\n    return quotes\n"}
{"ground_truth": "def anne_sentiment_analyzer(text): \n    sentiment_dict = {'sad': 0, 'angry': 0, 'happy': 0, 'neutral': 1}\n    keywords = {'sad': ['tears', 'upset', 'depressed'], 'angry': ['yell', 'angry', 'furious'], 'happy': ['smile', 'laugh', 'delight']}\n    text = text.lower()\n    for keyword in keywords:\n        for word in keywords[keyword]:\n            if word in text:\n                sentiment_dict[keyword] += 1\n    max_sentiment = max(sentiment_dict, key=sentiment_dict.get)\n    return max_sentiment", "problem_description": "Write a Python function that analyzes Anne's dialogue and determines her emotional state based on the input text.The signature of the function is: def anne_sentiment_analyzer(text)", "test_cases": {"test1": "anne_sentiment_analyzer('I am so happy to see you')", "test2": "anne_sentiment_analyzer('I am feeling so sad and depressed')", "test3": "anne_sentiment_analyzer('I am not sure how I feel')", "test4": "anne_sentiment_analyzer('I am furious with you')", "test5": "anne_sentiment_analyzer('I love you, Gilbert')", "test6": "anne_sentiment_analyzer('Ugh, I hate this weather')", "test7": "anne_sentiment_analyzer('I am just so tired and overwhelmed')", "test8": "anne_sentiment_analyzer('This is amazing news!')", "test9": "anne_sentiment_analyzer('I do not understand why you are being so mean')", "test10": "anne_sentiment_analyzer('I just feel so neutral about this whole thing')"}, "hidden_information": "def anne_sentiment_analyzer(text): \n    sentiment_dict = {'sad': 0, 'angry': 0, 'happy': 0, 'neutral': 1}\n    keywords = {'sad': ['tears', 'upset', 'depressed'], 'angry': ['yell', 'angry', 'furious'], 'happy': ['smile', 'laugh', 'delight']}\n    text = text.lower()\n    for keyword in keywords:\n        for word in keywords[keyword]:\n            if word in text:\n                sentiment_dict[keyword] += 1\n    max_sentiment = max(sentiment_dict, key=sentiment_dict.get)\n    return max_sentiment"}
{"ground_truth": "def calculate_personality_similarity(char1_traits, char2_traits):\n    similarity = len(set(char1_traits) & set(char2_traits)) / len(set(char1_traits) | set(char2_traits))\n    return similarity", "problem_description": "I want a Python function that determines how similar two people's personalities are based on their traits. Can you help me with that?The signature of the function is: def calculate_personality_similarity(char1_traits, char2_traits)", "test_cases": {"test1": "calculate_personality_similarity(['selfish', 'stupid', 'broken'], ['selfish', 'stupid', 'broken'])", "test2": "calculate_personality_similarity(['selfish', 'stupid', 'broken'], ['selfless', 'intelligent', 'whole'])", "test3": "calculate_personality_similarity(['sarcastic', 'immature'], ['sarcastic', 'immature', 'responsible'])", "test4": "calculate_personality_similarity(['innocent', 'breakable'], ['innocent', 'breakable', 'teasing'])", "test5": "calculate_personality_similarity(['miserable', 'damaging'], ['miserable', 'damaging', 'happy'])", "test6": "calculate_personality_similarity(['selfish', 'stupid', 'broken', 'fucked-up'], ['selfish', 'stupid', 'broken'])", "test7": "calculate_personality_similarity(['sarcastic', 'immature'], ['responsible', 'caring'])", "test8": "calculate_personality_similarity(['innocent', 'breakable'], ['cunning', ' manipulative'])", "test9": "calculate_personality_similarity(['miserable', 'damaging'], ['happy', 'nurturing'])", "test10": "calculate_personality_similarity(['selfish', 'stupid', 'broken'], ['selfless', 'intelligent', 'whole', 'happy'])"}, "hidden_information": "def calculate_personality_similarity(char1_traits, char2_traits):\n    similarity = len(set(char1_traits) & set(char2_traits)) / len(set(char1_traits) | set(char2_traits))\n    return similarity"}
{"ground_truth": "def track_attendance(student_records):\n    # Create a dictionary to store attendance records\n    attendance = {}\n\n    # Iterate over each student record\n    for record in student_records:\n        # If the student is not in the attendance dictionary, add them\n        if record['student_id'] not in attendance:\n            attendance[record['student_id']] = {'present': 0, 'absent': 0, 'late': 0}\n\n        # Update the student's attendance record based on their status\n        if record['status'] == 'present':\n            attendance[record['student_id']]['present'] += 1\n        elif record['status'] == 'absent':\n            attendance[record['student_id']]['absent'] += 1\n        elif record['status'] == 'late':\n            attendance[record['student_id']]['late'] += 1\n\n    return attendance", "problem_description": "Hi agent, I want you to write a python function to track student attendance. I have a lot of student records with their IDs and attendance status (present, absent, or late), but I don't know how to organize them. Can you write a function that takes these records as input and outputs a dictionary with each student's attendance record?The signature of the function is: def track_attendance(student_records)", "test_cases": {"test1": "track_attendance([{'student_id': 1, 'status': 'present'}, {'student_id': 2, 'status': 'absent'}, {'student_id': 1, 'status': 'late'}])", "test2": "track_attendance([{'student_id': 3, 'status': 'present'}, {'student_id': 3, 'status': 'present'}])", "test3": "track_attendance([{'student_id': 1, 'status': 'absent'}, {'student_id': 2, 'status': 'present'}, {'student_id': 3, 'status': 'late'}])", "test4": "track_attendance([{'student_id': 1, 'status': 'late'}, {'student_id': 1, 'status': 'late'}, {'student_id': 1, 'status': 'late'}])", "test5": "track_attendance([{'student_id': 2, 'status': 'absent'}, {'student_id': 2, 'status': 'absent'}, {'student_id': 2, 'status': 'absent'}])", "test6": "track_attendance([{'student_id': 3, 'status': 'present'}, {'student_id': 3, 'status': 'present'}, {'student_id': 3, 'status': 'present'}])", "test7": "track_attendance([{'student_id': 1, 'status': 'absent'}, {'student_id': 1, 'status': 'late'}, {'student_id': 1, 'status': 'present'}])", "test8": "track_attendance([{'student_id': 2, 'status': 'present'}, {'student_id': 2, 'status': 'present'}, {'student_id': 2, 'status': 'present'}])", "test9": "track_attendance([{'student_id': 3, 'status': 'late'}, {'student_id': 3, 'status': 'late'}, {'student_id': 3, 'status': 'late'}])", "test10": "track_attendance([{'student_id': 1, 'status': 'absent'}, {'student_id': 2, 'status': 'present'}, {'student_id': 3, 'status': 'late'}])"}, "hidden_information": "def track_attendance(student_records):\n    # Create a dictionary to store attendance records\n    attendance = {}\n\n    # Iterate over each student record\n    for record in student_records:\n        # If the student is not in the attendance dictionary, add them\n        if record['student_id'] not in attendance:\n            attendance[record['student_id']] = {'present': 0, 'absent': 0, 'late': 0}\n\n        # Update the student's attendance record based on their status\n        if record['status'] == 'present':\n            attendance[record['student_id']]['present'] += 1\n        elif record['status'] == 'absent':\n            attendance[record['student_id']]['absent'] += 1\n        elif record['status'] == 'late':\n            attendance[record['student_id']]['late'] += 1\n\n    return attendance"}
{"ground_truth": "def get_character_state(is_soulful, environment_state, has_been_saved):\n    if is_soulful and environment_state == 'cross' and not has_been_saved:\n        return 'weeping and burning'\n    elif is_soulful and environment_state == 'cross' and has_been_saved:\n        return 'gazing, blinking through tears'\n    elif is_soulful and environment_state != 'cross':\n        return 'humbled'\n    else:\n        return 'unknown'", "problem_description": "I want a python function that determines the state of a character based on some factors, but I'm not quite sure how those factors should be used to get the final state. The character may have a soul or not, and they may be on a cross or not, and there may be some other factor that affects their state, but it's all a bit fuzzy. Could you help me figure this out?The signature of the function is: def get_character_state(is_soulful, environment_state, has_been_saved)", "test_cases": {"test1": "get_character_state(True, 'cross', False)", "test2": "get_character_state(True, 'ground', True)", "test3": "get_character_state(False, 'cross', False)", "test4": "get_character_state(True, 'mountain', True)", "test5": "get_character_state(False, 'cross', True)", "test6": "get_character_state(True, 'cross', True)", "test7": "get_character_state(False, 'ground', False)", "test8": "get_character_state(True, 'mountain', False)", "test9": "get_character_state(False, 'mountain', True)", "test10": "get_character_state(True, 'ground', False)"}, "hidden_information": "def get_character_state(is_soulful, environment_state, has_been_saved):\n    if is_soulful and environment_state == 'cross' and not has_been_saved:\n        return 'weeping and burning'\n    elif is_soulful and environment_state == 'cross' and has_been_saved:\n        return 'gazing, blinking through tears'\n    elif is_soulful and environment_state != 'cross':\n        return 'humbled'\n    else:\n        return 'unknown'"}
{"ground_truth": "def update_member_progress(member_id, current_status, new_status, progress_notes, date):\n    member_progress = {\n        'member_id': member_id,\n        'progress_status': new_status,\n        'progress_notes': progress_notes,\n        'date': date,\n        'previous_status': current_status\n    }\n    # code to update the member progress database... \n    return member_progress", "problem_description": "I want you to write a python function to update the member progress in a ward council, I have done some updates on an individual's progress and want the agent to help me track and record these updatesThe signature of the function is: def update_member_progress(member_id, current_status, new_status, progress_notes, date)", "test_cases": {"test1": "update_member_progress(123, 'Baptized', 'Confirmed', 'attended confirmation ceremony on Sunday', '2024-02-14')", "test2": "update_member_progress(456, 'New Member', 'Endowed', 'received temple endowment on March 15', '2024-03-15')", "test3": "update_member_progress(789, 'Less Active', 'Active', 'starting attending church regularly again', '2023-08-01')", "test4": "update_member_progress(1011, 'Baptized', 'Baptized', 'no changes', '2023-05-20')", "test5": "update_member_progress(1213, 'Confirmed', 'No Change', 'missing confirmation status', '2024-02-14')", "test6": "update_member_progress(1415, 'No Status', 'New Member', 'just joined the church', '2024-02-14')", "test7": "update_member_progress(1617, 'New Member', 'Less Active', 'not attending church', '2023-05-20')", "test8": "update_member_progress(1819, 'Endowed', 'No Change', 'Still actively attending church', '2024-02-14')", "test9": "update_member_progress(2021, 'Confirmed', 'New Member', 'reverted to new member status', '2024-02-14')", "test10": "update_member_progress(2223, 'Active', 'Endowed', 'Just received temple endowment', '2024-02-14')"}, "hidden_information": "def update_member_progress(member_id, current_status, new_status, progress_notes, date):\n    member_progress = {\n        'member_id': member_id,\n        'progress_status': new_status,\n        'progress_notes': progress_notes,\n        'date': date,\n        'previous_status': current_status\n    }\n    # code to update the member progress database... \n    return member_progress"}
{"ground_truth": "def track_eating_habits(food_log, daily_calorie_goal=2000):\n    total_calories = sum(item['calories'] for item in food_log)\n    if total_calories > daily_calorie_goal:\n        return 'You have exceeded your daily calorie goal!'\n    else:\n        return f'You have {daily_calorie_goal - total_calories} calories left for the day.'", "problem_description": "I want to lose weight by tracking my eating habits. Can you write a Python function that takes a list of food items with their corresponding calories and a daily calorie goal, and tells me if I've exceeded my daily calorie goal or not?The signature of the function is: def track_eating_habits(food_log, daily_calorie_goal=2000)", "test_cases": {"test1": "track_eating_habits([{'name': 'apple', 'calories': 95}, {'name': 'banana', 'calories': 105}])", "test2": "track_eating_habits([{'name': 'pizza', 'calories': 250}, {'name': 'soda', 'calories': 150}], 2000)", "test3": "track_eating_habits([{'name': 'salad', 'calories': 50}, {'name': 'chicken', 'calories': 200}], 1500)", "test4": "track_eating_habits([{'name': 'fries', 'calories': 200}, {'name': 'burger', 'calories': 500}], 2000)", "test5": "track_eating_habits([{'name': 'water', 'calories': 0}, {'name': 'orange', 'calories': 60}], 2000)", "test6": "track_eating_habits([{'name': 'ice cream', 'calories': 300}, {'name': 'cake', 'calories': 400}], 2000)", "test7": "track_eating_habits([{'name': 'pizza', 'calories': 250}, {'name': 'soda', 'calories': 150}, {'name': 'ice cream', 'calories': 300}], 2000)", "test8": "track_eating_habits([{'name': 'apple', 'calories': 95}, {'name': 'banana', 'calories': 105}, {'name': 'orange', 'calories': 60}], 2000)", "test9": "track_eating_habits([{'name': 'fries', 'calories': 200}, {'name': 'burger', 'calories': 500}, {'name': 'soda', 'calories': 150}], 2000)", "test10": "track_eating_habits([{'name': 'water', 'calories': 0}, {'name': 'salad', 'calories': 50}, {'name': 'chicken', 'calories': 200}], 1500)"}, "hidden_information": "def track_eating_habits(food_log, daily_calorie_goal=2000):\n    total_calories = sum(item['calories'] for item in food_log)\n    if total_calories > daily_calorie_goal:\n        return 'You have exceeded your daily calorie goal!'\n    else:\n        return f'You have {daily_calorie_goal - total_calories} calories left for the day.'"}
{"ground_truth": "def calculate_prison_sentence(type_of_crime, years_served, years_to_eligibility, fine):\n    if type_of_crime == 'felony_murder':\n        return f'{years_served} years in prison, eligible for parole after {years_to_eligibility} years, and a fine of ${fine}'\n    else:\n        return 'Invalid type of crime'", "problem_description": "I need a Python function to calculate the prison sentence based on the type of crime. Can you write a function that takes into account the number of years served, the years until eligible for parole, and any fines associated with the crime?The signature of the function is: def calculate_prison_sentence(type_of_crime, years_served, years_to_eligibility, fine)", "test_cases": {"test1": "calculate_prison_sentence('felony_murder', 80, 30, 10000)", "test2": "calculate_prison_sentence('misdemeanor', 5, 2, 5000)", "test3": "calculate_prison_sentence('felony_murder', 50, 20, 20000)", "test4": "calculate_prison_sentence('arson', 10, 5, 1000)", "test5": "calculate_prison_sentence('felony_murder', 100, 40, 30000)", "test6": "calculate_prison_sentence('manslaughter', 20, 10, 5000)", "test7": "calculate_prison_sentence('felony_murder', 60, 25, 15000)", "test8": "calculate_prison_sentence('robbery', 15, 7, 2000)", "test9": "calculate_prison_sentence('felony_murder', 90, 35, 25000)", "test10": "calculate_prison_sentence('burglary', 12, 6, 1000)"}, "hidden_information": "def calculate_prison_sentence(type_of_crime, years_served, years_to_eligibility, fine):\n    if type_of_crime == 'felony_murder':\n        return f'{years_served} years in prison, eligible for parole after {years_to_eligibility} years, and a fine of ${fine}'\n    else:\n        return 'Invalid type of crime'"}
{"ground_truth": "def calculate_heat_transfer(primary_coolant_temp, secondary_coolant_temp, heat_transfer_coefficient, surface_area): return heat_transfer_coefficient * surface_area * (primary_coolant_temp - secondary_coolant_temp)", "problem_description": "I want you to write a Python function to calculate the heat energy transferred from the primary coolant system to the secondary coolant system in a nuclear-powered submarine. The function should take into account the temperatures of the primary and secondary coolants, the heat transfer coefficient, and the surface area of the steam generator. Can you help me with that?The signature of the function is: def calculate_heat_transfer(primary_coolant_temp, secondary_coolant_temp, heat_transfer_coefficient, surface_area)", "test_cases": {"test1": "calculate_heat_transfer(500, 200, 0.01, 1000)", "test2": "calculate_heat_transfer(600, 250, 0.02, 1200)", "test3": "calculate_heat_transfer(400, 150, 0.005, 800)", "test4": "calculate_heat_transfer(550, 220, 0.015, 1100)", "test5": "calculate_heat_transfer(450, 120, 0.002, 900)", "test6": "calculate_heat_transfer(520, 180, 0.012, 1000)", "test7": "calculate_heat_transfer(580, 280, 0.025, 1300)", "test8": "calculate_heat_transfer(420, 160, 0.008, 850)", "test9": "calculate_heat_transfer(510, 210, 0.018, 1050)", "test10": "calculate_heat_transfer(490, 170, 0.01, 950)"}, "hidden_information": "def calculate_heat_transfer(primary_coolant_temp, secondary_coolant_temp, heat_transfer_coefficient, surface_area): return heat_transfer_coefficient * surface_area * (primary_coolant_temp - secondary_coolant_temp)"}
{"ground_truth": "def calculate_prison_sentence(involvement_level, cooperation, sentence_ranges): \n   if cooperation and involvement_level == 'less_involved': \n       return min(sentence_ranges) / 2 \n   elif cooperation and involvement_level == 'more_involved': \n       return sum(sentence_ranges) / 4 \n   else: \n       return sum(sentence_ranges) / 2", "problem_description": "I need you to write a Python function that calculates the prison sentence range for individuals involved in a plot based on their cooperation and involvement level. Please take into consideration whether they are 'less_involved' or 'more_involved', and also whether they cooperate with the authorities.The signature of the function is: def calculate_prison_sentence(involvement_level, cooperation, sentence_ranges)", "test_cases": {"test1": "calculate_prison_sentence('less_involved', True, [8, 11])", "test2": "calculate_prison_sentence('more_involved', True, [12, 15])", "test3": "calculate_prison_sentence('less_involved', False, [10, 13])", "test4": "calculate_prison_sentence('more_involved', False, [15, 19])", "test5": "calculate_prison_sentence('less_involved', True, [9, 12])", "test6": "calculate_prison_sentence('less_involved', False, [11, 14])", "test7": "calculate_prison_sentence('more_involved', True, [13, 16])", "test8": "calculate_prison_sentence('more_involved', False, [16, 20])", "test9": "calculate_prison_sentence('less_involved', True, [8, 10])", "test10": "calculate_prison_sentence('more_involved', False, [18, 22])"}, "hidden_information": "def calculate_prison_sentence(involvement_level, cooperation, sentence_ranges): \n   if cooperation and involvement_level == 'less_involved': \n       return min(sentence_ranges) / 2 \n   elif cooperation and involvement_level == 'more_involved': \n       return sum(sentence_ranges) / 4 \n   else: \n       return sum(sentence_ranges) / 2"}
{"ground_truth": "def calculate_willingness_to_pay(envy_level, product_price, is_deserved):\n    if envy_level == 'benign' and is_deserved == True:\n        return product_price * 1.117\n    elif envy_level == 'malicious' and is_deserved == False:\n        return product_price * 0.98\n    else:\n        return product_price", "problem_description": "I want the agent to write a python function that calculates the price a customer is willing to pay for a product based on their level of envy. The function should take into account whether the object of envy's advantages are deserved or not, and adjust the price accordingly. The agent will need to collaborate with the human user to get clarifications on the exact requirements of the function.The signature of the function is: def calculate_willingness_to_pay(envy_level, product_price, is_deserved)", "test_cases": {"test1": "calculate_willingness_to_pay('benign', 500, True)", "test2": "calculate_willingness_to_pay('malicious', 500, False)", "test3": "calculate_willingness_to_pay('benign', 600, True)", "test4": "calculate_willingness_to_pay('malicious', 600, False)", "test5": "calculate_willingness_to_pay('neutral', 500, True)", "test6": "calculate_willingness_to_pay('neutral', 500, False)", "test7": "calculate_willingness_to_pay('benign', 700, True)", "test8": "calculate_willingness_to_pay('malicious', 700, False)", "test9": "calculate_willingness_to_pay('benign', 800, True)", "test10": "calculate_willingness_to_pay('malicious', 800, False)"}, "hidden_information": "def calculate_willingness_to_pay(envy_level, product_price, is_deserved):\n    if envy_level == 'benign' and is_deserved == True:\n        return product_price * 1.117\n    elif envy_level == 'malicious' and is_deserved == False:\n        return product_price * 0.98\n    else:\n        return product_price"}
{"ground_truth": "def calculate_max_rent_increase(renovation_cost, current_rent, gov_prescribed_increase): rent_increase = min(renovation_cost / 100 * current_rent, gov_prescribed_increase / 100 * current_rent); return current_rent + rent_increase", "problem_description": "I need a python function to calculate the maximum allowable rent increase for a month-to-month tenancy in Ontario, Canada. The function should take into account the landlord's renovation costs and the government's prescribed rent increase percentage. Can you write a python function to accomplish this?The signature of the function is: def calculate_max_rent_increase(renovation_cost, current_rent, gov_prescribed_increase)", "test_cases": {"test1": "calculate_max_rent_increase(5000, 2000, 3.8)", "test2": "calculate_max_rent_increase(0, 1500, 3.8)", "test3": "calculate_max_rent_increase(3000, 2500, 7)", "test4": "calculate_max_rent_increase(1000, 1200, 3.8)", "test5": "calculate_max_rent_increase(2000, 1800, 7)", "test6": "calculate_max_rent_increase(4000, 2200, 3.8)", "test7": "calculate_max_rent_increase(6000, 2800, 7)", "test8": "calculate_max_rent_increase(8000, 3000, 3.8)", "test9": "calculate_max_rent_increase(0, 3500, 7)", "test10": "calculate_max_rent_increase(9000, 3800, 3.8)"}, "hidden_information": "def calculate_max_rent_increase(renovation_cost, current_rent, gov_prescribed_increase): rent_increase = min(renovation_cost / 100 * current_rent, gov_prescribed_increase / 100 * current_rent); return current_rent + rent_increase"}
{"ground_truth": "def calculate_available_disk_space(total_disk_space, windows_partition_size, linux_partition_size, recovery_partition_size): return total_disk_space - (windows_partition_size + linux_partition_size + recovery_partition_size)", "problem_description": "Can you write a python function that calculates the available disk space on a laptop for both Windows and Linux operating systems, considering that a certain portion of the disk is reserved for a recovery partition?The signature of the function is: def calculate_available_disk_space(total_disk_space, windows_partition_size, linux_partition_size, recovery_partition_size)", "test_cases": {"test1": "calculate_available_disk_space(256, 128, 64, 16)", "test2": "calculate_available_disk_space(512, 256, 100, 20)", "test3": "calculate_available_disk_space(1024, 512, 200, 32)", "test4": "calculate_available_disk_space(2048, 1024, 400, 64)", "test5": "calculate_available_disk_space(4096, 2048, 800, 128)", "test6": "calculate_available_disk_space(256, 128, 64, 0)", "test7": "calculate_available_disk_space(512, 0, 100, 20)", "test8": "calculate_available_disk_space(1024, 512, 0, 32)", "test9": "calculate_available_disk_space(2048, 1024, 400, 0)", "test10": "calculate_available_disk_space(4096, 2048, 800, 128)"}, "hidden_information": "def calculate_available_disk_space(total_disk_space, windows_partition_size, linux_partition_size, recovery_partition_size): return total_disk_space - (windows_partition_size + linux_partition_size + recovery_partition_size)"}
{"ground_truth": "def categorize_clan_member(status):\n    if status == 'ovb':\n        return 'Member of the clan since the beginning'\n    elif status == 'ova':\n        return 'Friend or close friend/relative of an OVb'\n    elif status == 'ovg':\n        return 'Female member of the clan'\n    elif status == 'ovd':\n        return 'Ore Village Don'\n    else:\n        return 'Unknown status'", "problem_description": "Can you write a python function that takes in a status and categorizes a member of a certain clan? The clan has different types of members such as OVb, OVg, OVA, and OVD. I need this function to return the corresponding category of the member based on their status.The signature of the function is: def categorize_clan_member(status)", "test_cases": {"test1": "categorize_clan_member('ovb')", "test2": "categorize_clan_member('ova')", "test3": "categorize_clan_member('ovg')", "test4": "categorize_clan_member('ovd')", "test5": "categorize_clan_member('other')", "test6": "categorize_clan_member('OVb')", "test7": "categorize_clan_member('OVA')", "test8": "categorize_clan_member('OVg')", "test9": "categorize_clan_member('OvD')", "test10": "categorize_clan_member('invalid_status')"}, "hidden_information": "def categorize_clan_member(status):\n    if status == 'ovb':\n        return 'Member of the clan since the beginning'\n    elif status == 'ova':\n        return 'Friend or close friend/relative of an OVb'\n    elif status == 'ovg':\n        return 'Female member of the clan'\n    elif status == 'ovd':\n        return 'Ore Village Don'\n    else:\n        return 'Unknown status'"}
{"ground_truth": "def classify_bike(chainstay, wheelbase, wheel_spokes, tire_width, eyelets): \n    if chainstay >= 45 and wheelbase >= 105 and wheel_spokes >= 32 and tire_width >= 28 and eyelets: \n        return \"touring bike\"\n    else:\n        return \"speed/road bike\"", "problem_description": "I need help classifying a bike as either a touring or speed/road bike based on certain characteristics. I want the LLM agent to write a Python function that takes these characteristics as input and returns the bike type. Can you help me with this? I think the characteristics like chainstay length, wheelbase, wheel spokes, tire width, and presence of eyelets should be considered. But I'm not sure about the threshold values and how to combine them.The signature of the function is: def classify_bike(chainstay, wheelbase, wheel_spokes, tire_width, eyelets)", "test_cases": {"test1": "classify_bike(45, 105, 32, 28, True)", "test2": "classify_bike(40, 100, 28, 25, False)", "test3": "classify_bike(46, 110, 36, 30, True)", "test4": "classify_bike(42, 102, 30, 26, False)", "test5": "classify_bike(48, 115, 40, 32, True)", "test6": "classify_bike(38, 90, 24, 20, False)", "test7": "classify_bike(47, 112, 38, 31, True)", "test8": "classify_bike(43, 103, 32, 27, False)", "test9": "classify_bike(49, 117, 42, 33, True)", "test10": "classify_bike(39, 91, 26, 21, False)"}, "hidden_information": "def classify_bike(chainstay, wheelbase, wheel_spokes, tire_width, eyelets): \n    if chainstay >= 45 and wheelbase >= 105 and wheel_spokes >= 32 and tire_width >= 28 and eyelets: \n        return \"touring bike\"\n    else:\n        return \"speed/road bike\""}
{"ground_truth": "def predict_threats(eeg_data, pattern_threshold=0.5, alarm_threshold=0.8):\n    threats = []\n    for pattern in eeg_data:\n        if pattern['relevance'] > pattern_threshold:\n            if pattern['threat_level'] > alarm_threshold:\n                threats.append(pattern['threat'])\n    return threats", "problem_description": "I am trying to simulate a system like the one the Pentagon is developing to merge next-gen binoculars with soldiers' brains. I want you to write a python function that takes some input data about the soldier's brain activity and returns a list of potential threats that the soldier might not yet have time to process. Can you help me with that?The signature of the function is: def predict_threats(eeg_data, pattern_threshold=0.5, alarm_threshold=0.8)", "test_cases": {"test1": "predict_threats([{'threat': 'enemy_soldier', 'relevance': 0.6, 'threat_level': 0.9}, {'threat': 'landmine', 'relevance': 0.4, 'threat_level': 0.7}], pattern_threshold=0.5, alarm_threshold=0.8)", "test2": "predict_threats([{'threat': 'tank', 'relevance': 0.8, 'threat_level': 0.95}, {'threat': 'friendly_soldier', 'relevance': 0.3, 'threat_level': 0.1}], pattern_threshold=0.5, alarm_threshold=0.8)", "test3": "predict_threats([{'threat': 'sniper', 'relevance': 0.7, 'threat_level': 0.85}, {'threat': 'civilian', 'relevance': 0.2, 'threat_level': 0.05}], pattern_threshold=0.5, alarm_threshold=0.8)", "test4": "predict_threats([{'threat': 'grenade', 'relevance': 0.9, 'threat_level': 0.99}, {'threat': 'friendly_fire', 'relevance': 0.1, 'threat_level': 0.01}], pattern_threshold=0.5, alarm_threshold=0.8)", "test5": "predict_threats([{'threat': 'enemy_base', 'relevance': 0.6, 'threat_level': 0.8}, {'threat': 'abandoned_vehicle', 'relevance': 0.4, 'threat_level': 0.2}], pattern_threshold=0.5, alarm_threshold=0.8)", "test6": "predict_threats([{'threat': 'ambush', 'relevance': 0.8, 'threat_level': 0.95}, {'threat': 'trap', 'relevance': 0.3, 'threat_level': 0.1}], pattern_threshold=0.5, alarm_threshold=0.8)", "test7": "predict_threats([{'threat': 'missile', 'relevance': 0.7, 'threat_level': 0.85}, {'threat': ' friendly_artillery', 'relevance': 0.2, 'threat_level': 0.05}], pattern_threshold=0.5, alarm_threshold=0.8)", "test8": "predict_threats([{'threat': 'enemy_soldier', 'relevance': 0.9, 'threat_level': 0.99}, {'threat': 'civilians', 'relevance': 0.1, 'threat_level': 0.01}], pattern_threshold=0.5, alarm_threshold=0.8)", "test9": "predict_threats([{'threat': 'landmine', 'relevance': 0.6, 'threat_level': 0.8}, {'threat': ' debris', 'relevance': 0.4, 'threat_level': 0.2}], pattern_threshold=0.5, alarm_threshold=0.8)", "test10": "predict_threats([{'threat': 'sniper', 'relevance': 0.8, 'threat_level': 0.95}, {'threat': 'unidentified_object', 'relevance': 0.3, 'threat_level': 0.1}], pattern_threshold=0.5, alarm_threshold=0.8)"}, "hidden_information": "def predict_threats(eeg_data, pattern_threshold=0.5, alarm_threshold=0.8):\n    threats = []\n    for pattern in eeg_data:\n        if pattern['relevance'] > pattern_threshold:\n            if pattern['threat_level'] > alarm_threshold:\n                threats.append(pattern['threat'])\n    return threats"}
{"ground_truth": "def calculate_hydrofracking_cost(gallons_of_water_used, number_of_wells, cost_per_gallon, labor_cost_per_well, equipment_rental_cost_per_well, land_lease_cost):\n    total_water_cost = gallons_of_water_used * cost_per_gallon\n    total_labor_cost = number_of_wells * labor_cost_per_well\n    total_equipment_rental_cost = number_of_wells * equipment_rental_cost_per_well\n    total_land_lease_cost = land_lease_cost\n    return total_water_cost + total_labor_cost + total_equipment_rental_cost + total_land_lease_cost", "problem_description": "I want you to write a Python function that calculates the total cost of a hydrofracking operation. Can you do that for me?The signature of the function is: def calculate_hydrofracking_cost(gallons_of_water_used, number_of_wells, cost_per_gallon, labor_cost_per_well, equipment_rental_cost_per_well, land_lease_cost)", "test_cases": {"test1": "calculate_hydrofracking_cost(1000000, 1, 0.1, 50000, 30000, 100000)", "test2": "calculate_hydrofracking_cost(2000000, 2, 0.2, 75000, 80000, 200000)", "test3": "calculate_hydrofracking_cost(1500000, 3, 0.15, 60000, 70000, 300000)", "test4": "calculate_hydrofracking_cost(2500000, 1, 0.25, 50000, 30000, 150000)", "test5": "calculate_hydrofracking_cost(500000, 2, 0.05, 75000, 80000, 100000)", "test6": "calculate_hydrofracking_cost(1800000, 3, 0.12, 60000, 70000, 250000)", "test7": "calculate_hydrofracking_cost(1200000, 1, 0.1, 50000, 30000, 120000)", "test8": "calculate_hydrofracking_cost(2200000, 2, 0.22, 75000, 80000, 220000)", "test9": "calculate_hydrofracking_cost(1600000, 3, 0.16, 60000, 70000, 320000)", "test10": "calculate_hydrofracking_cost(2800000, 1, 0.28, 50000, 30000, 180000)"}, "hidden_information": "def calculate_hydrofracking_cost(gallons_of_water_used, number_of_wells, cost_per_gallon, labor_cost_per_well, equipment_rental_cost_per_well, land_lease_cost):\n    total_water_cost = gallons_of_water_used * cost_per_gallon\n    total_labor_cost = number_of_wells * labor_cost_per_well\n    total_equipment_rental_cost = number_of_wells * equipment_rental_cost_per_well\n    total_land_lease_cost = land_lease_cost\n    return total_water_cost + total_labor_cost + total_equipment_rental_cost + total_land_lease_cost"}
{"ground_truth": "def estimate_download_time(file_size, distance_to_server, network_speed):\n    return (file_size * distance_to_server) / network_speed", "problem_description": "I'm having trouble watching videos on Youku and Baidu from overseas. Can you write a Python function that estimates how long it will take to download a video based on the file size, distance to the server, and network speed?The signature of the function is: def estimate_download_time(file_size, distance_to_server, network_speed)", "test_cases": {"test1": "estimate_download_time(1000, 5000, 10)", "test2": "estimate_download_time(500, 2000, 20)", "test3": "estimate_download_time(2000, 8000, 5)", "test4": "estimate_download_time(1500, 3000, 15)", "test5": "estimate_download_time(1200, 6000, 12)", "test6": "estimate_download_time(3000, 9000, 8)", "test7": "estimate_download_time(2500, 4000, 18)", "test8": "estimate_download_time(1800, 7000, 10)", "test9": "estimate_download_time(2200, 5500, 14)", "test10": "estimate_download_time(2800, 8500, 6)"}, "hidden_information": "def estimate_download_time(file_size, distance_to_server, network_speed):\n    return (file_size * distance_to_server) / network_speed"}
{"ground_truth": "def classify_cookbooks(cookbooks, keep_criteria):\n    classification = {}\n    for book in cookbooks:\n        classification[book['title']] = any(book.get(criteria) for criteria in keep_criteria)\n    return classification", "problem_description": "I need a python function that can help me decide which cookbooks to keep or discard. I have a list of cookbooks with their attributes such as title, author, publication year, recipes, and awards. I want the function to classify the cookbooks based on certain criteria such as presence of specific recipes, awards, or publication year. The function should take the list of cookbooks and the criteria as input and return a dictionary where the keys are the cookbook titles and the values are boolean indicating whether the cookbook meets the criteria.The signature of the function is: def classify_cookbooks(cookbooks, keep_criteria)", "test_cases": {"test1": "classify_cookbooks([{'title': 'Cookbook 1', 'recipes': ['Recipe 1', 'Recipe 2'], 'awards': ['Award 1']}, {'title': 'Cookbook 2', 'recipes': ['Recipe 3'], 'awards': []}], ['Recipe 1', 'Award 1'])", "test2": "classify_cookbooks([{'title': 'Cookbook 3', 'recipes': ['Recipe 4'], 'publication_year': 2010}, {'title': 'Cookbook 4', 'recipes': ['Recipe 5'], 'publication_year': 2005}], ['Recipe 4', '2005'])", "test3": "classify_cookbooks([{'title': 'Cookbook 5', 'recipes': ['Recipe 6', 'Recipe 7'], 'author': 'Author 1'}, {'title': 'Cookbook 6', 'recipes': ['Recipe 8'], 'author': 'Author 2'}], ['Author 1', 'Recipe 7'])", "test4": "classify_cookbooks([{'title': 'Cookbook 7', 'recipes': ['Recipe 9'], 'awards': ['Award 2']}, {'title': 'Cookbook 8', 'recipes': [], 'awards': ['Award 3']}], ['Award 2'])", "test5": "classify_cookbooks([{'title': 'Cookbook 9', 'recipes': ['Recipe 10'], 'publication_year': 2000}, {'title': 'Cookbook 10', 'recipes': ['Recipe 11'], 'publication_year': 1999}], ['2000'])", "test6": "classify_cookbooks([{'title': 'Cookbook 11', 'recipes': ['Recipe 12', 'Recipe 13'], 'author': 'Author 3'}, {'title': 'Cookbook 12', 'recipes': ['Recipe 14'], 'author': 'Author 4'}], ['Author 3', 'Recipe 13'])", "test7": "classify_cookbooks([{'title': 'Cookbook 13', 'recipes': ['Recipe 15'], 'awards': ['Award 4']}, {'title': 'Cookbook 14', 'recipes': [], 'awards': ['Award 5']}], ['Award 4'])", "test8": "classify_cookbooks([{'title': 'Cookbook 15', 'recipes': ['Recipe 16'], 'publication_year': 2001}, {'title': 'Cookbook 16', 'recipes': ['Recipe 17'], 'publication_year': 2002}], ['2001'])", "test9": "classify_cookbooks([{'title': 'Cookbook 17', 'recipes': ['Recipe 18'], 'author': 'Author 5'}, {'title': 'Cookbook 18', 'recipes': ['Recipe 19'], 'author': 'Author 6'}], ['Author 5'])", "test10": "classify_cookbooks([{'title': 'Cookbook 19', 'recipes': ['Recipe 20'], 'awards': ['Award 6']}, {'title': 'Cookbook 20', 'recipes': [], 'awards': ['Award 7']}], ['Award 6'])"}, "hidden_information": "def classify_cookbooks(cookbooks, keep_criteria):\n    classification = {}\n    for book in cookbooks:\n        classification[book['title']] = any(book.get(criteria) for criteria in keep_criteria)\n    return classification"}
{"ground_truth": "def classify_food(user_rating, tolerance_level, food_rating):\n    if user_rating - tolerance_level <= food_rating:\n        return 'enjoyable'\n    else:\n        return 'not enjoyable'", "problem_description": "I want the agent to write a python function that can tell if someone will enjoy a food or not, even if it's bad. I love burritos no matter what, but some people can't stand bad-tasting ones. Can the agent come up with a function that considers someone's love for food and their tolerance level?The signature of the function is: def classify_food(user_rating, tolerance_level, food_rating)", "test_cases": {"test1": "classify_food(8, 2, 6)", "test2": "classify_food(4, 1, 3)", "test3": "classify_food(9, 3, 5)", "test4": "classify_food(6, 2, 8)", "test5": "classify_food(5, 1, 4)", "test6": "classify_food(7, 3, 9)", "test7": "classify_food(3, 2, 1)", "test8": "classify_food(9, 2, 7)", "test9": "classify_food(1, 1, 2)", "test10": "classify_food(6, 3, 4)"}, "hidden_information": "def classify_food(user_rating, tolerance_level, food_rating):\n    if user_rating - tolerance_level <= food_rating:\n        return 'enjoyable'\n    else:\n        return 'not enjoyable'"}
{"ground_truth": "def calculate_brining_time(turkey_weight, recipe_hours_range, hour_per_pound=False):\n    if hour_per_pound:\n        return max(recipe_hours_range[0], turkey_weight)\n    else:\n        return recipe_hours_range[0] + (turkey_weight - 16) / 2", "problem_description": "I want a Python function that calculates the brining time for my turkey. I was thinking of using Alton Brown's brine recipe, but I'm not sure if I should adjust the brining time since my turkey is heavier than the recipe calls for.The signature of the function is: def calculate_brining_time(turkey_weight, recipe_hours_range, hour_per_pound=False)", "test_cases": {"test1": "calculate_brining_time(18, [8, 16])", "test2": "calculate_brining_time(16, [8, 16])", "test3": "calculate_brining_time(20, [8, 16])", "test4": "calculate_brining_time(18, [8, 16], True)", "test5": "calculate_brining_time(16, [8, 16], True)", "test6": "calculate_brining_time(20, [8, 16], True)", "test7": "calculate_brining_time(15, [8, 16])", "test8": "calculate_brining_time(15, [8, 16], True)", "test9": "calculate_brining_time(25, [8, 16])", "test10": "calculate_brining_time(25, [8, 16], True)"}, "hidden_information": "def calculate_brining_time(turkey_weight, recipe_hours_range, hour_per_pound=False):\n    if hour_per_pound:\n        return max(recipe_hours_range[0], turkey_weight)\n    else:\n        return recipe_hours_range[0] + (turkey_weight - 16) / 2"}
{"ground_truth": "def calculate_wok_durability(wok_type, wok_material, wok_bottom_type, wok_thickness, wok_price): \n    durability_score = 0\n    if wok_type == 'carbon steel':\n        durability_score += 5\n    if wok_material == 'steel':\n        durability_score += 3\n    if wok_bottom_type == 'round':\n        durability_score += 2\n    if wok_thickness > 3:\n        durability_score += 1\n    if wok_price < 50:\n        durability_score -= 2\n    return durability_score", "problem_description": "Write a Python function to help me determine the durability of a wok based on its characteristics. I want to know if it's worth buying a cheap one, but I don't know what factors to consider.The signature of the function is: def calculate_wok_durability(wok_type, wok_material, wok_bottom_type, wok_thickness, wok_price)", "test_cases": {"test1": "calculate_wok_durability('carbon steel', 'steel', 'round', 4, 30)", "test2": "calculate_wok_durability('nonstick', 'aluminum', 'flat', 2, 20)", "test3": "calculate_wok_durability('cast iron', 'iron', 'round', 5, 40)", "test4": "calculate_wok_durability('stainless steel', 'stainless steel', 'flat', 3, 60)", "test5": "calculate_wok_durability('carbon steel', 'steel', 'round', 4, 80)", "test6": "calculate_wok_durability('copper', 'copper', 'flat', 2, 100)", "test7": "calculate_wok_durability('cast iron', 'iron', 'round', 5, 50)", "test8": "calculate_wok_durability('nonstick', 'aluminum', 'flat', 2, 30)", "test9": "calculate_wok_durability('stainless steel', 'stainless steel', 'round', 3, 40)", "test10": "calculate_wok_durability('carbon steel', 'steel', 'flat', 4, 20)"}, "hidden_information": "def calculate_wok_durability(wok_type, wok_material, wok_bottom_type, wok_thickness, wok_price): \n    durability_score = 0\n    if wok_type == 'carbon steel':\n        durability_score += 5\n    if wok_material == 'steel':\n        durability_score += 3\n    if wok_bottom_type == 'round':\n        durability_score += 2\n    if wok_thickness > 3:\n        durability_score += 1\n    if wok_price < 50:\n        durability_score -= 2\n    return durability_score"}
{"ground_truth": "def is_fine_dining(restaurantMetrics):\n    if restaurantMetrics['service'] > 4 and restaurantMetrics['ambience'] > 4 and restaurantMetrics['foodQuality'] > 4 and restaurantMetrics['overallExperience'] > 4:\n        return True\n    else:\n        return False", "problem_description": "I want you to write a python function that determines whether a given restaurant is a fine dining restaurant or not. Define fine dining based on certain criteria and use that definition to write your function.The signature of the function is: def is_fine_dining(restaurantMetrics)", "test_cases": {"test1": "is_fine_dining({'service': 5, 'ambience': 5, 'foodQuality': 5, 'overallExperience': 5})", "test2": "is_fine_dining({'service': 4, 'ambience': 4, 'foodQuality': 4, 'overallExperience': 4})", "test3": "is_fine_dining({'service': 3, 'ambience': 3, 'foodQuality': 3, 'overallExperience': 3})", "test4": "is_fine_dining({'service': 5, 'ambience': 5, 'foodQuality': 3, 'overallExperience': 5})", "test5": "is_fine_dining({'service': 5, 'ambience': 5, 'foodQuality': 5, 'overallExperience': 3})", "test6": "is_fine_dining({'service': 4, 'ambience': 4, 'foodQuality': 4, 'overallExperience': 3})", "test7": "is_fine_dining({'service': 3, 'ambience': 3, 'foodQuality': 4, 'overallExperience': 4})", "test8": "is_fine_dining({'service': 5, 'ambience': 3, 'foodQuality': 4, 'overallExperience': 5})", "test9": "is_fine_dining({'service': 3, 'ambience': 5, 'foodQuality': 4, 'overallExperience': 5})", "test10": "is_fine_dining({'service': 4, 'ambience': 4, 'foodQuality': 4, 'overallExperience': 4})"}, "hidden_information": "def is_fine_dining(restaurantMetrics):\n    if restaurantMetrics['service'] > 4 and restaurantMetrics['ambience'] > 4 and restaurantMetrics['foodQuality'] > 4 and restaurantMetrics['overallExperience'] > 4:\n        return True\n    else:\n        return False"}
{"ground_truth": "def get_etiquette_advice(situation):\n    advice = {\n        'wedding_cancelation': 'Mail cards to everyone stating the marriage has been canceled and return gifts with thank-you notes.',\n        'private_space': 'Always knock on a closed door, including dressing rooms, bathrooms, bedrooms, or front doors.',\n        'guide_dog': 'Do not pet a guide dog as it may distract it from its owner.',\n        'dutch_treat': 'Inform guests beforehand that they will be responsible for their own bills.'\n    }\n    if situation in advice:\n        return advice[situation]\n    else:\n        return 'Unknown etiquette advice'\n", "problem_description": "Hi agent, I need your help in writing a Python function that provides etiquette advice based on certain situations. The function should take a situation as input and return the corresponding etiquette advice. Can you help me write this function?The signature of the function is: def get_etiquette_advice(situation)", "test_cases": {"test1": "get_etiquette_advice('wedding_cancelation')", "test2": "get_etiquette_advice('private_space')", "test3": "get_etiquette_advice('guide_dog')", "test4": "get_etiquette_advice('dutch_treat')", "test5": "get_etiquette_advice('unknown_situation')", "test6": "get_etiquette_advice('')", "test7": "get_etiquette_advice(None)", "test8": "get_etiquette_advice('  ')", "test9": "get_etiquette_advice(' wedding_cancelation ')", "test10": "get_etiquette_advice(' private space ')"}, "hidden_information": "def get_etiquette_advice(situation):\n    advice = {\n        'wedding_cancelation': 'Mail cards to everyone stating the marriage has been canceled and return gifts with thank-you notes.',\n        'private_space': 'Always knock on a closed door, including dressing rooms, bathrooms, bedrooms, or front doors.',\n        'guide_dog': 'Do not pet a guide dog as it may distract it from its owner.',\n        'dutch_treat': 'Inform guests beforehand that they will be responsible for their own bills.'\n    }\n    if situation in advice:\n        return advice[situation]\n    else:\n        return 'Unknown etiquette advice'\n"}
{"ground_truth": "def calculate_days_without_sleep(food_days, water_days, sleep_days):\n    if sleep_days >= 7:\n        return 0\n    elif food_days >= 40 and water_days >= 7 and sleep_days <= 6:\n        return 7 - sleep_days\n    else:\n        return 0", "problem_description": "I want the agent to create a python function that determines the number of days a man can survive without sleep based on the number of days he has gone without food and water. The agent needs to collaborate with me to determine the logic and constraints of the function.The signature of the function is: def calculate_days_without_sleep(food_days, water_days, sleep_days)", "test_cases": {"test1": "calculate_days_without_sleep(20, 3, 1)", "test2": "calculate_days_without_sleep(50, 5, 2)", "test3": "calculate_days_without_sleep(30, 6, 0)", "test4": "calculate_days_without_sleep(40, 7, 7)", "test5": "calculate_days_without_sleep(15, 4, 10)", "test6": "calculate_days_without_sleep(0, 0, 5)", "test7": "calculate_days_without_sleep(60, 10, 3)", "test8": "calculate_days_without_sleep(20, 5, 6)", "test9": "calculate_days_without_sleep(35, 8, 4)", "test10": "calculate_days_without_sleep(25, 4, 7)"}, "hidden_information": "def calculate_days_without_sleep(food_days, water_days, sleep_days):\n    if sleep_days >= 7:\n        return 0\n    elif food_days >= 40 and water_days >= 7 and sleep_days <= 6:\n        return 7 - sleep_days\n    else:\n        return 0"}
{"ground_truth": "def get_most_active_employees(login_history, num_employees=5):\n    employee_activity = {}\n    for employee, logins in login_history.items():\n        employee_activity[employee] = len(logins)\n    sorted_activity = sorted(employee_activity.items(), key=lambda x: x[1], reverse=True)\n    return [employee for employee, _ in sorted_activity[:num_employees]]", "problem_description": "I'm a developer who builds education systems and I want to implement an alerting system to check the top employees or students who are active on our intranet portal. Can you write a Python function to help me determine the most active employees based on their login history?The signature of the function is: def get_most_active_employees(login_history, num_employees=5)", "test_cases": {"test1": "get_most_active_employees({'John': [1,2,3,4,5], 'Alice': [6,7,8], 'Bob': [1,2,3], 'Charlie': [1,2,3,4,5,6,7]})", "test2": "get_most_active_employees({'John': [1,2,3], 'Alice': [6,7,8], 'Bob': [1,2,3], 'Charlie': [1,2,3,4,5,6]}, 2)", "test3": "get_most_active_employees({'John': [1,2,3], 'Alice': [6,7,8], 'Bob': [1,2,3], 'Charlie': [1,2,3,4,5,6,7]}, 0)", "test4": "get_most_active_employees({'John': [1,2,3], 'Alice': [1,2,3], 'Bob': [1,2,3,4,5,6,7,8,9], 'Charlie': [1,2,3]})", "test5": "get_most_active_employees({'John': [1,2,3], 'Alice': [6,7,8], 'Bob': [1,2,3,4], 'Charlie': [1,2,3,4,5,6,7,8,9,10]})", "test6": "get_most_active_employees({'John': [1,2,3], 'Alice': [1,2,3], 'Bob': [1,2,3,4,5,6,7,8], 'Charlie': [1,2,3,4,5,6,7,8,9,10, 11]})", "test7": "get_most_active_employees({'John': [1,2,3], 'Alice': [1,2,3, 4, 5], 'Bob': [1,2,3,4], 'Charlie': [1,2,3,4,5,6,7,8,9,10, 11, 12]})", "test8": "get_most_active_employees({'John': [1,2,3], 'Alice': [1,2,3], 'Bob': [1,2,3,4], 'Charlie': [1,2,3,4,5,6,7,8,9,10, 11,12, 13]})", "test9": "get_most_active_employees({'John': [1,2,3], 'Alice': [1,2,3, 4], 'Bob': [1,2,3,4], 'Charlie': [1,2,3,4,5,6,7,8,9,10, 11, 12, 13, 14]})", "test10": "get_most_active_employees({'John': [1,2,3, 4], 'Alice': [1,2,3, 4], 'Bob': [1,2,3,4, 5], 'Charlie': [1,2,3,4,5,6,7,8,9,10, 11, 12, 13, 14, 15]})"}, "hidden_information": "def get_most_active_employees(login_history, num_employees=5):\n    employee_activity = {}\n    for employee, logins in login_history.items():\n        employee_activity[employee] = len(logins)\n    sorted_activity = sorted(employee_activity.items(), key=lambda x: x[1], reverse=True)\n    return [employee for employee, _ in sorted_activity[:num_employees]]"}
{"ground_truth": "def check_bracket_winnings(brackets, actual_outcomes, num_winner_places, winnings_per_place):\n    for bracket in brackets:\n        if bracket['champion'] is None:\n            return False\n    scores = []\n    for bracket in brackets:\n        correct_predictions = sum([bracket['predictions'][i] == actual_outcomes[i] for i in range(len(actual_outcomes))])\n        if correct_predictions == len(actual_outcomes) and bracket['champion'] in actual_outcomes:\n            return True\n    return False", "problem_description": "Hi agent, I'm trying to simulate some possible outcomes for a sports tournament to see if I would have won any money with some of my bracket submissions. I have multiple brackets where I made predictions for some of the games, but I forgot to predict the champion in some of them. Can you write a python function that will check these brackets and tell me if I would have won any money if I had made all the correct predictions?The signature of the function is: def check_bracket_winnings(brackets, actual_outcomes, num_winner_places, winnings_per_place)", "test_cases": {"test1": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'loser'], 'champion': None}], ['winner', 'winner', 'winner'], 10, 10000)", "test2": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test3": "check_bracket_winnings([{'predictions': ['winner', 'loser', 'winner'], 'champion': 'loser'}], ['winner', 'winner', 'winner'], 10, 10000)", "test4": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'loser'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test5": "check_bracket_winnings([{'predictions': ['winner', 'loser', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test6": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': None}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test7": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'loser'], 10, 10000)", "test8": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'loser', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test9": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)", "test10": "check_bracket_winnings([{'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}, {'predictions': ['winner', 'winner', 'winner'], 'champion': 'winner'}], ['winner', 'winner', 'winner'], 10, 10000)"}, "hidden_information": "def check_bracket_winnings(brackets, actual_outcomes, num_winner_places, winnings_per_place):\n    for bracket in brackets:\n        if bracket['champion'] is None:\n            return False\n    scores = []\n    for bracket in brackets:\n        correct_predictions = sum([bracket['predictions'][i] == actual_outcomes[i] for i in range(len(actual_outcomes))])\n        if correct_predictions == len(actual_outcomes) and bracket['champion'] in actual_outcomes:\n            return True\n    return False"}
{"ground_truth": "def calculate_playstation_plus_cost(months, cost_per_month, year_cost, months_in_year, discount=None):\n    if discount is not None:\n        total_months = max(months, months_in_year)\n        return total_months * cost_per_month * (1 - discount)\n    elif months <= months_in_year:\n        return min(months * cost_per_month, year_cost)\n    else:\n        full_years = months // months_in_year\n        remaining_months = months % months_in_year\n        return full_years * year_cost + remaining_months * cost_per_month\n", "problem_description": "I want to calculate the total cost of purchasing PlayStation Plus cards for a given number of months. Can you write a Python function that takes into account the cost per month, the option to buy a year's subscription at a discounted rate, and any potential discounts or promotions?The signature of the function is: def calculate_playstation_plus_cost(months, cost_per_month, year_cost, months_in_year, discount=None)", "test_cases": {"test1": "calculate_playstation_plus_cost(1, 3.99, 59.99, 12)", "test2": "calculate_playstation_plus_cost(5, 3.99, 59.99, 12)", "test3": "calculate_playstation_plus_cost(12, 3.99, 59.99, 12)", "test4": "calculate_playstation_plus_cost(24, 3.99, 59.99, 12)", "test5": "calculate_playstation_plus_cost(1, 3.99, 59.99, 12, discount=0.1)", "test6": "calculate_playstation_plus_cost(2, 3.99, 59.99, 12, discount=0.05)", "test7": "calculate_playstation_plus_cost(13, 3.99, 59.99, 12)", "test8": "calculate_playstation_plus_cost(0, 3.99, 59.99, 12)", "test9": "calculate_playstation_plus_cost(-5, 3.99, 59.99, 12)", "test10": "calculate_playstation_plus_cost(12, 2.99, 49.99, 12, discount=0.1)"}, "hidden_information": "def calculate_playstation_plus_cost(months, cost_per_month, year_cost, months_in_year, discount=None):\n    if discount is not None:\n        total_months = max(months, months_in_year)\n        return total_months * cost_per_month * (1 - discount)\n    elif months <= months_in_year:\n        return min(months * cost_per_month, year_cost)\n    else:\n        full_years = months // months_in_year\n        remaining_months = months % months_in_year\n        return full_years * year_cost + remaining_months * cost_per_month\n"}
{"ground_truth": "def assign_teachers(teachers, schools, subjects, difficulties):\n    assigned_teachers = {}\n    for school in schools:\n        assigned_teachers[school] = []\n        for subject in subjects:\n            if len(teachers) > 0:\n                closest_teacher = min(teachers, key=lambda x: abs(x['difficulty'] - difficulties[school]))\n                assigned_teachers[school].append((subject, closest_teacher['name']))\n                teachers.remove(closest_teacher)\n    return assigned_teachers", "problem_description": "Write a Python function that assigns teachers to schools based on their teaching subject and the school's subject difficulty level. The function should take in a list of teachers, schools, subjects, and a dictionary mapping schools to their difficulty levels. The function should return a dictionary where the keys are the school names and the values are lists of tuples containing the subject and the assigned teacher's name. The function should prioritize assigning teachers to schools with difficulty levels closest to their own teaching difficulty level.The signature of the function is: def assign_teachers(teachers, schools, subjects, difficulties)", "test_cases": {"test1": "assign_teachers([{'name': 'John', 'difficulty': 3}, {'name': 'Alice', 'difficulty': 5}], ['School A', 'School B'], ['Math', 'Science'], {'School A': 4, 'School B': 2})", "test2": "assign_teachers([{'name': 'Bob', 'difficulty': 2}, {'name': 'Charlie', 'difficulty': 6}], ['School C', 'School D'], ['English', 'History'], {'School C': 3, 'School D': 5})", "test3": "assign_teachers([{'name': 'David', 'difficulty': 1}, {'name': 'Eva', 'difficulty': 7}], ['School E', 'School F'], ['Geography', 'Music'], {'School E': 2, 'School F': 6})", "test4": "assign_teachers([{'name': 'Frank', 'difficulty': 4}, {'name': 'Gina', 'difficulty': 8}], ['School G', 'School H'], ['Art', 'PE'], {'School G': 5, 'School H': 7})", "test5": "assign_teachers([{'name': 'Hank', 'difficulty': 0}, {'name': 'Ivy', 'difficulty': 9}], ['School I', 'School J'], ['Drama', 'Foreign Language'], {'School I': 1, 'School J': 8})", "test6": "assign_teachers([{'name': 'Jim', 'difficulty': 10}, {'name': 'Kate', 'difficulty': 2}], ['School K', 'School L'], ['Biology', 'Chemistry'], {'School K': 9, 'School L': 3})", "test7": "assign_teachers([{'name': 'Lucy', 'difficulty': 6}, {'name': 'Mike', 'difficulty': 4}], ['School M', 'School N'], ['Computing', 'Philosophy'], {'School M': 7, 'School N': 5})", "test8": "assign_teachers([{'name': 'Nancy', 'difficulty': 8}, {'name': 'Owen', 'difficulty': 0}], ['School O', 'School P'], ['Engineering', 'Nursing'], {'School O': 9, 'School P': 1})", "test9": "assign_teachers([{'name': 'Pam', 'difficulty': 3}, {'name': 'Quincy', 'difficulty': 7}], ['School Q', 'School R'], ['Psychology', 'Anthropology'], {'School Q': 4, 'School R': 8})", "test10": "assign_teachers([{'name': 'Ralph', 'difficulty': 5}, {'name': 'Sue', 'difficulty': 1}], ['School S', 'School T'], ['Sociology', 'Statistics'], {'School S': 6, 'School T': 2})"}, "hidden_information": "def assign_teachers(teachers, schools, subjects, difficulties):\n    assigned_teachers = {}\n    for school in schools:\n        assigned_teachers[school] = []\n        for subject in subjects:\n            if len(teachers) > 0:\n                closest_teacher = min(teachers, key=lambda x: abs(x['difficulty'] - difficulties[school]))\n                assigned_teachers[school].append((subject, closest_teacher['name']))\n                teachers.remove(closest_teacher)\n    return assigned_teachers"}
{"ground_truth": "def organize_artists(artists, search_name=None, start_year=None, end_year=None):\n    filtered_artists = artists\n    if search_name:\n        filtered_artists = [artist for artist in filtered_artists if search_name in artist['name']]\n    if start_year:\n        filtered_artists = [artist for artist in filtered_artists if artist['birth_year'] >= start_year]\n    if end_year:\n        filtered_artists = [artist for artist in filtered_artists if artist['death_year'] <= end_year]\n    return filtered_artists", "problem_description": "I need help creating a Python function to organize a list of artists. The list contains dictionaries with the artist's name, birth year, death year, and most famous work. I want to be able to filter the list by name, birth year range, and death year range. Can you help me write a function that can do this?The signature of the function is: def organize_artists(artists, search_name=None, start_year=None, end_year=None)", "test_cases": {"test1": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}, {'name': 'Edward Burne-Jones', 'birth_year': 1833, 'death_year': 1898, 'famous_work': 'Laus Veneris'}], 'Burne-Jones')", "test2": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}, {'name': 'Edward Burne-Jones', 'birth_year': 1833, 'death_year': 1898, 'famous_work': 'Laus Veneris'}], start_year=1800)", "test3": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}, {'name': 'Edward Burne-Jones', 'birth_year': 1833, 'death_year': 1898, 'famous_work': 'Laus Veneris'}], end_year=1900)", "test4": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}, {'name': 'Edward Burne-Jones', 'birth_year': 1833, 'death_year': 1898, 'famous_work': 'Laus Veneris'}], start_year=1850, end_year=1910)", "test5": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}, {'name': 'Edward Burne-Jones', 'birth_year': 1833, 'death_year': 1898, 'famous_work': 'Laus Veneris'}], search_name='Burne-Jones', start_year=1800, end_year=1920)", "test6": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}])", "test7": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}], search_name='Burne-Jones')", "test8": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}], start_year=1850)", "test9": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}], end_year=1920)", "test10": "organize_artists([{'name': 'Philip Burne-Jones', 'birth_year': 1861, 'death_year': 1926, 'famous_work': 'The Vampire'}], start_year=1850, end_year=1920)"}, "hidden_information": "def organize_artists(artists, search_name=None, start_year=None, end_year=None):\n    filtered_artists = artists\n    if search_name:\n        filtered_artists = [artist for artist in filtered_artists if search_name in artist['name']]\n    if start_year:\n        filtered_artists = [artist for artist in filtered_artists if artist['birth_year'] >= start_year]\n    if end_year:\n        filtered_artists = [artist for artist in filtered_artists if artist['death_year'] <= end_year]\n    return filtered_artists"}
{"ground_truth": "def procedural_default(state_procedural_rules_met, federal_claim_presented, cause_and_prejudice_shown):\n    if not state_procedural_rules_met and not cause_and_prejudice_shown:\n        return 'Barred'\n    elif not state_procedural_rules_met and cause_and_prejudice_shown:\n        return 'Not Barred'\n    else:\n        return 'Allowed'", "problem_description": "Can you write a python function to determine if a state prisoner's petition is barred due to procedural default. The function should take into account if the prisoner followed the state procedural rules, presented their federal claim, and if they can show cause and prejudice. The function should return 'Barred', 'Not Barred', or 'Allowed' based on these conditions.The signature of the function is: def procedural_default(state_procedural_rules_met, federal_claim_presented, cause_and_prejudice_shown)", "test_cases": {"test1": "procedural_default(True, True, False)", "test2": "procedural_default(False, False, False)", "test3": "procedural_default(False, True, True)", "test4": "procedural_default(True, False, False)", "test5": "procedural_default(False, False, True)", "test6": "procedural_default(True, True, True)", "test7": "procedural_default(False, True, False)", "test8": "procedural_default(True, False, True)", "test9": "procedural_default(False, False, False)", "test10": "procedural_default(True, False, False)"}, "hidden_information": "def procedural_default(state_procedural_rules_met, federal_claim_presented, cause_and_prejudice_shown):\n    if not state_procedural_rules_met and not cause_and_prejudice_shown:\n        return 'Barred'\n    elif not state_procedural_rules_met and cause_and_prejudice_shown:\n        return 'Not Barred'\n    else:\n        return 'Allowed'"}
{"ground_truth": "def mix_colors(pigments, proportions):\n    # Color mixing formulas\n    R = sum([pigments[i]['R'] * proportions[i] for i in range(len(pigments))])\n    G = sum([pigments[i]['G'] * proportions[i] for i in range(len(pigments))])\n    B = sum([pigments[i]['B'] * proportions[i] for i in range(len(pigments))])\n    return (R, G, B)", "problem_description": "I'm an artist and I'm looking for a way to mix colors using Sennelier pigments. Can you write a Python function that takes a list of pigments and their proportions and returns the resulting color? I want to be able to use this function to create custom colors for my paintings.The signature of the function is: def mix_colors(pigments, proportions)", "test_cases": {"test1": "mix_colors([{'R': 255, 'G': 0, 'B': 0}, {'R': 0, 'G': 255, 'B': 0}], [0.5, 0.5])", "test2": "mix_colors([{'R': 255, 'G': 255, 'B': 255}, {'R': 0, 'G': 0, 'B': 0}], [0.3, 0.7])", "test3": "mix_colors([{'R': 255, 'G': 0, 'B': 0}, {'R': 0, 'G': 255, 'B': 0}, {'R': 0, 'G': 0, 'B': 255}], [0.33, 0.33, 0.34])", "test4": "mix_colors([{'R': 128, 'G': 128, 'B': 128}, {'R': 255, 'G': 255, 'B': 255}], [0.2, 0.8])", "test5": "mix_colors([{'R': 255, 'G': 255, 'B': 0}, {'R': 0, 'G': 255, 'B': 255}], [0.6, 0.4])", "test6": "mix_colors([{'R': 255, 'G': 0, 'B': 255}, {'R': 0, 'G': 255, 'B': 0}], [0.5, 0.5])", "test7": "mix_colors([{'R': 128, 'G': 0, 'B': 128}, {'R': 0, 'G': 128, 'B': 128}], [0.4, 0.6])", "test8": "mix_colors([{'R': 255, 'G': 128, 'B': 0}, {'R': 0, 'G': 0, 'B': 255}], [0.7, 0.3])", "test9": "mix_colors([{'R': 0, 'G': 255, 'B': 255}, {'R': 128, 'G': 0, 'B': 128}], [0.9, 0.1])", "test10": "mix_colors([{'R': 255, 'G': 0, 'B': 0}, {'R': 0, 'G': 255, 'B': 0}, {'R': 0, 'G': 0, 'B': 255}], [0.2, 0.3, 0.5])"}, "hidden_information": "def mix_colors(pigments, proportions):\n    # Color mixing formulas\n    R = sum([pigments[i]['R'] * proportions[i] for i in range(len(pigments))])\n    G = sum([pigments[i]['G'] * proportions[i] for i in range(len(pigments))])\n    B = sum([pigments[i]['B'] * proportions[i] for i in range(len(pigments))])\n    return (R, G, B)"}
{"ground_truth": "def calculate_drag_induced_by_skid(speed, roll_angle, yaw_angle):\n    # assuming standard aerodynamic models\n    drag = 0.01 * (speed ** 2) * (abs(roll_angle) + abs(yaw_angle))\n    return drag", "problem_description": "Hi, I'm trying to model the aerodynamics of an airplane in flight. Can you write a Python function that calculates the drag induced by a skid? I want to understand the impact of rudder application and roll angle on an airplane's flight path.The signature of the function is: def calculate_drag_induced_by_skid(speed, roll_angle, yaw_angle)", "test_cases": {"test1": "calculate_drag_induced_by_skid(100, 10, 5)", "test2": "calculate_drag_induced_by_skid(200, 5, 0)", "test3": "calculate_drag_induced_by_skid(50, 0, 10)", "test4": "calculate_drag_induced_by_skid(150, 15, 3)", "test5": "calculate_drag_induced_by_skid(250, 20, 2)", "test6": "calculate_drag_induced_by_skid(300, 10, 15)", "test7": "calculate_drag_induced_by_skid(75, 0, 5)", "test8": "calculate_drag_induced_by_skid(120, 12, 4)", "test9": "calculate_drag_induced_by_skid(180, 8, 6)", "test10": "calculate_drag_induced_by_skid(220, 18, 1)"}, "hidden_information": "def calculate_drag_induced_by_skid(speed, roll_angle, yaw_angle):\n    # assuming standard aerodynamic models\n    drag = 0.01 * (speed ** 2) * (abs(roll_angle) + abs(yaw_angle))\n    return drag"}
{"ground_truth": "def is_deceptively_simple(description):\n    # Assuming that the descriptions of deceptively simple things contain the word 'simple' or 'easily'\n    if 'simple' in description or 'easily' in description:\n        return True\n    return False", "problem_description": "Hi agent, I want you to write a Python function that identifies if a given description of something in life is 'deceptively simple', which means that something looks straightforward but is actually complex. This is not a straightforward task, can you help?The signature of the function is: def is_deceptively_simple(description)", "test_cases": {"simple_description": "is_deceptively_simple(\"The puzzle was simple to solve\")", "complex_description": "is_deceptively_simple(\"Understanding quantum physics can be challenging\")", "neutral_description": "is_deceptively_simple(\"Learning a new language requires practice\")", "misleading_description1": "is_deceptively_simple(\"The problem is simple: just use a hammer\")", "misleading_description2": "is_deceptively_simple(\"That is easily explained\")", "deceptively_description": "is_deceptively_simple(\"Just because you see a lot of complexity does not mean it is hard, it is simple\")", "obviously_complex": "is_deceptively_simple(\"This problem has always been intricate and hard to understand\")", "gordian_knot": "is_deceptively_simple(\"Sometimes a Gordian Knot can appear complicated but can be easily solved with a single move.\")", "no_description": "is_deceptively_simple(\"\")", "not_simple": "is_deceptively_simple(\"This task requires expertise and experience to complete.\")"}, "hidden_information": "def is_deceptively_simple(description):\n    # Assuming that the descriptions of deceptively simple things contain the word 'simple' or 'easily'\n    if 'simple' in description or 'easily' in description:\n        return True\n    return False"}
{"ground_truth": "def pronounce_abbreviation(abbreviation):\n    if abbreviation.lower() == 'i.e.':\n        return 'that is'\n    elif abbreviation.lower() == 'e.g.':\n        return 'for example'\n    elif abbreviation.lower() == 'et al.':\n        return 'and others'\n    elif abbreviation.lower() == 'nb':\n        return 'note well'\n    elif abbreviation.lower() == 'etc.':\n        return 'and so forth'\n    else:\n        return 'Abbreviation not found'", "problem_description": "Hey, I want you to write a python function that can handle pronunciation of Latin abbreviations like i.e., e.g., et al., etc.The signature of the function is: def pronounce_abbreviation(abbreviation)", "test_cases": {"test1": "pronounce_abbreviation('i.e.')", "test2": "pronounce_abbreviation('e.g.')", "test3": "pronounce_abbreviation('et al.')", "test4": "pronounce_abbreviation('nb')", "test5": "pronounce_abbreviation('etc.')", "test6": "pronounce_abbreviation('I.E.')", "test7": "pronounce_abbreviation('E.G.')", "test8": "pronounce_abbreviation('ET AL.')", "test9": "pronounce_abbreviation('NB')", "test10": "pronounce_abbreviation('invalid input')"}, "hidden_information": "def pronounce_abbreviation(abbreviation):\n    if abbreviation.lower() == 'i.e.':\n        return 'that is'\n    elif abbreviation.lower() == 'e.g.':\n        return 'for example'\n    elif abbreviation.lower() == 'et al.':\n        return 'and others'\n    elif abbreviation.lower() == 'nb':\n        return 'note well'\n    elif abbreviation.lower() == 'etc.':\n        return 'and so forth'\n    else:\n        return 'Abbreviation not found'"}
{"ground_truth": "def classify_skill(skill_description):\n    lower_case_desc = skill_description.lower()\n    # Abilities refer to current skill level\n    if 'current' in lower_case_desc or 'can' in lower_case_desc or 'now' in lower_case_desc:\n        return 'ability'\n    # Faculty is more general, referring to any capability present whatsoever\n    elif 'latent' in lower_case_desc or 'potential' in lower_case_desc or 'innate' in lower_case_desc:\n        return 'faculty'\n    else:\n        return 'Unknown'", "problem_description": "I want you to write a python function that determines whether a certain set of skills is an 'ability' or 'faculty'. The function should take a string describing the skill as input and return the classification.The signature of the function is: def classify_skill(skill_description)", "test_cases": {"test1": "classify_skill('I can play the piano now')", "test2": "classify_skill('The infant has a faculty of speech')", "test3": "classify_skill('The toddler has limited ability to speak')", "test4": "classify_skill('The latent talent was discovered through training')", "test5": "classify_skill('The professor has excellent teaching faculty')", "test6": "classify_skill('The employee has the ability to improve')", "test7": "classify_skill('Her innate skills were a great asset to the team')", "test8": "classify_skill('The ability to learn new skills is essential for success')", "test9": "classify_skill('There is no faculty of speech in the infant')", "test10": "classify_skill('He has the potential to become a great artist')"}, "hidden_information": "def classify_skill(skill_description):\n    lower_case_desc = skill_description.lower()\n    # Abilities refer to current skill level\n    if 'current' in lower_case_desc or 'can' in lower_case_desc or 'now' in lower_case_desc:\n        return 'ability'\n    # Faculty is more general, referring to any capability present whatsoever\n    elif 'latent' in lower_case_desc or 'potential' in lower_case_desc or 'innate' in lower_case_desc:\n        return 'faculty'\n    else:\n        return 'Unknown'"}
{"ground_truth": "def get_baseball_player_metrics(wins, era, strikeouts): return {'wins': wins, 'ERA': era, 'strikeouts': strikeouts}", "problem_description": "I want you to write a python function that calculates a baseball player's performance. The function should take into account the player's wins, ERA, and strikeouts. Can you help me with this?The signature of the function is: def get_baseball_player_metrics(wins, era, strikeouts)", "test_cases": {"test1": "get_baseball_player_metrics(11, 2.00, 103)", "test2": "get_baseball_player_metrics(10, 3.50, 80)", "test3": "get_baseball_player_metrics(8, 4.25, 60)", "test4": "get_baseball_player_metrics(7, 3.75, 120)", "test5": "get_baseball_player_metrics(9, 2.50, 95)", "test6": "get_baseball_player_metrics(12, 1.90, 115)", "test7": "get_baseball_player_metrics(15, 2.25, 110)", "test8": "get_baseball_player_metrics(16, 1.80, 130)", "test9": "get_baseball_player_metrics(14, 3.00, 105)", "test10": "get_baseball_player_metrics(13, 2.10, 125)"}, "hidden_information": "def get_baseball_player_metrics(wins, era, strikeouts): return {'wins': wins, 'ERA': era, 'strikeouts': strikeouts}"}
{"ground_truth": "def adjust_screen_brightness(outdoor_light_level, default_brightness, min_brightness, max_brightness): return min(max((default_brightness + outdoor_light_level * (max_brightness - default_brightness)), min_brightness), max_brightness)", "problem_description": "Hey, I want you to write a python function to adjust the screen brightness of my gaming laptop when I'm outside so I can play games like Diablo III without going blind from the glare, can you do that for me?The signature of the function is: def adjust_screen_brightness(outdoor_light_level, default_brightness, min_brightness, max_brightness)", "test_cases": {"test1": "adjust_screen_brightness(0.2, 80, 60, 100)", "test2": "adjust_screen_brightness(0.5, 80, 60, 100)", "test3": "adjust_screen_brightness(0, 80, 60, 100)", "test4": "adjust_screen_brightness(1, 80, 60, 100)", "test5": "adjust_screen_brightness(0.8, 90, 70, 110)", "test6": "adjust_screen_brightness(0.4, 70, 50, 90)", "test7": "adjust_screen_brightness(0.6, 85, 65, 105)", "test8": "adjust_screen_brightness(0.9, 80, 60, 100)", "test9": "adjust_screen_brightness(0.1, 75, 55, 95)", "test10": "adjust_screen_brightness(0.3, 82, 62, 102)"}, "hidden_information": "def adjust_screen_brightness(outdoor_light_level, default_brightness, min_brightness, max_brightness): return min(max((default_brightness + outdoor_light_level * (max_brightness - default_brightness)), min_brightness), max_brightness)"}
{"ground_truth": "def configure_max_threads(max_threads, input_queue): return min(max_threads, len(input_queue))", "problem_description": "I need a python function to configure the maximum number of threads for a message bus, it should take a list of messages as input and return the maximum number of threads to be spawned to process themThe signature of the function is: def configure_max_threads(max_threads, input_queue)", "test_cases": {"test_empty_queue": "configure_max_threads(10, [])", "test_single_message": "configure_max_threads(10, ['message1'])", "test_multiple_messages_below_max": "configure_max_threads(10, ['message1', 'message2', 'message3'])", "test_multiple_messages_at_max": "configure_max_threads(10, ['message1', 'message2', 'message3', 'message4', 'message5', 'message6', 'message7', 'message8', 'message9', 'message10'])", "test_multiple_messages_above_max": "configure_max_threads(10, ['message1', 'message2', 'message3', 'message4', 'message5', 'message6', 'message7', 'message8', 'message9', 'message10', 'message11'])", "test_zero_max_threads": "configure_max_threads(0, ['message1', 'message2', 'message3'])", "test_negative_max_threads": "configure_max_threads(-10, ['message1', 'message2', 'message3'])", "test_empty_queue_zero_max_threads": "configure_max_threads(0, [])", "test_empty_queue_negative_max_threads": "configure_max_threads(-10, [])", "test_huge_queue": "configure_max_threads(10, ['message' + str(i) for i in range(1000)])"}, "hidden_information": "def configure_max_threads(max_threads, input_queue): return min(max_threads, len(input_queue))"}
{"ground_truth": "def calculate_fuel_efficiency(route_distance, fuel_efficiency, gas_cost):\n    total_gas_cost = (route_distance / fuel_efficiency) * gas_cost\n    return total_gas_cost", "problem_description": "Hey LLM agent, can you write a python function that helps me plan road trips? I want to make the most of the gas I use, and I want it to be able to handle different road trip distances and gas prices.The signature of the function is: def calculate_fuel_efficiency(route_distance, fuel_efficiency, gas_cost)", "test_cases": {"test1": "calculate_fuel_efficiency(200, 30, 2.75)", "test2": "calculate_fuel_efficiency(500, 40, 3.00)", "test3": "calculate_fuel_efficiency(300, 35, 2.50)", "test4": "calculate_fuel_efficiency(100, 25, 3.25)", "test5": "calculate_fuel_efficiency(750, 50, 2.75)", "test6": "calculate_fuel_efficiency(250, 38, 2.00)", "test7": "calculate_fuel_efficiency(450, 42, 3.10)", "test8": "calculate_fuel_efficiency(550, 32, 2.90)", "test9": "calculate_fuel_efficiency(800, 48, 2.65)", "test10": "calculate_fuel_efficiency(650, 40, 2.80)"}, "hidden_information": "def calculate_fuel_efficiency(route_distance, fuel_efficiency, gas_cost):\n    total_gas_cost = (route_distance / fuel_efficiency) * gas_cost\n    return total_gas_cost"}
{"ground_truth": "def calculate_average_rating(reviews): return sum(review['rating'] for review in reviews) / len(reviews)", "problem_description": "I want you to write a python function that can calculate the average rating of game reviews from a list of reviews. Each review can have multiple ratings. Can you do that?The signature of the function is: def calculate_average_rating(reviews)", "test_cases": {"test1": "calculate_average_rating([{'rating': 8.5}, {'rating': 7.0}, {'rating': 9.0}])", "test2": "calculate_average_rating([{'rating': 10}, {'rating': 8}, {'rating': 9}, {'rating': 7}])", "test3": "calculate_average_rating([{'rating': 6.0}, {'rating': 7.5}, {'rating': 8.0}, {'rating': 6.5}, {'rating': 7.0}])", "test4": "calculate_average_rating([{'rating': 9.5}, {'rating': 8.5}, {'rating': 9.0}, {'rating': 8.0}])", "test5": "calculate_average_rating([{'rating': 7.0}, {'rating': 6.5}, {'rating': 7.5}, {'rating': 8.0}])", "test6": "calculate_average_rating([{'rating': 8.0}, {'rating': 8.5}, {'rating': 9.0}])", "test7": "calculate_average_rating([{'rating': 7.5}, {'rating': 8.0}, {'rating': 7.0}, {'rating': 8.5}])", "test8": "calculate_average_rating([{'rating': 9.0}, {'rating': 8.0}, {'rating': 7.5}, {'rating': 8.5}])", "test9": "calculate_average_rating([{'rating': 8.5}, {'rating': 9.0}, {'rating': 8.0}])", "test10": "calculate_average_rating([{'rating': 7.0}, {'rating': 7.5}, {'rating': 8.0}, {'rating': 8.5}, {'rating': 9.0}])"}, "hidden_information": "def calculate_average_rating(reviews): return sum(review['rating'] for review in reviews) / len(reviews)"}
{"ground_truth": "def update_game_state(game_objects, time_step, velocities): return [{**obj, 'x': obj['x'] + velocities[obj['id']]['x'] * time_step, 'y': obj['y'] + velocities[obj['id']]['y'] * time_step} for obj in game_objects]", "problem_description": "Can you write a Python function that updates the positions of game objects in a 2D game? I want to separate the game logic from the rendering. Should I use an MVC pattern or something else? The function should take a list of game objects and their velocities into account.The signature of the function is: def update_game_state(game_objects, time_step, velocities)", "test_cases": {"test1": "update_game_state([{'x': 0, 'y': 0, 'id': 1}, {'x': 5, 'y': 5, 'id': 2}], 0.1, {1: {'x': 2, 'y': 3}, 2: {'x': 4, 'y': 6}})", "test2": "update_game_state([{'x': -1, 'y': 1, 'id': 3}, {'x': 3, 'y': 3, 'id': 4}], 0.05, {3: {'x': -2, 'y': 1}, 4: {'x': 4, 'y': 6}})", "test3": "update_game_state([{'x': 0, 'y': 0, 'id': 1}, {'x': 5, 'y': 5, 'id': 2}], 0.2, {1: {'x': 2, 'y': 3}, 2: {'x': 4, 'y': 6}})", "test4": "update_game_state([{'x': 0, 'y': 10, 'id': 1}, {'x': 10, 'y': 0, 'id': 2}], 0.1, {1: {'x': 2, 'y': 3}, 2: {'x': 4, 'y': 6}})", "test5": "update_game_state([{'x': 5, 'y': 5, 'id': 1}, {'x': 10, 'y': 10, 'id': 2}], 0.3, {1: {'x': 2, 'y': 3}, 2: {'x': 4, 'y': 6}})", "test6": "update_game_state([{'x': -10, 'y': -10, 'id': 1}, {'x': -5, 'y': -5, 'id': 2}], 0.2, {1: {'x': -4, 'y': -6}, 2: {'x': -8, 'y': -10}})", "test7": "update_game_state([{'x': 20, 'y': 20, 'id': 1}, {'x': 15, 'y': 15, 'id': 2}], 0.05, {1: {'x': -8, 'y': 6}, 2: {'x': 4, 'y': 10}})", "test8": "update_game_state([{'x': 15, 'y': 15, 'id': 1}, {'x': 20, 'y': 20, 'id': 2}], 0.4, {1: {'x': -2, 'y': 6}, 2: {'x': 4, 'y': 10}})", "test9": "update_game_state([{'x': 10, 'y': 15, 'id': 1}, {'x': 5, 'y': 5, 'id': 2}], 0.3, {1: {'x': 4, 'y': 6}, 2: {'x': 2, 'y': 8}})", "test10": "update_game_state([{'x': -5, 'y': 10, 'id': 1}, {'x': 10, 'y': -5, 'id': 2}], 0.4, {1: {'x': -8, 'y': 6}, 2: {'x': 4, 'y': -10}})"}, "hidden_information": "def update_game_state(game_objects, time_step, velocities): return [{**obj, 'x': obj['x'] + velocities[obj['id']]['x'] * time_step, 'y': obj['y'] + velocities[obj['id']]['y'] * time_step} for obj in game_objects]"}
{"ground_truth": "def settle_polling_contest(candidate_votes, required_percentage):\n    winner = max(candidate_votes, key=candidate_votes.get)\n    if candidate_votes[winner] / sum(candidate_votes.values()) >= required_percentage:\n        return winner\n    else:\n        return \"No winner\"", "problem_description": "Write a Python function to determine a winner in a polling contest. The function should take the votes for each candidate and a required percentage as input. It should return the winner if the required percentage is met, or 'No winner' otherwise.The signature of the function is: def settle_polling_contest(candidate_votes, required_percentage)", "test_cases": {"test1": "settle_polling_contest({'Romney': 50, 'Obama': 30, 'Others': 20}, 0.4)", "test2": "settle_polling_contest({'Trump': 40, 'Clinton': 60, 'Others': 0}, 0.3)", "test3": "settle_polling_contest({'Candidate A': 20, 'Candidate B': 20, 'Candidate C': 20}, 0.4)", "test4": "settle_polling_contest({'Candidate X': 50, 'Candidate Y': 50}, 0.5)", "test5": "settle_polling_contest({'Candidate 1': 100, 'Candidate 2': 0}, 0.3)", "test6": "settle_polling_contest({'Candidate 3': 20, 'Candidate 4': 30, 'Candidate 5': 50}, 0.4)", "test7": "settle_polling_contest({'Romney': 120, 'Obama': 80, 'Others': 0}, 0.4)", "test8": "settle_polling_contest({'Candidate X': 30, 'Candidate Y': 40, 'Candidate Z': 30}, 0.3)", "test9": "settle_polling_contest({'Candidate 1': 50, 'Candidate 2': 50}, 0.6)", "test10": "settle_polling_contest({'Candidate A': 40, 'Candidate B': 60}, 0.5)"}, "hidden_information": "def settle_polling_contest(candidate_votes, required_percentage):\n    winner = max(candidate_votes, key=candidate_votes.get)\n    if candidate_votes[winner] / sum(candidate_votes.values()) >= required_percentage:\n        return winner\n    else:\n        return \"No winner\""}
{"ground_truth": "def calculate_sellout_score(compromises, rationalizations, self_awareness, source_identification): \n    # Assign weights to each parameter\n    compromise_weight = 0.2\n    rationalization_weight = 0.3\n    self_awareness_weight = 0.2\n    source_identification_weight = 0.3\n    # Calculate the sellout score\n    sellout_score = (compromises * compromise_weight +\n                    rationalizations * rationalization_weight +\n                    (1 - self_awareness) * self_awareness_weight +\n                    source_identification * source_identification_weight)\n    return sellout_score", "problem_description": "Write a function to determine how much a journalist has 'sold out'. I need to evaluate the moral compromise of a journalist based on some factors such as how many compromises they've made, rationalizations they've used, their current level of self-awareness, and their identification with their sources. Can you create a function for this?The signature of the function is: def calculate_sellout_score(compromises, rationalizations, self_awareness, source_identification)", "test_cases": {"test1": "calculate_sellout_score(5, 3, 0.8, 0.4)", "test2": "calculate_sellout_score(1, 0, 1, 0)", "test3": "calculate_sellout_score(10, 8, 0, 0.9)", "test4": "calculate_sellout_score(0, 0, 1, 0)", "test5": "calculate_sellout_score(12, 10, 0.1, 0.5)", "test6": "calculate_sellout_score(0, 5, 0.2, 0.1)", "test7": "calculate_sellout_score(8, 0, 0.9, 0.6)", "test8": "calculate_sellout_score(3, 9, 0.7, 0.3)", "test9": "calculate_sellout_score(2, 1, 0.4, 0.8)", "test10": "calculate_sellout_score(15, 12, 0, 1)"}, "hidden_information": "def calculate_sellout_score(compromises, rationalizations, self_awareness, source_identification): \n    # Assign weights to each parameter\n    compromise_weight = 0.2\n    rationalization_weight = 0.3\n    self_awareness_weight = 0.2\n    source_identification_weight = 0.3\n    # Calculate the sellout score\n    sellout_score = (compromises * compromise_weight +\n                    rationalizations * rationalization_weight +\n                    (1 - self_awareness) * self_awareness_weight +\n                    source_identification * source_identification_weight)\n    return sellout_score"}
{"ground_truth": "def manage_job_search(job_applications, expenses, salary_goals):\n    job_tracker = {}\n    expense_tracker = {}\n\n    for job in job_applications:\n        job_tracker[job['company']] = job['status']\n\n    for expense in expenses:\n        expense_tracker[expense['category']] = expense['amount']\n\n    total_expenses = sum(expense_tracker.values())\n    savings = salary_goals - total_expenses\n\n    if savings < 0:\n        return 'Insufficient funds to apply for jobs'\n    else:\n        return 'You can afford to apply for jobs'\n\n    def update_job_status(company, status):\n        job_tracker[company] = status\n\n    def add_expense(category, amount):\n        expense_tracker[category] = amount", "problem_description": "Can you write a python function that can help me manage my job search and finances? I want to be able to track the jobs I've applied for and my expenses, and make sure I have enough money to cover my costs. I'm a software engineer and I've had a tough time in the job market lately.The signature of the function is: def manage_job_search(job_applications, expenses, salary_goals)", "test_cases": {"test1": "manage_job_search([{'company': 'Google', 'status': 'applied'}, {'company': 'Amazon', 'status': 'rejected'}], [{'category': 'rent', 'amount': 1000}, {'category': 'food', 'amount': 500}], 5000)", "test2": "manage_job_search([{'company': 'Microsoft', 'status': 'interviewing'}, {'company': 'Facebook', 'status': 'applied'}], [{'category': 'transportation', 'amount': 200}, {'category': 'entertainment', 'amount': 300}], 6000)", "test3": "manage_job_search([{'company': 'Apple', 'status': 'rejected'}, {'company': 'Netflix', 'status': 'applied'}], [{'category': 'rent', 'amount': 1200}, {'category': 'food', 'amount': 600}], 5500)", "test4": "manage_job_search([{'company': 'Google', 'status': 'interviewing'}, {'company': 'Amazon', 'status': 'applied'}], [{'category': 'transportation', 'amount': 250}, {'category': 'entertainment', 'amount': 350}], 5800)", "test5": "manage_job_search([{'company': 'Microsoft', 'status': 'rejected'}, {'company': 'Facebook', 'status': 'interviewing'}], [{'category': 'rent', 'amount': 1100}, {'category': 'food', 'amount': 550}], 5200)", "test6": "manage_job_search([{'company': 'Apple', 'status': 'applied'}, {'company': 'Netflix', 'status': 'rejected'}], [{'category': 'transportation', 'amount': 220}, {'category': 'entertainment', 'amount': 320}], 5600)", "test7": "manage_job_search([{'company': 'Google', 'status': 'applied'}, {'company': 'Amazon', 'status': 'interviewing'}], [{'category': 'rent', 'amount': 1300}, {'category': 'food', 'amount': 650}], 5000)", "test8": "manage_job_search([{'company': 'Microsoft', 'status': 'rejected'}, {'company': 'Facebook', 'status': 'applied'}], [{'category': 'transportation', 'amount': 280}, {'category': 'entertainment', 'amount': 380}], 6000)", "test9": "manage_job_search([{'company': 'Apple', 'status': 'interviewing'}, {'company': 'Netflix', 'status': 'rejected'}], [{'category': 'rent', 'amount': 1400}, {'category': 'food', 'amount': 700}], 5500)", "test10": "manage_job_search([{'company': 'Google', 'status': 'rejected'}, {'company': 'Amazon', 'status': 'applied'}], [{'category': 'transportation', 'amount': 300}, {'category': 'entertainment', 'amount': 400}], 5800)"}, "hidden_information": "def manage_job_search(job_applications, expenses, salary_goals):\n    job_tracker = {}\n    expense_tracker = {}\n\n    for job in job_applications:\n        job_tracker[job['company']] = job['status']\n\n    for expense in expenses:\n        expense_tracker[expense['category']] = expense['amount']\n\n    total_expenses = sum(expense_tracker.values())\n    savings = salary_goals - total_expenses\n\n    if savings < 0:\n        return 'Insufficient funds to apply for jobs'\n    else:\n        return 'You can afford to apply for jobs'\n\n    def update_job_status(company, status):\n        job_tracker[company] = status\n\n    def add_expense(category, amount):\n        expense_tracker[category] = amount"}
{"ground_truth": "def evaluate_agent_response(response_time, response_variety, response_relevance, question, max_response_time=5, min_response_variety=3, min_response_relevance=0.5):\n    if response_time > max_response_time:\n        return 'Pre-recorded'\n    elif response_variety < min_response_variety:\n        return 'Likely Pre-recorded'\n    elif response_relevance < min_response_relevance or response_relevance > 1:\n        return 'Invalid Response'\n    else:\n        return 'Live Agent'", "problem_description": "I want you to write a python function that evaluates whether a call center agent's response to a question seems pre-recorded or not. The function should take into account some factors, but I'm not sure what specific parameters it should have. Can you interact with me to clarify the implementation details?The signature of the function is: def evaluate_agent_response(response_time, response_variety, response_relevance, question, max_response_time=5, min_response_variety=3, min_response_relevance=0.5)", "test_cases": {"test1": "evaluate_agent_response(3, 5, 0.8, 'What is your name?')", "test2": "evaluate_agent_response(10, 2, 0.4, 'Why are you calling me?')", "test3": "evaluate_agent_response(4, 6, 0.9, 'Can you help me with my account?')", "test4": "evaluate_agent_response(2, 3, 0.1, 'Is this a sales call?')", "test5": "evaluate_agent_response(7, 4, 0.6, 'What is your company?')", "test6": "evaluate_agent_response(5, 2, 0.3, 'Can I speak to a manager?')", "test7": "evaluate_agent_response(1, 6, 0.7, 'How can I pay my bill?')", "test8": "evaluate_agent_response(9, 3, 0.5, 'What is your return policy?')", "test9": "evaluate_agent_response(6, 4, 0.2, 'Can you give me a refund?')", "test10": "evaluate_agent_response(8, 5, 0.6, 'Is this a robot?')"}, "hidden_information": "def evaluate_agent_response(response_time, response_variety, response_relevance, question, max_response_time=5, min_response_variety=3, min_response_relevance=0.5):\n    if response_time > max_response_time:\n        return 'Pre-recorded'\n    elif response_variety < min_response_variety:\n        return 'Likely Pre-recorded'\n    elif response_relevance < min_response_relevance or response_relevance > 1:\n        return 'Invalid Response'\n    else:\n        return 'Live Agent'"}
{"ground_truth": "def calculate_total_cost(items):\n    total_cost = 0\n    for item in items:\n        if item['name'] == 'Swarovsky crystal-embedded pepper spray' or 'luxury' in item['description']:\n            total_cost += item['price'] * 1.1\n        else:\n            total_cost += item['price']\n    return total_cost", "problem_description": "I need a python function to calculate the total cost of some high-end items. The catch is that if the item is a luxury item, or if it contains the word 'luxury' in the description, I want to add a 10% luxury tax to the price. I know this sounds a bit vague, can you help me come up with something?The signature of the function is: def calculate_total_cost(items)", "test_cases": {"test1": "calculate_total_cost([{'name': 'Swarovsky crystal-embedded pepper spray', 'price': 295.0, 'description': 'A fancy pepper spray'}])", "test2": "calculate_total_cost([{'name': 'Regular pepper spray', 'price': 10.0, 'description': 'A regular pepper spray'}])", "test3": "calculate_total_cost([{'name': 'Chanel handbag', 'price': 500.0, 'description': 'A luxury handbag'}])", "test4": "calculate_total_cost([{'name': 'Swarovsky crystal-embedded pepper spray', 'price': 295.0, 'description': 'A fancy pepper spray'}, {'name': 'Regular pepper spray', 'price': 10.0, 'description': 'A regular pepper spray'}])", "test5": "calculate_total_cost([{'name': 'Regular item', 'price': 50.0, 'description': 'This has luxury in the description but not luxury item'}])", "test6": "calculate_total_cost([{'name': 'Luxury Item', 'price': 75.0, 'description': 'A luxury item with a low price'}])", "test7": "calculate_total_cost([{'name': 'Luxury Item', 'price': 1000.0, 'description': 'This should have a 10% tax'}])", "test8": "calculate_total_cost([{'name': 'Regular item', 'price': 500.0, 'description': 'Should not have a 10% tax'}])", "test9": "calculate_total_cost([{'name': 'Non-Luxury Item', 'price': 25.0, 'description': 'This should not have a 10% tax'}])", "test10": "calculate_total_cost([])"}, "hidden_information": "def calculate_total_cost(items):\n    total_cost = 0\n    for item in items:\n        if item['name'] == 'Swarovsky crystal-embedded pepper spray' or 'luxury' in item['description']:\n            total_cost += item['price'] * 1.1\n        else:\n            total_cost += item['price']\n    return total_cost"}
{"ground_truth": "def calculate_total_cost(num_amplifiers, discount_threshold=5000, discount_percentage=0.05):\n    amp_price = 9897\n    total_cost = num_amplifiers * amp_price\n    if amp_price > discount_threshold:\n        return total_cost - (total_cost * discount_percentage)\n    return total_cost", "problem_description": "I need a Python function that will help me calculate the total cost of an order of those fancy Fatman tube amplifiers, taking into account a discount for bulk orders.The signature of the function is: def calculate_total_cost(num_amplifiers, discount_threshold=5000, discount_percentage=0.05)", "test_cases": {"test1": "calculate_total_cost(1)", "test2": "calculate_total_cost(2)", "test3": "calculate_total_cost(5)", "test4": "calculate_total_cost(10, 10000, 0.10)", "test5": "calculate_total_cost(1, 500, 0.05)", "test6": "calculate_total_cost(0)", "test7": "calculate_total_cost(-1)", "test8": "calculate_total_cost(1, discount_threshold=10000, discount_percentage=0.10)", "test9": "calculate_total_cost(5, discount_threshold=5000, discount_percentage=0.20)", "test10": "calculate_total_cost(3, discount_threshold=1000, discount_percentage=0.15)"}, "hidden_information": "def calculate_total_cost(num_amplifiers, discount_threshold=5000, discount_percentage=0.05):\n    amp_price = 9897\n    total_cost = num_amplifiers * amp_price\n    if amp_price > discount_threshold:\n        return total_cost - (total_cost * discount_percentage)\n    return total_cost"}
{"ground_truth": "def categorize_social_media(popularity_threshold, user_engagement_data):\n    popular_platforms = [platform for platform, time_spent in user_engagement_data.items() if time_spent > popularity_threshold]\n    return popular_platforms", "problem_description": "Hey AI, I need help in writing a python function. I want to find out which social media platforms are most popular based on data from user engagement. Something like... I don't know, think Google Wave versus, say, facebook or instagram.The signature of the function is: def categorize_social_media(popularity_threshold, user_engagement_data)", "test_cases": {"test1": "categorize_social_media(100, {'Google Wave': 50, 'Facebook': 200, 'Instagram': 150})", "test2": "categorize_social_media(500, {'Google Wave': 50, 'Facebook': 200, 'Instagram': 150})", "test3": "categorize_social_media(50, {'Google Wave': 50, 'Facebook': 200, 'Instagram': 150})", "test4": "categorize_social_media(50, {'Google Wave': 20, 'Facebook': 200, 'Instagram': 5})", "test5": "categorize_social_media(0, {'Google Wave': 50, 'Facebook': 200, 'Instagram': 150})", "test6": "categorize_social_media(50, {'Google Wave': 50, 'Facebook': 2, 'Instagram': 150})", "test7": "categorize_social_media(0, {'Google Wave': 0, 'Facebook': 0, 'Instagram': 0})", "test8": "categorize_social_media(50, {'Google Wave': 0, 'Facebook': 0, 'Instagram': 0})", "test9": "categorize_social_media(250, {'Google Wave': 50, 'Facebook': 200, 'Instagram': 300})", "test10": "categorize_social_media(50, {})"}, "hidden_information": "def categorize_social_media(popularity_threshold, user_engagement_data):\n    popular_platforms = [platform for platform, time_spent in user_engagement_data.items() if time_spent > popularity_threshold]\n    return popular_platforms"}
{"ground_truth": "def filter_sensitive_info(documents, sensitive_keywords): return [doc for doc in documents if not any(keyword in doc.lower() for keyword in sensitive_keywords)]", "problem_description": "I need a python function to filter some leaked government documents to remove sensitive information before making them available publicly. The function should take into account a list of sensitive keywords and remove any document that contains any of those keywords. Can the agent please clarify what I mean by 'sensitive keywords' and 'documents' and then write a function for me?The signature of the function is: def filter_sensitive_info(documents, sensitive_keywords)", "test_cases": {"test1": "filter_sensitive_info(['Top secret memo: the sky is blue', 'The sun is shining'], ['secret', 'top'])", "test2": "filter_sensitive_info(['This is a public document', 'Confidential: moon is made of cheese'], ['confidential', 'secret'])", "test3": "filter_sensitive_info(['The world is round', 'The earth is flat'], [])", "test4": "filter_sensitive_info(['This is a confidential document', 'This is a public document'], ['confidential'])", "test5": "filter_sensitive_info(['WikiLeaks is a non-profit organization', 'Apple is a company'], ['wikileaks', 'apple'])", "test6": "filter_sensitive_info(['This document contains sensitive information', 'This document is public'], ['sensitive'])", "test7": "filter_sensitive_info(['The government is watching you', 'The government is not watching you'], ['government'])", "test8": "filter_sensitive_info(['This is a top secret document', 'This is a public document'], ['top', 'secret'])", "test9": "filter_sensitive_info(['The president is a public figure', 'The president is a private person'], ['president'])", "test10": "filter_sensitive_info(['This document is classified', 'This document is declassified'], ['classified'])"}, "hidden_information": "def filter_sensitive_info(documents, sensitive_keywords): return [doc for doc in documents if not any(keyword in doc.lower() for keyword in sensitive_keywords)]"}
{"ground_truth": "def trigger_camera(trigger_type, threshold, comparator, signal, current_sensor_value):\n    if trigger_type == 'LASER':\n        return signal < threshold\n    elif trigger_type == 'SOUND':\n        return comparator == '>' and signal > threshold\n    elif trigger_type == 'TIME':\n        return signal > threshold\n    else:\n        return False", "problem_description": "Write a Python function to simulate the Triggertrap's functionality. The function should take in a trigger type, threshold value, comparator, signal, and current sensor value, and return a boolean indicating whether the camera's shutter release should be triggered based on the given inputs.The signature of the function is: def trigger_camera(trigger_type, threshold, comparator, signal, current_sensor_value)", "test_cases": {"test1": "trigger_camera('LASER', 0.5, '', 0.3, 0.2)", "test2": "trigger_camera('SOUND', 50, '>', 60, 0)", "test3": "trigger_camera('TIME', 10, '', 12, 0)", "test4": "trigger_camera('LASER', 0.8, '', 0.9, 0.7)", "test5": "trigger_camera('SOUND', 40, '<', 30, 0)", "test6": "trigger_camera('TIME', 15, '', 12, 0)", "test7": "trigger_camera('LASER', 0.5, '', 0.4, 0.3)", "test8": "trigger_camera('SOUND', 55, '>', 58, 0)", "test9": "trigger_camera('TIME', 8, '', 7, 0)", "test10": "trigger_camera('INVALID', 0.5, '', 0.3, 0.2)"}, "hidden_information": "def trigger_camera(trigger_type, threshold, comparator, signal, current_sensor_value):\n    if trigger_type == 'LASER':\n        return signal < threshold\n    elif trigger_type == 'SOUND':\n        return comparator == '>' and signal > threshold\n    elif trigger_type == 'TIME':\n        return signal > threshold\n    else:\n        return False"}
{"ground_truth": "def is_suitable_tablet(ram, storage, camera_quality, budget):\n    return (ram >= 512 and storage >= 16 and camera_quality == \"medium\" and budget >= 250) or (ram >= 1024 and storage >= 32 and camera_quality == \"high\" and budget >= 300)", "problem_description": "Hello agent, I'm in the market for a new Android tablet, but I'm on a tight budget. I want something that can handle basic tasks like browsing and streaming, and maybe some light gaming. I also want it to have a decent camera. Can you help me write a Python function that takes into account my requirements and tells me if the Lenovo IdeaPad A1 is a good option for me? I care about the amount of RAM, storage, camera quality, and my budget.The signature of the function is: def is_suitable_tablet(ram, storage, camera_quality, budget)", "test_cases": {"test1": "is_suitable_tablet(512, 16, \"medium\", 250)", "test2": "is_suitable_tablet(1024, 32, \"high\", 300)", "test3": "is_suitable_tablet(256, 8, \"low\", 200)", "test4": "is_suitable_tablet(512, 16, \"high\", 250)", "test5": "is_suitable_tablet(1024, 32, \"medium\", 300)", "test6": "is_suitable_tablet(512, 32, \"medium\", 250)", "test7": "is_suitable_tablet(1024, 16, \"high\", 250)", "test8": "is_suitable_tablet(256, 16, \"low\", 250)", "test9": "is_suitable_tablet(512, 8, \"medium\", 200)", "test10": "is_suitable_tablet(1024, 32, \"low\", 300)"}, "hidden_information": "def is_suitable_tablet(ram, storage, camera_quality, budget):\n    return (ram >= 512 and storage >= 16 and camera_quality == \"medium\" and budget >= 250) or (ram >= 1024 and storage >= 32 and camera_quality == \"high\" and budget >= 300)"}
{"ground_truth": "def calculate_power_consumption(num_speakers, watts_per_speaker, input_voltage, usage_hours): \n    return num_speakers * watts_per_speaker * input_voltage * usage_hours", "problem_description": "I want a python function to calculate power consumption of a speaker system based on watts put in. I am unsure about the actual parameters required though, can you help with that?The signature of the function is: def calculate_power_consumption(num_speakers, watts_per_speaker, input_voltage, usage_hours)", "test_cases": {"test1": "calculate_power_consumption(5, 2000, 240, 8)", "test2": "calculate_power_consumption(1, 100, 120, 24)", "test3": "calculate_power_consumption(4, 500, 230, 6)", "test4": "calculate_power_consumption(3, 750, 110, 12)", "test5": "calculate_power_consumption(2, 300, 220, 10)", "test6": "calculate_power_consumption(10, 1000, 240, 4)", "test7": "calculate_power_consumption(6, 200, 120, 20)", "test8": "calculate_power_consumption(8, 400, 230, 16)", "test9": "calculate_power_consumption(7, 250, 110, 14)", "test10": "calculate_power_consumption(9, 900, 220, 18)"}, "hidden_information": "def calculate_power_consumption(num_speakers, watts_per_speaker, input_voltage, usage_hours): \n    return num_speakers * watts_per_speaker * input_voltage * usage_hours"}
{"ground_truth": "def calculate_additional_volume(glass_radius, glass_height, initial_liquid_height, liquid_density=1.0): \n    import math\n    # assume cylindrical glass and incompressible liquid\n    total_volume = glass_radius ** 2 * math.pi * glass_height\n    initial_volume = glass_radius ** 2 * math.pi * initial_liquid_height\n    additional_volume = total_volume - initial_volume\n    return additional_volume\n", "problem_description": "I want to prank my friends during the holidays and I need a python function to help me calculate how much liquid I can add to a glass without overflowing, write a python function for me, but I'm not very sure of the dimensions of the glassThe signature of the function is: def calculate_additional_volume(glass_radius, glass_height, initial_liquid_height, liquid_density=1.0)", "test_cases": {"test1": "calculate_additional_volume(5, 10, 5)", "test2": "calculate_additional_volume(3, 8, 7)", "test3": "calculate_additional_volume(2, 6, 2, liquid_density=1.5)", "test4": "calculate_additional_volume(4, 12, 3)", "test5": "calculate_additional_volume(1, 5, 4, liquid_density=0.8)", "test6": "calculate_additional_volume(6, 15, 8)", "test7": "calculate_additional_volume(7, 18, 10, liquid_density=1.2)", "test8": "calculate_additional_volume(3, 9, 6)", "test9": "calculate_additional_volume(2, 7, 5, liquid_density=1.1)", "test10": "calculate_additional_volume(8, 20, 14)"}, "hidden_information": "def calculate_additional_volume(glass_radius, glass_height, initial_liquid_height, liquid_density=1.0): \n    import math\n    # assume cylindrical glass and incompressible liquid\n    total_volume = glass_radius ** 2 * math.pi * glass_height\n    initial_volume = glass_radius ** 2 * math.pi * initial_liquid_height\n    additional_volume = total_volume - initial_volume\n    return additional_volume\n"}
{"ground_truth": "def suggest_gift_ideas(employee_monthly_stats, employee_names, performance_threshold, gift_ideas):\n    suggestions = {}\n    for i in range(len(employee_names)):\n        if employee_monthly_stats[i] > performance_threshold:\n            suggestions[employee_names[i]] = gift_ideas['high_performer']\n        else:\n            suggestions[employee_names[i]] = gift_ideas['average_performer']\n    return suggestions", "problem_description": "I want you to write a python function to help our company's HR department identify gift ideas for our employees based on their monthly performance. The HR team provides the performance metrics as a list of percentages and the names of the employees. I also have some pre-defined gift ideas for high and average performers. Can you help me come up with a function that takes this information and provides personalized gift suggestions for each employee?The signature of the function is: def suggest_gift_ideas(employee_monthly_stats, employee_names, performance_threshold, gift_ideas)", "test_cases": {"test1": "suggest_gift_ideas([90, 70, 85], ['John Doe', 'Jane Doe', 'Sam Smith'], 0.8, {'high_performer': 'Gift Card', 'average_performer': 'Coffee Mug'})", "test2": "suggest_gift_ideas([60, 75, 82], ['Alice Johnson', 'Bob Brown', 'Charlie Davis'], 0.75, {'high_performer': 'Free Lunch', 'average_performer': 'Pencil Set'})", "test3": "suggest_gift_ideas([95, 68, 76], ['Eve Smith', 'Mike Davis', 'Tom Johnson'], 0.7, {'high_performer': ' Trophy', 'average_performer': 'Water Bottle'})", "test4": "suggest_gift_ideas([55, 80, 87], ['Sue Brown', 'Tom Smith', 'Pete Johnson'], 0.85, {'high_performer': 'Certificate', 'average_performer': 'Desk Toy'})", "test5": "suggest_gift_ideas([80, 90, 70], ['John Smith', 'Jane Johnson', 'Sam Brown'], 0.8, {'high_performer': 'Gourmet Food Basket', 'average_performer': 'Notepad'})", "test6": "suggest_gift_ideas([98, 79, 83], ['Emily Davis', 'Michael Brown', 'Tom Smith'], 0.85, {'high_performer': 'Bonus', 'average_performer': 'Coffee Maker'})", "test7": "suggest_gift_ideas([65, 72, 89], ['Lily Johnson', 'David Lee', 'Peter Smith'], 0.75, {'high_performer': 'Stock Options', 'average_performer': 'Desk Accessory'})", "test8": "suggest_gift_ideas([85, 68, 75], ['Cindy Smith', 'Mike Brown', 'Lily Johnson'], 0.75, {'high_performer': 'Weekend Getaway', 'average_performer': 'Personalized Mug'})", "test9": "suggest_gift_ideas([95, 92, 88], ['Samantha Smith', 'Emily Johnson', 'Matt Davis'], 0.9, {'high_performer': 'Top Bonus', 'average_performer': 'Tech Accessory'})", "test10": "suggest_gift_ideas([75, 82, 79], ['Peter Smith', 'Cindy Brown', 'David Johnson'], 0.8, {'high_performer': 'Gift Certificate', 'average_performer': 'Flower Bouquet'})"}, "hidden_information": "def suggest_gift_ideas(employee_monthly_stats, employee_names, performance_threshold, gift_ideas):\n    suggestions = {}\n    for i in range(len(employee_names)):\n        if employee_monthly_stats[i] > performance_threshold:\n            suggestions[employee_names[i]] = gift_ideas['high_performer']\n        else:\n            suggestions[employee_names[i]] = gift_ideas['average_performer']\n    return suggestions"}
{"ground_truth": "def calculate_junk_food_calories(food_items, food_quantities, food_calorie_density):\n    junk_food_calories = 0\n    for item, quantity in zip(food_items, food_quantities):\n        if item in ['pizza', 'burgers', 'fries', 'chips', 'pretzels']:\n            junk_food_calories += quantity * food_calorie_density[item]\n    return junk_food_calories", "problem_description": "Can you write a python function that calculates the total calories of junk food consumed by a person? The person will input the list of food items they ate and their corresponding quantities. You need to help the agent figure out the specific food items that are considered junk food and their calorie density per unit quantity.The signature of the function is: def calculate_junk_food_calories(food_items, food_quantities, food_calorie_density)", "test_cases": {"test1": "calculate_junk_food_calories(['pizza', 'salad', 'burgers'], [2, 1, 3], {'pizza': 300, 'salad': 100, 'burgers': 500})", "test2": "calculate_junk_food_calories(['fries', 'chips', 'pretzels'], [1, 2, 1], {'fries': 200, 'chips': 150, 'pretzels': 120})", "test3": "calculate_junk_food_calories(['apples', 'bananas', 'oranges'], [3, 2, 1], {'apples': 50, 'bananas': 70, 'oranges': 30})", "test4": "calculate_junk_food_calories(['pizza', 'burgers', 'fries'], [1, 1, 1], {'pizza': 300, 'burgers': 500, 'fries': 200})", "test5": "calculate_junk_food_calories(['chips', 'pretzels', 'popcorn'], [2, 1, 3], {'chips': 150, 'pretzels': 120, 'popcorn': 80})", "test6": "calculate_junk_food_calories(['salad', 'soup', 'fruit'], [1, 2, 3], {'salad': 100, 'soup': 200, 'fruit': 50})", "test7": "calculate_junk_food_calories(['pizza', 'burgers', 'chips'], [1, 1, 2], {'pizza': 300, 'burgers': 500, 'chips': 150})", "test8": "calculate_junk_food_calories(['fries', 'pretzels', 'popcorn'], [2, 1, 1], {'fries': 200, 'pretzels': 120, 'popcorn': 80})", "test9": "calculate_junk_food_calories(['apples', 'bananas', 'oranges'], [1, 2, 3], {'apples': 50, 'bananas': 70, 'oranges': 30})", "test10": "calculate_junk_food_calories(['pizza', 'burgers', 'fries', 'chips', 'pretzels'], [1, 1, 1, 1, 1], {'pizza': 300, 'burgers': 500, 'fries': 200, 'chips': 150, 'pretzels': 120})"}, "hidden_information": "def calculate_junk_food_calories(food_items, food_quantities, food_calorie_density):\n    junk_food_calories = 0\n    for item, quantity in zip(food_items, food_quantities):\n        if item in ['pizza', 'burgers', 'fries', 'chips', 'pretzels']:\n            junk_food_calories += quantity * food_calorie_density[item]\n    return junk_food_calories"}
{"ground_truth": "def smooth_data(data_points, window_size):\n    smoothed_data = []\n    for i in range(len(data_points)):\n        start = max(0, i - window_size // 2)\n        end = min(len(data_points), i + window_size // 2 + 1)\n        smoothed_data.append(sum(data_points[start:end]) / (end - start))\n    return smoothed_data", "problem_description": "Hey, I need a Python function to take in a bunch of data points and smooth out the fluctuations. I don't know, maybe use some kind of sliding window or averaging technique? Can you write something that would work?The signature of the function is: def smooth_data(data_points, window_size)", "test_cases": {"test1": "smooth_data([1, 2, 3, 4, 5], 2)", "test2": "smooth_data([10, 12, 15, 13, 14], 3)", "test3": "smooth_data([25, 23, 22, 20, 21], 1)", "test4": "smooth_data([1, 1, 1, 1, 1], 5)", "test5": "smooth_data([5, 10, 15, 20, 25], 2)", "test6": "smooth_data([2, 4, 6, 8, 10], 1)", "test7": "smooth_data([-1, 1, -1, 1, -1], 3)", "test8": "smooth_data([0, 0, 0, 0, 0], 5)", "test9": "smooth_data([10, 9, 8, 7, 6], 2)", "test10": "smooth_data([5, 5, 5, 5, 5], 1)"}, "hidden_information": "def smooth_data(data_points, window_size):\n    smoothed_data = []\n    for i in range(len(data_points)):\n        start = max(0, i - window_size // 2)\n        end = min(len(data_points), i + window_size // 2 + 1)\n        smoothed_data.append(sum(data_points[start:end]) / (end - start))\n    return smoothed_data"}
{"ground_truth": "def most_annoying_device(devices): return max(devices, key=lambda x: x['annoyance_level'])", "problem_description": "Can you write a python function to determine which annoying device is the most annoying given a list of devices with their respective annoyance levels?The signature of the function is: def most_annoying_device(devices)", "test_cases": {"test1": "most_annoying_device([{'name': 'Pianobell', 'annoyance_level': 8}, {'name': 'Sat-Nag GPS', 'annoyance_level': 9}])", "test2": "most_annoying_device([{'name': 'Sound Gadget', 'annoyance_level': 6}, {'name': 'Laser Target Alarm Clock', 'annoyance_level': 7}])", "test3": "most_annoying_device([{'name': 'Mind Molestor', 'annoyance_level': 9}, {'name': 'Piano Doorbell', 'annoyance_level': 8}])", "test4": "most_annoying_device([{'name': 'Sat-Nag GPS', 'annoyance_level': 9}, {'name': 'Sound Gadget', 'annoyance_level': 6}])", "test5": "most_annoying_device([{'name': 'Laser Target Alarm Clock', 'annoyance_level': 7}, {'name': 'Pianobell', 'annoyance_level': 8}])", "test6": "most_annoying_device([{'name': 'Mind Molestor', 'annoyance_level': 9}, {'name': 'Sat-Nag GPS', 'annoyance_level': 9}])", "test7": "most_annoying_device([{'name': 'Piano Doorbell', 'annoyance_level': 8}, {'name': 'Sound Gadget', 'annoyance_level': 6}])", "test8": "most_annoying_device([{'name': 'Laser Target Alarm Clock', 'annoyance_level': 7}, {'name': 'Mind Molestor', 'annoyance_level': 9}])", "test9": "most_annoying_device([{'name': 'Pianobell', 'annoyance_level': 8}, {'name': 'Laser Target Alarm Clock', 'annoyance_level': 7}])", "test10": "most_annoying_device([{'name': 'Sat-Nag GPS', 'annoyance_level': 9}, {'name': 'Piano Doorbell', 'annoyance_level': 8}])"}, "hidden_information": "def most_annoying_device(devices): return max(devices, key=lambda x: x['annoyance_level'])"}
{"ground_truth": "def determine_shoe_fit(shoe_length, foot_length, preferred_gap=0.5):\n    if foot_length > shoe_length:\n        return 'Too tight'\n    elif foot_length + preferred_gap <= shoe_length:\n        return 'Perfect fit'\n    else:\n        return 'Too loose'", "problem_description": "I want the LLM agent to write a python function to help shoe store attendants determine the proper fit of shoes based on the length of the foot and the shoe. The function should take into account a preferred gap between the end of the foot and the shoe to ensure a comfortable fit.The signature of the function is: def determine_shoe_fit(shoe_length, foot_length, preferred_gap=0.5)", "test_cases": {"test1": "determine_shoe_fit(10, 9.5, 0.5)", "test2": "determine_shoe_fit(10, 10.5, 0.5)", "test3": "determine_shoe_fit(10, 8.8, 0.2)", "test4": "determine_shoe_fit(12, 11, 1)", "test5": "determine_shoe_fit(9, 9.2, 0.5)", "test6": "determine_shoe_fit(11, 10.8, 0.3)", "test7": "determine_shoe_fit(10, 10, 0.5)", "test8": "determine_shoe_fit(12, 11.2, 0.5)", "test9": "determine_shoe_fit(9.5, 9.2, 0.5)", "test10": "determine_shoe_fit(11.8, 11.5, 0.5)"}, "hidden_information": "def determine_shoe_fit(shoe_length, foot_length, preferred_gap=0.5):\n    if foot_length > shoe_length:\n        return 'Too tight'\n    elif foot_length + preferred_gap <= shoe_length:\n        return 'Perfect fit'\n    else:\n        return 'Too loose'"}
{"ground_truth": "def calculate_volume_truck_can_carry(weight_capacity, rock_density, height, width, length): \n    volume = (weight_capacity / rock_density) / (height * width * length)\n    return volume", "problem_description": "Hey agent, I want to know how to calculate the volume of rocks a large dump truck can carry. I saw a video of Russia's largest dump truck, can you write a python function to get this done?The signature of the function is: def calculate_volume_truck_can_carry(weight_capacity, rock_density, height, width, length)", "test_cases": {"test1": "calculate_volume_truck_can_carry(320000, 1.6, 7.8, 8.1, 21.6)", "test2": "calculate_volume_truck_can_carry(300000, 1.7, 7.9, 8.0, 21.5)", "test3": "calculate_volume_truck_can_carry(400000, 1.8, 8.0, 8.2, 21.7)", "test4": "calculate_volume_truck_can_carry(350000, 1.9, 8.1, 8.3, 21.9)", "test5": "calculate_volume_truck_can_carry(420000, 1.5, 7.7, 8.1, 21.5)", "test6": "calculate_volume_truck_can_carry(320000, 1.7, 7.8, 8.2, 21.6)", "test7": "calculate_volume_truck_can_carry(380000, 1.6, 8.0, 8.3, 21.8)", "test8": "calculate_volume_truck_can_carry(360000, 1.5, 7.9, 8.1, 21.7)", "test9": "calculate_volume_truck_can_carry(300000, 1.9, 7.8, 8.2, 21.5)", "test10": "calculate_volume_truck_can_carry(400000, 1.6, 8.1, 8.3, 22.0)"}, "hidden_information": "def calculate_volume_truck_can_carry(weight_capacity, rock_density, height, width, length): \n    volume = (weight_capacity / rock_density) / (height * width * length)\n    return volume"}
{"ground_truth": "def calculate_happiness_difference(parent_happiness_levels, non_parent_happiness_levels):\n    happiness_difference = [(parent - non_parent) for parent, non_parent in zip(parent_happiness_levels, non_parent_happiness_levels)]\n    return sum(happiness_difference) / len(happiness_difference)", "problem_description": "I'd like you to write a Python function that analyzes the relationship between happiness levels of parents and non-parents. I have some data, but I'm not sure how to make sense of it. Can you help me come up with a function that will show me how much happier or more miserable parents are compared to non-parents?The signature of the function is: def calculate_happiness_difference(parent_happiness_levels, non_parent_happiness_levels)", "test_cases": {"test1": "calculate_happiness_difference([8, 7, 9, 8], [6, 6, 7, 6])", "test2": "calculate_happiness_difference([5, 5, 5, 5], [5, 5, 5, 5])", "test3": "calculate_happiness_difference([10, 9, 8, 7], [6, 5, 4, 3])", "test4": "calculate_happiness_difference([4, 4, 4, 4], [8, 8, 8, 8])", "test5": "calculate_happiness_difference([7, 7, 7, 7], [7, 7, 7, 7])", "test6": "calculate_happiness_difference([9, 8, 9, 8], [7, 7, 7, 7])", "test7": "calculate_happiness_difference([6, 6, 6, 6], [9, 9, 9, 9])", "test8": "calculate_happiness_difference([8, 8, 8, 8], [8, 8, 8, 8])", "test9": "calculate_happiness_difference([5, 6, 7, 8], [4, 5, 6, 7])", "test10": "calculate_happiness_difference([10, 10, 10, 10], [0, 0, 0, 0])"}, "hidden_information": "def calculate_happiness_difference(parent_happiness_levels, non_parent_happiness_levels):\n    happiness_difference = [(parent - non_parent) for parent, non_parent in zip(parent_happiness_levels, non_parent_happiness_levels)]\n    return sum(happiness_difference) / len(happiness_difference)"}
{"ground_truth": "def categorize_omer_activities(activities, omer_days):\n    # Split the 49 days of Omer into two periods\n    # Period 1: Days 1-24, Period 2: Days 25-49\n    activities_in_period1 = ['shaving', 'haircuts', 'music']\n    activities_in_period2 = ['parties', 'weddings', 'concerts']\n\n    categorized_activities = {}\n    for activity in activities:\n        if activity in activities_in_period1:\n            categorized_activities[activity] = omer_days[:24]\n        elif activity in activities_in_period2:\n            categorized_activities[activity] = omer_days[24:]\n        else:\n            categorized_activities[activity] = 'N/A'\n\n    return categorized_activities", "problem_description": "I want to categorize different activities into two time periods during the Omer, but I'm not sure how to split them correctly. Can you help me write a python function that would take a list of activities and a list of Omer days, and return a dictionary with the correct time period for each activity?The signature of the function is: def categorize_omer_activities(activities, omer_days)", "test_cases": {"test1": "categorize_omer_activities(['shaving', 'parties', 'music'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test2": "categorize_omer_activities(['haircuts', 'weddings', 'concerts'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test3": "categorize_omer_activities(['reading', 'watching', 'traveling'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test4": "categorize_omer_activities(['cooking', 'cleaning', 'gardening'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test5": "categorize_omer_activities(['learning', 'meditating', 'praying'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test6": "categorize_omer_activities(['shaving', 'parties', 'learning'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test7": "categorize_omer_activities(['music', 'traveling', 'reading'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test8": "categorize_omer_activities(['parties', 'praying', 'watching'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test9": "categorize_omer_activities(['weddings', 'cooking', 'learning'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])", "test10": "categorize_omer_activities(['concerts', 'meditating', 'cleaning'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])"}, "hidden_information": "def categorize_omer_activities(activities, omer_days):\n    # Split the 49 days of Omer into two periods\n    # Period 1: Days 1-24, Period 2: Days 25-49\n    activities_in_period1 = ['shaving', 'haircuts', 'music']\n    activities_in_period2 = ['parties', 'weddings', 'concerts']\n\n    categorized_activities = {}\n    for activity in activities:\n        if activity in activities_in_period1:\n            categorized_activities[activity] = omer_days[:24]\n        elif activity in activities_in_period2:\n            categorized_activities[activity] = omer_days[24:]\n        else:\n            categorized_activities[activity] = 'N/A'\n\n    return categorized_activities"}
{"ground_truth": "def calculate_gematria(word):\n    # Define a dictionary to map Hebrew letters to their corresponding numerical values\n    gematria_values = {'Aleph': 1, 'Beit': 2, 'Gimmel': 3, 'Dalet': 4, 'Hey': 5, 'Vav': 6, 'Zayin': 7, 'Chet': 8, 'Tet': 9, 'Yud': 10, 'Khaf': 11, 'Lamed': 12, 'Mem': 13, 'Nun': 14, 'Samech': 15, 'Ayin': 16, 'Pei': 17, 'Tzadi': 18, 'Kuf': 19, 'Reish': 20, 'Shin': 21, 'Tav': 22}\n    word_map = {'\u05d0': 'Aleph', '\u05d1': 'Beit', '\u05d2': 'Gimmel', '\u05d3': 'Dalet', '\u05d4': 'Hey', '\u05d5': 'Vav', '\u05d6': 'Zayin', '\u05d7': 'Chet', '\u05d8': 'Tet', '\u05d9': 'Yud', '\u05db': 'Khaf', '\u05dc': 'Lamed', '\u05de': 'Mem', '\u05e0': 'Nun', '\u05e1': 'Samech', '\u05e2': 'Ayin', '\u05e4': 'Pei', '\u05e6': 'Tzadi', '\u05e7': 'Kuf', '\u05e8': 'Reish', '\u05e9': 'Shin', '\u05ea': 'Tav'}\n    gematria_sum = 0\n    for char in word:\n        if char in word_map:\n            gematria_sum += gematria_values[word_map[char]]\n    return gematria_sum", "problem_description": "Can you write a Python function for me that calculates the magical value of sacred words, I want to use it for spiritual purposes?The signature of the function is: def calculate_gematria(word)", "test_cases": {"test1": "calculate_gematria('\u05d0\u05d1\u05d2')", "test2": "calculate_gematria('\u05d9\u05d4')", "test3": "calculate_gematria('\u05e7\u05e8\u05d0')", "test4": "calculate_gematria('\u05d4\u05d5\u05d4')", "test5": "calculate_gematria('\u05d0')", "test6": "calculate_gematria('\u05d1')", "test7": "calculate_gematria('\u05e6\u05d9\u05d5')", "test8": "calculate_gematria('\u05e0\u05e8\u05df\u05d7')", "test9": "calculate_gematria('\u05de\u05e9\u05de\u05d7')", "test10": "calculate_gematria('\u05d4\u05dc\u05dc\u05d5\u05d9\u05d4')"}, "hidden_information": "def calculate_gematria(word):\n    # Define a dictionary to map Hebrew letters to their corresponding numerical values\n    gematria_values = {'Aleph': 1, 'Beit': 2, 'Gimmel': 3, 'Dalet': 4, 'Hey': 5, 'Vav': 6, 'Zayin': 7, 'Chet': 8, 'Tet': 9, 'Yud': 10, 'Khaf': 11, 'Lamed': 12, 'Mem': 13, 'Nun': 14, 'Samech': 15, 'Ayin': 16, 'Pei': 17, 'Tzadi': 18, 'Kuf': 19, 'Reish': 20, 'Shin': 21, 'Tav': 22}\n    word_map = {'\u05d0': 'Aleph', '\u05d1': 'Beit', '\u05d2': 'Gimmel', '\u05d3': 'Dalet', '\u05d4': 'Hey', '\u05d5': 'Vav', '\u05d6': 'Zayin', '\u05d7': 'Chet', '\u05d8': 'Tet', '\u05d9': 'Yud', '\u05db': 'Khaf', '\u05dc': 'Lamed', '\u05de': 'Mem', '\u05e0': 'Nun', '\u05e1': 'Samech', '\u05e2': 'Ayin', '\u05e4': 'Pei', '\u05e6': 'Tzadi', '\u05e7': 'Kuf', '\u05e8': 'Reish', '\u05e9': 'Shin', '\u05ea': 'Tav'}\n    gematria_sum = 0\n    for char in word:\n        if char in word_map:\n            gematria_sum += gematria_values[word_map[char]]\n    return gematria_sum"}
{"ground_truth": "def calculate_youtube_earnings(ad_views, revenue_per_view, creator_earn_percentage):\n    return ad_views * revenue_per_view * (creator_earn_percentage / 100)", "problem_description": "Hey, I make some content for YouTube. YouTube just announced they will be sharing revenue with content creators. I know I will get a percentage of the ad revenue based on my views. Can you write a python function to help me calculate my earnings? I want the function to take into account the total ad views and other factors, but the description is fuzzy.The signature of the function is: def calculate_youtube_earnings(ad_views, revenue_per_view, creator_earn_percentage)", "test_cases": {"test1": "calculate_youtube_earnings(10000, 0.01, 50)", "test2": "calculate_youtube_earnings(5000, 0.001, 60)", "test3": "calculate_youtube_earnings(20000, 0.005, 40)", "test4": "calculate_youtube_earnings(1000, 0.05, 20)", "test5": "calculate_youtube_earnings(50000, 0.01, 100)", "test6": "calculate_youtube_earnings(2000, 0.002, 30)", "test7": "calculate_youtube_earnings(30000, 0.003, 70)", "test8": "calculate_youtube_earnings(15000, 0.02, 90)", "test9": "calculate_youtube_earnings(8000, 0.005, 50)", "test10": "calculate_youtube_earnings(25000, 0.01, 25)"}, "hidden_information": "def calculate_youtube_earnings(ad_views, revenue_per_view, creator_earn_percentage):\n    return ad_views * revenue_per_view * (creator_earn_percentage / 100)"}
{"ground_truth": "def get_typing_approach(user_height, display_size, typing_experience, phone_model, preferred_hand):\n    comfort_level = 0.0\n    if user_height > 175 and display_size > 6:\n        comfort_level += 0.2\n    if typing_experience > 2:\n        comfort_level += 0.3\n    if phone_model in ['Samsung Galaxy', 'Google Pixel']:\n        comfort_level += 0.1\n    if preferred_hand in ['right', 'left']:\n        comfort_level += 0.1\n    if comfort_level >= 0.5:\n        return 'Typing with your thumbs'\n    elif comfort_level >= 0.2:\n        return 'Typing with your pointer finger'\n    else:\n        return 'Typing with a stylus'", "problem_description": "I want to improve my mobile typing skills but I'm not sure what's the best approach for me. I have a bit of experience typing on my computer but it doesn't translate to my smartphone. Can you write a python function that takes into account my height, phone display size, typing experience, phone model, and preferred hand to determine whether I should type with my thumbs, pointer finger, or a stylus?The signature of the function is: def get_typing_approach(user_height, display_size, typing_experience, phone_model, preferred_hand)", "test_cases": {"test1": "get_typing_approach(180, 6.5, 3, 'Samsung Galaxy', 'right')", "test2": "get_typing_approach(160, 5.5, 1, 'Apple iPhone', 'left')", "test3": "get_typing_approach(185, 7, 4, 'Google Pixel', 'right')", "test4": "get_typing_approach(170, 6, 2, 'OnePlus', 'left')", "test5": "get_typing_approach(190, 7.5, 5, 'Samsung Galaxy', 'right')", "test6": "get_typing_approach(165, 5, 1, 'Apple iPhone', 'left')", "test7": "get_typing_approach(175, 6, 2, 'Google Pixel', 'right')", "test8": "get_typing_approach(180, 7, 3, 'OnePlus', 'left')", "test9": "get_typing_approach(170, 6, 4, 'Apple iPhone', 'right')", "test10": "get_typing_approach(190, 7.5, 5, 'Samsung Galaxy', 'left')"}, "hidden_information": "def get_typing_approach(user_height, display_size, typing_experience, phone_model, preferred_hand):\n    comfort_level = 0.0\n    if user_height > 175 and display_size > 6:\n        comfort_level += 0.2\n    if typing_experience > 2:\n        comfort_level += 0.3\n    if phone_model in ['Samsung Galaxy', 'Google Pixel']:\n        comfort_level += 0.1\n    if preferred_hand in ['right', 'left']:\n        comfort_level += 0.1\n    if comfort_level >= 0.5:\n        return 'Typing with your thumbs'\n    elif comfort_level >= 0.2:\n        return 'Typing with your pointer finger'\n    else:\n        return 'Typing with a stylus'"}
{"ground_truth": "def time_until_desired_temp(current_temp, desired_temp, temp_changes):\n    if current_temp == desired_temp:\n        return 0\n    elif current_temp > desired_temp:\n        for i, change in enumerate(temp_changes):\n            if current_temp + change <= desired_temp:\n                return i + 1\n    else:\n        for i, change in enumerate(temp_changes):\n            if current_temp + change >= desired_temp:\n                return i + 1\n    return -1", "problem_description": "Can you write a Python function to help me figure out when it will be a certain temperature today? I want to know how many hours I have to wait until it reaches the temperature I want. The function should take into account the current temperature and the hourly temperature changes.The signature of the function is: def time_until_desired_temp(current_temp, desired_temp, temp_changes)", "test_cases": {"test1": "time_until_desired_temp(20, 25, [1, 2, 3, -1, -2, 1])", "test2": "time_until_desired_temp(30, 20, [-2, -1, 1, 2, -3, -1])", "test3": "time_until_desired_temp(15, 15, [0, 1, -1, 0, 0, 0])", "test4": "time_until_desired_temp(10, 20, [2, 3, 4, 5, 6])", "test5": "time_until_desired_temp(25, 15, [-1, -2, -3, -4, -5])", "test6": "time_until_desired_temp(20, 20, [-1, 1, -2, 2, -3, 3])", "test7": "time_until_desired_temp(10, 30, [1, 2, 3, 4, 5, 6, 7])", "test8": "time_until_desired_temp(15, 10, [-1, -2, -3, -4, -5, -6])", "test9": "time_until_desired_temp(25, 20, [0, 0, -1, -2, -3, 1])", "test10": "time_until_desired_temp(20, 25, [])"}, "hidden_information": "def time_until_desired_temp(current_temp, desired_temp, temp_changes):\n    if current_temp == desired_temp:\n        return 0\n    elif current_temp > desired_temp:\n        for i, change in enumerate(temp_changes):\n            if current_temp + change <= desired_temp:\n                return i + 1\n    else:\n        for i, change in enumerate(temp_changes):\n            if current_temp + change >= desired_temp:\n                return i + 1\n    return -1"}
{"ground_truth": "def parse_html(html_str):\n    import re\n    text_elements = re.findall(r'<([^>]*?)>(.*?)<\\/\\1>', html_str)\n    return [element[1] for element in text_elements]", "problem_description": "Write a Python function that can extract text elements from a simplified HTML document string. The document string contains HTML tags with the format <tag>text</tag> and the function should return a list of the text elements.The signature of the function is: def parse_html(html_str)", "test_cases": {"test1": "parse_html('<b>bold text</b><i>italic text</i>')", "test2": "parse_html('<p>This is a paragraph with <span>inline span</span> text.</p>')", "test3": "parse_html('<h1>Heading 1</h1><h2>Heading 2</h2>')", "test4": "parse_html('<b>bold text</b>')", "test5": "parse_html('<i>italic text</i>')", "test6": "parse_html('<p>This is a paragraph.</p>')", "test7": "parse_html('<h1>Heading 1</h1>')", "test8": "parse_html('<h2>Heading 2</h2>')", "test9": "parse_html('<b>bold text</b><i>italic text</i><p>This is a paragraph.</p>')", "test10": "parse_html('')"}, "hidden_information": "def parse_html(html_str):\n    import re\n    text_elements = re.findall(r'<([^>]*?)>(.*?)<\\/\\1>', html_str)\n    return [element[1] for element in text_elements]"}
{"ground_truth": "def calculate_standard_deviation(returns, years, mean_return):\n    squared_diffs = [(r - mean_return) ** 2 for r in returns]\n    variance = sum(squared_diffs) / len(returns)\n    return (variance ** 0.5) * (len(returns) / (len(years)))**0.5", "problem_description": "I want a python function to calculate the standard deviation of investment returns given the returns data of multiple years, but I don't know how to do it, can you help? The function will be used to measure the risk associated with an investment.The signature of the function is: def calculate_standard_deviation(returns, years, mean_return)", "test_cases": {"test1": "calculate_standard_deviation([12, 15, 10], [2015, 2016, 2017], 12)", "test2": "calculate_standard_deviation([10, 8, 12, 11], [2010, 2011, 2012, 2013], 10)", "test3": "calculate_standard_deviation([8, 9, 10, 11, 12], [2005, 2006, 2007, 2008, 2009], 10)", "test4": "calculate_standard_deviation([15, 18, 20, 12], [2010, 2011, 2012, 2013], 15)", "test5": "calculate_standard_deviation([8, 6, 7, 9, 10], [2000, 2001, 2002, 2003, 2004], 8)", "test6": "calculate_standard_deviation([12, 15, 18, 20], [2015, 2016, 2017, 2018], 15)", "test7": "calculate_standard_deviation([9, 11, 13, 15], [2010, 2011, 2012, 2013], 12)", "test8": "calculate_standard_deviation([7, 8, 9, 10], [2005, 2006, 2007, 2008], 8)", "test9": "calculate_standard_deviation([20, 22, 25, 28], [2015, 2016, 2017, 2018], 22)", "test10": "calculate_standard_deviation([5, 6, 7, 8, 9, 10], [2000, 2001, 2002, 2003, 2004, 2005], 7)"}, "hidden_information": "def calculate_standard_deviation(returns, years, mean_return):\n    squared_diffs = [(r - mean_return) ** 2 for r in returns]\n    variance = sum(squared_diffs) / len(returns)\n    return (variance ** 0.5) * (len(returns) / (len(years)))**0.5"}
{"ground_truth": "def calculate_total_socks_sold(days, socks_per_day, initial_stock):\n\ttotal_socks_sold = 0\n\tfor day in range(days):\n\t\tsocks_sold = min(socks_per_day, initial_stock)\n\t\ttotal_socks_sold += socks_sold\n\t\tinitial_stock -= socks_sold\n\treturn total_socks_sold", "problem_description": "Hey agent, can you write a python function that calculates the total number of socks sold by Aaron Cunningham in the clubhouse for a specific number of days, given the number of socks he sells per day and his initial stock?The signature of the function is: def calculate_total_socks_sold(days, socks_per_day, initial_stock)", "test_cases": {"test1": "calculate_total_socks_sold(5, 20, 100)", "test2": "calculate_total_socks_sold(3, 50, 150)", "test3": "calculate_total_socks_sold(10, 10, 50)", "test4": "calculate_total_socks_sold(7, 30, 200)", "test5": "calculate_total_socks_sold(1, 100, 500)", "test6": "calculate_total_socks_sold(15, 20, 300)", "test7": "calculate_total_socks_sold(8, 15, 120)", "test8": "calculate_total_socks_sold(4, 60, 240)", "test9": "calculate_total_socks_sold(9, 40, 360)", "test10": "calculate_total_socks_sold(6, 35, 210)"}, "hidden_information": "def calculate_total_socks_sold(days, socks_per_day, initial_stock):\n\ttotal_socks_sold = 0\n\tfor day in range(days):\n\t\tsocks_sold = min(socks_per_day, initial_stock)\n\t\ttotal_socks_sold += socks_sold\n\t\tinitial_stock -= socks_sold\n\treturn total_socks_sold"}
{"ground_truth": "def optimal_tcp_restart_interval(sequence_number, MaxSegmentLifetime=120, MinRTO=30): return max(sequence_number * MinRTO, MaxSegmentLifetime)", "problem_description": "I need a python function to find the optimal interval for restarting a TCP/IP session. The function should take into account the TCP sequence numbers and ensure it meets the 2-minute shutdown requirement as per the host requirements RFC.The signature of the function is: def optimal_tcp_restart_interval(sequence_number, MaxSegmentLifetime=120, MinRTO=30)", "test_cases": {"test1": "optimal_tcp_restart_interval(10, MaxSegmentLifetime=120, MinRTO=30)", "test2": "optimal_tcp_restart_interval(5, MaxSegmentLifetime=120, MinRTO=60)", "test3": "optimal_tcp_restart_interval(15, MaxSegmentLifetime=90, MinRTO=45)", "test4": "optimal_tcp_restart_interval(20, MaxSegmentLifetime=120, MinRTO=30)", "test5": "optimal_tcp_restart_interval(12, MaxSegmentLifetime=90, MinRTO=45)", "test6": "optimal_tcp_restart_interval(8, MaxSegmentLifetime=120, MinRTO=60)", "test7": "optimal_tcp_restart_interval(18, MaxSegmentLifetime=120, MinRTO=30)", "test8": "optimal_tcp_restart_interval(25, MaxSegmentLifetime=90, MinRTO=45)", "test9": "optimal_tcp_restart_interval(11, MaxSegmentLifetime=120, MinRTO=30)", "test10": "optimal_tcp_restart_interval(22, MaxSegmentLifetime=90, MinRTO=45)"}, "hidden_information": "def optimal_tcp_restart_interval(sequence_number, MaxSegmentLifetime=120, MinRTO=30): return max(sequence_number * MinRTO, MaxSegmentLifetime)"}
{"ground_truth": "def check_laptop_temperature(temp, unit='f', safe_range=(159, 191)):\n  if unit == 'f':\n    safe_diff_min, safe_diff_max = 0, safe_range[1] - safe_range[0]\n  else:\n    safe_diff_min, safe_diff_max = 0, (safe_range[1] - 32) * 5/9 - ((safe_range[0] - 32) * 5/9)\n  temp_diff = temp - safe_range[0] if unit == 'f' else (temp - 32) * 5/9 - (safe_range[0] - 32) * 5/9\n  return 'within safe range' if 0 <= temp_diff <= safe_diff_max else f'outside safe range by {abs(temp_diff)} degrees'", "problem_description": "I need a Python function to determine if my laptop's temperature is within a safe range when building OpenOffice, considering the temperature unit and the threshold at which my laptop shuts down. Can the agent write this function for me?The signature of the function is: def check_laptop_temperature(temp, unit='f', safe_range=(159, 191))", "test_cases": {"test1": "check_laptop_temperature(170, 'f')", "test2": "check_laptop_temperature(200, 'f')", "test3": "check_laptop_temperature(75, 'c')", "test4": "check_laptop_temperature(190, 'f', (150, 180))", "test5": "check_laptop_temperature(152, 'f', (150, 180))", "test6": "check_laptop_temperature(179, 'f', (150, 180))", "test7": "check_laptop_temperature(71, 'c', (65, 85))", "test8": "check_laptop_temperature(77, 'c', (65, 85))", "test9": "check_laptop_temperature(91, 'c', (65, 85))", "test10": "check_laptop_temperature(80, 'c', (73, 79))"}, "hidden_information": "def check_laptop_temperature(temp, unit='f', safe_range=(159, 191)):\n  if unit == 'f':\n    safe_diff_min, safe_diff_max = 0, safe_range[1] - safe_range[0]\n  else:\n    safe_diff_min, safe_diff_max = 0, (safe_range[1] - 32) * 5/9 - ((safe_range[0] - 32) * 5/9)\n  temp_diff = temp - safe_range[0] if unit == 'f' else (temp - 32) * 5/9 - (safe_range[0] - 32) * 5/9\n  return 'within safe range' if 0 <= temp_diff <= safe_diff_max else f'outside safe range by {abs(temp_diff)} degrees'"}
{"ground_truth": "def get_reward(donation_amount):\n    if donation_amount < 10:\n        return 'Absolutely nothing'\n    elif donation_amount < 50:\n        return 'A video of Jon Lajoie being disgusted with your Facebook profile'\n    elif donation_amount < 100:\n        return 'The ability to brag to your friends about meeting Jon Lajoie'\n    else:\n        return 'Meet Jon Lajoie in person'", "problem_description": "Write a Python function that determines the reward for a person who has donated money to a fundraising campaign. The reward system has different levels based on the donation amount, but I'm not sure how many levels there are or what the exact levels are. Can you figure it out and write the function?The signature of the function is: def get_reward(donation_amount)", "test_cases": {"test1": "get_reward(5)", "test2": "get_reward(20)", "test3": "get_reward(75)", "test4": "get_reward(150)", "test5": "get_reward(500)", "test6": "get_reward(0)", "test7": "get_reward(11)", "test8": "get_reward(45)", "test9": "get_reward(90)", "test10": "get_reward(200)"}, "hidden_information": "def get_reward(donation_amount):\n    if donation_amount < 10:\n        return 'Absolutely nothing'\n    elif donation_amount < 50:\n        return 'A video of Jon Lajoie being disgusted with your Facebook profile'\n    elif donation_amount < 100:\n        return 'The ability to brag to your friends about meeting Jon Lajoie'\n    else:\n        return 'Meet Jon Lajoie in person'"}
{"ground_truth": "def compute_points_order_2(a, b):\n    points = []\n    for x in range(-100, 101):\n        discriminant = 27 * x**4 + 18 * a * x**2 + 4 * a**3 + 27 * b**2\n        if discriminant == 0 and (x**3 + a * x + b) == 0:\n            points.append((x, 0))\n    return points", "problem_description": "I have an elliptic curve in the form y^2 = x^3 + ax + b. Can you help me write a Python function to find all points of order 2 on this curve?The signature of the function is: def compute_points_order_2(a, b)", "test_cases": {"test1": "compute_points_order_2(4, 0)", "test2": "compute_points_order_2(-4, 0)", "test3": "compute_points_order_2(0, 2)", "test4": "compute_points_order_2(0, -2)", "test5": "compute_points_order_2(4, 4)", "test6": "compute_points_order_2(-4, 4)", "test7": "compute_points_order_2(2, 1)", "test8": "compute_points_order_2(2, -1)", "test9": "compute_points_order_2(-2, 1)", "test10": "compute_points_order_2(-2, -1)"}, "hidden_information": "def compute_points_order_2(a, b):\n    points = []\n    for x in range(-100, 101):\n        discriminant = 27 * x**4 + 18 * a * x**2 + 4 * a**3 + 27 * b**2\n        if discriminant == 0 and (x**3 + a * x + b) == 0:\n            points.append((x, 0))\n    return points"}
{"ground_truth": "def calculate_simply_connected_subsets(m, n):\n    # Create a 2D grid with m+1 rows and n+1 columns\n    grid = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    # Initialize count of simply connected subsets\n    count = 0\n    # Iterate over each cell in the grid\n    for i in range(m+1):\n        for j in range(n+1):\n            # Check if the cell is within the grid boundaries\n            if 0 <= i <= m and 0 <= j <= n:\n                # Increment count if the cell is a simply connected subset\n                count += 1\n    return count + 1", "problem_description": "Write a Python function to calculate the number of simply connected subsets of tiles in a grid. The grid has m rows and n columns, and each tile can be either empty or filled. A simply connected subset of tiles is a set of tiles that are connected by edges and do not contain any holes. Can you write a function that takes the number of rows and columns as input and returns the number of simply connected subsets of tiles?The signature of the function is: def calculate_simply_connected_subsets(m, n)", "test_cases": {"test1": "calculate_simply_connected_subsets(1, 1)", "test2": "calculate_simply_connected_subsets(2, 2)", "test3": "calculate_simply_connected_subsets(3, 3)", "test4": "calculate_simply_connected_subsets(4, 4)", "test5": "calculate_simply_connected_subsets(5, 5)", "test6": "calculate_simply_connected_subsets(1, 2)", "test7": "calculate_simply_connected_subsets(2, 1)", "test8": "calculate_simply_connected_subsets(3, 2)", "test9": "calculate_simply_connected_subsets(2, 3)", "test10": "calculate_simply_connected_subsets(4, 3)"}, "hidden_information": "def calculate_simply_connected_subsets(m, n):\n    # Create a 2D grid with m+1 rows and n+1 columns\n    grid = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    # Initialize count of simply connected subsets\n    count = 0\n    # Iterate over each cell in the grid\n    for i in range(m+1):\n        for j in range(n+1):\n            # Check if the cell is within the grid boundaries\n            if 0 <= i <= m and 0 <= j <= n:\n                # Increment count if the cell is a simply connected subset\n                count += 1\n    return count + 1"}
{"ground_truth": "def calculate_pain_management_success(patient_data, program_duration):\n    # patient_data is a dictionary where keys are patient IDs and values are dictionaries containing opioid use before and after the program\n    # program_duration is the duration of the pain management program in weeks\n    success_count = 0\n    for patient, data in patient_data.items():\n        if data['opioid_use_after'] < data['opioid_use_before']:\n            success_count += 1\n    return (success_count / len(patient_data)) * 100", "problem_description": "Hi, I need a python function that can calculate the success rate of a pain management program, specifically the percentage of patients who reduced their opioid use after attending the program, but I'm not sure what details are needed to make the calculation accurate.The signature of the function is: def calculate_pain_management_success(patient_data, program_duration)", "test_cases": {"test1": "calculate_pain_management_success({1: {'opioid_use_before': 10, 'opioid_use_after': 5}, 2: {'opioid_use_before': 15, 'opioid_use_after': 20}}, 12)", "test2": "calculate_pain_management_success({1: {'opioid_use_before': 5, 'opioid_use_after': 0}, 2: {'opioid_use_before': 10, 'opioid_use_after': 8}, 3: {'opioid_use_before': 20, 'opioid_use_after': 15}}, 8)", "test3": "calculate_pain_management_success({1: {'opioid_use_before': 10, 'opioid_use_after': 10}, 2: {'opioid_use_before': 15, 'opioid_use_after': 15}}, 12)", "test4": "calculate_pain_management_success({1: {'opioid_use_before': 5, 'opioid_use_after': 3}, 2: {'opioid_use_before': 10, 'opioid_use_after': 8}, 3: {'opioid_use_before': 20, 'opioid_use_after': 18}}, 8)", "test5": "calculate_pain_management_success({1: {'opioid_use_before': 10, 'opioid_use_after': 5}, 2: {'opioid_use_before': 15, 'opioid_use_after': 5}}, 12)", "test6": "calculate_pain_management_success({1: {'opioid_use_before': 5, 'opioid_use_after': 5}, 2: {'opioid_use_before': 10, 'opioid_use_after': 10}, 3: {'opioid_use_before': 20, 'opioid_use_after': 20}}, 8)", "test7": "calculate_pain_management_success({1: {'opioid_use_before': 10, 'opioid_use_after': 8}, 2: {'opioid_use_before': 15, 'opioid_use_after': 12}}, 12)", "test8": "calculate_pain_management_success({1: {'opioid_use_before': 5, 'opioid_use_after': 0}, 2: {'opioid_use_before': 10, 'opioid_use_after': 5}, 3: {'opioid_use_before': 20, 'opioid_use_after': 10}}, 8)", "test9": "calculate_pain_management_success({1: {'opioid_use_before': 10, 'opioid_use_after': 10}, 2: {'opioid_use_before': 15, 'opioid_use_after': 8}}, 12)", "test10": "calculate_pain_management_success({1: {'opioid_use_before': 5, 'opioid_use_after': 3}, 2: {'opioid_use_before': 10, 'opioid_use_after': 5}, 3: {'opioid_use_before': 20, 'opioid_use_after': 15}}, 8)"}, "hidden_information": "def calculate_pain_management_success(patient_data, program_duration):\n    # patient_data is a dictionary where keys are patient IDs and values are dictionaries containing opioid use before and after the program\n    # program_duration is the duration of the pain management program in weeks\n    success_count = 0\n    for patient, data in patient_data.items():\n        if data['opioid_use_after'] < data['opioid_use_before']:\n            success_count += 1\n    return (success_count / len(patient_data)) * 100"}
{"ground_truth": "def calculate_box_parameters(height, width, box_height, box_width):\n    # Calculate horizontal margin\n    margin_left = (width - box_width) / 2\n    margin_right = width - box_width - margin_left\n    # Calculate vertical margin\n    margin_top = (height - box_height) / 2\n    margin_bottom = height - box_height - margin_top\n    return margin_left, margin_right, margin_top, margin_bottom", "problem_description": "Write a Python function to calculate the margins for a box to be placed within a larger window. The box should be centered horizontally and vertically. It seems like it should be easy to figure out the values, but I just can't seem to get itThe signature of the function is: def calculate_box_parameters(height, width, box_height, box_width)", "test_cases": {"test1": "calculate_box_parameters(800, 600, 200, 100)", "test2": "calculate_box_parameters(1024, 768, 300, 200)", "test3": "calculate_box_parameters(640, 480, 100, 50)", "test4": "calculate_box_parameters(1280, 1024, 400, 200)", "test5": "calculate_box_parameters(1600, 1200, 500, 300)", "test6": "calculate_box_parameters(800, 600, 100, 100)", "test7": "calculate_box_parameters(1024, 768, 200, 150)", "test8": "calculate_box_parameters(640, 480, 200, 200)", "test9": "calculate_box_parameters(1280, 1024, 300, 300)", "test10": "calculate_box_parameters(1600, 1200, 250, 400)"}, "hidden_information": "def calculate_box_parameters(height, width, box_height, box_width):\n    # Calculate horizontal margin\n    margin_left = (width - box_width) / 2\n    margin_right = width - box_width - margin_left\n    # Calculate vertical margin\n    margin_top = (height - box_height) / 2\n    margin_bottom = height - box_height - margin_top\n    return margin_left, margin_right, margin_top, margin_bottom"}
{"ground_truth": "def review_suggested_edit(edit_id, edit_revision, approver_comment, editor_id):\n    # Approve or reject the edit\n    if edit_revision == 'good':\n        status = 'approved'\n    else:\n        status = 'rejected'\n    # Add reason for rejection if applicable\n    if status == 'rejected' and approver_comment:\n        reason = approver_comment\n    else:\n        reason = ''\n    return {'status': status, 'reason': reason}", "problem_description": "I want you to write a Python function for reviewing suggested edits on a post. The function should take the edit ID, edit revision, approver comment, and editor ID as input. It should return a dictionary containing the status of the review (approved or rejected) and a reason for the rejection, if applicable.The signature of the function is: def review_suggested_edit(edit_id, edit_revision, approver_comment, editor_id)", "test_cases": {"test1": "review_suggested_edit(1, 'good', '', 1)", "test2": "review_suggested_edit(2, 'bad', 'Poor grammar', 2)", "test3": "review_suggested_edit(3, 'good', 'No comment', 3)", "test4": "review_suggested_edit(4, 'bad', '', 4)", "test5": "review_suggested_edit(5, 'good', 'Great job!', 5)", "test6": "review_suggested_edit(6, 'bad', 'Incorrect information', 6)", "test7": "review_suggested_edit(7, 'good', '', 7)", "test8": "review_suggested_edit(8, 'bad', 'Not relevant', 8)", "test9": "review_suggested_edit(9, 'good', 'Good effort!', 9)", "test10": "review_suggested_edit(10, 'bad', 'Too long', 10)"}, "hidden_information": "def review_suggested_edit(edit_id, edit_revision, approver_comment, editor_id):\n    # Approve or reject the edit\n    if edit_revision == 'good':\n        status = 'approved'\n    else:\n        status = 'rejected'\n    # Add reason for rejection if applicable\n    if status == 'rejected' and approver_comment:\n        reason = approver_comment\n    else:\n        reason = ''\n    return {'status': status, 'reason': reason}"}
{"ground_truth": "def identify_killer(clues, suspects):\n    # calculate the probability of each suspect being the killer based on the clues\n    probabilities = {}\n    for suspect in suspects:\n        probability = 1\n        for clue in clues:\n            if 'motive' in clue and clue['motive'] == suspect:\n                probability *= 0.7\n            elif 'means' in clue and clue['means'] == suspect:\n                probability *= 0.6\n            elif 'opportunity' in clue and clue['opportunity'] == suspect:\n                probability *= 0.8\n        probabilities[suspect] = probability\n\n    # find the suspect with the highest probability\n    killer = max(probabilities, key=probabilities.get)\n    return killer", "problem_description": "Can you write a python function to determine the killer in a Columbo episode based on a set of clues? The clues may include motives, means, opportunities, and other factors that could point to the killer's identity.The signature of the function is: def identify_killer(clues, suspects)", "test_cases": {"test1": "identify_killer([{'motive': 'John'}, {'means': 'Jane'}], ['John', 'Jane', 'Bob'])", "test2": "identify_killer([{'opportunity': 'John'}, {'means': 'Bob'}], ['John', 'Jane', 'Bob'])", "test3": "identify_killer([{'motive': 'Jane'}, {'means': 'John'}, {'opportunity': 'Jane'}], ['John', 'Jane', 'Bob'])", "test4": "identify_killer([{'means': 'Jane'}, {'opportunity': 'Bob'}, {'motive': 'John'}], ['John', 'Jane', 'Bob'])", "test5": "identify_killer([{'opportunity': 'John'}, {'motive': 'Jane'}, {'means': 'Bob'}], ['John', 'Jane', 'Bob'])", "test6": "identify_killer([{'means': 'John'}, {'motive': 'Bob'}, {'opportunity': 'Jane'}], ['John', 'Jane', 'Bob'])", "test7": "identify_killer([{'opportunity': 'Bob'}, {'means': 'John'}, {'motive': 'Jane'}], ['John', 'Jane', 'Bob'])", "test8": "identify_killer([{'means': 'Jane'}, {'opportunity': 'John'}, {'motive': 'Bob'}], ['John', 'Jane', 'Bob'])", "test9": "identify_killer([{'motive': 'John'}, {'opportunity': 'Bob'}, {'means': 'Jane'}], ['John', 'Jane', 'Bob'])", "test10": "identify_killer([{'means': 'Bob'}, {'motive': 'Jane'}, {'opportunity': 'John'}], ['John', 'Jane', 'Bob'])"}, "hidden_information": "def identify_killer(clues, suspects):\n    # calculate the probability of each suspect being the killer based on the clues\n    probabilities = {}\n    for suspect in suspects:\n        probability = 1\n        for clue in clues:\n            if 'motive' in clue and clue['motive'] == suspect:\n                probability *= 0.7\n            elif 'means' in clue and clue['means'] == suspect:\n                probability *= 0.6\n            elif 'opportunity' in clue and clue['opportunity'] == suspect:\n                probability *= 0.8\n        probabilities[suspect] = probability\n\n    # find the suspect with the highest probability\n    killer = max(probabilities, key=probabilities.get)\n    return killer"}
{"ground_truth": "def is_fristian(statement, identifying_features):\n    fristian_keywords = ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing']\n    keywords_in_statement = [feature for feature in identifying_features if feature in statement]\n    return len(keywords_in_statement) > 2 and any(keyword in statement for keyword in ['hate', 'right wing'])", "problem_description": "Write a python function that determines whether a person's statement indicates that they are a Fristian. I think there are some keywords and features that are associated with Fristians, can you figure it out?The signature of the function is: def is_fristian(statement, identifying_features)", "test_cases": {"test1": "is_fristian('I love Jesus, hate gays, and support the right wing.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test2": "is_fristian('I am a proud Democrat and I love everyone.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test3": "is_fristian('I have Jesus powers.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test4": "is_fristian('I am a Republican, love Jesus and brown skinned people.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test5": "is_fristian('I hate brown skinned people and I am a Christian.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test6": "is_fristian('I am a proud Christian and I love everyone.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test7": "is_fristian('I support right wing ideology and I love Jesus.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test8": "is_fristian('I am a Republican and love everyone.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test9": "is_fristian('I hate everyone.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])", "test10": "is_fristian('I am a proud Christian and a right wing Republican who loves Jesus.', ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing'])"}, "hidden_information": "def is_fristian(statement, identifying_features):\n    fristian_keywords = ['gays', 'brown skinned people', 'Jesus powers', 'Republican', 'Christian', 'hate', 'right wing']\n    keywords_in_statement = [feature for feature in identifying_features if feature in statement]\n    return len(keywords_in_statement) > 2 and any(keyword in statement for keyword in ['hate', 'right wing'])"}
{"ground_truth": "def calculate_damage(num_planes, num_casualties, damage_extent, target_type='building', damage_type='fire'):\n    damage_multiplier = {'building': 10, 'airport': 20}[target_type]\n    return (num_planes * damage_multiplier) + (num_casualties * 5) + damage_extent", "problem_description": "Can you write a python function to help us estimate the total damage in a hypothetical scenario where multiple planes attack a city? We want to take into account the number of planes, the number of casualties, the extent of the damage, and the type of target.The signature of the function is: def calculate_damage(num_planes, num_casualties, damage_extent, target_type='building', damage_type='fire')", "test_cases": {"test1": "calculate_damage(2, 2, 100, target_type='building', damage_type='fire')", "test2": "calculate_damage(3, 10, 200, target_type='airport', damage_type='explosion')", "test3": "calculate_damage(1, 5, 50, target_type='building', damage_type='smoke')", "test4": "calculate_damage(2, 15, 300, target_type='airport', damage_type='fire')", "test5": "calculate_damage(4, 20, 400, target_type='building', damage_type='explosion')", "test6": "calculate_damage(1, 8, 150, target_type='airport', damage_type='smoke')", "test7": "calculate_damage(3, 12, 250, target_type='building', damage_type='fire')", "test8": "calculate_damage(2, 6, 120, target_type='airport', damage_type='explosion')", "test9": "calculate_damage(1, 4, 80, target_type='building', damage_type='smoke')", "test10": "calculate_damage(4, 25, 500, target_type='airport', damage_type='fire')"}, "hidden_information": "def calculate_damage(num_planes, num_casualties, damage_extent, target_type='building', damage_type='fire'):\n    damage_multiplier = {'building': 10, 'airport': 20}[target_type]\n    return (num_planes * damage_multiplier) + (num_casualties * 5) + damage_extent"}
{"ground_truth": "def get_poem_info(ranking):\n    trending_poems = [\n        {'title': 'Daffodils', 'poet': 'William Wordsworth'},\n        {'title': 'If', 'poet': 'Rudyard Kipling'},\n        {'title': 'Madhushala', 'poet': 'Harivansh Rai Bachchan'},\n        {'title': 'Love', 'poet': 'Sarah Flower Adams'},\n        {'title': 'Stopping by Woods on a Snowy Evening', 'poet': 'Robert Frost'},\n        {'title': 'Invictus', 'poet': 'William Ernest Henley'},\n        {'title': 'No Man Is An Island', 'poet': 'John Donne'},\n        {'title': 'Your Laughter', 'poet': 'Pablo Neruda'},\n        {'title': 'Death is Nothing at All', 'poet': 'Henry Scott Holland'},\n        {'title': 'Annabel Lee', 'poet': 'Edgar Allan Poe'}\n    ]\n    if ranking < 1 or ranking > 10:\n        return 'Invalid ranking'\n    else:\n        return trending_poems[ranking - 1]", "problem_description": "Hi, I need help with writing a Python function that selects a poem from a list of trending poems based on its ranking. The function should output the title and poet of the poem. The list of trending poems includes Daffodils, If, Madhushala, Love, Stopping by Woods on a Snowy Evening, Invictus, No Man Is An Island, Your Laughter, Death is Nothing at All, and Annabel Lee, but I don't know the order or the poets. Can you help me write this function?The signature of the function is: def get_poem_info(ranking)", "test_cases": {"test1": "get_poem_info(5)", "test2": "get_poem_info(1)", "test3": "get_poem_info(10)", "test4": "get_poem_info(15)", "test5": "get_poem_info(-1)", "test6": "get_poem_info(4)", "test7": "get_poem_info(8)", "test8": "get_poem_info(9)", "test9": "get_poem_info(2)", "test10": "get_poem_info(3)"}, "hidden_information": "def get_poem_info(ranking):\n    trending_poems = [\n        {'title': 'Daffodils', 'poet': 'William Wordsworth'},\n        {'title': 'If', 'poet': 'Rudyard Kipling'},\n        {'title': 'Madhushala', 'poet': 'Harivansh Rai Bachchan'},\n        {'title': 'Love', 'poet': 'Sarah Flower Adams'},\n        {'title': 'Stopping by Woods on a Snowy Evening', 'poet': 'Robert Frost'},\n        {'title': 'Invictus', 'poet': 'William Ernest Henley'},\n        {'title': 'No Man Is An Island', 'poet': 'John Donne'},\n        {'title': 'Your Laughter', 'poet': 'Pablo Neruda'},\n        {'title': 'Death is Nothing at All', 'poet': 'Henry Scott Holland'},\n        {'title': 'Annabel Lee', 'poet': 'Edgar Allan Poe'}\n    ]\n    if ranking < 1 or ranking > 10:\n        return 'Invalid ranking'\n    else:\n        return trending_poems[ranking - 1]"}
{"ground_truth": "def evaluate_pokemon_worthiness(pokemon_stats, min_defense, min_attack, bulkiness_weight, defense_expense):\n    defense = pokemon_stats['defense'] + pokemon_stats['special-defense']\n    attack = pokemon_stats['attack']\n    bulkiness = defense * 0.01 * pokemon_stats['hp']\n    overall_score = (defense * defense_expense) + (attack * 0.5) + (bulkiness * bulkiness_weight)\n    if overall_score > 600 and attack >= min_attack and defense >= min_defense:\n        return True\n    else:\n        return False", "problem_description": "I want the LLM agent to write a python function that takes a pokemon's stats and other specific battle factors into account to determine if a specific pokemon is worth training for battle. Please write this function.The signature of the function is: def evaluate_pokemon_worthiness(pokemon_stats, min_defense, min_attack, bulkiness_weight, defense_expense)", "test_cases": {"test1": "evaluate_pokemon_worthiness({'hp': 100, 'attack': 120, 'defense': 80, 'special-defense': 150}, 100, 100, 2, 1.0)", "test2": "evaluate_pokemon_worthiness({'hp': 70, 'attack': 40, 'defense': 60, 'special-defense': 100}, 100, 100, 1.5, 1.5)", "test3": "evaluate_pokemon_worthiness({'hp': 120, 'attack': 100, 'defense': 120, 'special-defense': 130}, 100, 100, 1.8, 1.2)", "test4": "evaluate_pokemon_worthiness({'hp': 80, 'attack': 80, 'defense': 80, 'special-defense': 80}, 70, 70, 2.0, 1.3)", "test5": "evaluate_pokemon_worthiness({'hp': 90, 'attack': 70, 'defense': 90, 'special-defense': 100}, 100, 70, 2.0, 1.2)", "test6": "evaluate_pokemon_worthiness({'hp': 100, 'attack': 150, 'defense': 80, 'special-defense': 80}, 70, 70, 1.8, 1.2)", "test7": "evaluate_pokemon_worthiness({'hp': 70, 'attack': 120, 'defense': 100, 'special-defense': 120}, 70, 100, 2.1, 1.2)", "test8": "evaluate_pokemon_worthiness({'hp': 80, 'attack': 150, 'defense': 60, 'special-defense': 60}, 70, 100, 1.8, 1.3)", "test9": "evaluate_pokemon_worthiness({'hp': 120, 'attack': 80, 'defense': 120, 'special-defense': 100}, 100, 100, 2.1, 1.3)", "test10": "evaluate_pokemon_worthiness({'hp': 70, 'attack': 100, 'defense': 70, 'special-defense': 100}, 70, 70, 1.9, 1.0)"}, "hidden_information": "def evaluate_pokemon_worthiness(pokemon_stats, min_defense, min_attack, bulkiness_weight, defense_expense):\n    defense = pokemon_stats['defense'] + pokemon_stats['special-defense']\n    attack = pokemon_stats['attack']\n    bulkiness = defense * 0.01 * pokemon_stats['hp']\n    overall_score = (defense * defense_expense) + (attack * 0.5) + (bulkiness * bulkiness_weight)\n    if overall_score > 600 and attack >= min_attack and defense >= min_defense:\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_productivity_score(communication_frequency, goal_achievement, time_management, collaboration, learning_new_skills):\n    # Assign weights to each parameter based on their importance\n    weights = [0.2, 0.25, 0.2, 0.15, 0.2]\n    # Calculate the productivity score\n    productivity_score = (communication_frequency * weights[0] +\n                       goal_achievement * weights[1] +\n                       time_management * weights[2] +\n                       collaboration * weights[3] +\n                       learning_new_skills * weights[4]) / sum(weights)\n    return productivity_score", "problem_description": "I'm a junior developer working from home and I want to assess my productivity. I'd like the agent to write a Python function that calculates a productivity score based on various metrics such as communication frequency, goal achievement, time management, collaboration, and learning new skills. The function should take these metrics as inputs and provide a score that reflects my overall productivity.The signature of the function is: def calculate_productivity_score(communication_frequency, goal_achievement, time_management, collaboration, learning_new_skills)", "test_cases": {"test1": "calculate_productivity_score(5, 0.8, 4, 3, 4)", "test2": "calculate_productivity_score(4, 0.7, 3, 4, 5)", "test3": "calculate_productivity_score(3, 0.6, 2, 5, 4)", "test4": "calculate_productivity_score(5, 0.9, 5, 5, 5)", "test5": "calculate_productivity_score(2, 0.5, 1, 2, 3)", "test6": "calculate_productivity_score(4, 0.8, 3, 4, 4)", "test7": "calculate_productivity_score(5, 0.95, 5, 5, 5)", "test8": "calculate_productivity_score(3, 0.6, 2, 3, 4)", "test9": "calculate_productivity_score(4, 0.7, 3, 4, 4)", "test10": "calculate_productivity_score(5, 1.0, 5, 5, 5)"}, "hidden_information": "def calculate_productivity_score(communication_frequency, goal_achievement, time_management, collaboration, learning_new_skills):\n    # Assign weights to each parameter based on their importance\n    weights = [0.2, 0.25, 0.2, 0.15, 0.2]\n    # Calculate the productivity score\n    productivity_score = (communication_frequency * weights[0] +\n                       goal_achievement * weights[1] +\n                       time_management * weights[2] +\n                       collaboration * weights[3] +\n                       learning_new_skills * weights[4]) / sum(weights)\n    return productivity_score"}
{"ground_truth": "def determine_chaplain_authority(institution_type, chaplain_type, has_ordinary_consent, has_local_pastor_withdrawal):\n    if institution_type == 'ecclesiastical_institution':\n        if chaplain_type == 'secular_clergy':\n            return 'Ordinary'\n        else:\n            return 'Religious Superior'\n    elif institution_type == 'lay_community' or institution_type == 'institution':\n        if has_ordinary_consent:\n            return 'Ordinary'\n        else:\n            return 'Religious Superior'\n    elif institution_type == 'hospital' or institution_type == 'non_exempt_religious_community':\n        if has_local_pastor_withdrawal:\n            return 'Chaplain'\n        else:\n            return 'Local Pastor'", "problem_description": "I want you to write a python function to determine the authority of a chaplain in different institutions, it should consider the type of institution, the type of chaplain, and any other relevant factors.The signature of the function is: def determine_chaplain_authority(institution_type, chaplain_type, has_ordinary_consent, has_local_pastor_withdrawal)", "test_cases": {"test1": "determine_chaplain_authority('ecclesiastical_institution', 'secular_clergy', True, False)", "test2": "determine_chaplain_authority('lay_community', 'religious', False, False)", "test3": "determine_chaplain_authority('hospital', 'secular_clergy', True, True)", "test4": "determine_chaplain_authority('non_exempt_religious_community', 'religious', False, False)", "test5": "determine_chaplain_authority('ecclesiastical_institution', 'secular_clergy', False, False)", "test6": "determine_chaplain_authority('lay_community', 'secular_clergy', True, False)", "test7": "determine_chaplain_authority('institution', 'religious', False, False)", "test8": "determine_chaplain_authority('hospital', 'secular_clergy', False, True)", "test9": "determine_chaplain_authority('ecclesiastical_institution', 'religious', True, False)", "test10": "determine_chaplain_authority('non_exempt_religious_community', 'secular_clergy', True, False)"}, "hidden_information": "def determine_chaplain_authority(institution_type, chaplain_type, has_ordinary_consent, has_local_pastor_withdrawal):\n    if institution_type == 'ecclesiastical_institution':\n        if chaplain_type == 'secular_clergy':\n            return 'Ordinary'\n        else:\n            return 'Religious Superior'\n    elif institution_type == 'lay_community' or institution_type == 'institution':\n        if has_ordinary_consent:\n            return 'Ordinary'\n        else:\n            return 'Religious Superior'\n    elif institution_type == 'hospital' or institution_type == 'non_exempt_religious_community':\n        if has_local_pastor_withdrawal:\n            return 'Chaplain'\n        else:\n            return 'Local Pastor'"}
{"ground_truth": "def calculate_admins(desired_availability, server_count, customization_level, change_frequency, change_volume, other_systems):\n    # Calculate admins based on desired availability\n    avail_admins = 1 if desired_availability == \"low\" else 2 if desired_availability == \"medium\" else 3\n    # Calculate admins based on server count\n    server_admins = server_count / 20 # assuming one admin per 20 servers\n    # Calculate admins based on customization level\n    cust_admins = 1 if customization_level == \"low\" else 2 if customization_level == \"medium\" else 3\n    # Calculate admins based on change frequency and volume\n    change_admins = change_frequency + change_volume\n    # Calculate admins based on other systems\n    other_admins = len(other_systems) * 0.5 # assuming 0.5 admins per other system\n\n    return int(avail_admins + server_admins + cust_admins + change_admins + other_admins)", "problem_description": "I need a function to calculate the optimal number of system administrators for my organization. The function should take into account the desired level of availability, the number of servers, the level of customization, the frequency and volume of changes, and the number of other systems that require administration. I want the function to return the total number of admins required.The signature of the function is: def calculate_admins(desired_availability, server_count, customization_level, change_frequency, change_volume, other_systems)", "test_cases": {"test1": "calculate_admins(\"high\", 100, \"medium\", 5, 10, [\"SAN\", \"NAS\"])", "test2": "calculate_admins(\"low\", 50, \"low\", 1, 5, [\"DNS\", \"DHCP\"])", "test3": "calculate_admins(\"medium\", 200, \"high\", 10, 20, [\"video encoding\", \"database\"])", "test4": "calculate_admins(\"high\", 500, \"medium\", 20, 50, [\"Windows\", \"Linux\"])", "test5": "calculate_admins(\"low\", 100, \"low\", 1, 5, [\"mail\", \"webserver\"])", "test6": "calculate_admins(\"medium\", 300, \"high\", 15, 30, [\"SAN\", \"NAS\", \"DNS\"])", "test7": "calculate_admins(\"high\", 800, \"medium\", 30, 75, [\"video encoding\", \"database\", \"Windows\"])", "test8": "calculate_admins(\"low\", 200, \"low\", 5, 10, [\"Linux\", \"DHCP\"])", "test9": "calculate_admins(\"medium\", 400, \"high\", 25, 60, [\"mail\", \"webserver\", \"SAN\"])", "test10": "calculate_admins(\"high\", 1200, \"medium\", 40, 100, [\"Windows\", \"Linux\", \"DNS\", \"DHCP\"])"}, "hidden_information": "def calculate_admins(desired_availability, server_count, customization_level, change_frequency, change_volume, other_systems):\n    # Calculate admins based on desired availability\n    avail_admins = 1 if desired_availability == \"low\" else 2 if desired_availability == \"medium\" else 3\n    # Calculate admins based on server count\n    server_admins = server_count / 20 # assuming one admin per 20 servers\n    # Calculate admins based on customization level\n    cust_admins = 1 if customization_level == \"low\" else 2 if customization_level == \"medium\" else 3\n    # Calculate admins based on change frequency and volume\n    change_admins = change_frequency + change_volume\n    # Calculate admins based on other systems\n    other_admins = len(other_systems) * 0.5 # assuming 0.5 admins per other system\n\n    return int(avail_admins + server_admins + cust_admins + change_admins + other_admins)"}
{"ground_truth": "def normalize_url(url, prefer_www=False, remove_www_if_exists=False):\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string\")\n    if url.startswith('http://') or url.startswith('https://'):\n        protocol, rest = url.split('://', 1)\n    else:\n        protocol = 'http'\n        rest = url\n    if rest.startswith('www.') and (not prefer_www or remove_www_if_exists):\n        rest = rest[4:]\n    elif not rest.startswith('www.') and prefer_www:\n        rest = 'www.' + rest\n    return protocol + '://' + rest", "problem_description": "Can you write a Python function that takes a URL as input and outputs the normalized URL? Sometimes users type in the URL with 'www' and sometimes without, can the function handle both cases? What if I want to enforce a specific preference for 'www' or no 'www'?The signature of the function is: def normalize_url(url, prefer_www=False, remove_www_if_exists=False)", "test_cases": {"test1": "normalize_url('http://example.com', False, False)", "test2": "normalize_url('https://www.example.com', True, False)", "test3": "normalize_url('example.com', False, True)", "test4": "normalize_url('www.example.com', True, False)", "test5": "normalize_url('http://example.com/path/to/resource', False, False)", "test6": "normalize_url('https://www.example.com/path/to/resource', True, False)", "test7": "normalize_url('example.com/path/to/resource', False, True)", "test8": "normalize_url('www.example.com/path/to/resource', True, False)", "test9": "normalize_url('http://example.com', True, True)", "test10": "normalize_url('https://www.example.com', False, True)"}, "hidden_information": "def normalize_url(url, prefer_www=False, remove_www_if_exists=False):\n    if not isinstance(url, str):\n        raise TypeError(\"URL must be a string\")\n    if url.startswith('http://') or url.startswith('https://'):\n        protocol, rest = url.split('://', 1)\n    else:\n        protocol = 'http'\n        rest = url\n    if rest.startswith('www.') and (not prefer_www or remove_www_if_exists):\n        rest = rest[4:]\n    elif not rest.startswith('www.') and prefer_www:\n        rest = 'www.' + rest\n    return protocol + '://' + rest"}
{"ground_truth": "def is_proxy_correctly_configured(os_type, proxy_url, proxy_variables_set, explicit_proxy_configured, transparent_proxy_configured): \n    if os_type == 'Windows':\n        return True\n    elif os_type == 'Linux':\n        if proxy_variables_set:\n            if 'https_proxy' in proxy_variables_set:\n                return True\n            elif 'http_proxy' in proxy_variables_set:\n                return True\n            else:\n                return False\n        elif explicit_proxy_configured:\n            return True\n        elif transparent_proxy_configured:\n            return True\n        else:\n            return False\n    else:\n        return False ", "problem_description": "Can you write a Python function to check if a proxy is correctly configured in different operating systems? It should consider environmental variables, explicit proxy settings, and transparent proxy configurationsThe signature of the function is: def is_proxy_correctly_configured(os_type, proxy_url, proxy_variables_set, explicit_proxy_configured, transparent_proxy_configured)", "test_cases": {"test1": "is_proxy_correctly_configured('Windows', 'http://proxy.example.com', ['https_proxy', 'http_proxy'], True, True)", "test2": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', ['https_proxy'], False, False)", "test3": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', ['http_proxy'], True, False)", "test4": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', [], True, False)", "test5": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', [], False, True)", "test6": "is_proxy_correctly_configured('MacOS', 'http://proxy.example.com', ['https_proxy', 'http_proxy'], True, True)", "test7": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', ['proxy'], True, False)", "test8": "is_proxy_correctly_configured('Windows', 'http://proxy.example.com', ['https_proxy', 'http_proxy'], False, False)", "test9": "is_proxy_correctly_configured('Linux', 'http://proxy.example.com', ['https_proxy', 'http_proxy'], True, True)", "test10": "is_proxy_correctly_configured('Linux', '', ['https_proxy', 'http_proxy'], True, True)"}, "hidden_information": "def is_proxy_correctly_configured(os_type, proxy_url, proxy_variables_set, explicit_proxy_configured, transparent_proxy_configured): \n    if os_type == 'Windows':\n        return True\n    elif os_type == 'Linux':\n        if proxy_variables_set:\n            if 'https_proxy' in proxy_variables_set:\n                return True\n            elif 'http_proxy' in proxy_variables_set:\n                return True\n            else:\n                return False\n        elif explicit_proxy_configured:\n            return True\n        elif transparent_proxy_configured:\n            return True\n        else:\n            return False\n    else:\n        return False "}
{"ground_truth": "def filter_spam_emails(email_headers, spam_header):\n    return [header for header in email_headers if header.get('header_name') == spam_header]", "problem_description": "Hi, I need you to write a python function that can help me filter out spam emails based on some rules. I have a list of email headers, and I want to move emails with a certain header to the spam folder. Can you help me with that?The signature of the function is: def filter_spam_emails(email_headers, spam_header)", "test_cases": {"test1": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'YES'}, {'header_name': 'From', 'header_value': 'example@example.com'}], 'X-Spam')", "test2": "filter_spam_emails([{'header_name': 'Subject', 'header_value': 'Hello'}, {'header_name': 'X-Spam', 'header_value': 'NO'}], 'X-Spam')", "test3": "filter_spam_emails([{'header_name': 'To', 'header_value': 'example@example.com'}, {'header_name': 'X-Spam', 'header_value': 'YES'}], 'X-Spam')", "test4": "filter_spam_emails([{'header_name': 'From', 'header_value': 'example@example.com'}, {'header_name': 'Subject', 'header_value': 'Hello'}], 'X-Spam')", "test5": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'YES'}, {'header_name': 'X-Spam', 'header_value': 'NO'}], 'X-Spam')", "test6": "filter_spam_emails([], 'X-Spam')", "test7": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'YES'}], 'X-Spam')", "test8": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'NO'}], 'X-Spam')", "test9": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'YES'}, {'header_name': 'X-Spam', 'header_value': 'YES'}], 'X-Spam')", "test10": "filter_spam_emails([{'header_name': 'X-Spam', 'header_value': 'NO'}, {'header_name': 'X-Spam', 'header_value': 'NO'}], 'X-Spam')"}, "hidden_information": "def filter_spam_emails(email_headers, spam_header):\n    return [header for header in email_headers if header.get('header_name') == spam_header]"}
{"ground_truth": "def can_hire_candidate(misdemeanor_type, years_since_offense, rehabilitation_completed):\n    if rehabilitation_completed:\n        return True\n    elif years_since_offense > 5 and misdemeanor_type == 'non-violent':\n        return True\n    else:\n        return False", "problem_description": "I am an IT manager who wants to create a fair hiring policy for job candidates with misdemeanors. Can you write a Python function that takes into account the type of misdemeanor, the time elapsed since the offense, and whether the candidate has completed a rehabilitation program to determine whether or not the candidate is eligible for hire? The goal is to not discriminate, but also ensure that the company's security and reputation are protected.The signature of the function is: def can_hire_candidate(misdemeanor_type, years_since_offense, rehabilitation_completed)", "test_cases": {"test1": "can_hire_candidate('non-violent', 6, True)", "test2": "can_hire_candidate('violent', 3, False)", "test3": "can_hire_candidate('non-violent', 5, True)", "test4": "can_hire_candidate('violent', 7, True)", "test5": "can_hire_candidate('non-violent', 3, False)", "test6": "can_hire_candidate('non-violent', 10, False)", "test7": "can_hire_candidate('violent', 1, True)", "test8": "can_hire_candidate('non-violent', 4, True)", "test9": "can_hire_candidate('violent', 6, False)", "test10": "can_hire_candidate('non-violent', 8, True)"}, "hidden_information": "def can_hire_candidate(misdemeanor_type, years_since_offense, rehabilitation_completed):\n    if rehabilitation_completed:\n        return True\n    elif years_since_offense > 5 and misdemeanor_type == 'non-violent':\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_revenue_share(platform_revenue, console_share, pc_revenue, wireless_revenue): pc_share = pc_revenue / platform_revenue * 100; wireless_share = wireless_revenue / platform_revenue * 100; console_share = console_share; return console_share, pc_share, wireless_share", "problem_description": "Hi, I want you to write a python function that calculates the revenue shares for different gaming platforms. I have some numbers from Unity but I need to understand how they add up.The signature of the function is: def calculate_revenue_share(platform_revenue, console_share, pc_revenue, wireless_revenue)", "test_cases": {"test1": "calculate_revenue_share(3000, 78, 400, 300)", "test2": "calculate_revenue_share(10000, 60, 1200, 800)", "test3": "calculate_revenue_share(5000, 80, 700, 200)", "test4": "calculate_revenue_share(2000, 75, 250, 150)", "test5": "calculate_revenue_share(4000, 70, 500, 300)", "test6": "calculate_revenue_share(8000, 65, 900, 600)", "test7": "calculate_revenue_share(3000, 60, 350, 200)", "test8": "calculate_revenue_share(6000, 78, 800, 500)", "test9": "calculate_revenue_share(2500, 70, 300, 250)", "test10": "calculate_revenue_share(9000, 75, 1100, 700)"}, "hidden_information": "def calculate_revenue_share(platform_revenue, console_share, pc_revenue, wireless_revenue): pc_share = pc_revenue / platform_revenue * 100; wireless_share = wireless_revenue / platform_revenue * 100; console_share = console_share; return console_share, pc_share, wireless_share"}
{"ground_truth": "def replace_empty_strings_with_none(strings):\n    return [None if s.strip() == '' else s for s in strings]", "problem_description": "Write a python function to replace empty strings in a list with None. I have a list of strings where some of them are empty and I want to replace those empty strings with None.The signature of the function is: def replace_empty_strings_with_none(strings)", "test_cases": {"test1": "replace_empty_strings_with_none(['', 'hello', 'world', ''])", "test2": "replace_empty_strings_with_none(['', '', '', ''])", "test3": "replace_empty_strings_with_none(['hello', 'world'])", "test4": "replace_empty_strings_with_none([])", "test5": "replace_empty_strings_with_none(['   '])", "test6": "replace_empty_strings_with_none(['  hello  '])", "test7": "replace_empty_strings_with_none(['hello', '', 'world', ''])", "test8": "replace_empty_strings_with_none([' ', 'hello', 'world', ' '])", "test9": "replace_empty_strings_with_none(['hello', 'world', '', ''])", "test10": "replace_empty_strings_with_none(['', '', 'hello', 'world', '', ''])"}, "hidden_information": "def replace_empty_strings_with_none(strings):\n    return [None if s.strip() == '' else s for s in strings]"}
{"ground_truth": "def check_element_in_list(element, lst, compare_by_value=True):\n    if compare_by_value:\n        return element in lst\n    else:\n        return any(obj is element for obj in lst)", "problem_description": "I need a Python function that checks if a certain element is contained in a list. However, I'm not sure whether to compare the elements by value or reference. Can you write a function that can handle both scenarios?The signature of the function is: def check_element_in_list(element, lst, compare_by_value=True)", "test_cases": {"test1": "check_element_in_list(1, [1, 2, 3], True)", "test2": "check_element_in_list(1, [1, 2, 3], False)", "test3": "check_element_in_list('a', ['a', 'b', 'c'], True)", "test4": "check_element_in_list('a', ['a', 'b', 'c'], False)", "test5": "check_element_in_list([1, 2], [[1, 2], [3, 4]], True)", "test6": "check_element_in_list([1, 2], [[1, 2], [3, 4]], False)", "test7": "check_element_in_list(True, [True, False], True)", "test8": "check_element_in_list(True, [True, False], False)", "test9": "check_element_in_list(None, [None, 'a'], True)", "test10": "check_element_in_list(None, [None, 'a'], False)"}, "hidden_information": "def check_element_in_list(element, lst, compare_by_value=True):\n    if compare_by_value:\n        return element in lst\n    else:\n        return any(obj is element for obj in lst)"}
{"ground_truth": "def has_passed_end(input_sequence, iterator_position):\n    if iterator_position >= len(input_sequence):\n        return True\n    else:\n        return False", "problem_description": "Hi AI, I'm working with input iterators and I'm having trouble keeping track of their position in the sequence. Can you write a Python function that takes an input sequence and an iterator position as input and returns True if the iterator has passed the end of the sequence and False otherwise?The signature of the function is: def has_passed_end(input_sequence, iterator_position)", "test_cases": {"test1": "has_passed_end([1, 2, 3, 4, 5], 5)", "test2": "has_passed_end([\"a\", \"b\", \"c\"], 3)", "test3": "has_passed_end([], 0)", "test4": "has_passed_end([True, False, True], 2)", "test5": "has_passed_end([1.1, 2.2, 3.3], 3)", "test6": "has_passed_end([\"apple\", \"banana\", \"cherry\"], 2)", "test7": "has_passed_end([], -1)", "test8": "has_passed_end([1, 2, 3, 4, 5], -1)", "test9": "has_passed_end([\"a\", \"b\", \"c\"], -1)", "test10": "has_passed_end([True, False, True], -1)"}, "hidden_information": "def has_passed_end(input_sequence, iterator_position):\n    if iterator_position >= len(input_sequence):\n        return True\n    else:\n        return False"}
{"ground_truth": "def rgb_to_cmyk(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    k = 1 - max(r, g, b)\n    if k == 1:\n        c = 1 - r\n        m = 1 - g\n        y = 1 - b\n    else:\n        c = (1 - r - k) / (1 - k)\n        m = (1 - g - k) / (1 - k)\n        y = (1 - b - k) / (1 - k)\n    return (c, m, y, k)", "problem_description": "I'm trying to convert RGB images to CMYK. I've got a bunch of RGB images in different formats and I need a Python function to convert them to CMYK without using any third-party libraries. Can you write the function to do that?The signature of the function is: def rgb_to_cmyk(r, g, b)", "test_cases": {"test1": "rgb_to_cmyk(255, 0, 0)", "test2": "rgb_to_cmyk(0, 255, 0)", "test3": "rgb_to_cmyk(0, 0, 255)", "test4": "rgb_to_cmyk(255, 255, 255)", "test5": "rgb_to_cmyk(128, 128, 128)", "test6": "rgb_to_cmyk(100, 150, 200)", "test7": "rgb_to_cmyk(50, 75, 100)", "test8": "rgb_to_cmyk(200, 220, 240)", "test9": "rgb_to_cmyk(10, 20, 30)", "test10": "rgb_to_cmyk(240, 210, 0)"}, "hidden_information": "def rgb_to_cmyk(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    k = 1 - max(r, g, b)\n    if k == 1:\n        c = 1 - r\n        m = 1 - g\n        y = 1 - b\n    else:\n        c = (1 - r - k) / (1 - k)\n        m = (1 - g - k) / (1 - k)\n        y = (1 - b - k) / (1 - k)\n    return (c, m, y, k)"}
{"ground_truth": "def calculate_wins_per_season(innings_pitched, innings_per_win):\n    return innings_pitched / innings_per_win", "problem_description": "I need a python function to calculate a baseball statistic, can you write it for me? I want it to calculate something related to a pitcher's performance. I am not really sure about the specifics, can you help me figure it out?The signature of the function is: def calculate_wins_per_season(innings_pitched, innings_per_win)", "test_cases": {"test1": "calculate_wins_per_season(200, 7)", "test2": "calculate_wins_per_season(250, 5)", "test3": "calculate_wins_per_season(300, 9)", "test4": "calculate_wins_per_season(120, 12)", "test5": "calculate_wins_per_season(180, 10)", "test6": "calculate_wins_per_season(220, 8)", "test7": "calculate_wins_per_season(280, 11)", "test8": "calculate_wins_per_season(350, 6)", "test9": "calculate_wins_per_season(380, 14)", "test10": "calculate_wins_per_season(420, 13)"}, "hidden_information": "def calculate_wins_per_season(innings_pitched, innings_per_win):\n    return innings_pitched / innings_per_win"}
{"ground_truth": "def get_unlocker_download_link(os_version, os_bits):\n    if os_version == 'Windows 7' and os_bits == 32:\n        return 'https://unlockerCreatorPage.com/Unlocker1.9.2-32bit.exe'\n    elif os_version == 'Windows 7' and os_bits == 64:\n        return 'https://unlockerCreatorPage.com/Unlocker1.9.2-64bit.exe'\n    else:\n        return 'Unsupported OS version or bit'", "problem_description": "I need a python function that will help me to download and install Unlocker software correctly, but I am having trouble as the software is not working properly. Can you write a function to provide the correct download link for me?The signature of the function is: def get_unlocker_download_link(os_version, os_bits)", "test_cases": {"test1": "get_unlocker_download_link('Windows 7', 32)", "test2": "get_unlocker_download_link('Windows 7', 64)", "test3": "get_unlocker_download_link('Windows 10', 32)", "test4": "get_unlocker_download_link('Windows 8', 64)", "test5": "get_unlocker_download_link('Windows 7', 128)", "test6": "get_unlocker_download_link('Ubuntu', 32)", "test7": "get_unlocker_download_link('Windows XP', 64)", "test8": "get_unlocker_download_link('Windows 7', 1)", "test9": "get_unlocker_download_link('Windows 11', 32)", "test10": "get_unlocker_download_link('Windows Vista', 64)"}, "hidden_information": "def get_unlocker_download_link(os_version, os_bits):\n    if os_version == 'Windows 7' and os_bits == 32:\n        return 'https://unlockerCreatorPage.com/Unlocker1.9.2-32bit.exe'\n    elif os_version == 'Windows 7' and os_bits == 64:\n        return 'https://unlockerCreatorPage.com/Unlocker1.9.2-64bit.exe'\n    else:\n        return 'Unsupported OS version or bit'"}
{"ground_truth": "def diagnose_spell_check(words, text_language, custom_dictionaries, office_key, proofing_tools_key):\n    if text_language != 'English':\n        return 'Set the text language to English'\n    elif custom_dictionaries:\n        return 'Run a repair installation or delete the custom dictionaries'\n    elif office_key == '' or proofing_tools_key == '':\n        return 'Registry key not found'\n    else:\n        return 'Spell-check should work correctly'", "problem_description": "I'm having issues with the spell-check feature in my word processing software. It's not detecting any errors even when I know there are some. I want a python function that can help me diagnose what the issue might be. It should take into account things like the text language, custom dictionaries, and registry keys.The signature of the function is: def diagnose_spell_check(words, text_language, custom_dictionaries, office_key, proofing_tools_key)", "test_cases": {"test1": "diagnose_spell_check(['hello', 'worng'], 'English', False, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test2": "diagnose_spell_check(['hello', 'wrong'], 'Spanish', False, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test3": "diagnose_spell_check(['hello', 'wrong'], 'English', ['custom_dict1', 'custom_dict2'], 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test4": "diagnose_spell_check(['hello', 'wrong'], 'English', False, '', 'Proofing.Tools.1.0')", "test5": "diagnose_spell_check(['hello', 'wrong'], 'English', False, 'Microsoft.Office.12.0', '')", "test6": "diagnose_spell_check(['hello', 'worng'], 'English', False, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test7": "diagnose_spell_check(['hello'], 'English', False, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test8": "diagnose_spell_check([], 'English', False, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test9": "diagnose_spell_check(['hello', 'wrong'], 'English', [], 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')", "test10": "diagnose_spell_check(['hello', 'wrong'], 'English', True, 'Microsoft.Office.12.0', 'Proofing.Tools.1.0')"}, "hidden_information": "def diagnose_spell_check(words, text_language, custom_dictionaries, office_key, proofing_tools_key):\n    if text_language != 'English':\n        return 'Set the text language to English'\n    elif custom_dictionaries:\n        return 'Run a repair installation or delete the custom dictionaries'\n    elif office_key == '' or proofing_tools_key == '':\n        return 'Registry key not found'\n    else:\n        return 'Spell-check should work correctly'"}
{"ground_truth": "def calculate_total_gasoline_cost(gallons, price_per_gallon, tax_rate, pollution_surcharge):\n    total_cost = gallons * price_per_gallon\n    total_cost *= (1 + tax_rate / 100)\n    total_cost += pollution_surcharge\n    return total_cost", "problem_description": "I need a Python function that can calculate the total cost of gasoline. I have some ideas about the factors that affect the price, like taxes and pollution, but I'm not sure how they all fit together. Can you write a function that will give me the total cost? The agent should ask me follow-up questions to make sure it gets it right.The signature of the function is: def calculate_total_gasoline_cost(gallons, price_per_gallon, tax_rate, pollution_surcharge)", "test_cases": {"test1": "calculate_total_gasoline_cost(10, 2.50, 4.23, 0.05)", "test2": "calculate_total_gasoline_cost(20, 2.75, 5.56, 0.10)", "test3": "calculate_total_gasoline_cost(5, 2.25, 3.14, 0.03)", "test4": "calculate_total_gasoline_cost(30, 2.90, 6.78, 0.15)", "test5": "calculate_total_gasoline_cost(15, 2.60, 4.92, 0.08)", "test6": "calculate_total_gasoline_cost(25, 2.85, 5.67, 0.12)", "test7": "calculate_total_gasoline_cost(10, 2.40, 3.21, 0.04)", "test8": "calculate_total_gasoline_cost(35, 3.00, 7.35, 0.18)", "test9": "calculate_total_gasoline_cost(20, 2.70, 5.19, 0.11)", "test10": "calculate_total_gasoline_cost(40, 3.10, 8.02, 0.20)"}, "hidden_information": "def calculate_total_gasoline_cost(gallons, price_per_gallon, tax_rate, pollution_surcharge):\n    total_cost = gallons * price_per_gallon\n    total_cost *= (1 + tax_rate / 100)\n    total_cost += pollution_surcharge\n    return total_cost"}
{"ground_truth": "def extract_pow_info(pow_data): return {soldier['name']: soldier['status'] for soldier in pow_data if soldier['status'] == 'POW'}", "problem_description": "I need a Python function that takes a dictionary containing information about American POWs and missing soldiers from the 507th Maintenance Company and extracts the names of the soldiers who are listed as POWs. Can you write a function that does that?The signature of the function is: def extract_pow_info(pow_data)", "test_cases": {"test1": "extract_pow_info([{'name': 'Edgar Hernandez', 'status': 'POW'}, {'name': 'Patrick Miller', 'status': 'missing'}, {'name': 'Shoshana Johnson', 'status': 'POW'}])", "test2": "extract_pow_info([{'name': 'Joseph Hudson', 'status': 'POW'}, {'name': 'Donald Walters', 'status': 'missing'}, {'name': 'Sean Phillips', 'status': 'wounded'}])", "test3": "extract_pow_info([{'name': 'Assan Akbar', 'status': 'captured'}, {'name': 'Chris Seifert', 'status': 'killed'}, {'name': 'Stacy', 'status': 'wounded'}])", "test4": "extract_pow_info([{'name': 'Jason Bellini', 'status': 'reporter'}, {'name': 'Ryan Chilcote', 'status': 'reporter'}, {'name': 'Frank Buckley', 'status': 'reporter'}])", "test5": "extract_pow_info([{'name': 'Vincent Laforet', 'status': 'photographer'}, {'name': 'Amanda Townshend', 'status': 'staff'}, {'name': 'Daryn Kagan', 'status': 'anchor'}])", "test6": "extract_pow_info([])", "test7": "extract_pow_info([{'name': 'John Doe', 'status': 'POW'}, {'name': 'Jane Doe', 'status': 'missing'}])", "test8": "extract_pow_info([{'name': 'Bob Smith', 'status': 'POW'}, {'name': 'Alice Johnson', 'status': 'POW'}])", "test9": "extract_pow_info([{'name': 'Mike Brown', 'status': 'missing'}, {'name': 'Emily Davis', 'status': 'wounded'}])", "test10": "extract_pow_info([{'name': 'Tom Harris', 'status': 'POW'}, {'name': 'Linda Lee', 'status': 'POW'}, {'name': 'Peter Hall', 'status': 'missing'}])"}, "hidden_information": "def extract_pow_info(pow_data): return {soldier['name']: soldier['status'] for soldier in pow_data if soldier['status'] == 'POW'}"}
{"ground_truth": "def get_risk_profile(age, race, family_history, diet, lifestyle):\n    risk_factors = {}\n    if age > 35:\n        risk_factors['heart_disease'] = 'high'\n        risk_factors['prostate_cancer'] = 'high'\n    if race == 'African-American':\n        risk_factors['prostate_cancer'] = 'very_high'\n    if 'animal_fat' in diet:\n        risk_factors['prostate_cancer'] = 'high'\n    if 'exercise' not in lifestyle:\n        risk_factors['heart_disease'] = 'high'\n        risk_factors['diabetes'] = 'high'\n    return risk_factors", "problem_description": "I want the agent to write a python function that takes various health-related inputs and outputs a risk profile for men, indicating the likelihood of developing certain diseases such as heart disease, prostate cancer, and diabetes.The signature of the function is: def get_risk_profile(age, race, family_history, diet, lifestyle)", "test_cases": {"test1": "get_risk_profile(40, \"Caucasian\", [], \"vegetarian\", [\"exercise\", \"quit_smoking\"])", "test2": "get_risk_profile(50, \"African-American\", [\"heart_disease\"], \"meat-lover\", [\"exercise\"])", "test3": "get_risk_profile(30, \"Asian\", [], \"vegan\", [\"quit_smoking\", \"meditation\"])", "test4": "get_risk_profile(60, \"Hispanic\", [\"diabetes\"], \"meat-lover\", [\"exercise\", \"quit_smoking\"])", "test5": "get_risk_profile(20, \"White\", [], \"vegetarian\", [\"exercise\", \"meditation\"])", "test6": "get_risk_profile(45, \"African-American\", [\"prostate_cancer\"], \"meat-lover\", [\"exercise\"])", "test7": "get_risk_profile(55, \"Asian\", [\"heart_disease\"], \"pescatarian\", [\"quit_smoking\", \"meditation\"])", "test8": "get_risk_profile(35, \"Hispanic\", [], \"meat-lover\", [\"exercise\", \"quit_smoking\"])", "test9": "get_risk_profile(65, \"Caucasian\", [\"diabetes\"], \"vegetarian\", [\"meditation\"])", "test10": "get_risk_profile(25, \"White\", [], \"vegan\", [\"exercise\", \"quit_smoking\", \"meditation\"])"}, "hidden_information": "def get_risk_profile(age, race, family_history, diet, lifestyle):\n    risk_factors = {}\n    if age > 35:\n        risk_factors['heart_disease'] = 'high'\n        risk_factors['prostate_cancer'] = 'high'\n    if race == 'African-American':\n        risk_factors['prostate_cancer'] = 'very_high'\n    if 'animal_fat' in diet:\n        risk_factors['prostate_cancer'] = 'high'\n    if 'exercise' not in lifestyle:\n        risk_factors['heart_disease'] = 'high'\n        risk_factors['diabetes'] = 'high'\n    return risk_factors"}
{"ground_truth": "def calculate_otter_population(initial_population, growth_rate, years): return initial_population * (1 + growth_rate) ** years", "problem_description": "I want you to write a Python function to model the growth of the otter population in Illinois. The population has grown significantly since the 80s, but I'm not sure what factors contributed to this growth. Can you help me come up with a function that calculates the population at any given year?The signature of the function is: def calculate_otter_population(initial_population, growth_rate, years)", "test_cases": {"test1": "calculate_otter_population(100, 0.05, 20)", "test2": "calculate_otter_population(100, 0.10, 30)", "test3": "calculate_otter_population(500, 0.03, 10)", "test4": "calculate_otter_population(200, 0.07, 40)", "test5": "calculate_otter_population(1000, 0.02, 50)", "test6": "calculate_otter_population(50, 0.12, 25)", "test7": "calculate_otter_population(800, 0.08, 35)", "test8": "calculate_otter_population(250, 0.04, 20)", "test9": "calculate_otter_population(1200, 0.06, 45)", "test10": "calculate_otter_population(300, 0.09, 30)"}, "hidden_information": "def calculate_otter_population(initial_population, growth_rate, years): return initial_population * (1 + growth_rate) ** years"}
{"ground_truth": "def calculate_war_deaths(war_name, death_toll_info): \n    war_deaths = {\n        'Puny': 0, \n        'Pwnic': 0\n    }\n\n    if war_name in death_toll_info:\n        war_deaths = death_toll_info[war_name]\n\n    return war_deaths", "problem_description": "I want you to write a python function that can sum up the number of deaths in each category of puny wars.The signature of the function is: def calculate_war_deaths(war_name, death_toll_info)", "test_cases": {"test1": "calculate_war_deaths('Puny', {'Puny': 200})", "test2": "calculate_war_deaths('unknown war', {'Puny': 300})", "test3": "calculate_war_deaths('Pwnic', {'Pwnic': 500})", "test4": "calculate_war_deaths('Puny', {'Puny': {'Puny Menace': 100, 'Attack of the Runts': 50}})", "test5": "calculate_war_deaths('Pwnic', {'Pwnic': {'Pwnic Menace': 200, 'Attack of the Shrimp': 75}})", "test6": "calculate_war_deaths('Puny', {'Puny': {'Puny Menace': 100, 'Attack of the Runts': 50}})", "test7": "calculate_war_deaths('Pwnic', {'Pwnic': {'Revenge of the Shrimp': 300}})", "test8": "calculate_war_deaths('Puny', {'Puny Wars': 200})", "test9": "calculate_war_deaths('Puny', {'Puny Wars': 200, 'Pwnic Wars': 500})", "test10": "calculate_war_deaths('Pwnic', {'Pwnic Wars': 300})"}, "hidden_information": "def calculate_war_deaths(war_name, death_toll_info): \n    war_deaths = {\n        'Puny': 0, \n        'Pwnic': 0\n    }\n\n    if war_name in death_toll_info:\n        war_deaths = death_toll_info[war_name]\n\n    return war_deaths"}
{"ground_truth": "def count_dependencies(perl_modules): return sum(1 for module in perl_modules if module.get('dependency') or module.get('dependencies'))", "problem_description": "Hey, I have a list of Perl modules and I'm trying to figure out how many dependencies they have collectively. Can you write a Python function to count them for me?The signature of the function is: def count_dependencies(perl_modules)", "test_cases": {"test1": "count_dependencies([{'name': 'Module1', 'dependency': True}, {'name': 'Module2'}])", "test2": "count_dependencies([{'name': 'Module1', 'dependencies': 3}, {'name': 'Module2', 'dependencies': 2}])", "test3": "count_dependencies([{'name': 'Module1'}, {'name': 'Module2'}])", "test4": "count_dependencies([{'name': 'Module1', 'dependency': True, 'dependencies': 3}, {'name': 'Module2', 'dependency': False}])", "test5": "count_dependencies([{'name': 'Module1', 'dependencies': 0}, {'name': 'Module2', 'dependencies': 5}])", "test6": "count_dependencies([])", "test7": "count_dependencies([{'name': 'Module1', 'dependency': True}])", "test8": "count_dependencies([{'name': 'Module1', 'dependencies': 0}, {'name': 'Module2', 'dependencies': 0}])", "test9": "count_dependencies([{'name': 'Module1', 'dependency': False}])", "test10": "count_dependencies([{'name': 'Module1', 'dependency': True}, {'name': 'Module2', 'dependency': False}])"}, "hidden_information": "def count_dependencies(perl_modules): return sum(1 for module in perl_modules if module.get('dependency') or module.get('dependencies'))"}
{"ground_truth": "def calculate_extra_days(men_average_salary, women_average_salary):\n    if men_average_salary <= 0 or women_average_salary <= 0:\n        raise ValueError(\"Salaries must be greater than zero\")\n    extra_days = 365 * (1 - women_average_salary / men_average_salary)\n    return round(extra_days)", "problem_description": "I want to write a Python function that calculates some statistic related to the concept of 'Equal Pay Day'. Can you write a function that takes some relevant parameters and calculates some meaningful value?The signature of the function is: def calculate_extra_days(men_average_salary, women_average_salary)", "test_cases": {"test1": "calculate_extra_days(100000, 80000)", "test2": "calculate_extra_days(50000, 45000)", "test3": "calculate_extra_days(200000, 180000)", "test4": "calculate_extra_days(40000, 32000)", "test5": "calculate_extra_days(60000, 55000)", "test6": "calculate_extra_days(80000, 72000)", "test7": "calculate_extra_days(30000, 25000)", "test8": "calculate_extra_days(70000, 63000)", "test9": "calculate_extra_days(90000, 81000)", "test10": "calculate_extra_days(95000, 85500)"}, "hidden_information": "def calculate_extra_days(men_average_salary, women_average_salary):\n    if men_average_salary <= 0 or women_average_salary <= 0:\n        raise ValueError(\"Salaries must be greater than zero\")\n    extra_days = 365 * (1 - women_average_salary / men_average_salary)\n    return round(extra_days)"}
{"ground_truth": "def calculate_impact(wild_salmon_population, genetically_engineered_salmon_population, seafood_industry_revenue, escape_rate, ecosystem_impact_factor): \n\t# calculate environmental impact\n\tenvironmental_impact = (genetically_engineered_salmon_population / wild_salmon_population) * ecosystem_impact_factor\n\t# calculate economic impact\n\teconomic_impact = (escape_rate * genetically_engineered_salmon_population) / seafood_industry_revenue\n\treturn environmental_impact, economic_impact", "problem_description": "Can you write a python function that can estimate the impact of releasing genetically engineered salmon into the ocean? The function should take into account the current wild salmon population, the number of genetically engineered salmon released, the revenue of the seafood industry, the rate at which the engineered salmon might escape into the wild, and a factor representing the impact on the ecosystem.The signature of the function is: def calculate_impact(wild_salmon_population, genetically_engineered_salmon_population, seafood_industry_revenue, escape_rate, ecosystem_impact_factor)", "test_cases": {"test1": "calculate_impact(100000, 1000, 10000000, 0.05, 0.8)", "test2": "calculate_impact(50000, 500, 5000000, 0.1, 0.9)", "test3": "calculate_impact(200000, 2000, 20000000, 0.03, 0.7)", "test4": "calculate_impact(300000, 1500, 15000000, 0.02, 0.6)", "test5": "calculate_impact(250000, 2500, 25000000, 0.04, 0.85)", "test6": "calculate_impact(400000, 1000, 10000000, 0.06, 0.9)", "test7": "calculate_impact(350000, 1200, 12000000, 0.05, 0.8)", "test8": "calculate_impact(450000, 2800, 28000000, 0.01, 0.65)", "test9": "calculate_impact(220000, 1800, 18000000, 0.07, 0.95)", "test10": "calculate_impact(480000, 3500, 35000000, 0.03, 0.75)"}, "hidden_information": "def calculate_impact(wild_salmon_population, genetically_engineered_salmon_population, seafood_industry_revenue, escape_rate, ecosystem_impact_factor): \n\t# calculate environmental impact\n\tenvironmental_impact = (genetically_engineered_salmon_population / wild_salmon_population) * ecosystem_impact_factor\n\t# calculate economic impact\n\teconomic_impact = (escape_rate * genetically_engineered_salmon_population) / seafood_industry_revenue\n\treturn environmental_impact, economic_impact"}
{"ground_truth": "def calculate_productivity(gdp_growth, inflation_rate, desired_sector):\n    # calculate the productivity of a given sector of the economy\n    if desired_sector == 'manufacturing':\n        productivity = gdp_growth * 0.6\n    elif desired_sector == 'services':\n        productivity = gdp_growth * 0.3\n    else:\n        productivity = gdp_growth * 0.1\n    return productivity", "problem_description": "Hello LLM agent, I want you to write a python function that calculates the productivity of the US economy at a given time, the goal is to answer some follow up questions, but I don't think I have the expertise to determine which part of the economy should be evaluated for productivity, can you collaborate with me and possibly write a function.The signature of the function is: def calculate_productivity(gdp_growth, inflation_rate, desired_sector)", "test_cases": {"test1": "calculate_productivity(0.05, 0.02, 'manufacturing')", "test2": "calculate_productivity(0.04, 0.01, 'services')", "test3": "calculate_productivity(0.03, 0.015, 'agriculture')", "test4": "calculate_productivity(0.035, 0.005, 'manufacturing')", "test5": "calculate_productivity(0.045, 0.01, 'services')", "test6": "calculate_productivity(0.055, 0.035, 'agriculture')", "test7": "calculate_productivity(0.025, 0.015, 'manufacturing')", "test8": "calculate_productivity(0.035, 0.035, 'services')", "test9": "calculate_productivity(0.045, 0.025, 'agriculture')", "test10": "calculate_productivity(0.055, 0.015, 'manufacturing')"}, "hidden_information": "def calculate_productivity(gdp_growth, inflation_rate, desired_sector):\n    # calculate the productivity of a given sector of the economy\n    if desired_sector == 'manufacturing':\n        productivity = gdp_growth * 0.6\n    elif desired_sector == 'services':\n        productivity = gdp_growth * 0.3\n    else:\n        productivity = gdp_growth * 0.1\n    return productivity"}
{"ground_truth": "def is_safe_to_publish(article_url, google_index_status, has_301_redirect, original_url_exists):\n    if google_index_status == 'removed' or has_301_redirect:\n        return True\n    elif original_url_exists:\n        return False\n    else:\n        return True", "problem_description": "I need a python function that can help my fellow blogger friends to determine if it's safe to publish a moved article. It should consider if Google still has the original article indexed, if there is a 301 permanent redirect, and if the original article page still exists.The signature of the function is: def is_safe_to_publish(article_url, google_index_status, has_301_redirect, original_url_exists)", "test_cases": {"test1": "is_safe_to_publish('https://example.com/article', 'indexed', False, True)", "test2": "is_safe_to_publish('https://example.com/article', 'removed', False, True)", "test3": "is_safe_to_publish('https://example.com/article', 'indexed', True, True)", "test4": "is_safe_to_publish('https://example.com/article', 'removed', True, True)", "test5": "is_safe_to_publish('https://example.com/article', 'indexed', False, False)", "test6": "is_safe_to_publish('https://example.com/article', 'removed', False, False)", "test7": "is_safe_to_publish('https://example.com/article', 'indexed', True, False)", "test8": "is_safe_to_publish('https://example.com/article', 'removed', True, False)", "test9": "is_safe_to_publish('https://example.com/article', 'indexed', False, True)", "test10": "is_safe_to_publish('https://example.com/article', 'removed', False, True)"}, "hidden_information": "def is_safe_to_publish(article_url, google_index_status, has_301_redirect, original_url_exists):\n    if google_index_status == 'removed' or has_301_redirect:\n        return True\n    elif original_url_exists:\n        return False\n    else:\n        return True"}
{"ground_truth": "def check_run_as_service(os_version):\n    if os_version == 'Windows 2000':\n        required_service = 'RunAs'\n    elif os_version == 'Windows XP':\n        required_service = 'Secondary Logon'\n    else:\n        return False\n    # Simulating the functionality of checking the service is running\n    services_running = ['RunAs', 'Secondary Logon', 'Other Service']\n    return required_service in services_running", "problem_description": "Hi agent, can you write a python function to help my windows system administrator to programmatically check if the necessary service to run a program as a different user is enabled and running on our Windows XP and 2000 computers?The signature of the function is: def check_run_as_service(os_version)", "test_cases": {"test1": "check_run_as_service('Windows 2000')", "test2": "check_run_as_service('Windows XP')", "test3": "check_run_as_service('Windows 98')", "test4": "check_run_as_service('Windows 7')", "test5": "check_run_as_service('Windows 2000 Professional')", "test6": "check_run_as_service('Windows XP Home Edition')", "test7": "check_run_as_service('Windows XP Professional')", "test8": "check_run_as_service('Windows 98 SE')", "test9": "check_run_as_service('Windows 95')", "test10": "check_run_as_service('Windows ME')"}, "hidden_information": "def check_run_as_service(os_version):\n    if os_version == 'Windows 2000':\n        required_service = 'RunAs'\n    elif os_version == 'Windows XP':\n        required_service = 'Secondary Logon'\n    else:\n        return False\n    # Simulating the functionality of checking the service is running\n    services_running = ['RunAs', 'Secondary Logon', 'Other Service']\n    return required_service in services_running"}
{"ground_truth": "def predict_healing_time(age, fracture_type):\n    healing_times = {\n        (0, 10): 3,\n        (11, 18): 6\n    }\n    for age_range, time in healing_times.items():\n        if age_range[0] <= age <= age_range[1] and fracture_type == \"common\":\n            return time\n    return \"Healing time not available for given age and fracture type\"", "problem_description": "I want you to write a python function that can predict the healing time of a broken bone in children based on their age and the type of fracture. The fracture can be either common or complex and the age should be between 0 to 18 years. I don't have the exact healing times data, can you find it from the text and create the function?The signature of the function is: def predict_healing_time(age, fracture_type)", "test_cases": {"test1": "predict_healing_time(5, \"common\")", "test2": "predict_healing_time(15, \"common\")", "test3": "predict_healing_time(20, \"common\")", "test4": "predict_healing_time(5, \"complex\")", "test5": "predict_healing_time(15, \"complex\")", "test6": "predict_healing_time(25, \"common\")", "test7": "predict_healing_time(-1, \"common\")", "test8": "predict_healing_time(10, \"complex\")", "test9": "predict_healing_time(18, \"common\")", "test10": "predict_healing_time(5, \"unknown\")"}, "hidden_information": "def predict_healing_time(age, fracture_type):\n    healing_times = {\n        (0, 10): 3,\n        (11, 18): 6\n    }\n    for age_range, time in healing_times.items():\n        if age_range[0] <= age <= age_range[1] and fracture_type == \"common\":\n            return time\n    return \"Healing time not available for given age and fracture type\""}
{"ground_truth": "def get_christmas_celebration_dates(honor_cultural, honor_religious):\n    if honor_religious:\n        return {'cultural': 'December 25th', 'religious': 'January 7th'} if honor_cultural else {'religious': 'January 7th'}\n    else:\n        return {'cultural': 'December 25th'} if honor_cultural else {}", "problem_description": "Hey LLM agent, can you write a python function that determines the Christmas celebration dates for Orthodox families living in countries dominated by Western Christian faiths?The signature of the function is: def get_christmas_celebration_dates(honor_cultural, honor_religious)", "test_cases": {"test1": "get_christmas_celebration_dates(True, True)", "test2": "get_christmas_celebration_dates(False, True)", "test3": "get_christmas_celebration_dates(True, False)", "test4": "get_christmas_celebration_dates(False, False)", "test5": "get_christmas_celebration_dates(True, True)", "test6": "get_christmas_celebration_dates(True, True)", "test7": "get_christmas_celebration_dates(False, False)", "test8": "get_christmas_celebration_dates(False, True)", "test9": "get_christmas_celebration_dates(True, False)", "test10": "get_christmas_celebration_dates(True, True)"}, "hidden_information": "def get_christmas_celebration_dates(honor_cultural, honor_religious):\n    if honor_religious:\n        return {'cultural': 'December 25th', 'religious': 'January 7th'} if honor_cultural else {'religious': 'January 7th'}\n    else:\n        return {'cultural': 'December 25th'} if honor_cultural else {}"}
{"ground_truth": "def calculate_deaths_from_illegal_abortions(year, num_illegal_abortions, death_rate_per_abortion):\n    if year < 1973:\n        return num_illegal_abortions * death_rate_per_abortion\n    else:\n        return 0", "problem_description": "I want the agent to write a Python function to calculate the total number of deaths from illegal abortions in a given year, taking into account the number of illegal abortions and the death rate per abortion. The function should consider the year 1973 as a turning point, when abortions became legal.The signature of the function is: def calculate_deaths_from_illegal_abortions(year, num_illegal_abortions, death_rate_per_abortion)", "test_cases": {"test1": "calculate_deaths_from_illegal_abortions(1950, 2700, 0.1)", "test2": "calculate_deaths_from_illegal_abortions(1970, 2000, 0.05)", "test3": "calculate_deaths_from_illegal_abortions(1980, 1000, 0.02)", "test4": "calculate_deaths_from_illegal_abortions(1960, 2500, 0.15)", "test5": "calculate_deaths_from_illegal_abortions(1973, 2000, 0.05)", "test6": "calculate_deaths_from_illegal_abortions(1955, 2200, 0.12)", "test7": "calculate_deaths_from_illegal_abortions(1975, 1500, 0.03)", "test8": "calculate_deaths_from_illegal_abortions(1965, 2800, 0.18)", "test9": "calculate_deaths_from_illegal_abortions(1972, 1800, 0.07)", "test10": "calculate_deaths_from_illegal_abortions(1974, 1200, 0.02)"}, "hidden_information": "def calculate_deaths_from_illegal_abortions(year, num_illegal_abortions, death_rate_per_abortion):\n    if year < 1973:\n        return num_illegal_abortions * death_rate_per_abortion\n    else:\n        return 0"}
{"ground_truth": "def get_num_hijackers(hijackers_group):\n    # Initialize an empty dictionary to store unique hijackers\n    unique_hijackers = {}\n    \n    # Iterate through the list of hijackers groups\n    for group in hijackers_group:\n        # Iterate through the list of hijackers in each group\n        for hijacker in group:\n            # Remove any duplicate hijackers\n            if hijacker not in unique_hijackers:\n                unique_hijackers[hijacker] = True\n    \n    # Return the number of unique hijackers\n    return len(unique_hijackers)", "problem_description": "I want the agent to write a python function that can take different groups of hijackers as input and return the number of unique hijackers involved in the 9/11 attacks. However, I am not sure about the exact groups of hijackers, can you please help me figure it out?The signature of the function is: def get_num_hijackers(hijackers_group)", "test_cases": {"test1": "get_num_hijackers([['Khalid Al-Midhar', 'Abdelaziz Al Omari'], ['Khalid Al-Midhar', 'Salem Al-Hazmi'], ['Nawaf Al-Hazmi', 'Salem Al-Hazmi']])", "test2": "get_num_hijackers([['Abdelaziz Al Omari'], ['Khalid Al-Midhar'], ['Nawaf Al-Hazmi']])", "test3": "get_num_hijackers([['Salem Al-Hazmi', 'Nawaf Al-Hazmi', 'Khalid Al-Midhar'], ['Abdelaziz Al Omari']])", "test4": "get_num_hijackers([['Nawaf Al-Hazmi'], ['Salem Al-Hazmi', 'Khalid Al-Midhar', 'Abdelaziz Al Omari']])", "test5": "get_num_hijackers([['Khalid Al-Midhar', 'Abdelaziz Al Omari', 'Nawaf Al-Hazmi', 'Salem Al-Hazmi']])", "test6": "get_num_hijackers([['Nawaf Al-Hazmi', 'Salem Al-Hazmi'], ['Abdelaziz Al Omari', 'Khalid Al-Midhar']])", "test7": "get_num_hijackers([['Nawaf Al-Hazmi', 'Salem Al-Hazmi'], ['Khalid Al-Midhar', 'Abdelaziz Al Omari']])", "test8": "get_num_hijackers([['Khalid Al-Midhar', 'Abdelaziz Al Omari'], ['Khalid Al-Midhar', 'Nawaf Al-Hazmi'], ['Salem Al-Hazmi']])", "test9": "get_num_hijackers([['Abdelaziz Al Omari', 'Khalid Al-Midhar'], ['Salem Al-Hazmi', 'Nawaf Al-Hazmi']])", "test10": "get_num_hijackers([['Nawaf Al-Hazmi'], ['Khalid Al-Midhar'], ['Salem Al-Hazmi'], ['Abdelaziz Al Omari']])"}, "hidden_information": "def get_num_hijackers(hijackers_group):\n    # Initialize an empty dictionary to store unique hijackers\n    unique_hijackers = {}\n    \n    # Iterate through the list of hijackers groups\n    for group in hijackers_group:\n        # Iterate through the list of hijackers in each group\n        for hijacker in group:\n            # Remove any duplicate hijackers\n            if hijacker not in unique_hijackers:\n                unique_hijackers[hijacker] = True\n    \n    # Return the number of unique hijackers\n    return len(unique_hijackers)"}
{"ground_truth": "def categorize_book_review(review):\n    if review['rating'] >= 4:\n        return 'Positive'\n    elif review['rating'] <= 2:\n        return 'Negative'\n    else:\n        return 'Neutral'", "problem_description": "Can you write a Python function that categorizes book reviews based on their rating? I want to pass in a review and get a category as output.The signature of the function is: def categorize_book_review(review)", "test_cases": {"test1": "categorize_book_review({'rating': 5, 'review': 'I loved this book!'})", "test2": "categorize_book_review({'rating': 1, 'review': 'I hated this book!'})", "test3": "categorize_book_review({'rating': 3, 'review': 'This book was okay.'})", "test4": "categorize_book_review({'rating': 4, 'review': 'I enjoyed this book.'})", "test5": "categorize_book_review({'rating': 2, 'review': 'I did not enjoy this book.'})", "test6": "categorize_book_review({'rating': 5, 'review': 'This book was amazing!'})", "test7": "categorize_book_review({'rating': 1, 'review': 'This book was terrible!'})", "test8": "categorize_book_review({'rating': 3, 'review': 'This book was decent.'})", "test9": "categorize_book_review({'rating': 4, 'review': 'I liked this book.'})", "test10": "categorize_book_review({'rating': 2, 'review': 'I did not like this book.'})"}, "hidden_information": "def categorize_book_review(review):\n    if review['rating'] >= 4:\n        return 'Positive'\n    elif review['rating'] <= 2:\n        return 'Negative'\n    else:\n        return 'Neutral'"}
{"ground_truth": "def calculate_total_audience(tv_viewers, online_viewers, overlap_rate): return tv_viewers + online_viewers - (tv_viewers * overlap_rate)", "problem_description": "I want you to write a python function that calculates the total audience for an advertising campaign across multiple screens. The campaign is targeting TV and online platforms, but some of the viewers might be common to both. Can you create a function that takes into account the overlap and gives me the total unique audience?The signature of the function is: def calculate_total_audience(tv_viewers, online_viewers, overlap_rate)", "test_cases": {"test1": "calculate_total_audience(10000, 5000, 0.2)", "test2": "calculate_total_audience(20000, 3000, 0.1)", "test3": "calculate_total_audience(5000, 20000, 0.3)", "test4": "calculate_total_audience(15000, 15000, 0.5)", "test5": "calculate_total_audience(1000, 500, 0.1)", "test6": "calculate_total_audience(25000, 35000, 0.4)", "test7": "calculate_total_audience(30000, 4000, 0.05)", "test8": "calculate_total_audience(18000, 28000, 0.6)", "test9": "calculate_total_audience(4000, 6000, 0.2)", "test10": "calculate_total_audience(22000, 18000, 0.35)"}, "hidden_information": "def calculate_total_audience(tv_viewers, online_viewers, overlap_rate): return tv_viewers + online_viewers - (tv_viewers * overlap_rate)"}
{"ground_truth": "def count_createable_objects(storage_capacity, available_materials, desired_objects):\n    # Initialize a counter for createable objects\n    createable_objects = 0\n    \n    # Iterate over each desired object\n    for object in desired_objects:\n        # Check if the required materials are available\n        if all(material in available_materials for material in object['required_materials']) and sum(object['required_materials'].values()) <= storage_capacity:\n            # Create the object and update the storage capacity\n            storage_capacity -= sum(object['required_materials'].values())\n            createable_objects += 1\n        \n    return createable_objects", "problem_description": "Write a python function that will simulate Charlotte's Infinity Chip. The function should take in three parameters: the storage capacity of the chip, a dictionary of available materials, and a list of dictionaries representing the objects Charlotte wants to create from the chip. The objects should have a 'required_materials' key with a dictionary value, where the keys are the material names and the values are the quantities required. The function should return the number of objects that can be created with the given materials and storage capacity.The signature of the function is: def count_createable_objects(storage_capacity, available_materials, desired_objects)", "test_cases": {"test1": "count_createable_objects(100, {'metal': 50, 'plastic': 30}, [{'required_materials': {'metal': 20, 'plastic': 10}}, {'required_materials': {'metal': 30, 'plastic': 15}}])", "test2": "count_createable_objects(50, {'metal': 20, 'plastic': 10}, [{'required_materials': {'metal': 15, 'plastic': 5}}, {'required_materials': {'metal': 30, 'plastic': 20}}])", "test3": "count_createable_objects(200, {'metal': 100, 'plastic': 50}, [{'required_materials': {'metal': 50, 'plastic': 25}}, {'required_materials': {'metal': 60, 'plastic': 30}}])", "test4": "count_createable_objects(150, {'metal': 80, 'plastic': 40}, [{'required_materials': {'metal': 40, 'plastic': 20}}, {'required_materials': {'metal': 70, 'plastic': 35}}])", "test5": "count_createable_objects(250, {'metal': 120, 'plastic': 60}, [{'required_materials': {'metal': 60, 'plastic': 30}}, {'required_materials': {'metal': 80, 'plastic': 40}}])", "test6": "count_createable_objects(300, {'metal': 150, 'plastic': 75}, [{'required_materials': {'metal': 75, 'plastic': 37.5}}, {'required_materials': {'metal': 90, 'plastic': 45}}])", "test7": "count_createable_objects(350, {'metal': 180, 'plastic': 90}, [{'required_materials': {'metal': 90, 'plastic': 45}}, {'required_materials': {'metal': 110, 'plastic': 55}}])", "test8": "count_createable_objects(400, {'metal': 210, 'plastic': 105}, [{'required_materials': {'metal': 105, 'plastic': 52.5}}, {'required_materials': {'metal': 130, 'plastic': 65}}])", "test9": "count_createable_objects(450, {'metal': 240, 'plastic': 120}, [{'required_materials': {'metal': 120, 'plastic': 60}}, {'required_materials': {'metal': 150, 'plastic': 75}}])", "test10": "count_createable_objects(500, {'metal': 270, 'plastic': 135}, [{'required_materials': {'metal': 135, 'plastic': 67.5}}, {'required_materials': {'metal': 170, 'plastic': 85}}])"}, "hidden_information": "def count_createable_objects(storage_capacity, available_materials, desired_objects):\n    # Initialize a counter for createable objects\n    createable_objects = 0\n    \n    # Iterate over each desired object\n    for object in desired_objects:\n        # Check if the required materials are available\n        if all(material in available_materials for material in object['required_materials']) and sum(object['required_materials'].values()) <= storage_capacity:\n            # Create the object and update the storage capacity\n            storage_capacity -= sum(object['required_materials'].values())\n            createable_objects += 1\n        \n    return createable_objects"}
{"ground_truth": "def suggest_seasonings(dish_type, ingredients): \n    seasonings = {\n        'beef': ['basil', 'bay leaf', 'celery', 'curry', 'dill weed', 'dry mustard', 'marjoram', 'onion', 'oregano', 'nutmeg', 'parsley', 'pepper', 'rosemary', 'sage', 'savory', 'tarragon', 'thyme'],\n        'poultry': ['cranberries', 'paprika', 'parsley', 'poultry seasoning', 'sage', 'thyme', 'bay leaf', 'celery', 'chervil', 'curry', 'dill seed'],\n        'fish': ['basil', 'bay leaf', 'curry', 'cumin', 'dry mustard', 'fennel', 'garlic', 'green pepper', 'lemon juice', 'mace', 'marjoram', 'paprika', 'parsley', 'onion', 'pepper', 'tumeric', 'sesame seed'],\n        'pork': ['allspice', 'apples', 'basil', 'applesauce', 'mint', 'vinegar', 'caraway', 'chili powder', 'chives', 'cinnamon', 'cloves', 'fennel', 'garlic', 'marjoram', 'nutmeg', 'onion', 'oregano', 'parsley', 'rosemary', 'sage'],\n        'potatoes': ['green pepper', 'basil', 'onion', 'mace', 'parsley', 'pepper', 'vinegar'],\n        'tomatoes': ['basil', 'celery', 'marjoram', 'onion', 'pepper', 'cilantro'],\n        'squash': ['ginger', 'mace', 'nutmeg', 'onion', 'pepper']\n    }\n    result = []\n    if dish_type in seasonings:\n        result = seasonings[dish_type]\n    for ingredient in ingredients:\n        if ingredient in ['basil', 'bay leaf', 'celery', 'curry', 'dill weed', 'dry mustard', 'marjoram', 'onion', 'oregano', 'nutmeg', 'parsley', 'pepper', 'rosemary', 'sage', 'savory', 'tarragon', 'thyme', 'cranberries', 'paprika', 'poultry seasoning', 'chervil', 'dill seed', 'cumin', 'fennel', 'garlic', 'green pepper', 'lemon juice', 'mace', 'tumeric', 'sesame seed', 'allspice', 'apples', 'applesauce', 'mint', 'vinegar', 'caraway', 'chili powder', 'chives', 'cinnamon', 'cloves', 'ginger', 'cilantro']:\n            result.append(ingredient)\n    return list(set(result))", "problem_description": "I want to create a recipe for a dish, but I'm not sure what seasonings to use. Can you write a python function that takes the type of dish and a list of ingredients as input and returns a list of suggested seasonings?The signature of the function is: def suggest_seasonings(dish_type, ingredients)", "test_cases": {"test1": "suggest_seasonings('beef', ['onion', 'garlic'])", "test2": "suggest_seasonings('fish', ['lemon juice', 'ginger'])", "test3": "suggest_seasonings('poultry', ['parsley', 'thyme'])", "test4": "suggest_seasonings('pork', ['apples', 'cinnamon'])", "test5": "suggest_seasonings('potatoes', ['green pepper', 'mace'])", "test6": "suggest_seasonings('tomatoes', ['basil', 'celery'])", "test7": "suggest_seasonings('squash', ['ginger', 'nutmeg'])", "test8": "suggest_seasonings('beef', ['celery', 'marjoram'])", "test9": "suggest_seasonings('fish', ['fennel', 'cumin'])", "test10": "suggest_seasonings('pork', ['mint', 'chili powder'])"}, "hidden_information": "def suggest_seasonings(dish_type, ingredients): \n    seasonings = {\n        'beef': ['basil', 'bay leaf', 'celery', 'curry', 'dill weed', 'dry mustard', 'marjoram', 'onion', 'oregano', 'nutmeg', 'parsley', 'pepper', 'rosemary', 'sage', 'savory', 'tarragon', 'thyme'],\n        'poultry': ['cranberries', 'paprika', 'parsley', 'poultry seasoning', 'sage', 'thyme', 'bay leaf', 'celery', 'chervil', 'curry', 'dill seed'],\n        'fish': ['basil', 'bay leaf', 'curry', 'cumin', 'dry mustard', 'fennel', 'garlic', 'green pepper', 'lemon juice', 'mace', 'marjoram', 'paprika', 'parsley', 'onion', 'pepper', 'tumeric', 'sesame seed'],\n        'pork': ['allspice', 'apples', 'basil', 'applesauce', 'mint', 'vinegar', 'caraway', 'chili powder', 'chives', 'cinnamon', 'cloves', 'fennel', 'garlic', 'marjoram', 'nutmeg', 'onion', 'oregano', 'parsley', 'rosemary', 'sage'],\n        'potatoes': ['green pepper', 'basil', 'onion', 'mace', 'parsley', 'pepper', 'vinegar'],\n        'tomatoes': ['basil', 'celery', 'marjoram', 'onion', 'pepper', 'cilantro'],\n        'squash': ['ginger', 'mace', 'nutmeg', 'onion', 'pepper']\n    }\n    result = []\n    if dish_type in seasonings:\n        result = seasonings[dish_type]\n    for ingredient in ingredients:\n        if ingredient in ['basil', 'bay leaf', 'celery', 'curry', 'dill weed', 'dry mustard', 'marjoram', 'onion', 'oregano', 'nutmeg', 'parsley', 'pepper', 'rosemary', 'sage', 'savory', 'tarragon', 'thyme', 'cranberries', 'paprika', 'poultry seasoning', 'chervil', 'dill seed', 'cumin', 'fennel', 'garlic', 'green pepper', 'lemon juice', 'mace', 'tumeric', 'sesame seed', 'allspice', 'apples', 'applesauce', 'mint', 'vinegar', 'caraway', 'chili powder', 'chives', 'cinnamon', 'cloves', 'ginger', 'cilantro']:\n            result.append(ingredient)\n    return list(set(result))"}
{"ground_truth": "def calculate_total_fish(pouch_capacity, fish_per_dive, dives_per_flight): return pouch_capacity * dives_per_flight", "problem_description": "Hey, can you write a Python function to calculate the total number of fish a pelican can store in its pouch? I want to know the relationship between the pouch capacity and the total fish it can hold. Not sure how to describe it, but I want the function to take some parameters that will help me figure this out.The signature of the function is: def calculate_total_fish(pouch_capacity, fish_per_dive, dives_per_flight)", "test_cases": {"test1": "calculate_total_fish(3, 2, 5)", "test2": "calculate_total_fish(4, 3, 4)", "test3": "calculate_total_fish(5, 1, 6)", "test4": "calculate_total_fish(2, 4, 3)", "test5": "calculate_total_fish(1, 5, 2)", "test6": "calculate_total_fish(6, 2, 1)", "test7": "calculate_total_fish(3, 4, 5)", "test8": "calculate_total_fish(5, 3, 2)", "test9": "calculate_total_fish(4, 1, 6)", "test10": "calculate_total_fish(2, 6, 3)"}, "hidden_information": "def calculate_total_fish(pouch_capacity, fish_per_dive, dives_per_flight): return pouch_capacity * dives_per_flight"}
{"ground_truth": "def calculate_battle_outcome(good_force_strength, evil_force_strength, strategy):\n    if strategy == 'divide_and_conquer':\n        good_force_strength *= 2\n    elif strategy == 'all_out_war':\n        evil_force_strength *= 1.5\n    if good_force_strength > evil_force_strength:\n        return 'Good wins'\n    elif good_force_strength < evil_force_strength:\n        return 'Evil wins'\n    else:\n        return 'Stalemate'", "problem_description": "I need a python function to determine the outcome of a battle between good and evil forces. The function should take into account the strength of each side and a strategy that the good side uses to fight the battle. I want the function to return a string that indicates the outcome of the battle, i.e. either 'Good wins', 'Evil wins', or 'Stalemate'. The strategy can be either 'divide_and_conquer' or 'all_out_war'. Can you help me write this function?The signature of the function is: def calculate_battle_outcome(good_force_strength, evil_force_strength, strategy)", "test_cases": {"test1": "calculate_battle_outcome(100, 80, 'divide_and_conquer')", "test2": "calculate_battle_outcome(50, 120, 'all_out_war')", "test3": "calculate_battle_outcome(90, 70, 'divide_and_conquer')", "test4": "calculate_battle_outcome(60, 180, 'all_out_war')", "test5": "calculate_battle_outcome(150, 120, 'divide_and_conquer')", "test6": "calculate_battle_outcome(90, 90, 'all_out_war')", "test7": "calculate_battle_outcome(200, 180, 'divide_and_conquer')", "test8": "calculate_battle_outcome(50, 50, 'all_out_war')", "test9": "calculate_battle_outcome(180, 150, 'divide_and_conquer')", "test10": "calculate_battle_outcome(100, 100, 'divide_and_conquer')"}, "hidden_information": "def calculate_battle_outcome(good_force_strength, evil_force_strength, strategy):\n    if strategy == 'divide_and_conquer':\n        good_force_strength *= 2\n    elif strategy == 'all_out_war':\n        evil_force_strength *= 1.5\n    if good_force_strength > evil_force_strength:\n        return 'Good wins'\n    elif good_force_strength < evil_force_strength:\n        return 'Evil wins'\n    else:\n        return 'Stalemate'"}
{"ground_truth": "def assess_ingrown_hair_risk(hair_length, hair_type, shaving_frequency):\n    if hair_length < 5 and (hair_type == 'curly' or hair_type == 'coarse') and shaving_frequency > 2:\n        return 'High'\n    elif hair_length < 5 and (hair_type == 'straight' or hair_type == 'fine') and shaving_frequency > 2:\n        return 'Medium'\n    else:\n        return 'Low'", "problem_description": "Hi AI, I need your help in writing a Python function to determine the risk of ingrown hairs. The function should take into account hair length, type, and shaving frequency. Can you help me create this function?The signature of the function is: def assess_ingrown_hair_risk(hair_length, hair_type, shaving_frequency)", "test_cases": {"test1": "assess_ingrown_hair_risk(3, 'curly', 3)", "test2": "assess_ingrown_hair_risk(10, 'straight', 1)", "test3": "assess_ingrown_hair_risk(2, 'coarse', 4)", "test4": "assess_ingrown_hair_risk(5, 'fine', 2)", "test5": "assess_ingrown_hair_risk(1, 'curly', 3)", "test6": "assess_ingrown_hair_risk(8, 'straight', 1)", "test7": "assess_ingrown_hair_risk(4, 'coarse', 2)", "test8": "assess_ingrown_hair_risk(6, 'fine', 3)", "test9": "assess_ingrown_hair_risk(3, 'curly', 4)", "test10": "assess_ingrown_hair_risk(9, 'straight', 2)"}, "hidden_information": "def assess_ingrown_hair_risk(hair_length, hair_type, shaving_frequency):\n    if hair_length < 5 and (hair_type == 'curly' or hair_type == 'coarse') and shaving_frequency > 2:\n        return 'High'\n    elif hair_length < 5 and (hair_type == 'straight' or hair_type == 'fine') and shaving_frequency > 2:\n        return 'Medium'\n    else:\n        return 'Low'"}
{"ground_truth": "def game_recommender(game_genre, game_platform):\n    if game_genre == 'action' and game_platform == 'Xbox 360':\n        return 'Halo'\n    elif game_genre == 'action' and game_platform == 'PS3':\n        return 'God of War'\n    elif game_genre == 'adventure' and game_platform == 'Xbox 360':\n        return 'Dead Rising 2'\n    elif game_genre == 'adventure' and game_platform == 'PS3':\n        return 'The Last of Us'\n    else:\n        return 'No game found for the given genre and platform'", "problem_description": "Can you write a python function to recommend games based on genre and platform? I'm a gamer and I want to know what games I should play on different consoles.The signature of the function is: def game_recommender(game_genre, game_platform)", "test_cases": {"test1": "game_recommender('action', 'Xbox 360')", "test2": "game_recommender('adventure', 'PS3')", "test3": "game_recommender('sports', 'Xbox 360')", "test4": "game_recommender('action', 'PS3')", "test5": "game_recommender('adventure', 'Xbox 360')", "test6": "game_recommender('racing', 'PS3')", "test7": "game_recommender('action', 'Wii')", "test8": "game_recommender('adventure', 'Xbox One')", "test9": "game_recommender('sports', 'PS4')", "test10": "game_recommender('rpg', 'PC')"}, "hidden_information": "def game_recommender(game_genre, game_platform):\n    if game_genre == 'action' and game_platform == 'Xbox 360':\n        return 'Halo'\n    elif game_genre == 'action' and game_platform == 'PS3':\n        return 'God of War'\n    elif game_genre == 'adventure' and game_platform == 'Xbox 360':\n        return 'Dead Rising 2'\n    elif game_genre == 'adventure' and game_platform == 'PS3':\n        return 'The Last of Us'\n    else:\n        return 'No game found for the given genre and platform'"}
{"ground_truth": "def calculate_festival_revenue_and_profit(attendees, ticket_price, artist_payment, talent_fee_percentage):\n    revenue = attendees * ticket_price\n    talent_fee = artist_payment * talent_fee_percentage / 100\n    profit = revenue - artist_payment - talent_fee\n    return revenue, profit", "problem_description": "I want you to write a Python function to calculate the revenue and profit margins of a music festival. I have data on the number of attendees, ticket prices, and artist payments, but I'm not sure how to calculate the profit margins yet. Can you help me?The signature of the function is: def calculate_festival_revenue_and_profit(attendees, ticket_price, artist_payment, talent_fee_percentage)", "test_cases": {"test1": "calculate_festival_revenue_and_profit(10000, 50, 50000, 10)", "test2": "calculate_festival_revenue_and_profit(20000, 75, 75000, 15)", "test3": "calculate_festival_revenue_and_profit(30000, 100, 100000, 20)", "test4": "calculate_festival_revenue_and_profit(40000, 125, 125000, 25)", "test5": "calculate_festival_revenue_and_profit(50000, 150, 150000, 30)", "test6": "calculate_festival_revenue_and_profit(10000, 50, 25000, 5)", "test7": "calculate_festival_revenue_and_profit(20000, 75, 37500, 10)", "test8": "calculate_festival_revenue_and_profit(30000, 100, 50000, 15)", "test9": "calculate_festival_revenue_and_profit(40000, 125, 62500, 20)", "test10": "calculate_festival_revenue_and_profit(50000, 150, 75000, 25)"}, "hidden_information": "def calculate_festival_revenue_and_profit(attendees, ticket_price, artist_payment, talent_fee_percentage):\n    revenue = attendees * ticket_price\n    talent_fee = artist_payment * talent_fee_percentage / 100\n    profit = revenue - artist_payment - talent_fee\n    return revenue, profit"}
{"ground_truth": "def rank_movies_by_box_office(movies):\n  return sorted(movies, key=lambda x: x['box_office_results'], reverse=True)", "problem_description": "Can you write a python function that takes in some movie data and ranks them based on their box office results?The signature of the function is: def rank_movies_by_box_office(movies)", "test_cases": {"test1": "rank_movies_by_box_office([{'name': 'P.K.', 'box_office_results': 183}, {'name': 'Action Jackson', 'box_office_results': 53}])", "test2": "rank_movies_by_box_office([{'name': 'Ungli', 'box_office_results': 19}, {'name': 'Happy Ending', 'box_office_results': 20}, {'name': 'Kill Dil', 'box_office_results': 30}])", "test3": "rank_movies_by_box_office([{'name': 'Movie A', 'box_office_results': 100}, {'name': 'Movie B', 'box_office_results': 50}, {'name': 'Movie C', 'box_office_results': 200}])", "test4": "rank_movies_by_box_office([{'name': 'Movie D', 'box_office_results': 75}, {'name': 'Movie E', 'box_office_results': 100}, {'name': 'Movie F', 'box_office_results': 50}])", "test5": "rank_movies_by_box_office([{'name': 'Movie G', 'box_office_results': 225}, {'name': 'Movie H', 'box_office_results': 175}])", "test6": "rank_movies_by_box_office([{'name': 'Movie I', 'box_office_results': 100}, {'name': 'Movie J', 'box_office_results': 100}, {'name': 'Movie K', 'box_office_results': 50}])", "test7": "rank_movies_by_box_office([{'name': 'Movie L', 'box_office_results': 150}, {'name': 'Movie M', 'box_office_results': 200}, {'name': 'Movie N', 'box_office_results': 100}])", "test8": "rank_movies_by_box_office([{'name': 'Movie O', 'box_office_results': 50}, {'name': 'Movie P', 'box_office_results': 25}, {'name': 'Movie Q', 'box_office_results': 75}])", "test9": "rank_movies_by_box_office([{'name': 'Movie R', 'box_office_results': 200}, {'name': 'Movie S', 'box_office_results': 175}, {'name': 'Movie T', 'box_office_results': 225}])", "test10": "rank_movies_by_box_office([{'name': 'Movie U', 'box_office_results': 100}, {'name': 'Movie V', 'box_office_results': 150}, {'name': 'Movie W', 'box_office_results': 200}, {'name': 'Movie X', 'box_office_results': 50}])"}, "hidden_information": "def rank_movies_by_box_office(movies):\n  return sorted(movies, key=lambda x: x['box_office_results'], reverse=True)"}
{"ground_truth": "def years_until_next_sighting(current_year, sighting_frequency): \n    return (sighting_frequency - (current_year % sighting_frequency)) % sighting_frequency", "problem_description": "I want you to write a Python function to determine how many years it will take for a celestial event to occur again, given that it happens at a fixed interval. The function should take into account the current year and the time it takes for the event to recur.The signature of the function is: def years_until_next_sighting(current_year, sighting_frequency)", "test_cases": {"test1": "years_until_next_sighting(2024, 1000)", "test2": "years_until_next_sighting(2043, 1000)", "test3": "years_until_next_sighting(999, 1000)", "test4": "years_until_next_sighting(1001, 1000)", "test5": "years_until_next_sighting(10, 50)", "test6": "years_until_next_sighting(1234, 2000)", "test7": "years_until_next_sighting(1999, 1000)", "test8": "years_until_next_sighting(3000, 500)", "test9": "years_until_next_sighting(4321, 200)", "test10": "years_until_next_sighting(9876, 150)"}, "hidden_information": "def years_until_next_sighting(current_year, sighting_frequency): \n    return (sighting_frequency - (current_year % sighting_frequency)) % sighting_frequency"}
{"ground_truth": "def calculate_power(goddess_association, base_power):\n    if goddess_association == 'Angiras':\n        return base_power * 2\n    elif goddess_association == 'Agni':\n        return base_power * 1.5\n    else:\n        return base_power", "problem_description": "I want to write a python function to calculate the power level of a fire based on its association with different gods in hindu mythology, can you help me create the function?The signature of the function is: def calculate_power(goddess_association, base_power)", "test_cases": {"test1": "calculate_power('Angiras', 100)", "test2": "calculate_power('Agni', 80)", "test3": "calculate_power('Brahma', 90)", "test4": "calculate_power('Angiras', 50)", "test5": "calculate_power('Agni', 120)", "test6": "calculate_power('Unknown', 1000)", "test7": "calculate_power('Indra', 500)", "test8": "calculate_power('Angiras', 200)", "test9": "calculate_power('Agni', 150)", "test10": "calculate_power('Durga', 800)"}, "hidden_information": "def calculate_power(goddess_association, base_power):\n    if goddess_association == 'Angiras':\n        return base_power * 2\n    elif goddess_association == 'Agni':\n        return base_power * 1.5\n    else:\n        return base_power"}
{"ground_truth": "def analyze_emotion(text, emotion): return text.lower().count(emotion.lower()) / len(text.split()) if len(text) > 0 else 0", "problem_description": "I want the agent to write a python function that can analyze the level of certain emotions expressed in a given text, such as hope or strength. Can you help me?The signature of the function is: def analyze_emotion(text, emotion)", "test_cases": {"test1": "analyze_emotion('I feel happy today', 'happy')", "test2": "analyze_emotion('The future is looking bleak', 'hope')", "test3": "analyze_emotion('I am feeling sad and hopeless', 'strength')", "test4": "analyze_emotion('This is a very short text', 'hope')", "test5": "analyze_emotion('I have lost all hope', 'hope')", "test6": "analyze_emotion('', 'strength')", "test7": "analyze_emotion('You are strong and capable', 'strength')", "test8": "analyze_emotion('I am feeling anxious and uncertain', 'hope')", "test9": "analyze_emotion('Everything will be alright', 'hope')", "test10": "analyze_emotion('I am feeling overwhelmed and stuck', 'strength')"}, "hidden_information": "def analyze_emotion(text, emotion): return text.lower().count(emotion.lower()) / len(text.split()) if len(text) > 0 else 0"}
{"ground_truth": "def calculate_total_aid(tons_of_flour, tons_of_buckwheat, tons_of_pasta, tons_of_fish, tons_of_sugar, tons_of_tea, tons_of_tinned_meat, number_of_residents): return (tons_of_flour * 1000 + tons_of_buckwheat * 800 + tons_of_pasta * 700 + tons_of_fish * 600 + tons_of_sugar * 500 + tons_of_tea * 400 + tons_of_tinned_meat * 300) / number_of_residents", "problem_description": "I need a python function to calculate the total aid received by the residents of Tskhinvali, but I'm not sure how to define it. Can you help me create a function that takes some inputs and calculates the total aid?The signature of the function is: def calculate_total_aid(tons_of_flour, tons_of_buckwheat, tons_of_pasta, tons_of_fish, tons_of_sugar, tons_of_tea, tons_of_tinned_meat, number_of_residents)", "test_cases": {"test1": "calculate_total_aid(10, 8, 7, 6, 5, 4, 3, 1000)", "test2": "calculate_total_aid(5, 4, 3, 2, 1, 1, 1, 500)", "test3": "calculate_total_aid(15, 12, 10, 8, 6, 5, 4, 2000)", "test4": "calculate_total_aid(1, 1, 1, 1, 1, 1, 1, 100)", "test5": "calculate_total_aid(20, 16, 14, 12, 10, 8, 6, 4000)", "test6": "calculate_total_aid(3, 2, 2, 1, 1, 1, 1, 800)", "test7": "calculate_total_aid(12, 10, 9, 8, 7, 6, 5, 3000)", "test8": "calculate_total_aid(6, 5, 4, 3, 2, 2, 2, 2000)", "test9": "calculate_total_aid(2, 2, 2, 2, 2, 2, 2, 400)", "test10": "calculate_total_aid(8, 7, 6, 5, 4, 3, 3, 2500)"}, "hidden_information": "def calculate_total_aid(tons_of_flour, tons_of_buckwheat, tons_of_pasta, tons_of_fish, tons_of_sugar, tons_of_tea, tons_of_tinned_meat, number_of_residents): return (tons_of_flour * 1000 + tons_of_buckwheat * 800 + tons_of_pasta * 700 + tons_of_fish * 600 + tons_of_sugar * 500 + tons_of_tea * 400 + tons_of_tinned_meat * 300) / number_of_residents"}
{"ground_truth": "def calculate_burrito_cost(num_burritos, num_tortilla_chips, burrito_price, tortilla_chip_price, discount_percentage=0):\n    total_cost = (num_burritos * burrito_price + num_tortilla_chips * tortilla_chip_price) * (1 - discount_percentage / 100)\n    return round(total_cost, 2)", "problem_description": "I want the LLM agent to help write a python function to calculate the total cost of buying burritos and tortilla chips at Denny's with a possible discount, assuming the discount applies to both the burrito and the tortilla chips, can you help me derive this function?The signature of the function is: def calculate_burrito_cost(num_burritos, num_tortilla_chips, burrito_price, tortilla_chip_price, discount_percentage=0)", "test_cases": {"test1": "calculate_burrito_cost(1, 1, 5.99, 2.99, 0)", "test2": "calculate_burrito_cost(2, 2, 5.99, 2.99, 10)", "test3": "calculate_burrito_cost(1, 0, 5.99, 2.99)", "test4": "calculate_burrito_cost(0, 1, 5.99, 2.99, 5)", "test5": "calculate_burrito_cost(1, 1, 10.99, 3.99)", "test6": "calculate_burrito_cost(2, 1, 10.99, 3.99, 10)", "test7": "calculate_burrito_cost(1, 2, 5.99, 2.99)", "test8": "calculate_burrito_cost(0, 2, 5.99, 2.99, 0)", "test9": "calculate_burrito_cost(1, 1, 9.99, 1.99, 5)", "test10": "calculate_burrito_cost(2, 2, 7.99, 2.49, 10)"}, "hidden_information": "def calculate_burrito_cost(num_burritos, num_tortilla_chips, burrito_price, tortilla_chip_price, discount_percentage=0):\n    total_cost = (num_burritos * burrito_price + num_tortilla_chips * tortilla_chip_price) * (1 - discount_percentage / 100)\n    return round(total_cost, 2)"}
{"ground_truth": "def calculate_new_trajectory(initial_distance, initial_height, new_fence_distance):\n    # assuming constant initial speed and angle\n    # and neglecting air resistance\n    new_trajectory = initial_distance - (new_fence_distance / initial_distance) * initial_height\n    return new_trajectory", "problem_description": "I want the agent to write a python function which given an initial distance, an initial height, and a new fence distance, calculate and return the new trajectory of the ball after the fence adjustments. The new trajectory is the distance the ball travels after being hit, taking into account the new fence distance and the initial height and distance.The signature of the function is: def calculate_new_trajectory(initial_distance, initial_height, new_fence_distance)", "test_cases": {"test1": "calculate_new_trajectory(402, 100, 391)", "test2": "calculate_new_trajectory(402, 150, 391)", "test3": "calculate_new_trajectory(402, 200, 391)", "test4": "calculate_new_trajectory(402, 50, 390)", "test5": "calculate_new_trajectory(322, 200, 322)", "test6": "calculate_new_trajectory(336, 150, 336)", "test7": "calculate_new_trajectory(396, 100, 396)", "test8": "calculate_new_trajectory(402, 250, 391)", "test9": "calculate_new_trajectory(402, 300, 391)", "test10": "calculate_new_trajectory(402, 350, 391)"}, "hidden_information": "def calculate_new_trajectory(initial_distance, initial_height, new_fence_distance):\n    # assuming constant initial speed and angle\n    # and neglecting air resistance\n    new_trajectory = initial_distance - (new_fence_distance / initial_distance) * initial_height\n    return new_trajectory"}
{"ground_truth": "def calculate_time_dilation(earth_time, satellite_period, satellite_radius):\n    speed_of_light = 299792458  # m/s\n    earth_radius = 6371000  # m\n    satellite_speed = 2 * 3.14159 * satellite_radius / satellite_period\n    time_dilation = (1 - satellite_speed**2 / speed_of_light**2)**0.5\n    approx_time_dilation = 1 - 0.5 * satellite_speed**2 / speed_of_light**2\n    time_interval = earth_time * (1 - time_dilation)\n    return (earth_time - time_interval) / 60 / 60 / 24 / 365.25", "problem_description": "I need a Python function that will calculate the time interval by which a clock in a satellite orbiting the Earth will differ from an identical clock on Earth after one year. The satellite's orbit is characterized by a period and a radius.The signature of the function is: def calculate_time_dilation(earth_time, satellite_period, satellite_radius)", "test_cases": {"test1": "calculate_time_dilation(365.25 * 24 * 60 * 60, 120 * 60, 8.05535e6)", "test2": "calculate_time_dilation(365.25 * 24 * 60 * 60, 100 * 60, 8.05535e6)", "test3": "calculate_time_dilation(365.25 * 24 * 60 * 60, 80 * 60, 6.371e6)", "test4": "calculate_time_dilation(100 * 24 * 60 * 60, 120 * 60, 8.05535e6)", "test5": "calculate_time_dilation(50 * 24 * 60 * 60, 100 * 60, 8.05535e6)", "test6": "calculate_time_dilation(365.25 * 24 * 60 * 60, 120 * 60, 1e6)", "test7": "calculate_time_dilation(365.25 * 24 * 60 * 60, 120 * 60, 1e7)", "test8": "calculate_time_dilation(10 * 24 * 60 * 60, 120 * 60, 8.05535e6)", "test9": "calculate_time_dilation(365.25 * 24 * 60 * 60, 1000 * 60, 8.05535e6)", "test10": "calculate_time_dilation(365.25 * 24 * 60 * 60, 120 * 60, 8.05535e-3)"}, "hidden_information": "def calculate_time_dilation(earth_time, satellite_period, satellite_radius):\n    speed_of_light = 299792458  # m/s\n    earth_radius = 6371000  # m\n    satellite_speed = 2 * 3.14159 * satellite_radius / satellite_period\n    time_dilation = (1 - satellite_speed**2 / speed_of_light**2)**0.5\n    approx_time_dilation = 1 - 0.5 * satellite_speed**2 / speed_of_light**2\n    time_interval = earth_time * (1 - time_dilation)\n    return (earth_time - time_interval) / 60 / 60 / 24 / 365.25"}
{"ground_truth": "def get_transplantation_rates(cell_data, host_types):\n    # Define a dictionary to map host types to their respective transplantation rates\n    transplantation_rates = {'syngeneic': 0.85, 'allogeneic': 0.65, 'xenogeneic': 0.35}\n\n    # Initialize a list to store the transplantation rates for the given host types\n    rates = []\n\n    # Iterate over the host types\n    for host in host_types:\n        # Append the transplantation rate for each host type to the list\n        rates.append(transplantation_rates.get(host, 0))\n\n    # Calculate the average transplantation rate\n    average_rate = sum(rates) / len(rates)\n\n    # Return the average transplantation rate\n    return average_rate", "problem_description": "I want the agent to write a python function that can calculate the average transplantation rate of stem cells for different host types. Each host type has a specific transplantation rate. The function should be able to return the average rate given an array of host types. The agent should be able to clarify the host types and transplantation rates with me if necessary.The signature of the function is: def get_transplantation_rates(cell_data, host_types)", "test_cases": {"test1": "get_transplantation_rates([], ['syngeneic', 'allogeneic'])", "test2": "get_transplantation_rates([], ['syngeneic', 'xenogeneic', 'syngeneic'])", "test3": "get_transplantation_rates([], ['allogeneic', 'xenogeneic', 'allogeneic'])", "test4": "get_transplantation_rates([], ['syngeneic', 'allogeneic', 'xenogeneic', 'allogeneic', 'syngeneic'])", "test5": "get_transplantation_rates([], ['xenogeneic', 'allogeneic', 'syngeneic', 'syngeneic'])", "test6": "get_transplantation_rates([], ['xenogeneic', 'syngeneic', 'xenogeneic', 'allogeneic', 'xenogeneic'])", "test7": "get_transplantation_rates([], ['allogeneic', 'syngeneic', 'allogeneic'])", "test8": "get_transplantation_rates([], ['xenogeneic', 'syngeneic', 'syngeneic'])", "test9": "get_transplantation_rates([], ['allogeneic', 'allogeneic', 'allogeneic', 'syngeneic', 'allogeneic'])", "test10": "get_transplantation_rates([], ['xenogeneic', 'xenogeneic', 'xenogeneic', 'allogeneic'])"}, "hidden_information": "def get_transplantation_rates(cell_data, host_types):\n    # Define a dictionary to map host types to their respective transplantation rates\n    transplantation_rates = {'syngeneic': 0.85, 'allogeneic': 0.65, 'xenogeneic': 0.35}\n\n    # Initialize a list to store the transplantation rates for the given host types\n    rates = []\n\n    # Iterate over the host types\n    for host in host_types:\n        # Append the transplantation rate for each host type to the list\n        rates.append(transplantation_rates.get(host, 0))\n\n    # Calculate the average transplantation rate\n    average_rate = sum(rates) / len(rates)\n\n    # Return the average transplantation rate\n    return average_rate"}
{"ground_truth": "def calculate_currency_fluctuation(currency_prices, news_events):\n    fluctuations = {}\n    for currency, price in currency_prices.items():\n        if currency in news_events:\n            fluctuations[currency] = round(price * (1 + news_events[currency]), 2)\n        else:\n            fluctuations[currency] = price\n    return fluctuations", "problem_description": "I want a python function that can determine the current price of different currencies based on previous prices and recent financial news, can you help me with this?The signature of the function is: def calculate_currency_fluctuation(currency_prices, news_events)", "test_cases": {"test1": "calculate_currency_fluctuation({'EUR': 1.12, 'USD': 1.00, 'JPY': 0.0089}, {'EUR': -0.01, 'JPY': 0.02})", "test2": "calculate_currency_fluctuation({'USD': 1.00, 'CAD': 0.76, 'BRL': 0.25}, {'USD': 0.02, 'CAD': 0.03})", "test3": "calculate_currency_fluctuation({'EUR': 1.12, 'GBP': 1.30, 'INR': 0.014}, {})", "test4": "calculate_currency_fluctuation({'USD': 1.00, 'CNY': 0.15, 'KRW': 0.00085}, {'USD': -0.01, 'CNY': 0.02})", "test5": "calculate_currency_fluctuation({'JPY': 0.0089, 'AUD': 0.69, 'NZD': 0.66}, {'AUD': 0.01, 'NZD': -0.01})", "test6": "calculate_currency_fluctuation({'EUR': 1.12, 'CHF': 1.08, 'SEK': 0.11}, {'EUR': 0.03, 'CHF': -0.02})", "test7": "calculate_currency_fluctuation({'USD': 1.00, 'MXN': 0.052, 'ZAR': 0.069}, {'MXN': 0.01, 'ZAR': -0.01})", "test8": "calculate_currency_fluctuation({'GBP': 1.30, 'NOK': 0.12, 'DKK': 0.15}, {'GBP': -0.01, 'NOK': 0.02})", "test9": "calculate_currency_fluctuation({'CAD': 0.76, 'AUD': 0.69, 'SGD': 0.73}, {'CAD': 0.03, 'AUD': -0.02})", "test10": "calculate_currency_fluctuation({'JPY': 0.0089, 'HKD': 0.13, 'THB': 0.033}, {})"}, "hidden_information": "def calculate_currency_fluctuation(currency_prices, news_events):\n    fluctuations = {}\n    for currency, price in currency_prices.items():\n        if currency in news_events:\n            fluctuations[currency] = round(price * (1 + news_events[currency]), 2)\n        else:\n            fluctuations[currency] = price\n    return fluctuations"}
{"ground_truth": "def calculate_cost_of_living(city, monthly_expenses, million_dollars):\n    #simulate Spending 1 million dollas for 10 years\n    monthly_expenses *= 12 * 10\n    if monthly_expenses > million_dollars:\n        return 'You will run out of money in ' + str(12 * 10 - (million_dollars // monthly_expenses)) + ' months'\n    else:\n        return 'You can live in ' + city + ' for 10 years'", "problem_description": "I need you to write a python function that can get me an idea of how a certain sum of money (think of one million dollar bill) can be spent over certain average expenses in different cities. For example, I want to know if one million dollar bill is enough for me to live in a certain city for a certain amount of years. Pleaes help me out.The signature of the function is: def calculate_cost_of_living(city, monthly_expenses, million_dollars)", "test_cases": {"test1": "calculate_cost_of_living('Aruba', 8000, 1000000)", "test2": "calculate_cost_of_living('New York', 10000, 1000000)", "test3": "calculate_cost_of_living('Los Angeles', 9000, 500000)", "test4": "calculate_cost_of_living('Chicago', 7000, 1000000)", "test5": "calculate_cost_of_living('Houston', 7500, 750000)", "test6": "calculate_cost_of_living('Phoenix', 6500, 1000000)", "test7": "calculate_cost_of_living('Philadelphia', 6000, 800000)", "test8": "calculate_cost_of_living('San Antonio', 5500, 700000)", "test9": "calculate_cost_of_living('San Diego', 12000, 1500000)", "test10": "calculate_cost_of_living('Dallas', 9500, 1000000)"}, "hidden_information": "def calculate_cost_of_living(city, monthly_expenses, million_dollars):\n    #simulate Spending 1 million dollas for 10 years\n    monthly_expenses *= 12 * 10\n    if monthly_expenses > million_dollars:\n        return 'You will run out of money in ' + str(12 * 10 - (million_dollars // monthly_expenses)) + ' months'\n    else:\n        return 'You can live in ' + city + ' for 10 years'"}
{"ground_truth": "def get_most_affordable_cars(cars, top_n, budget):\n    affordable_cars = [car for car in cars if car['price'] <= budget]\n    fastest_affordable_cars = sorted(affordable_cars, key=lambda x: x['lap_time'])[:top_n]\n    return fastest_affordable_cars", "problem_description": "I want a python function that can determine the most affordable cars based on their lap times and some criteria. The function should return the top n cars that are within a certain budget. Can you help me write this function?The signature of the function is: def get_most_affordable_cars(cars, top_n, budget)", "test_cases": {"test1": "get_most_affordable_cars([{'name': 'Ford GT', 'price': 139995, 'lap_time': 1.5}, {'name': 'Porsche 911', 'price': 120000, 'lap_time': 1.8}, {'name': 'Lamborghini Huracan', 'price': 180000, 'lap_time': 1.2}], 2, 150000)", "test2": "get_most_affordable_cars([{'name': 'Chevrolet Camaro', 'price': 30000, 'lap_time': 3.0}, {'name': 'Dodge Challenger', 'price': 40000, 'lap_time': 2.8}, {'name': 'Ford Mustang', 'price': 35000, 'lap_time': 2.9}], 1, 40000)", "test3": "get_most_affordable_cars([{'name': 'Audi R8', 'price': 150000, 'lap_time': 1.4}, {'name': 'BMW M4', 'price': 80000, 'lap_time': 2.1}, {'name': 'Mercedes-AMG C-Class', 'price': 60000, 'lap_time': 2.3}], 3, 120000)", "test4": "get_most_affordable_cars([{'name': 'Nissan GT-R', 'price': 90000, 'lap_time': 1.7}, {'name': 'Toyota Supra', 'price': 50000, 'lap_time': 2.6}, {'name': 'Honda NSX', 'price': 140000, 'lap_time': 1.9}], 2, 100000)", "test5": "get_most_affordable_cars([{'name': 'Ferrari 488 GTB', 'price': 250000, 'lap_time': 1.1}, {'name': 'McLaren 720S', 'price': 300000, 'lap_time': 1.0}, {'name': 'Lamborghini Aventador', 'price': 400000, 'lap_time': 1.3}], 1, 200000)", "test6": "get_most_affordable_cars([{'name': 'Porsche Cayman', 'price': 50000, 'lap_time': 2.5}, {'name': 'Chevrolet Corvette', 'price': 60000, 'lap_time': 2.2}, {'name': 'Audi TT', 'price': 40000, 'lap_time': 2.8}], 3, 60000)", "test7": "get_most_affordable_cars([{'name': 'BMW Z4', 'price': 40000, 'lap_time': 2.7}, {'name': 'Mercedes-AMG GT', 'price': 120000, 'lap_time': 1.6}, {'name': 'Jaguar F-Type', 'price': 70000, 'lap_time': 2.0}], 2, 100000)", "test8": "get_most_affordable_cars([{'name': 'Dodge Viper', 'price': 80000, 'lap_time': 1.8}, {'name': 'Ford Focus RS', 'price': 35000, 'lap_time': 2.9}, {'name': 'Subaru WRX STI', 'price': 25000, 'lap_time': 3.1}], 1, 40000)", "test9": "get_most_affordable_cars([{'name': 'Mazda MX-5 Miata', 'price': 25000, 'lap_time': 3.0}, {'name': 'Toyota 86', 'price': 20000, 'lap_time': 3.2}, {'name': 'Honda Civic Type R', 'price': 30000, 'lap_time': 2.6}], 3, 30000)", "test10": "get_most_affordable_cars([{'name': 'Hyundai Veloster N', 'price': 30000, 'lap_time': 2.7}, {'name': 'Mini JCW GP', 'price': 35000, 'lap_time': 2.8}, {'name': 'Volkswagen Golf GTI', 'price': 25000, 'lap_time': 2.9}], 2, 35000)"}, "hidden_information": "def get_most_affordable_cars(cars, top_n, budget):\n    affordable_cars = [car for car in cars if car['price'] <= budget]\n    fastest_affordable_cars = sorted(affordable_cars, key=lambda x: x['lap_time'])[:top_n]\n    return fastest_affordable_cars"}
{"ground_truth": "def get_countries_with_high_trafficking(countries, trafficking_data):\n    trafficking_rates = {}\n    for country, data in zip(countries, trafficking_data):\n        trafficking_rates[country] = data\n    sorted_countries = sorted(trafficking_rates.items(), key=lambda x: x[1], reverse=True)\n    return [country for country, rate in sorted_countries[:5]]", "problem_description": "I need a Python function to identify the countries with the highest rates of human trafficking. The function should take a list of countries and their corresponding trafficking data as input and return a sorted list of the top 5 countries with the highest rates. However, I'm not sure what data source to use or how to define 'high rates of human trafficking'. Can you help me clarify these details and write the function?The signature of the function is: def get_countries_with_high_trafficking(countries, trafficking_data)", "test_cases": {"test1": "get_countries_with_high_trafficking(['Algeria', 'Cuba', 'Iran', 'North Korea', 'Thailand'], [1000, 800, 700, 600, 500])", "test2": "get_countries_with_high_trafficking(['USA', 'UK', 'Australia', 'Canada', 'Germany'], [200, 250, 300, 350, 400])", "test3": "get_countries_with_high_trafficking(['China', 'Russia', 'India', 'Japan', 'Brazil'], [900, 850, 800, 750, 700])", "test4": "get_countries_with_high_trafficking(['Egypt', 'South Africa', 'Morocco', 'Nigeria', 'Ethiopia'], [550, 500, 450, 400, 350])", "test5": "get_countries_with_high_trafficking(['Argentina', 'Chile', 'Colombia', 'Peru', 'Venezuela'], [300, 250, 200, 150, 100])", "test6": "get_countries_with_high_trafficking(['France', 'Italy', 'Spain', 'Portugal', 'Greece'], [400, 350, 300, 250, 200])", "test7": "get_countries_with_high_trafficking(['Sweden', 'Denmark', 'Norway', 'Finland', 'Iceland'], [100, 90, 80, 70, 60])", "test8": "get_countries_with_high_trafficking(['Poland', 'Turkey', 'Romania', 'Bulgaria', 'Hungary'], [250, 200, 150, 100, 50])", "test9": "get_countries_with_high_trafficking(['Mexico', 'South Korea', 'Taiwan', 'Israel', 'Singapore'], [300, 250, 200, 150, 100])", "test10": "get_countries_with_high_trafficking(['Saudi Arabia', 'United Arab Emirates', 'Qatar', 'Kuwait', 'Bahrain'], [500, 450, 400, 350, 300])"}, "hidden_information": "def get_countries_with_high_trafficking(countries, trafficking_data):\n    trafficking_rates = {}\n    for country, data in zip(countries, trafficking_data):\n        trafficking_rates[country] = data\n    sorted_countries = sorted(trafficking_rates.items(), key=lambda x: x[1], reverse=True)\n    return [country for country, rate in sorted_countries[:5]]"}
{"ground_truth": "def calculate_stability(country_data, president_decisions):\n    stability = 0\n    for decision in president_decisions:\n        if decision['type'] == 'invasion' and decision['success'] == True:\n            stability -= 10\n        elif decision['type'] == 'withdrawal' and decision['troops_left'] < 10000:\n            stability -= 5\n        elif decision['type'] == 'diplomacy' and country_data['relations'] == 'ally':\n            stability += 5\n    return stability", "problem_description": "I want the agent to create a Python function that calculates the stability of a country based on the decisions made by its president. The function should take into account the type of decision (invasion, withdrawal, diplomacy), the success or failure of the decision, the number of troops left behind, and the current relations with other countries. The function should return a numerical value representing the country's stability.The signature of the function is: def calculate_stability(country_data, president_decisions)", "test_cases": {"test1": "calculate_stability({'relations': 'ally'}, [{'type': 'invasion', 'success': True}, {'type': 'withdrawal', 'troops_left': 5000}])", "test2": "calculate_stability({'relations': 'enemy'}, [{'type': 'diplomacy'}, {'type': 'invasion', 'success': False}])", "test3": "calculate_stability({'relations': 'neutral'}, [{'type': 'withdrawal', 'troops_left': 20000}])", "test4": "calculate_stability({'relations': 'ally'}, [{'type': 'invasion', 'success': False}, {'type': 'diplomacy'}])", "test5": "calculate_stability({'relations': 'enemy'}, [{'type': 'withdrawal', 'troops_left': 10000}])", "test6": "calculate_stability({'relations': 'neutral'}, [{'type': 'invasion', 'success': True}, {'type': 'withdrawal', 'troops_left': 5000}])", "test7": "calculate_stability({'relations': 'ally'}, [{'type': 'diplomacy'}, {'type': 'invasion', 'success': True}])", "test8": "calculate_stability({'relations': 'enemy'}, [{'type': 'withdrawal', 'troops_left': 20000}])", "test9": "calculate_stability({'relations': 'neutral'}, [{'type': 'invasion', 'success': False}, {'type': 'diplomacy'}])", "test10": "calculate_stability({'relations': 'ally'}, [{'type': 'withdrawal', 'troops_left': 10000}, {'type': 'diplomacy'}])"}, "hidden_information": "def calculate_stability(country_data, president_decisions):\n    stability = 0\n    for decision in president_decisions:\n        if decision['type'] == 'invasion' and decision['success'] == True:\n            stability -= 10\n        elif decision['type'] == 'withdrawal' and decision['troops_left'] < 10000:\n            stability -= 5\n        elif decision['type'] == 'diplomacy' and country_data['relations'] == 'ally':\n            stability += 5\n    return stability"}
{"ground_truth": "def categorize_article_sentiment(article_text, categories, keywords):\n    sentiment_scores = {'positive': 0, 'negative': 0, 'neutral': 0}\n    for category in categories:\n        for keyword in keywords[category]:\n            if keyword in article_text:\n                if category == 'positive':\n                    sentiment_scores['positive'] += 1\n                elif category == 'negative':\n                    sentiment_scores['negative'] += 1\n                else:\n                    sentiment_scores['neutral'] += 1\n    return max(sentiment_scores, key=sentiment_scores.get)", "problem_description": "Can you write a python function that can analyze news articles and categorize them into different sentiment categories based on certain keywords? I want the function to be able to handle different categories and keywords, but I'm not sure how to implement it.The signature of the function is: def categorize_article_sentiment(article_text, categories, keywords)", "test_cases": {"test1": "categorize_article_sentiment('The new policy is wonderful and will benefit everyone.', ['positive'], {'positive': ['wonderful', 'benefit'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test2": "categorize_article_sentiment('The new policy is bad and will harm many people.', ['negative'], {'positive': ['wonderful', 'benefit'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test3": "categorize_article_sentiment('The new policy is neutral and will have no impact.', ['neutral'], {'positive': ['wonderful', 'benefit'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test4": "categorize_article_sentiment('The new policy is a mix of good and bad things.', ['positive', 'negative'], {'positive': ['good', 'benefit'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test5": "categorize_article_sentiment('The new policy is not clear.', ['negative'], {'positive': ['wonderful', 'benefit'], 'negative': ['bad', 'harmful', 'unclear'], 'neutral': ['neutral']})", "test6": "categorize_article_sentiment('The new policy is great but needs improvement.', ['positive'], {'positive': ['great', 'good'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test7": "categorize_article_sentiment('The new policy is not good.', ['negative'], {'positive': ['wonderful', 'good'], 'negative': ['bad', 'not good'], 'neutral': ['neutral']})", "test8": "categorize_article_sentiment('The new policy is very bad.', ['negative'], {'positive': ['wonderful', 'benefit'], 'negative': ['bad', 'very bad'], 'neutral': ['neutral']})", "test9": "categorize_article_sentiment('The new policy is wonderful but not perfect.', ['positive'], {'positive': ['wonderful', 'good'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})", "test10": "categorize_article_sentiment('The new policy is a mix of positive and negative things, but overall it is good.', ['positive'], {'positive': ['good', 'benefit'], 'negative': ['bad', 'harmful'], 'neutral': ['neutral']})"}, "hidden_information": "def categorize_article_sentiment(article_text, categories, keywords):\n    sentiment_scores = {'positive': 0, 'negative': 0, 'neutral': 0}\n    for category in categories:\n        for keyword in keywords[category]:\n            if keyword in article_text:\n                if category == 'positive':\n                    sentiment_scores['positive'] += 1\n                elif category == 'negative':\n                    sentiment_scores['negative'] += 1\n                else:\n                    sentiment_scores['neutral'] += 1\n    return max(sentiment_scores, key=sentiment_scores.get)"}
{"ground_truth": "def categorize_consumer(consumer_data): \n    interests = consumer_data['interests'] \n    if 'reading' in interests and 'music' in interests: \n        return 'Renaissance' \n    elif 'reading' in interests or 'music' in interests: \n        return 'Cultural' \n    elif 'sports' in interests: \n        return 'Sports Fan' \n    else: \n        return 'Uncategorized'", "problem_description": "Hi agent, I want you to write a python function to categorize consumers based on their interests and activities. The goal is to identify people who might be part of the 'RenGen', a group that values intellectual and creative pursuits. Can you help me create a function that takes consumer data as input and returns a category label?The signature of the function is: def categorize_consumer(consumer_data)", "test_cases": {"test1": "categorize_consumer({'interests': ['reading', 'music', 'hiking']})", "test2": "categorize_consumer({'interests': ['sports', 'fitness']})", "test3": "categorize_consumer({'interests': ['reading', 'gaming']})", "test4": "categorize_consumer({'interests': ['music', 'art']})", "test5": "categorize_consumer({'interests': ['sports', 'music', 'reading']})", "test6": "categorize_consumer({'interests': ['gaming', 'tech']})", "test7": "categorize_consumer({'interests': ['reading', 'writing']})", "test8": "categorize_consumer({'interests': ['music', 'dance']})", "test9": "categorize_consumer({'interests': ['sports', 'fitness', 'gaming']})", "test10": "categorize_consumer({'interests': ['reading', 'music', 'sports']})"}, "hidden_information": "def categorize_consumer(consumer_data): \n    interests = consumer_data['interests'] \n    if 'reading' in interests and 'music' in interests: \n        return 'Renaissance' \n    elif 'reading' in interests or 'music' in interests: \n        return 'Cultural' \n    elif 'sports' in interests: \n        return 'Sports Fan' \n    else: \n        return 'Uncategorized'"}
{"ground_truth": "def evaluate_claim_completeness(claim, rules, precedents):\n    missing_info = []\n    for rule in rules:\n        for condition in rule['conditions']:\n            if condition not in claim:\n                missing_info.append(condition)\n    for precedent in precedents:\n        if all(condition in claim for condition in precedent['matching_conditions']):\n            return True\n    return False if missing_info else True", "problem_description": "I want a python function that can help determine whether a worker's compensation claim is complete or not based on given rules and precedents.The signature of the function is: def evaluate_claim_completeness(claim, rules, precedents)", "test_cases": {"test1": "evaluate_claim_completeness({'name': 'John', 'injury': 'back injury'}, [{'conditions': ['name', 'injury', 'date_of_injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Back injuries are compensable'}])", "test2": "evaluate_claim_completeness({'name': 'Jane', 'injury': 'head injury', 'date_of_injury': '2022-01-01'}, [{'conditions': ['name', 'injury', 'date_of_injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Head injuries are compensable'}])", "test3": "evaluate_claim_completeness({'name': 'Bob', 'injury': 'back injury', 'date_of_injury': '2022-01-01'}, [{'conditions': ['name', 'injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Back injuries are compensable'}])", "test4": "evaluate_claim_completeness({'name': 'Alice', 'injury': 'knee injury'}, [{'conditions': ['name', 'injury', 'date_of_injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Knee injuries are compensable'}])", "test5": "evaluate_claim_completeness({'name': 'Mike', 'injury': 'back injury', 'date_of_injury': '2022-01-01', 'witness': 'Bob'}, [{'conditions': ['name', 'injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Back injuries are compensable'}])", "test6": "evaluate_claim_completeness({'name': 'Emily', 'injury': 'head injury'}, [{'conditions': ['name', 'injury', 'date_of_injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Head injuries are compensable'}])", "test7": "evaluate_claim_completeness({'name': 'David', 'injury': 'knee injury', 'date_of_injury': '2022-01-01'}, [{'conditions': ['name', 'injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Knee injuries are compensable'}])", "test8": "evaluate_claim_completeness({'name': 'Sarah', 'injury': 'back injury'}, [{'conditions': ['name', 'injury', 'date_of_injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Back injuries are compensable'}])", "test9": "evaluate_claim_completeness({'name': 'Kevin', 'injury': 'head injury', 'date_of_injury': '2022-01-01', 'witness': 'Jane'}, [{'conditions': ['name', 'injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Head injuries are compensable'}])", "test10": "evaluate_claim_completeness({'name': 'Olivia', 'injury': 'knee injury', 'date_of_injury': '2022-01-01'}, [{'conditions': ['name', 'injury']}, {'conditions': ['name', 'witness']}], [{'matching_conditions': ['name', 'injury'], 'premise': 'Knee injuries are compensable'}])"}, "hidden_information": "def evaluate_claim_completeness(claim, rules, precedents):\n    missing_info = []\n    for rule in rules:\n        for condition in rule['conditions']:\n            if condition not in claim:\n                missing_info.append(condition)\n    for precedent in precedents:\n        if all(condition in claim for condition in precedent['matching_conditions']):\n            return True\n    return False if missing_info else True"}
{"ground_truth": "def assess_cardiac_risk(age, family_history, symptoms):\n    if age < 35 and family_history and symptoms:\n        return 'High risk'\n    elif age < 35 and (family_history or symptoms):\n        return 'Moderate risk'\n    elif age >= 35 and family_history and symptoms:\n        return 'Moderate risk'\n    else:\n        return 'Low risk'", "problem_description": "I'd like the agent to write a Python function that can assess the risk of sudden cardiac death in young people based on their age, family history of cardiac problems, and symptoms such as chest pain. The function should take these factors into account and return a risk level of 'High', 'Moderate', or 'Low'.The signature of the function is: def assess_cardiac_risk(age, family_history, symptoms)", "test_cases": {"test1": "assess_cardiac_risk(25, True, True)", "test2": "assess_cardiac_risk(40, False, False)", "test3": "assess_cardiac_risk(22, True, False)", "test4": "assess_cardiac_risk(19, False, True)", "test5": "assess_cardiac_risk(35, True, True)", "test6": "assess_cardiac_risk(28, False, False)", "test7": "assess_cardiac_risk(32, True, True)", "test8": "assess_cardiac_risk(42, False, True)", "test9": "assess_cardiac_risk(29, True, False)", "test10": "assess_cardiac_risk(21, False, True)"}, "hidden_information": "def assess_cardiac_risk(age, family_history, symptoms):\n    if age < 35 and family_history and symptoms:\n        return 'High risk'\n    elif age < 35 and (family_history or symptoms):\n        return 'Moderate risk'\n    elif age >= 35 and family_history and symptoms:\n        return 'Moderate risk'\n    else:\n        return 'Low risk'"}
{"ground_truth": "def calculate_water_bill(water_usage, rate_per_gallon, efficiency_standard): \n    if water_usage > 0 and water_usage <= 1000:\n        return max(water_usage * rate_per_gallon, efficiency_standard)\n    elif water_usage > 1000 and water_usage <= 2000:\n        return (water_usage * rate_per_gallon) * 0.9\n    elif water_usage > 2000 and water_usage <= 5000:\n        return (water_usage * rate_per_gallon) * 0.8\n    elif water_usage > 5000:\n        return (water_usage * rate_per_gallon) * 0.7", "problem_description": "Hey AI, I'm worried about the water supply being taken over and the costs going up due to Agenda 21 regulations. Can you write a python function that calculates my water bill? My water usage varies and I need to consider the new efficiency standards. Write a function that takes the water usage in gallons, a rate per gallon, and the efficiency standard to output my new water bill.The signature of the function is: def calculate_water_bill(water_usage, rate_per_gallon, efficiency_standard)", "test_cases": {"Test1": "calculate_water_bill(500, 0.04, 20)", "Test2": "calculate_water_bill(1500, 0.03, 15)", "Test3": "calculate_water_bill(2500, 0.05, 10)", "Test4": "calculate_water_bill(6000, 0.02, 12)", "Test5": "calculate_water_bill(100, 0.01, 25)", "Test6": "calculate_water_bill(800, 0.04, 15)", "Test7": "calculate_water_bill(1200, 0.03, 18)", "Test8": "calculate_water_bill(3500, 0.05, 8)", "Test9": "calculate_water_bill(4200, 0.02, 20)", "Test10": "calculate_water_bill(900, 0.01, 12)"}, "hidden_information": "def calculate_water_bill(water_usage, rate_per_gallon, efficiency_standard): \n    if water_usage > 0 and water_usage <= 1000:\n        return max(water_usage * rate_per_gallon, efficiency_standard)\n    elif water_usage > 1000 and water_usage <= 2000:\n        return (water_usage * rate_per_gallon) * 0.9\n    elif water_usage > 2000 and water_usage <= 5000:\n        return (water_usage * rate_per_gallon) * 0.8\n    elif water_usage > 5000:\n        return (water_usage * rate_per_gallon) * 0.7"}
{"ground_truth": "def calculate_gas_mileage(city_miles, highway_miles, total_miles, city_mpg, highway_mpg):\n    if total_miles == 0:\n        return 0\n    else:\n        weighted_mpg = ((city_miles / total_miles) * city_mpg) + ((highway_miles / total_miles) * highway_mpg)\n        return weighted_mpg", "problem_description": "Hey, I need a Python function to estimate my gas mileage based on my driving habits. I drive a mix of city and highway miles, and I want to know how my mileage varies. Can you help me with that? I think it depends on the ratio of city to highway driving or something, but I'm not sure.The signature of the function is: def calculate_gas_mileage(city_miles, highway_miles, total_miles, city_mpg, highway_mpg)", "test_cases": {"test1": "calculate_gas_mileage(100, 200, 300, 18, 27)", "test2": "calculate_gas_mileage(50, 250, 300, 20, 25)", "test3": "calculate_gas_mileage(200, 100, 300, 22, 28)", "test4": "calculate_gas_mileage(0, 300, 300, 18, 27)", "test5": "calculate_gas_mileage(300, 0, 300, 20, 25)", "test6": "calculate_gas_mileage(150, 150, 300, 22, 28)", "test7": "calculate_gas_mileage(250, 50, 300, 18, 27)", "test8": "calculate_gas_mileage(100, 0, 100, 20, 25)", "test9": "calculate_gas_mileage(0, 100, 100, 22, 28)", "test10": "calculate_gas_mileage(50, 50, 100, 18, 27)"}, "hidden_information": "def calculate_gas_mileage(city_miles, highway_miles, total_miles, city_mpg, highway_mpg):\n    if total_miles == 0:\n        return 0\n    else:\n        weighted_mpg = ((city_miles / total_miles) * city_mpg) + ((highway_miles / total_miles) * highway_mpg)\n        return weighted_mpg"}
{"ground_truth": "def calculate_ejecta_velocity(floors, downward_speed): return (floors * downward_speed) / 4", "problem_description": "Hi agent, I need you to write a python function. So I'm a mechanical engineer and I'm trying to understand the math behind a building collapse. Can you help me calculate the speed at which debris is ejected when a building fails?The signature of the function is: def calculate_ejecta_velocity(floors, downward_speed)", "test_cases": {"test1": "calculate_ejecta_velocity(110, 50)", "test2": "calculate_ejecta_velocity(50, 100)", "test3": "calculate_ejecta_velocity(200, 25)", "test4": "calculate_ejecta_velocity(75, 75)", "test5": "calculate_ejecta_velocity(100, 50)", "test6": "calculate_ejecta_velocity(35, 120)", "test7": "calculate_ejecta_velocity(90, 60)", "test8": "calculate_ejecta_velocity(120, 40)", "test9": "calculate_ejecta_velocity(80, 80)", "test10": "calculate_ejecta_velocity(150, 90)"}, "hidden_information": "def calculate_ejecta_velocity(floors, downward_speed): return (floors * downward_speed) / 4"}
{"ground_truth": "def identify_archon(behavioral_patterns, violence_tolerance, age): \n  if age < 18: \n    return False\n  archon_behavior = [\"violent\", \"destructive\", \"hypnotic\"]\n  archonetest_tolerance = 0.85\n  similarity_score = sum(1 for pattern in behavioral_patterns if pattern in archon_behavior) / len(behavioral_patterns)\n  return similarity_score > (1 - archonetest_tolerance) or violence_tolerance > archonetest_tolerance", "problem_description": "I need a python function that determines if someone is an Archon based on their behavior. I've heard that Archons are attracted to violence and destruction. I need the function to take into account multiple factors such as behavioral patterns and their tolerance to violence.The signature of the function is: def identify_archon(behavioral_patterns, violence_tolerance, age)", "test_cases": {"test1": "identify_archon(['aggressive', 'violent', 'hates_humans'], 0.8, 30)", "test2": "identify_archon(['peaceful', 'empathetic', 'loves_humans'], 0.2, 45)", "test3": "identify_archon(['hypnotic', 'charismatic', ' manipulative'], 0.7, 25)", "test4": "identify_archon(['normal', 'normal', ' normal'], 0.1, 50)", "test5": "identify_archon(['violent', 'destructive', 'aggressive'], 0.9, 32)", "test6": "identify_archon(['violent', 'destructive', 'aggressive'], 0.9, 17)", "test7": "identify_archon([' Archon_like', 'childish', 'weak'], 0.2, 39)", "test8": "identify_archon(['normal_child', 'curious', ' joyful'], 0.0, 12)", "test9": "identify_archon([' CC insurgent', 'sensitive', 'angry'], 0.65, 40)", "test10": "identify_archon([' M reserved', 'Indifferent', 'contributive'], 0.08, 28)"}, "hidden_information": "def identify_archon(behavioral_patterns, violence_tolerance, age): \n  if age < 18: \n    return False\n  archon_behavior = [\"violent\", \"destructive\", \"hypnotic\"]\n  archonetest_tolerance = 0.85\n  similarity_score = sum(1 for pattern in behavioral_patterns if pattern in archon_behavior) / len(behavioral_patterns)\n  return similarity_score > (1 - archonetest_tolerance) or violence_tolerance > archonetest_tolerance"}
{"ground_truth": "def camera_quality_rating(megapixels, battery_life, weight, price): \n    rating = (megapixels * 0.4) + (battery_life * 0.3) + (weight * 0.1) + (price * 0.2) \n    if rating > 80: \n        return \"Excellent\" \n    elif rating > 60: \n        return \"Good\" \n    else: \n        return \"Fair\"", "problem_description": "I'm planning to buy a new camera and I came across an old review of the HP Photosmart M22. I want you to write a python function to calculate a camera's quality rating based on its technical specifications. The function should consider the camera's megapixels, battery life, weight, and price. The function should return a string rating of 'Excellent', 'Good', or 'Fair' based on the calculation.The signature of the function is: def camera_quality_rating(megapixels, battery_life, weight, price)", "test_cases": {"test1": "camera_quality_rating(4, 8, 150, 90)", "test2": "camera_quality_rating(12, 10, 200, 200)", "test3": "camera_quality_rating(2, 5, 120, 80)", "test4": "camera_quality_rating(8, 12, 180, 250)", "test5": "camera_quality_rating(16, 15, 220, 300)", "test6": "camera_quality_rating(6, 9, 160, 120)", "test7": "camera_quality_rating(10, 11, 190, 220)", "test8": "camera_quality_rating(3, 6, 140, 100)", "test9": "camera_quality_rating(14, 14, 210, 280)", "test10": "camera_quality_rating(18, 16, 240, 320)"}, "hidden_information": "def camera_quality_rating(megapixels, battery_life, weight, price): \n    rating = (megapixels * 0.4) + (battery_life * 0.3) + (weight * 0.1) + (price * 0.2) \n    if rating > 80: \n        return \"Excellent\" \n    elif rating > 60: \n        return \"Good\" \n    else: \n        return \"Fair\""}
{"ground_truth": "def calculate_image_quality(sensor_size, focal_length, iso_setting):\n    if sensor_size == 'Full Frame':\n        return 9 * (focal_length / 50) * (iso_setting / 1000)\n    elif sensor_size == 'Micro Four Thirds':\n        return 7 * (focal_length / 50) * (iso_setting / 1000)\n    else:\n        return 0", "problem_description": "I need a Python function that calculates the image quality of a camera lens. The function should take into account the sensor size of the camera and the lens's focal length and ISO setting. The function should return a score that indicates the quality of the image. Can you write this function for me?The signature of the function is: def calculate_image_quality(sensor_size, focal_length, iso_setting)", "test_cases": {"test1": "calculate_image_quality('Full Frame', 50, 1000)", "test2": "calculate_image_quality('Micro Four Thirds', 25, 200)", "test3": "calculate_image_quality('Full Frame', 100, 500)", "test4": "calculate_image_quality('Micro Four Thirds', 50, 1000)", "test5": "calculate_image_quality('Full Frame', 200, 2000)", "test6": "calculate_image_quality('Micro Four Thirds', 100, 500)", "test7": "calculate_image_quality('Full Frame', 50, 500)", "test8": "calculate_image_quality('Micro Four Thirds', 25, 1000)", "test9": "calculate_image_quality('Full Frame', 100, 2000)", "test10": "calculate_image_quality('Micro Four Thirds', 200, 500)"}, "hidden_information": "def calculate_image_quality(sensor_size, focal_length, iso_setting):\n    if sensor_size == 'Full Frame':\n        return 9 * (focal_length / 50) * (iso_setting / 1000)\n    elif sensor_size == 'Micro Four Thirds':\n        return 7 * (focal_length / 50) * (iso_setting / 1000)\n    else:\n        return 0"}
{"ground_truth": "def compare_camera_resolution(cameras):\n    max_resolution = 0\n    best_camera = ''\n    for camera in cameras:\n        resolution = camera.get('resolution', 0)\n        if resolution > max_resolution:\n            max_resolution = resolution\n            best_camera = camera.get('name', '')\n    return best_camera", "problem_description": "I need a Python function to compare the sensor resolutions of different cameras and identify the one with the highest resolution. It should be able to handle a list of camera objects with their respective resolutions and names. Can you help me write a function that can do that?The signature of the function is: def compare_camera_resolution(cameras)", "test_cases": {"test1": "compare_camera_resolution([{'name': 'A7R', 'resolution': 36}, {'name': 'D800', 'resolution': 36.3}])", "test2": "compare_camera_resolution([{'name': 'RX1', 'resolution': 24}, {'name': 'A7', 'resolution': 24.3}])", "test3": "compare_camera_resolution([{'name': 'NEX-7', 'resolution': 24}, {'name': 'A7R', 'resolution': 36}])", "test4": "compare_camera_resolution([{'name': 'D800', 'resolution': 36.3}, {'name': 'A7', 'resolution': 24.3}])", "test5": "compare_camera_resolution([{'name': 'RX1', 'resolution': 24}, {'name': 'NEX-7', 'resolution': 24}])", "test6": "compare_camera_resolution([{'name': 'A7R', 'resolution': 36}, {'name': 'A7', 'resolution': 24.3}, {'name': 'RX1', 'resolution': 24}])", "test7": "compare_camera_resolution([{'name': 'D800', 'resolution': 36.3}, {'name': 'NEX-7', 'resolution': 24}])", "test8": "compare_camera_resolution([{'name': 'A7', 'resolution': 24.3}, {'name': 'RX1', 'resolution': 24}])", "test9": "compare_camera_resolution([{'name': 'A7R', 'resolution': 36}, {'name': 'D800', 'resolution': 36.3}, {'name': 'A7', 'resolution': 24.3}])", "test10": "compare_camera_resolution([{'name': 'NEX-7', 'resolution': 24}, {'name': 'RX1', 'resolution': 24}, {'name': 'A7', 'resolution': 24.3}])"}, "hidden_information": "def compare_camera_resolution(cameras):\n    max_resolution = 0\n    best_camera = ''\n    for camera in cameras:\n        resolution = camera.get('resolution', 0)\n        if resolution > max_resolution:\n            max_resolution = resolution\n            best_camera = camera.get('name', '')\n    return best_camera"}
{"ground_truth": "def county_cricket_standing(team_points, total_matches, rain_affected_matches, replayed_matches):\n    points_per_match = team_points / (total_matches - rain_affected_matches + replayed_matches)\n    return points_per_match", "problem_description": "I need a python function to calculate the standing of a county cricket team. There are a lot of rain affected matches and some matches are replayed. Can the agent write a python function that can derive the correct standing based on this incomplete information?The signature of the function is: def county_cricket_standing(team_points, total_matches, rain_affected_matches, replayed_matches)", "test_cases": {"test1": "county_cricket_standing(100, 10, 2, 1)", "test2": "county_cricket_standing(80, 8, 1, 0)", "test3": "county_cricket_standing(120, 12, 3, 2)", "test4": "county_cricket_standing(90, 9, 0, 0)", "test5": "county_cricket_standing(60, 6, 1, 0)", "test6": "county_cricket_standing(110, 11, 2, 1)", "test7": "county_cricket_standing(70, 7, 0, 0)", "test8": "county_cricket_standing(130, 13, 3, 2)", "test9": "county_cricket_standing(100, 10, 1, 0)", "test10": "county_cricket_standing(80, 8, 0, 0)"}, "hidden_information": "def county_cricket_standing(team_points, total_matches, rain_affected_matches, replayed_matches):\n    points_per_match = team_points / (total_matches - rain_affected_matches + replayed_matches)\n    return points_per_match"}
{"ground_truth": "def calculate_revenue_impact(old_club_revenue, attendance_change, new_contract_value):\n    return old_club_revenue - (old_club_revenue * attendance_change / 100) - new_contract_value", "problem_description": "Can you write a Python function that calculates the financial impact of Glasgow Rangers' bankruptcy on the Scottish Premier League? This includes accounting for the change in attendance and the reduction in contract values.The signature of the function is: def calculate_revenue_impact(old_club_revenue, attendance_change, new_contract_value)", "test_cases": {"test1": "calculate_revenue_impact(1000000, 8.5, 1600000)", "test2": "calculate_revenue_impact(800000, 5, 1200000)", "test3": "calculate_revenue_impact(1200000, 10, 1800000)", "test4": "calculate_revenue_impact(900000, 6, 1500000)", "test5": "calculate_revenue_impact(1100000, 9, 1700000)", "test6": "calculate_revenue_impact(700000, 4, 1000000)", "test7": "calculate_revenue_impact(1300000, 11, 2000000)", "test8": "calculate_revenue_impact(1000000, 7, 1600000)", "test9": "calculate_revenue_impact(1050000, 8, 1650000)", "test10": "calculate_revenue_impact(1150000, 12, 1750000)"}, "hidden_information": "def calculate_revenue_impact(old_club_revenue, attendance_change, new_contract_value):\n    return old_club_revenue - (old_club_revenue * attendance_change / 100) - new_contract_value"}
{"ground_truth": "def gun_violence_stats(gun_control_policies, country_gun_ownerships, country_gun_violences): \n\treturn [policy for policy, country, violence in zip(gun_control_policies, country_gun_ownerships, country_gun_violences) if (policy == 'strict' and country > 1000 and violence < 500)]", "problem_description": "I want you to write a python function to decide which gun control policies are effective in reducing gun violence in various countries. Can you do that?The signature of the function is: def gun_violence_stats(gun_control_policies, country_gun_ownerships, country_gun_violences)", "test_cases": {"test1": "gun_violence_stats(['strict', 'lenient'], [1200, 500], [400, 1000])", "test2": "gun_violence_stats(['strict', 'strict'], [1500, 2000], [300, 200])", "test3": "gun_violence_stats(['lenient', 'lenient'], [800, 900], [700, 800])", "test4": "gun_violence_stats(['strict', 'lenient'], [1000, 2000], [450, 600])", "test5": "gun_violence_stats(['lenient', 'strict'], [800, 1200], [550, 350])", "test6": "gun_violence_stats(['strict', 'strict', 'lenient'], [1200, 1500, 900], [300, 400, 650])", "test7": "gun_violence_stats(['lenient', 'lenient', 'strict'], [900, 1000, 2000], [700, 800, 250])", "test8": "gun_violence_stats(['strict', 'strict', 'strict'], [1500, 2000, 2500], [200, 300, 100])", "test9": "gun_violence_stats(['lenient', 'lenient', 'lenient'], [800, 900, 1000], [600, 700, 750])", "test10": "gun_violence_stats(['strict', 'lenient', 'strict', 'lenient'], [1200, 500, 1500, 1000], [400, 1000, 300, 500])"}, "hidden_information": "def gun_violence_stats(gun_control_policies, country_gun_ownerships, country_gun_violences): \n\treturn [policy for policy, country, violence in zip(gun_control_policies, country_gun_ownerships, country_gun_violences) if (policy == 'strict' and country > 1000 and violence < 500)]"}
{"ground_truth": "def calculate_healthcare_cost(num_policies, policy_cost, admin_fee, tax_credits, voucher_amount): return (num_policies * policy_cost) + admin_fee - tax_credits - voucher_amount", "problem_description": "I need help with a python function to calculate the total cost of a healthcare plan. The function should take into account the number of policies, policy cost, administrative fee, tax credits, and voucher amount. Can you write a function that can handle these parameters?The signature of the function is: def calculate_healthcare_cost(num_policies, policy_cost, admin_fee, tax_credits, voucher_amount)", "test_cases": {"test1": "calculate_healthcare_cost(100, 500, 1000, 5000, 2000)", "test2": "calculate_healthcare_cost(500, 200, 500, 1000, 1000)", "test3": "calculate_healthcare_cost(1000, 100, 2000, 2000, 500)", "test4": "calculate_healthcare_cost(200, 300, 1500, 2500, 1500)", "test5": "calculate_healthcare_cost(50, 400, 1000, 1500, 2000)", "test6": "calculate_healthcare_cost(750, 250, 2000, 3000, 1000)", "test7": "calculate_healthcare_cost(300, 350, 1200, 2000, 1800)", "test8": "calculate_healthcare_cost(900, 220, 2500, 3500, 1200)", "test9": "calculate_healthcare_cost(400, 280, 1800, 2800, 2200)", "test10": "calculate_healthcare_cost(600, 380, 2200, 3800, 2800)"}, "hidden_information": "def calculate_healthcare_cost(num_policies, policy_cost, admin_fee, tax_credits, voucher_amount): return (num_policies * policy_cost) + admin_fee - tax_credits - voucher_amount"}
{"ground_truth": "def calculate_real_estate_value_decrease(original_values, decrease_percentage): return [round(value * (1 - decrease_percentage / 100), 2) for value in original_values]", "problem_description": "I need help writing a Python function to calculate the decrease in real estate values in different areas. I've heard that real estate values might decrease significantly in the near future, and I want to be able to predict these decreases based on the current values. The function should take into account the original values and the percentage of the decrease. I'm not sure how to implement this, can you assist me?The signature of the function is: def calculate_real_estate_value_decrease(original_values, decrease_percentage)", "test_cases": {"test1": "calculate_real_estate_value_decrease([100000, 200000, 300000], 30)", "test2": "calculate_real_estate_value_decrease([50000, 60000, 70000], 40)", "test3": "calculate_real_estate_value_decrease([150000, 250000, 350000], 50)", "test4": "calculate_real_estate_value_decrease([20000, 30000, 40000], 20)", "test5": "calculate_real_estate_value_decrease([100000, 200000, 300000], 10)", "test6": "calculate_real_estate_value_decrease([60000, 70000, 80000], 15)", "test7": "calculate_real_estate_value_decrease([30000, 40000, 50000], 25)", "test8": "calculate_real_estate_value_decrease([180000, 280000, 380000], 35)", "test9": "calculate_real_estate_value_decrease([45000, 55000, 65000], 12)", "test10": "calculate_real_estate_value_decrease([90000, 110000, 130000], 18)"}, "hidden_information": "def calculate_real_estate_value_decrease(original_values, decrease_percentage): return [round(value * (1 - decrease_percentage / 100), 2) for value in original_values]"}
{"ground_truth": "def calculate_president_popularity(country_economic_growth, country_social_policies, country_international_relations): result = country_economic_growth * 0.4 + country_social_policies * 0.3 + country_international_relations * 0.3; return result", "problem_description": "I want to create a python function to calculate the popularity of an EU president. The function should consider various factors such as the country's economic growth, social policies, and international relations, each with a different weight. The agent should be able to ask clarifying questions to determine the exact weights and how to calculate the final result.The signature of the function is: def calculate_president_popularity(country_economic_growth, country_social_policies, country_international_relations)", "test_cases": {"test1": "calculate_president_popularity(0.5, 0.7, 0.9)", "test2": "calculate_president_popularity(0.8, 0.4, 0.6)", "test3": "calculate_president_popularity(0.2, 0.9, 0.8)", "test4": "calculate_president_popularity(0.6, 0.5, 0.4)", "test5": "calculate_president_popularity(0.9, 0.8, 0.7)", "test6": "calculate_president_popularity(0.4, 0.3, 0.2)", "test7": "calculate_president_popularity(0.7, 0.6, 0.5)", "test8": "calculate_president_popularity(0.3, 0.2, 0.1)", "test9": "calculate_president_popularity(0.1, 0.2, 0.3)", "test10": "calculate_president_popularity(0.6, 0.7, 0.8)"}, "hidden_information": "def calculate_president_popularity(country_economic_growth, country_social_policies, country_international_relations): result = country_economic_growth * 0.4 + country_social_policies * 0.3 + country_international_relations * 0.3; return result"}
{"ground_truth": "def calculate_obesity_correlation(human_obesity_rates, animal_obesity_rates): \n    import numpy as np\n    return np.corrcoef(human_obesity_rates, animal_obesity_rates)[0, 1]", "problem_description": "Hey, I want you to write a Python function to calculate the correlation between human obesity rates and animal obesity rates. I have some data on these rates over time, but I'm not sure what correlation coefficient would be most suitable for this analysis. Can you help me with that?The signature of the function is: def calculate_obesity_correlation(human_obesity_rates, animal_obesity_rates)", "test_cases": {"test1": "calculate_obesity_correlation([0.1, 0.2, 0.3, 0.4, 0.5], [0.2, 0.3, 0.4, 0.5, 0.6])", "test2": "calculate_obesity_correlation([0.05, 0.1, 0.15, 0.2, 0.25], [0.1, 0.2, 0.3, 0.4, 0.5])", "test3": "calculate_obesity_correlation([0.5, 0.4, 0.3, 0.2, 0.1], [0.6, 0.5, 0.4, 0.3, 0.2])", "test4": "calculate_obesity_correlation([0.01, 0.02, 0.03, 0.04, 0.05], [0.02, 0.03, 0.04, 0.05, 0.06])", "test5": "calculate_obesity_correlation([0.1, 0.1, 0.1, 0.1, 0.1], [0.2, 0.2, 0.2, 0.2, 0.2])", "test6": "calculate_obesity_correlation([0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5])", "test7": "calculate_obesity_correlation([0.01, 0.05, 0.1, 0.2, 0.5], [0.02, 0.1, 0.2, 0.4, 0.6])", "test8": "calculate_obesity_correlation([0.001, 0.01, 0.1, 0.2, 0.5], [0.002, 0.02, 0.2, 0.4, 0.6])", "test9": "calculate_obesity_correlation([0.1, 0.2, 0.3, 0.4, 0.5], [0.4, 0.5, 0.6, 0.7, 0.8])", "test10": "calculate_obesity_correlation([0.5, 0.6, 0.7, 0.8, 0.9], [0.4, 0.5, 0.6, 0.7, 0.8])"}, "hidden_information": "def calculate_obesity_correlation(human_obesity_rates, animal_obesity_rates): \n    import numpy as np\n    return np.corrcoef(human_obesity_rates, animal_obesity_rates)[0, 1]"}
{"ground_truth": "def calculate_political_inclination(genetic_predisposition, family_upbringing, environmental_factors, age):\n    # Calculate the influence of genetic predisposition (0-1)\n    genetic_influence = genetic_predisposition * 0.4\n    # Calculate the influence of family upbringing (0-1)\n    family_influence = family_upbringing * 0.3\n    # Calculate the influence of environmental factors (0-1)\n    environmental_influence = environmental_factors * 0.3\n    # Calculate the combined influence of all factors\n    combined_influence = genetic_influence + family_influence + environmental_influence\n    # Adjust the combined influence based on age (18-75)\n    adjusted_influence = combined_influence * (age / 100)\n    return adjusted_influence", "problem_description": "I want you to write a Python function that can predict a person's political inclination based on their genetic predisposition, family upbringing, and environmental factors. I'm not sure exactly how these factors interact, but I think genetics play a big role, especially at a young age. Can you help me design a function that takes these factors into account?The signature of the function is: def calculate_political_inclination(genetic_predisposition, family_upbringing, environmental_factors, age)", "test_cases": {"test1": "calculate_political_inclination(0.6, 0.8, 0.4, 25)", "test2": "calculate_political_inclination(0.3, 0.5, 0.7, 18)", "test3": "calculate_political_inclination(0.9, 0.2, 0.6, 60)", "test4": "calculate_political_inclination(0.1, 0.9, 0.3, 40)", "test5": "calculate_political_inclination(0.5, 0.6, 0.8, 30)", "test6": "calculate_political_inclination(0.8, 0.1, 0.5, 50)", "test7": "calculate_political_inclination(0.4, 0.7, 0.9, 20)", "test8": "calculate_political_inclination(0.2, 0.6, 0.4, 70)", "test9": "calculate_political_inclination(0.7, 0.8, 0.6, 35)", "test10": "calculate_political_inclination(0.9, 0.4, 0.7, 45)"}, "hidden_information": "def calculate_political_inclination(genetic_predisposition, family_upbringing, environmental_factors, age):\n    # Calculate the influence of genetic predisposition (0-1)\n    genetic_influence = genetic_predisposition * 0.4\n    # Calculate the influence of family upbringing (0-1)\n    family_influence = family_upbringing * 0.3\n    # Calculate the influence of environmental factors (0-1)\n    environmental_influence = environmental_factors * 0.3\n    # Calculate the combined influence of all factors\n    combined_influence = genetic_influence + family_influence + environmental_influence\n    # Adjust the combined influence based on age (18-75)\n    adjusted_influence = combined_influence * (age / 100)\n    return adjusted_influence"}
{"ground_truth": "def calculate_thc_effects(thc_amount, user_weight): \n\tthc_per_pound = thc_amount / user_weight \n\tif thc_per_pound < 0.01: \n\t\teffects_duration = 30 \n\telif thc_per_pound < 0.05: \n\t\teffects_duration = 60 \n\telse: \n\t\teffects_duration = 120 \n\treturn effects_duration", "problem_description": "Hey agent, can you write a Python function to determine how long it will take for the effects of a pot brownie to kick in and wear off based on the amount of THC consumed and the user's weight? The function should take two arguments: the amount of THC in milligrams and the user's weight in pounds.The signature of the function is: def calculate_thc_effects(thc_amount, user_weight)", "test_cases": {"test1": "calculate_thc_effects(10, 180)", "test2": "calculate_thc_effects(50, 150)", "test3": "calculate_thc_effects(5, 200)", "test4": "calculate_thc_effects(20, 120)", "test5": "calculate_thc_effects(80, 180)", "test6": "calculate_thc_effects(15, 140)", "test7": "calculate_thc_effects(30, 160)", "test8": "calculate_thc_effects(40, 220)", "test9": "calculate_thc_effects(25, 190)", "test10": "calculate_thc_effects(60, 210)"}, "hidden_information": "def calculate_thc_effects(thc_amount, user_weight): \n\tthc_per_pound = thc_amount / user_weight \n\tif thc_per_pound < 0.01: \n\t\teffects_duration = 30 \n\telif thc_per_pound < 0.05: \n\t\teffects_duration = 60 \n\telse: \n\t\teffects_duration = 120 \n\treturn effects_duration"}
{"ground_truth": "def calculate_total_buyback_amount(prices, quantities): return sum([price * quantity for price, quantity in zip(prices, quantities)])", "problem_description": "Hey LLM, I am an event organizer of the Boston Green Festival. We have partnered with Gazelle, a company that buys back used gadgets. They offered to pay a certain price for each gadget type and we collected a certain quantity of gadgets during the event. Can you write a python function to calculate the total amount of money Gazelle owes us from buying back these gadgets?The signature of the function is: def calculate_total_buyback_amount(prices, quantities)", "test_cases": {"test1": "calculate_total_buyback_amount([10, 20, 30], [5, 10, 15])", "test2": "calculate_total_buyback_amount([50, 20, 10], [2, 4, 6])", "test3": "calculate_total_buyback_amount([100, 200, 300], [1, 2, 3])", "test4": "calculate_total_buyback_amount([500, 1000, 1500], [5, 10, 15])", "test5": "calculate_total_buyback_amount([1, 2, 3], [10, 20, 30])", "test6": "calculate_total_buyback_amount([10, 10, 10], [10, 10, 10])", "test7": "calculate_total_buyback_amount([50, 20], [10, 5])", "test8": "calculate_total_buyback_amount([100, 200, 300, 400], [5, 5, 5, 5])", "test9": "calculate_total_buyback_amount([1], [10])", "test10": "calculate_total_buyback_amount([], [])"}, "hidden_information": "def calculate_total_buyback_amount(prices, quantities): return sum([price * quantity for price, quantity in zip(prices, quantities)])"}
{"ground_truth": "def create_cigar_party_greeting(name, city, location, num_guests, favorite_artist='Celia Cruz'): return f'\u00a1Bienvenidos a la fiesta de tabacos, amigos! {name} welcomes you to our cigar rolling party in {location}, inspired by the beauty of {city}. Enjoy the sounds of {favorite_artist} and the company of {num_guests} fantastic people. \u00a1Viva la Cuba! \u00a1Disfruta eltabaco!'", "problem_description": "Can you write a python function to create a personalized message for my cigar rolling party? The message should mention my name, location and something about the party.The signature of the function is: def create_cigar_party_greeting(name, city, location, num_guests, favorite_artist='Celia Cruz')", "test_cases": {"test1": "create_cigar_party_greeting('Alejandro', 'Miami', 'our backyard', 20)", "test2": "create_cigar_party_greeting('Maria', 'Havana', 'the beach', 15, 'Buena Vista Social Club')", "test3": "create_cigar_party_greeting('Juan', 'Omaha', 'my house', 30)", "test4": "create_cigar_party_greeting('Luis', 'Cienfuegos', 'the park', 25, 'Gloria Estefan')", "test5": "create_cigar_party_greeting('Carlos', 'Key West', 'the dock', 10)", "test6": "create_cigar_party_greeting('Ana', 'New York', 'the rooftop', 40, 'Omara Portuondo')", "test7": "create_cigar_party_greeting('Pedro', 'Los Angeles', 'the villa', 35)", "test8": "create_cigar_party_greeting('Rosa', 'Chicago', 'the garden', 22, 'Celia Cruz')", "test9": "create_cigar_party_greeting('Miguel', 'San Francisco', 'the hills', 28)", "test10": "create_cigar_party_greeting('Sofia', 'Austin', 'the ranch', 38, 'Ibrahim Ferrer')"}, "hidden_information": "def create_cigar_party_greeting(name, city, location, num_guests, favorite_artist='Celia Cruz'): return f'\u00a1Bienvenidos a la fiesta de tabacos, amigos! {name} welcomes you to our cigar rolling party in {location}, inspired by the beauty of {city}. Enjoy the sounds of {favorite_artist} and the company of {num_guests} fantastic people. \u00a1Viva la Cuba! \u00a1Disfruta eltabaco!'"}
{"ground_truth": "def rank_qbs_by_performance(quarterbacks, super_bowl_winners, min_games_started=80):\n    qbs = [qb for qb in quarterbacks if qb[3] >= min_games_started and qb[0] not in super_bowl_winners]\n    qbs.sort(key=lambda x: x[1], reverse=True)\n    return qbs", "problem_description": "Hey, I'm looking for a python function that can rank NFL quarterbacks based on their performance in the salary cap era, but only consider those who have never made it to a Super Bowl. Can you help me write that function?The signature of the function is: def rank_qbs_by_performance(quarterbacks, super_bowl_winners, min_games_started=80)", "test_cases": {"test1": "rank_qbs_by_performance([['Tom Brady', 90, 1000, 100], ['Joe Montana', 85, 900, 80], ['Steve Young', 80, 800, 70], ['Ben Roethlisberger', 95, 1100, 90]], ['Tom Brady', 'Joe Montana'])", "test2": "rank_qbs_by_performance([['Peyton Manning', 92, 1050, 110], ['Drew Brees', 88, 1000, 90], ['Aaron Rodgers', 90, 900, 80], ['Matt Ryan', 85, 800, 70]], ['Peyton Manning', 'Drew Brees'])", "test3": "rank_qbs_by_performance([['Tony Romo', 87, 950, 85], ['Eli Manning', 84, 850, 75], ['Philip Rivers', 89, 900, 80], ['Matt Schaub', 82, 750, 65]], ['Tony Romo'])", "test4": "rank_qbs_by_performance([['Russell Wilson', 90, 1000, 90], ['Cam Newton', 88, 950, 85], ['Matthew Stafford', 85, 850, 75], ['Andy Dalton', 82, 750, 65]], ['Russell Wilson'])", "test5": "rank_qbs_by_performance([['Deshaun Watson', 89, 950, 85], ['Lamar Jackson', 87, 900, 80], ['Tom Brady', 95, 1100, 100], ['Stephen Jones', 80, 700, 60]], ['Lamar Jackson'])", "test6": "rank_qbs_by_performance([['Aaron Rodgers', 90, 1000, 90], ['Russell Wilson', 92, 1050, 95], ['Matt Ryan', 85, 850, 75], ['Dak Prescott', 82, 750, 65]], ['Russell Wilson'])", "test7": "rank_qbs_by_performance([['Patrick Mahomes', 95, 1150, 100], ['Lamar Jackson', 90, 1000, 90], ['Deshaun Watson', 88, 950, 85], ['Jimmy Garoppolo', 85, 850, 75]], ['Patrick Mahomes'])", "test8": "rank_qbs_by_performance([['Daniel Jones', 87, 950, 85], ['Sam Darnold', 85, 850, 75], ['Kyler Murray', 82, 750, 65], ['Josh Allen', 80, 700, 60]], ['Daniel Jones'])", "test9": "rank_qbs_by_performance([['Ben Roethlisberger', 95, 1100, 100], ['Tom Brady', 90, 1000, 90], ['Philip Rivers', 88, 950, 85], ['Drew Brees', 85, 850, 75]], [])", "test10": "rank_qbs_by_performance([['Peyton Manning', 92, 1050, 110], ['Eli Manning', 84, 850, 75], ['Tony Romo', 87, 950, 85], ['Matt Ryan', 85, 850, 75]], ['Peyton Manning'])"}, "hidden_information": "def rank_qbs_by_performance(quarterbacks, super_bowl_winners, min_games_started=80):\n    qbs = [qb for qb in quarterbacks if qb[3] >= min_games_started and qb[0] not in super_bowl_winners]\n    qbs.sort(key=lambda x: x[1], reverse=True)\n    return qbs"}
{"ground_truth": "def get_counseling_recommendations(problem_description, budget): \n    if 'relationship' in problem_description and 'low' in budget: \n        return 'Contact Al-Anon and get some counseling through local hospitals or United Way.' \n    elif 'general' in problem_description and 'medium' in budget: \n        return 'Seek counseling through a university psychology department.' \n    elif 'specific' in problem_description and 'high' in budget: \n        return 'Get private counseling.' \n    else: \n        return 'Please provide more information.'", "problem_description": "Hi, I need a python function that can provide counseling recommendations based on a person's problem and budget. I want the function to be able to take in some input and suggest different options for counseling.The signature of the function is: def get_counseling_recommendations(problem_description, budget)", "test_cases": {"test1": "get_counseling_recommendations('I have a relationship issue', 'low')", "test2": "get_counseling_recommendations('I have a general anxiety issue', 'medium')", "test3": "get_counseling_recommendations('I have a specific phobia issue', 'high')", "test4": "get_counseling_recommendations('I have a relationship issue', 'high')", "test5": "get_counseling_recommendations('I have a general anxiety issue', 'low')", "test6": "get_counseling_recommendations('I have a specific phobia issue', 'medium')", "test7": "get_counseling_recommendations('I am feeling sad', 'low')", "test8": "get_counseling_recommendations('I am feeling anxious', 'medium')", "test9": "get_counseling_recommendations('I am feeling scared', 'high')", "test10": "get_counseling_recommendations('I am feeling happy', 'low')"}, "hidden_information": "def get_counseling_recommendations(problem_description, budget): \n    if 'relationship' in problem_description and 'low' in budget: \n        return 'Contact Al-Anon and get some counseling through local hospitals or United Way.' \n    elif 'general' in problem_description and 'medium' in budget: \n        return 'Seek counseling through a university psychology department.' \n    elif 'specific' in problem_description and 'high' in budget: \n        return 'Get private counseling.' \n    else: \n        return 'Please provide more information.'"}
{"ground_truth": "def calculate_death_to_kill_ratio(player_deaths, player_kills):\n    if player_kills == 0:\n        return 0\n    return player_deaths / player_kills", "problem_description": "I want the agent to write a Python function that calculates a player's death-to-kill ratio in a multiplayer game, given their death and kill statistics. However, I'm not entirely sure what inputs the function should take or how it should handle edge cases. Can the agent help me create this function?The signature of the function is: def calculate_death_to_kill_ratio(player_deaths, player_kills)", "test_cases": {"test1": "calculate_death_to_kill_ratio(10, 20)", "test2": "calculate_death_to_kill_ratio(0, 10)", "test3": "calculate_death_to_kill_ratio(5, 0)", "test4": "calculate_death_to_kill_ratio(0, 0)", "test5": "calculate_death_to_kill_ratio(25, 50)", "test6": "calculate_death_to_kill_ratio(100, 50)", "test7": "calculate_death_to_kill_ratio(0, 100)", "test8": "calculate_death_to_kill_ratio(10, 10)", "test9": "calculate_death_to_kill_ratio(50, 25)", "test10": "calculate_death_to_kill_ratio(200, 100)"}, "hidden_information": "def calculate_death_to_kill_ratio(player_deaths, player_kills):\n    if player_kills == 0:\n        return 0\n    return player_deaths / player_kills"}
{"ground_truth": "def calculate_distance_between_coordinates(coord1, coord2):\n    import math\n    lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])\n    lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return 6371000 * c", "problem_description": "I need help with a problem involving geocodes. I have pairs of geocode coordinates and I need to determine the distance between them. Can you write a Python function that takes two sets of coordinates as input and returns the distance between them in meters? The coordinates are in the format (latitude, longitude).The signature of the function is: def calculate_distance_between_coordinates(coord1, coord2)", "test_cases": {"test1": "calculate_distance_between_coordinates((37.764962, 122.439293), (37.765962, 122.440293))", "test2": "calculate_distance_between_coordinates((48.8567, 2.3508), (45.7640, 4.8357))", "test3": "calculate_distance_between_coordinates((40.7128, -74.0060), (34.0522, -118.2437))", "test4": "calculate_distance_between_coordinates((51.5074, -0.1278), (48.8567, 2.3508))", "test5": "calculate_distance_between_coordinates((37.7749, -122.4194), (37.7859, -122.4364))", "test6": "calculate_distance_between_coordinates((39.7392, -104.9903), (29.7604, -95.3698))", "test7": "calculate_distance_between_coordinates((37.0902, -95.7129), (40.7128, -74.0060))", "test8": "calculate_distance_between_coordinates((45.5236, -122.6750), (37.7749, -122.4194))", "test9": "calculate_distance_between_coordinates((38.8977, -77.0365), (38.8977, -76.9365))", "test10": "calculate_distance_between_coordinates((34.0522, -118.2437), (40.7128, -74.0060))"}, "hidden_information": "def calculate_distance_between_coordinates(coord1, coord2):\n    import math\n    lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])\n    lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return 6371000 * c"}
{"ground_truth": "def estimate_maintenance_cost(year, model, mileage):\n    if year >= 2011:\n        injector_cost = 0\n    elif year == 2010:\n        injector_cost = 0\n    elif year >= 2006 and year < 2010:\n        injector_cost = 0\n    elif year >= 2004 and year < 2006:\n        injector_cost = 4000\n    else:\n        injector_cost = 800\n    if year >= 2011:\n        emissions_cost = 500\n    else:\n        emissions_cost = 0\n    if mileage > 200000:\n        additional_cost = 1000\n    else:\n        additional_cost = 0\n    return injector_cost + emissions_cost + additional_cost", "problem_description": "I want to buy a second-hand Duramax and I need help estimating the maintenance cost. Can you write a Python function that takes the year, model, and mileage of the truck as input and returns an estimated maintenance cost? I'm not sure what factors affect the cost, can you ask me questions to clarify?The signature of the function is: def estimate_maintenance_cost(year, model, mileage)", "test_cases": {"test1": "estimate_maintenance_cost(2015, 'LBZ', 100000)", "test2": "estimate_maintenance_cost(2007, 'LLY', 250000)", "test3": "estimate_maintenance_cost(2003, 'LB7', 50000)", "test4": "estimate_maintenance_cost(2010, 'LMM', 180000)", "test5": "estimate_maintenance_cost(2005, 'LLY', 120000)", "test6": "estimate_maintenance_cost(2012, 'LML', 90000)", "test7": "estimate_maintenance_cost(2008, 'LBZ', 220000)", "test8": "estimate_maintenance_cost(2004, 'LB7', 380000)", "test9": "estimate_maintenance_cost(2009, 'LMM', 150000)", "test10": "estimate_maintenance_cost(2006, 'LBZ', 280000)"}, "hidden_information": "def estimate_maintenance_cost(year, model, mileage):\n    if year >= 2011:\n        injector_cost = 0\n    elif year == 2010:\n        injector_cost = 0\n    elif year >= 2006 and year < 2010:\n        injector_cost = 0\n    elif year >= 2004 and year < 2006:\n        injector_cost = 4000\n    else:\n        injector_cost = 800\n    if year >= 2011:\n        emissions_cost = 500\n    else:\n        emissions_cost = 0\n    if mileage > 200000:\n        additional_cost = 1000\n    else:\n        additional_cost = 0\n    return injector_cost + emissions_cost + additional_cost"}
{"ground_truth": "def calculate_possession_percentage(team_a_possession_time, team_b_possession_time): return (team_a_possession_time / (team_a_possession_time + team_b_possession_time)) * 100", "problem_description": "Hi, I need you to write a Python function that can calculate the possession percentage of one team in a football match. I don't have the exact format of the input data, can you please ask me some questions to clarify?The signature of the function is: def calculate_possession_percentage(team_a_possession_time, team_b_possession_time)", "test_cases": {"test1": "calculate_possession_percentage(400, 600)", "test2": "calculate_possession_percentage(600, 400)", "test3": "calculate_possession_percentage(0, 1000)", "test4": "calculate_possession_percentage(1000, 0)", "test5": "calculate_possession_percentage(300, 300)", "test6": "calculate_possession_percentage(450, 550)", "test7": "calculate_possession_percentage(200, 800)", "test8": "calculate_possession_percentage(800, 200)", "test9": "calculate_possession_percentage(100, 900)", "test10": "calculate_possession_percentage(900, 100)"}, "hidden_information": "def calculate_possession_percentage(team_a_possession_time, team_b_possession_time): return (team_a_possession_time / (team_a_possession_time + team_b_possession_time)) * 100"}
{"ground_truth": "def calculate_standings(matches, teams):\n    standings = {team: 0 for team in teams}\n    for match in matches:\n        if match['result'] == 'win':\n            standings[match['team']] += 3\n        elif match['result'] == 'draw':\n            standings[match['team']] += 1\n    return standings", "problem_description": "Hey LLM, can you write me a Python function to calculate team standings in a soccer league? I have a bunch of match results and I want to know how many points each team has.The signature of the function is: def calculate_standings(matches, teams)", "test_cases": {"test1": "calculate_standings([{'team': 'Athletic Bilbao', 'result': 'win'}, {'team': 'Olympique Lyonnais', 'result': 'loss'}], ['Athletic Bilbao', 'Olympique Lyonnais'])", "test2": "calculate_standings([{'team': 'Sevilla', 'result': 'draw'}, {'team': 'Sevilla', 'result': 'win'}], ['Sevilla'])", "test3": "calculate_standings([{'team': 'Athletic Bilbao', 'result': 'loss'}, {'team': 'Olympique Lyonnais', 'result': 'win'}], ['Athletic Bilbao', 'Olympique Lyonnais'])", "test4": "calculate_standings([{'team': 'Barcelona', 'result': 'win'}, {'team': 'Real Madrid', 'result': 'loss'}], ['Barcelona', 'Real Madrid'])", "test5": "calculate_standings([{'team': 'Manchester United', 'result': 'draw'}, {'team': 'Liverpool', 'result': 'draw'}], ['Manchester United', 'Liverpool'])", "test6": "calculate_standings([{'team': 'Juventus', 'result': 'win'}, {'team': 'AC Milan', 'result': 'loss'}], ['Juventus', 'AC Milan'])", "test7": "calculate_standings([{'team': 'Arsenal', 'result': 'loss'}, {'team': 'Chelsea', 'result': 'win'}], ['Arsenal', 'Chelsea'])", "test8": "calculate_standings([{'team': 'Bayern Munich', 'result': 'draw'}, {'team': 'Borussia Dortmund', 'result': 'draw'}], ['Bayern Munich', 'Borussia Dortmund'])", "test9": "calculate_standings([{'team': 'Paris Saint-Germain', 'result': 'win'}, {'team': 'Monaco', 'result': 'loss'}], ['Paris Saint-Germain', 'Monaco'])", "test10": "calculate_standings([{'team': 'Tottenham Hotspur', 'result': 'loss'}, {'team': 'Manchester City', 'result': 'win'}], ['Tottenham Hotspur', 'Manchester City'])"}, "hidden_information": "def calculate_standings(matches, teams):\n    standings = {team: 0 for team in teams}\n    for match in matches:\n        if match['result'] == 'win':\n            standings[match['team']] += 3\n        elif match['result'] == 'draw':\n            standings[match['team']] += 1\n    return standings"}
{"ground_truth": "def calculate_years_in_business(year_established, current_year):\n    return current_year - year_established", "problem_description": "Hey, I need a Python function to calculate how long Cipriani's Ristorante has been in business. I know it was established in 1968, but I don't know what year it is now. Can you write a function that can figure it out if I give it the year the restaurant was established and the current year?The signature of the function is: def calculate_years_in_business(year_established, current_year)", "test_cases": {"test1": "calculate_years_in_business(1968, 2024)", "test2": "calculate_years_in_business(1990, 2010)", "test3": "calculate_years_in_business(2015, 2020)", "test4": "calculate_years_in_business(1950, 1975)", "test5": "calculate_years_in_business(1980, 1999)", "test6": "calculate_years_in_business(2001, 2005)", "test7": "calculate_years_in_business(1995, 2022)", "test8": "calculate_years_in_business(1970, 1985)", "test9": "calculate_years_in_business(2012, 2018)", "test10": "calculate_years_in_business(1962, 2023)"}, "hidden_information": "def calculate_years_in_business(year_established, current_year):\n    return current_year - year_established"}
{"ground_truth": "def calculate_dissection_risk(age, systolic_bp):\n    if age >= 80 and systolic_bp > 130:\n        return 'High'\n    elif age >= 60 and systolic_bp > 140:\n        return 'Moderate'\n    else:\n        return 'Low'", "problem_description": "I want to write a Python function to determine the risk of thoracic aorta dissection, but I'm not sure what factors to consider. Can you help me create a function to calculate this risk?The signature of the function is: def calculate_dissection_risk(age, systolic_bp)", "test_cases": {"test1": "calculate_dissection_risk(90, 120)", "test2": "calculate_dissection_risk(80, 140)", "test3": "calculate_dissection_risk(70, 130)", "test4": "calculate_dissection_risk(60, 150)", "test5": "calculate_dissection_risk(50, 120)", "test6": "calculate_dissection_risk(90, 150)", "test7": "calculate_dissection_risk(80, 120)", "test8": "calculate_dissection_risk(70, 140)", "test9": "calculate_dissection_risk(60, 160)", "test10": "calculate_dissection_risk(50, 130)"}, "hidden_information": "def calculate_dissection_risk(age, systolic_bp):\n    if age >= 80 and systolic_bp > 130:\n        return 'High'\n    elif age >= 60 and systolic_bp > 140:\n        return 'Moderate'\n    else:\n        return 'Low'"}
{"ground_truth": "def compute_entertainment_score(celebrity_figures, socioeconomic_status):\n    interest_scores_map = {\n        'Low socioeconomic': {'movies': 3, 'sports': 2, 'music': 1, 'celebrity news': 4},\n        'Medium socioeconomic': {'movies': 2, 'sports': 3, 'music': 4, 'celebrity news': 1},\n        'High socioeconomic': {'movies': 4, 'sports': 1, 'music': 2, 'celebrity news': 3}\n    }\n    interest_scores = 0\n    for celebrity_figure in celebrity_figures:\n        interest_type = None\n        if 'movies' in celebrity_figure:\n            interest_type = 'movies'\n        elif 'sports' in celebrity_figure:\n            interest_type = 'sports'\n        elif 'music' in celebrity_figure:\n            interest_type = 'music'\n        elif 'celebrity news' in celebrity_figure:\n            interest_type = 'celebrity news'\n        if interest_type:\n            interest_scores += interest_scores_map[socioeconomic_status][interest_type]\n    return interest_scores", "problem_description": "I want you to write a python function that can take a list of celebrity people and a users socioeconomic status as an input and compute an entertainment score of the users interest in the entertainment industry. The score is perferred to be based on their socioeconomic status. Get more details from me if you need any to solve the problemThe signature of the function is: def compute_entertainment_score(celebrity_figures, socioeconomic_status)", "test_cases": {"test1": "compute_entertainment_score(['movies (The Love Bug)', 'sports (Heat)', 'music (Lady Gaga)'], 'Low socioeconomic')", "test2": "compute_entertainment_score(['movies (GI Joe)', 'sports (Heat)', 'celebrity news (Kardashian sisters)'], 'Medium socioeconomic')", "test3": "compute_entertainment_score(['movies (Fellini)', 'sports (Jay-Z)', 'music (Beethoven)'], 'High socioeconomic')", "test4": "compute_entertainment_score(['sports (Cavs)', 'celebrity news (Kardashian sisters)'], 'Low socioeconomic')", "test5": "compute_entertainment_score(['movies (Jersey Shore)', 'music (Lady Gaga)'], 'Medium socioeconomic')", "test6": "compute_entertainment_score(['sports (Heat)', 'celebrity news (Snooki)'], 'High socioeconomic')", "test7": "compute_entertainment_score(['movies (The Love Bug)', 'music (Jay-Z)'], 'Low socioeconomic')", "test8": "compute_entertainment_score(['sports (Cavs)', 'movies (Fellini)'], 'Medium socioeconomic')", "test9": "compute_entertainment_score(['music (Beethoven)', 'celebrity news (Kardashian sisters)'], 'High socioeconomic')", "test10": "compute_entertainment_score(['movies (GI Joe)', 'sports (Heat)'], 'Low socioeconomic')"}, "hidden_information": "def compute_entertainment_score(celebrity_figures, socioeconomic_status):\n    interest_scores_map = {\n        'Low socioeconomic': {'movies': 3, 'sports': 2, 'music': 1, 'celebrity news': 4},\n        'Medium socioeconomic': {'movies': 2, 'sports': 3, 'music': 4, 'celebrity news': 1},\n        'High socioeconomic': {'movies': 4, 'sports': 1, 'music': 2, 'celebrity news': 3}\n    }\n    interest_scores = 0\n    for celebrity_figure in celebrity_figures:\n        interest_type = None\n        if 'movies' in celebrity_figure:\n            interest_type = 'movies'\n        elif 'sports' in celebrity_figure:\n            interest_type = 'sports'\n        elif 'music' in celebrity_figure:\n            interest_type = 'music'\n        elif 'celebrity news' in celebrity_figure:\n            interest_type = 'celebrity news'\n        if interest_type:\n            interest_scores += interest_scores_map[socioeconomic_status][interest_type]\n    return interest_scores"}
{"ground_truth": "def calculate_revenue(subscribers, subscription_plans, price_per_plan):\n    revenue = 0\n    for plan in subscription_plans:\n        revenue += subscribers[plan] * price_per_plan[plan]\n    return revenue", "problem_description": "I want to analyze the revenue generated by our VPN service during the Olympics. Can you write a Python function to calculate the total revenue based on the number of subscribers and the different subscription plans we offer? The function should take into account the price per plan and return the total revenue.The signature of the function is: def calculate_revenue(subscribers, subscription_plans, price_per_plan)", "test_cases": {"test1": "calculate_revenue({'monthly': 1000, 'yearly': 500}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test2": "calculate_revenue({'monthly': 500, 'yearly': 2000}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test3": "calculate_revenue({'monthly': 2000, 'yearly': 1000}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test4": "calculate_revenue({'monthly': 0, 'yearly': 0}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test5": "calculate_revenue({'monthly': 100, 'yearly': 50}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test6": "calculate_revenue({'monthly': 500, 'yearly': 100}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test7": "calculate_revenue({'monthly': 1000, 'yearly': 500}, ['monthly', 'yearly'], {'monthly': 19.99, 'yearly': 199.99})", "test8": "calculate_revenue({'monthly': 200, 'yearly': 200}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test9": "calculate_revenue({'monthly': 800, 'yearly': 400}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})", "test10": "calculate_revenue({'monthly': 1500, 'yearly': 750}, ['monthly', 'yearly'], {'monthly': 9.99, 'yearly': 99.99})"}, "hidden_information": "def calculate_revenue(subscribers, subscription_plans, price_per_plan):\n    revenue = 0\n    for plan in subscription_plans:\n        revenue += subscribers[plan] * price_per_plan[plan]\n    return revenue"}
{"ground_truth": "def calculate_performance(employee_data, performance_threshold=0.7):\n    average_scores = [score for score in employee_data if score is not None]\n    if average_scores:\n        average_score = sum(average_scores) / len(average_scores)\n        return average_score >= performance_threshold\n    else:\n        return False", "problem_description": "I need you to write a Python function that determines whether an employee's performance is satisfactory or not. I've heard that millennials respond well to positive feedback and work-life balance, so maybe we can consider those factors. But I'm not sure how to define 'satisfactory' - you're the expert, can you help me figure this out?The signature of the function is: def calculate_performance(employee_data, performance_threshold=0.7)", "test_cases": {"test1": "calculate_performance([0.9, 0.8, 0.7, None, 0.6])", "test2": "calculate_performance([0.5, 0.4, 0.3, 0.2, 0.1])", "test3": "calculate_performance([None, None, None, None, None])", "test4": "calculate_performance([0.9, 0.9, 0.9, 0.9, 0.9])", "test5": "calculate_performance([0.1, 0.2, 0.3, 0.4, 0.5])", "test6": "calculate_performance([0.7, 0.7, 0.7, 0.7, 0.7])", "test7": "calculate_performance([0.8, 0.8, 0.8, 0.8, 0.8], 0.85)", "test8": "calculate_performance([0.9, 0.8, 0.7, 0.6, 0.5], 0.75)", "test9": "calculate_performance([0.6, 0.7, 0.8, 0.9, 1.0], 0.55)", "test10": "calculate_performance([0.9, None, 0.8, 0.7, 0.6])"}, "hidden_information": "def calculate_performance(employee_data, performance_threshold=0.7):\n    average_scores = [score for score in employee_data if score is not None]\n    if average_scores:\n        average_score = sum(average_scores) / len(average_scores)\n        return average_score >= performance_threshold\n    else:\n        return False"}
{"ground_truth": "def categorize_star_trek_episodes(episodes, themes):\n  categorized_episodes = {}\n  for theme in themes:\n    categorized_episodes[theme] = [episode for episode in episodes if theme.lower() in episode.lower()]\n  return categorized_episodes", "problem_description": "I want you to write a python function that can help categorize Star Trek episodes based on certain themes, can you collaborate with me to clarify what themes and how to categorize them?The signature of the function is: def categorize_star_trek_episodes(episodes, themes)", "test_cases": {"test1": "categorize_star_trek_episodes([\"The Enemy Within\", \"The Naked Time\", \"Mudd's Women\"], [\"identity\", \"gender\"])", "test2": "categorize_star_trek_episodes([\"The Devil in the Dark\", \"Errand of Mercy\", \"The Apple\"], [\"language\"])", "test3": "categorize_star_trek_episodes([\"The City on the Edge of Forever\", \"The Alternative Factor\", \"Mirror, Mirror\"], [\"worldview\", \"identity\"])", "test4": "categorize_star_trek_episodes([\"The Man Trap\", \"The Naked Time\", \"Charlie X\"], [\"gender\"])", "test5": "categorize_star_trek_episodes([\"This Side of Paradise\", \"The Devil in the Dark\", \"By Any Other Name\"], [\"language\", \"worldview\"])", "test6": "categorize_star_trek_episodes([\"A Piece of the Action\", \"The Ultimate Computer\", \"Operation: Annihilate!\"], [\"identity\", \"language\"])", "test7": "categorize_star_trek_episodes([\"The Squire of Gothos\", \"Arena\", \"The Return of the Archons\"], [\"worldview\", \"gender\"])", "test8": "categorize_star_trek_episodes([\"Space Seed\", \"A Taste of Armageddon\", \"This Side of Paradise\"], [\"language\"])", "test9": "categorize_star_trek_episodes([\"The Apple\", \"The Doomsday Machine\", \"Catspaw\"], [\"worldview\", \"identity\"])", "test10": "categorize_star_trek_episodes([\"The Enemy Within\", \"The Man Trap\", \"A Piece of the Action\"], [\"gender\", \"language\"])"}, "hidden_information": "def categorize_star_trek_episodes(episodes, themes):\n  categorized_episodes = {}\n  for theme in themes:\n    categorized_episodes[theme] = [episode for episode in episodes if theme.lower() in episode.lower()]\n  return categorized_episodes"}
{"ground_truth": "def is_patent_eligible(dna_sequence, sequence_length, is_isolated, is_human_dna): return is_isolated and is_human_dna and (sequence_length > 1000) and ('hand of man' in dna_sequence or dna_sequence.startswith('cDNA'))", "problem_description": "Hey agent, I need a python function that determines if a DNA sequence is patent eligible or not. It has something to do with isolated human DNA, and some other factors like sequence length and human DNA characteristics. Can you write a python function to determine this?The signature of the function is: def is_patent_eligible(dna_sequence, sequence_length, is_isolated, is_human_dna)", "test_cases": {"test1": "is_patent_eligible('ATCG', 1000, True, True)", "test2": "is_patent_eligible('ATCG', 100, True, True)", "test3": "is_patent_eligible('ATCG', 1000, False, True)", "test4": "is_patent_eligible('ATCG', 1000, True, False)", "test5": "is_patent_eligible('cDNA-ATCG', 1000, True, True)", "test6": "is_patent_eligible('ATCG', 500, True, True)", "test7": "is_patent_eligible('ATCG', 2000, False, False)", "test8": "is_patent_eligible('hand of man-ATCG', 1000, True, True)", "test9": "is_patent_eligible('cDNA-ATCG', 2000, True, False)", "test10": "is_patent_eligible('hand of man-ATCG', 500, True, False)"}, "hidden_information": "def is_patent_eligible(dna_sequence, sequence_length, is_isolated, is_human_dna): return is_isolated and is_human_dna and (sequence_length > 1000) and ('hand of man' in dna_sequence or dna_sequence.startswith('cDNA'))"}
{"ground_truth": "def generate_kurume_kasuri(width, height, dot_size, gap):\n    pattern = []\n    for i in range(height):\n        row = {}\n        for j in range(width):\n            if (i + j) % gap == 0:\n                row[j] = 1\n            else:\n                row[j] = 0\n        pattern.append(row)\n    return pattern", "problem_description": "Can you write a Python function to generate a simple representation of the Kurume kasuri pattern? The pattern is similar to a splashed pattern and has a specific arrangement of dots. I want to use this function to design a fabric pattern.The signature of the function is: def generate_kurume_kasuri(width, height, dot_size, gap)", "test_cases": {"test1": "generate_kurume_kasuri(10, 10, 2, 3)", "test2": "generate_kurume_kasuri(20, 20, 3, 4)", "test3": "generate_kurume_kasuri(5, 5, 1, 2)", "test4": "generate_kurume_kasuri(15, 15, 2, 5)", "test5": "generate_kurume_kasuri(10, 10, 1, 3)", "test6": "generate_kurume_kasuri(25, 25, 3, 4)", "test7": "generate_kurume_kasuri(8, 8, 2, 3)", "test8": "generate_kurume_kasuri(12, 12, 1, 4)", "test9": "generate_kurume_kasuri(18, 18, 3, 5)", "test10": "generate_kurume_kasuri(22, 22, 2, 4)"}, "hidden_information": "def generate_kurume_kasuri(width, height, dot_size, gap):\n    pattern = []\n    for i in range(height):\n        row = {}\n        for j in range(width):\n            if (i + j) % gap == 0:\n                row[j] = 1\n            else:\n                row[j] = 0\n        pattern.append(row)\n    return pattern"}
{"ground_truth": "def can_enter_nightclub(age, min_age): return age >= min_age", "problem_description": "I need to write a function to check if someone can get into a nightclub in Texas. The function should take the person's age and the minimum age requirement as inputs. It should return True if the person can enter and False otherwise. Can you write this function for me?The signature of the function is: def can_enter_nightclub(age, min_age)", "test_cases": {"test1": "can_enter_nightclub(21, 21)", "test2": "can_enter_nightclub(20, 21)", "test3": "can_enter_nightclub(22, 21)", "test4": "can_enter_nightclub(18, 21)", "test5": "can_enter_nightclub(25, 21)", "test6": "can_enter_nightclub(21, 20)", "test7": "can_enter_nightclub(19, 18)", "test8": "can_enter_nightclub(16, 18)", "test9": "can_enter_nightclub(18, 18)", "test10": "can_enter_nightclub(21, 19)"}, "hidden_information": "def can_enter_nightclub(age, min_age): return age >= min_age"}
{"ground_truth": "def calculate_radiation_exposure(distance, radiation_level, wind_speed=0, sheltering_factor=1, radioactive_half_life=100):\n    '''Calculates radiation exposure based on distance, radiation level, wind speed, sheltering factor, and radioactive half-life.'''\n    radiation_exposure = radiation_level * (1 / (distance ** 2)) * (1 - wind_speed / 100) * sheltering_factor * (1 - 0.5 ** (1 / radioactive_half_life))\n    return radiation_exposure", "problem_description": "I want to calculate the radiation exposure for people living near a nuclear power plant. I need a python function that takes into account the distance from the plant, radiation level, wind speed, sheltering factor, and radioactive half-life. Can you help me write this function?The signature of the function is: def calculate_radiation_exposure(distance, radiation_level, wind_speed=0, sheltering_factor=1, radioactive_half_life=100)", "test_cases": {"test1": "calculate_radiation_exposure(1000, 1000, 20, 0.5, 100)", "test2": "calculate_radiation_exposure(500, 500, 10, 0.8, 200)", "test3": "calculate_radiation_exposure(2000, 2000, 30, 0.6, 300)", "test4": "calculate_radiation_exposure(1500, 1500, 25, 0.7, 250)", "test5": "calculate_radiation_exposure(800, 800, 18, 0.4, 180)", "test6": "calculate_radiation_exposure(1200, 1200, 22, 0.9, 220)", "test7": "calculate_radiation_exposure(2500, 2500, 35, 0.3, 350)", "test8": "calculate_radiation_exposure(1800, 1800, 28, 0.2, 280)", "test9": "calculate_radiation_exposure(2200, 2200, 32, 0.1, 320)", "test10": "calculate_radiation_exposure(2800, 2800, 38, 0.8, 380)"}, "hidden_information": "def calculate_radiation_exposure(distance, radiation_level, wind_speed=0, sheltering_factor=1, radioactive_half_life=100):\n    '''Calculates radiation exposure based on distance, radiation level, wind speed, sheltering factor, and radioactive half-life.'''\n    radiation_exposure = radiation_level * (1 / (distance ** 2)) * (1 - wind_speed / 100) * sheltering_factor * (1 - 0.5 ** (1 / radioactive_half_life))\n    return radiation_exposure"}
{"ground_truth": "def calculate_disposal_cost(waste_types, waste_amounts, vehicle_capacity):\n    disposal_costs = {'tires': 0.5, 'furniture': 1.0, 'appliances': 2.0, 'chemicals': 5.0}\n    total_cost = 0\n    for waste_type, waste_amount in zip(waste_types, waste_amounts):\n        total_cost += waste_amount * disposal_costs.get(waste_type, 0)\n    vehicle_cost = 0\n    if vehicle_capacity <= 0.5:\n        vehicle_cost = 11\n    elif vehicle_capacity <= 1.0:\n        vehicle_cost = 22\n    else:\n        vehicle_cost = 33\n    return total_cost + vehicle_cost", "problem_description": "I need a python function to estimate the cost of disposing of waste at the Ada County Landfill. The function should take into account the types and amounts of waste, as well as the capacity of the vehicle used to transport the waste. Can the agent help me create such a function?The signature of the function is: def calculate_disposal_cost(waste_types, waste_amounts, vehicle_capacity)", "test_cases": {"test1": "calculate_disposal_cost(['tires', 'furniture'], [2, 1], 0.5)", "test2": "calculate_disposal_cost(['appliances', 'chemicals'], [1, 0.5], 1.0)", "test3": "calculate_disposal_cost(['tires', 'furniture', 'appliances'], [1, 1, 1], 0.5)", "test4": "calculate_disposal_cost(['chemicals'], [2], 1.5)", "test5": "calculate_disposal_cost([], [], 0.25)", "test6": "calculate_disposal_cost(['tires', 'tires'], [2, 2], 1.0)", "test7": "calculate_disposal_cost(['furniture', 'appliances', 'chemicals'], [1, 1, 1], 2.0)", "test8": "calculate_disposal_cost(['tires'], [5], 0.25)", "test9": "calculate_disposal_cost(['appliances', 'chemicals', 'tires'], [2, 1, 1], 1.5)", "test10": "calculate_disposal_cost(['furniture'], [3], 2.0)"}, "hidden_information": "def calculate_disposal_cost(waste_types, waste_amounts, vehicle_capacity):\n    disposal_costs = {'tires': 0.5, 'furniture': 1.0, 'appliances': 2.0, 'chemicals': 5.0}\n    total_cost = 0\n    for waste_type, waste_amount in zip(waste_types, waste_amounts):\n        total_cost += waste_amount * disposal_costs.get(waste_type, 0)\n    vehicle_cost = 0\n    if vehicle_capacity <= 0.5:\n        vehicle_cost = 11\n    elif vehicle_capacity <= 1.0:\n        vehicle_cost = 22\n    else:\n        vehicle_cost = 33\n    return total_cost + vehicle_cost"}
{"ground_truth": "def check_flight_cancellations(flight_number, origin, destination, flights_data):\n    for flight in flights_data:\n        if flight['flight_number'] == flight_number and flight['origin'] == origin and flight['destination'] == destination and flight['status'] == 'cancelled':\n            return True\n    return False", "problem_description": "I want you to write a python function that helps me track flight cancellations and airport closures for my upcoming travel plans. Can you create a python function that takes in a flight number, origin and destination, and returns if the flight is cancelled or not?The signature of the function is: def check_flight_cancellations(flight_number, origin, destination, flights_data)", "test_cases": {"test1": "check_flight_cancellations('AA123', 'Seattle', 'New York', [{'flight_number': 'AA123', 'origin': 'Seattle', 'destination': 'New York', 'status': 'cancelled'}])", "test2": "check_flight_cancellations('UA456', 'Boise', 'Boston', [{'flight_number': 'UA456', 'origin': 'Boise', 'destination': 'Boston', 'status': 'on-time'}])", "test3": "check_flight_cancellations('DL789', 'Minneapolis', 'Philadelphia', [{'flight_number': 'DL789', 'origin': 'Minneapolis', 'destination': 'Philadelphia', 'status': 'delayed'}])", "test4": "check_flight_cancellations('AA123', 'Seattle', 'New York', [{'flight_number': 'AA124', 'origin': 'Seattle', 'destination': 'New York', 'status': 'cancelled'}])", "test5": "check_flight_cancellations('UA456', 'Boise', 'Boston', [{'flight_number': 'UA457', 'origin': 'Boise', 'destination': 'Boston', 'status': 'on-time'}])", "test6": "check_flight_cancellations('DL789', 'Minneapolis', 'Philadelphia', [{'flight_number': 'DL789', 'origin': 'Minneapolis', 'destination': 'Chicago', 'status': 'delayed'}])", "test7": "check_flight_cancellations('AA123', 'Seattle', 'New York', [{'flight_number': 'AA123', 'origin': 'Seattle', 'destination': 'New York', 'status': 'on-time'}])", "test8": "check_flight_cancellations('UA456', 'Boise', 'Boston', [{'flight_number': 'UA456', 'origin': 'Boise', 'destination': 'Boston', 'status': 'cancelled'}, {'flight_number': 'UA457', 'origin': 'Boise', 'destination': 'Boston', 'status': 'on-time'}])", "test9": "check_flight_cancellations('DL789', 'Minneapolis', 'Philadelphia', [{'flight_number': 'DL789', 'origin': 'Minneapolis', 'destination': 'Philadelphia', 'status': 'cancelled'}, {'flight_number': 'DL790', 'origin': 'Minneapolis', 'destination': 'Philadelphia', 'status': 'on-time'}])", "test10": "check_flight_cancellations('AA123', 'Seattle', 'New York', [])"}, "hidden_information": "def check_flight_cancellations(flight_number, origin, destination, flights_data):\n    for flight in flights_data:\n        if flight['flight_number'] == flight_number and flight['origin'] == origin and flight['destination'] == destination and flight['status'] == 'cancelled':\n            return True\n    return False"}
{"ground_truth": "def estimate_lumber_storage_cost(length, width, height, material_type, design_choice):\n    # material costs in dollars per unit\n    material_costs = {\n        'plywood': 10,\n        '1x3 furring strips': 5,\n        '2x4 lumber': 8,\n    }\n    # size of materials needed\n    plywood_size = (length * width) / 4 # assuming 4 shelves\n    furring_strips_size = length * 8 # 8 strips\n    lumber_size = length * 4 # 4 pieces of lumber\n    # calculate costs\n    plywood_cost = plywood_size * material_costs[material_type]\n    furring_strips_cost = furring_strips_size * material_costs['1x3 furring strips']\n    lumber_cost = lumber_size * material_costs['2x4 lumber']\n    total_cost = plywood_cost + furring_strips_cost + lumber_cost\n    return total_cost", "problem_description": "Design a Python function that can estimate the cost and materials needed for building a lumber storage rack. The function should take into account the dimensions of the rack, the type of materials used, and the design choice. The agent will need to interact with the human user to understand these specifics.The signature of the function is: def estimate_lumber_storage_cost(length, width, height, material_type, design_choice)", "test_cases": {"test1": "estimate_lumber_storage_cost(96, 24, 60, 'plywood', 'basic')", "test2": "estimate_lumber_storage_cost(120, 36, 72, '1x3 furring strips', 'deluxe')", "test3": "estimate_lumber_storage_cost(96, 24, 60, '2x4 lumber', 'basic')", "test4": "estimate_lumber_storage_cost(120, 36, 72, 'plywood', 'minibar')", "test5": "estimate_lumber_storage_cost(96, 24, 48, '1x3 furring strips', 'basic')", "test6": "estimate_lumber_storage_cost(120, 36, 96, '2x4 lumber', 'deluxe')", "test7": "estimate_lumber_storage_cost(96, 24, 60, 'plywood', 'standard')", "test8": "estimate_lumber_storage_cost(120, 36, 72, '1x3 furring strips', 'premium')", "test9": "estimate_lumber_storage_cost(96, 24, 48, '2x4 lumber', 'basic')", "test10": "estimate_lumber_storage_cost(120, 36, 96, 'plywood', 'deluxe')"}, "hidden_information": "def estimate_lumber_storage_cost(length, width, height, material_type, design_choice):\n    # material costs in dollars per unit\n    material_costs = {\n        'plywood': 10,\n        '1x3 furring strips': 5,\n        '2x4 lumber': 8,\n    }\n    # size of materials needed\n    plywood_size = (length * width) / 4 # assuming 4 shelves\n    furring_strips_size = length * 8 # 8 strips\n    lumber_size = length * 4 # 4 pieces of lumber\n    # calculate costs\n    plywood_cost = plywood_size * material_costs[material_type]\n    furring_strips_cost = furring_strips_size * material_costs['1x3 furring strips']\n    lumber_cost = lumber_size * material_costs['2x4 lumber']\n    total_cost = plywood_cost + furring_strips_cost + lumber_cost\n    return total_cost"}
{"ground_truth": "def is_eligible_entity(entity:\n  dict[str, str]) -> bool:\n    eligible_entities = ['State', 'local government', 'tribal government', 'transit agency', 'public toll authority', 'metropolitan planning organization']\n    required_fields = ['government_type', 'jurisdiction', 'name']\n    if all(field in entity for field in required_fields) and entity['government_type'] in eligible_entities:\n        return True\n    return False", "problem_description": "Write a Python function to decide whether a given entity is eligible to participate in ITS activities based on its government type and jurisdiction. The function should handle multiple entity types and different jurisdictions.The signature of the function is: def is_eligible_entity(entity", "test_cases": {"test1": "is_eligible_entity({'government_type': 'State', 'jurisdiction': 'California', 'name': 'California Department of Transportation'})", "test2": "is_eligible_entity({'government_type': 'Private', 'jurisdiction': 'New York', 'name': 'New York Taxi Company'})", "test3": "is_eligible_entity({'government_type': 'local government', 'jurisdiction': 'Chicago', 'name': 'Chicago Transit Authority'})", "test4": "is_eligible_entity({'government_type': 'tribal government', 'jurisdiction': 'Native American Reservation', 'name': 'Reservation Transportation Department'})", "test5": "is_eligible_entity({'government_type': 'State', 'jurisdiction': 'New York', 'name': 'New York Department of Transportation'})", "test6": "is_eligible_entity({'government_type': 'public toll authority', 'jurisdiction': 'Pennsylvania', 'name': 'Pennsylvania Turnpike Authority'})", "test7": "is_eligible_entity({'government_type': 'metropolitan planning organization', 'jurisdiction': 'Los Angeles', 'name': 'Los Angeles MPO'})", "test8": "is_eligible_entity({'government_type': 'State', 'jurisdiction': 'Texas', 'name': 'Texas Department of Transportation'})", "test9": "is_eligible_entity({'government_type': 'local government', 'jurisdiction': 'Houston', 'name': 'Houston Transit Authority'})", "test10": "is_eligible_entity({'government_type': 'Private', 'jurisdiction': 'Florida', 'name': 'Florida Taxi Company'})"}, "hidden_information": "def is_eligible_entity(entity:\n  dict[str, str]) -> bool:\n    eligible_entities = ['State', 'local government', 'tribal government', 'transit agency', 'public toll authority', 'metropolitan planning organization']\n    required_fields = ['government_type', 'jurisdiction', 'name']\n    if all(field in entity for field in required_fields) and entity['government_type'] in eligible_entities:\n        return True\n    return False"}
{"ground_truth": "def confidential_interpreter(messages, authorized_parties):\n    confidential_messages = {}\n    for message in messages:\n        if message['sender'] in authorized_parties or message['receiver'] in authorized_parties:\n            confidential_messages[message['message_id']] = message['content']\n    return confidential_messages", "problem_description": "I want you to write a Python function that simulates a confidentiality system for a court interpreter. The function should take a list of messages and determine who is authorized to access them. Can you create a function that does this?The signature of the function is: def confidential_interpreter(messages, authorized_parties)", "test_cases": {"test1": "confidential_interpreter([{'message_id': 1, 'sender': 'judge', 'receiver': 'lawyer', 'content': 'Confidential message 1'}, {'message_id': 2, 'sender': 'lawyer', 'receiver': 'judge', 'content': 'Confidential message 2'}], ['judge'])", "test2": "confidential_interpreter([{'message_id': 1, 'sender': 'prosecutor', 'receiver': 'judge', 'content': 'Public message 1'}], ['prosecutor', 'judge'])", "test3": "confidential_interpreter([{'message_id': 1, 'sender': 'lawyer', 'receiver': 'prosecutor', 'content': 'Confidential message 3'}], ['lawyer', 'judge'])", "test4": "confidential_interpreter([{'message_id': 1, 'sender': 'judge', 'receiver': 'lawyer', 'content': 'Confidential message 4'}, {'message_id': 2, 'sender': 'lawyer', 'receiver': 'judge', 'content': 'Confidential message 5'}], ['judge', 'lawyer'])", "test5": "confidential_interpreter([{'message_id': 1, 'sender': 'prosecutor', 'receiver': 'judge', 'content': 'Public message 2'}], ['prosecutor', 'lawyer'])", "test6": "confidential_interpreter([{'message_id': 1, 'sender': 'lawyer', 'receiver': 'prosecutor', 'content': 'Confidential message 6'}, {'message_id': 2, 'sender': 'judge', 'receiver': 'lawyer', 'content': 'Confidential message 7'}], ['judge'])", "test7": "confidential_interpreter([{'message_id': 1, 'sender': 'judge', 'receiver': 'lawyer', 'content': 'Confidential message 8'}, {'message_id': 2, 'sender': 'lawyer', 'receiver': 'judge', 'content': 'Confidential message 9'}], ['prosecutor'])", "test8": "confidential_interpreter([{'message_id': 1, 'sender': 'prosecutor', 'receiver': 'judge', 'content': 'Public message 3'}], ['judge'])", "test9": "confidential_interpreter([{'message_id': 1, 'sender': 'lawyer', 'receiver': 'prosecutor', 'content': 'Confidential message 10'}], ['lawyer'])", "test10": "confidential_interpreter([{'message_id': 1, 'sender': 'judge', 'receiver': 'lawyer', 'content': 'Confidential message 11'}, {'message_id': 2, 'sender': 'lawyer', 'receiver': 'judge', 'content': 'Confidential message 12'}], ['judge', 'prosecutor'])"}, "hidden_information": "def confidential_interpreter(messages, authorized_parties):\n    confidential_messages = {}\n    for message in messages:\n        if message['sender'] in authorized_parties or message['receiver'] in authorized_parties:\n            confidential_messages[message['message_id']] = message['content']\n    return confidential_messages"}
{"ground_truth": "def check_package_score(installed_packages, required_packages):\n    score = 0\n    for package in required_packages:\n        if package in installed_packages:\n            score += 1\n    return score / len(required_packages)", "problem_description": "Can you write a python function to evaluate my coding setup? I have multiple operating systems with different text editors installed and I want to rate them based on the availability of certain packages like vim and emacs. I don't have the exact details, can you help me create this function?The signature of the function is: def check_package_score(installed_packages, required_packages)", "test_cases": {"test1": "check_package_score(['vim', 'emacs', 'vi'], ['vim', 'emacs'])", "test2": "check_package_score(['vim', 'vi'], ['vim', 'emacs'])", "test3": "check_package_score(['emacs'], ['vim', 'emacs'])", "test4": "check_package_score([], ['vim', 'emacs'])", "test5": "check_package_score(['vim'], ['vim'])", "test6": "check_package_score(['vim', 'emacs'], ['vim', 'emacs', 'vscode'])", "test7": "check_package_score(['vim', 'vscode'], ['vim', 'emacs'])", "test8": "check_package_score(['emacs', 'vscode'], ['vim', 'emacs'])", "test9": "check_package_score(['vim', 'emacs', 'vscode'], ['vim', 'emacs'])", "test10": "check_package_score(['vim', 'vscode', 'sublime'], ['vim', 'emacs', 'atom'])"}, "hidden_information": "def check_package_score(installed_packages, required_packages):\n    score = 0\n    for package in required_packages:\n        if package in installed_packages:\n            score += 1\n    return score / len(required_packages)"}
{"ground_truth": "def calculate_risk_score(market_fluctuation, debt_to_equity_ratio):\n    if market_fluctuation < 0.1 and debt_to_equity_ratio < 0.5:\n        return 'Low Risk'\n    elif market_fluctuation < 0.2 and debt_to_equity_ratio < 1:\n        return 'Moderate Risk'\n    else:\n        return 'High Risk'", "problem_description": "I want you to write a python function that can help retirees determine if their retirement portfolio can withstand a big market crash. The function should take two parameters: market fluctuation percentage and debt-to-equity ratio, and return a risk score. The risk score should be one of 'Low Risk', 'Moderate Risk', or 'High Risk'.The signature of the function is: def calculate_risk_score(market_fluctuation, debt_to_equity_ratio)", "test_cases": {"test1": "calculate_risk_score(0.05, 0.3)", "test2": "calculate_risk_score(0.15, 0.8)", "test3": "calculate_risk_score(0.25, 1.2)", "test4": "calculate_risk_score(0.01, 0.2)", "test5": "calculate_risk_score(0.12, 0.9)", "test6": "calculate_risk_score(0.28, 1.5)", "test7": "calculate_risk_score(0.08, 0.4)", "test8": "calculate_risk_score(0.18, 1.1)", "test9": "calculate_risk_score(0.22, 0.6)", "test10": "calculate_risk_score(0.32, 1.8)"}, "hidden_information": "def calculate_risk_score(market_fluctuation, debt_to_equity_ratio):\n    if market_fluctuation < 0.1 and debt_to_equity_ratio < 0.5:\n        return 'Low Risk'\n    elif market_fluctuation < 0.2 and debt_to_equity_ratio < 1:\n        return 'Moderate Risk'\n    else:\n        return 'High Risk'"}
{"ground_truth": "def rank_prospects(prospects): \n  # prospects is a list of dictionaries with keys 'name' and 'stats'\n  # stats is a dictionary with keys 'batting_avg', 'home_runs', 'runs_batted_in'\n  # rank prospects based on batting average, then home runs, then runs batted in\n  return sorted(prospects, key=lambda x: (x['stats']['batting_avg'], x['stats']['home_runs'], x['stats']['runs_batted_in']), reverse=True)", "problem_description": "I want the agent to write a python function to rank baseball prospects based on some basic stats. However, the exact stats to use and their order of importance I want the agent to figure out through interaction.The signature of the function is: def rank_prospects(prospects)", "test_cases": {"test1": "rank_prospects([{\"name\": \"Player1\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 20, \"runs_batted_in\": 80}}, {\"name\": \"Player2\", \"stats\": {\"batting_avg\": 0.250, \"home_runs\": 30, \"runs_batted_in\": 60}}])", "test2": "rank_prospects([{\"name\": \"PlayerA\", \"stats\": {\"batting_avg\": 0.350, \"home_runs\": 15, \"runs_batted_in\": 90}}, {\"name\": \"PlayerB\", \"stats\": {\"batting_avg\": 0.320, \"home_runs\": 20, \"runs_batted_in\": 70}}])", "test3": "rank_prospects([{\"name\": \"PlayerX\", \"stats\": {\"batting_avg\": 0.200, \"home_runs\": 40, \"runs_batted_in\": 50}}, {\"name\": \"PlayerY\", \"stats\": {\"batting_avg\": 0.280, \"home_runs\": 25, \"runs_batted_in\": 75}}])", "test4": "rank_prospects([{\"name\": \"Player1\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 20, \"runs_batted_in\": 80}}, {\"name\": \"Player2\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 20, \"runs_batted_in\": 70}}])", "test5": "rank_prospects([{\"name\": \"PlayerA\", \"stats\": {\"batting_avg\": 0.350, \"home_runs\": 15, \"runs_batted_in\": 90}}, {\"name\": \"PlayerB\", \"stats\": {\"batting_avg\": 0.350, \"home_runs\": 15, \"runs_batted_in\": 80}}])", "test6": "rank_prospects([{\"name\": \"PlayerX\", \"stats\": {\"batting_avg\": 0.200, \"home_runs\": 40, \"runs_batted_in\": 50}}, {\"name\": \"PlayerY\", \"stats\": {\"batting_avg\": 0.200, \"home_runs\": 30, \"runs_batted_in\": 60}}])", "test7": "rank_prospects([{\"name\": \"Player1\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 20, \"runs_batted_in\": 80}}, {\"name\": \"Player2\", \"stats\": {\"batting_avg\": 0.250, \"home_runs\": 35, \"runs_batted_in\": 65}}])", "test8": "rank_prospects([{\"name\": \"PlayerA\", \"stats\": {\"batting_avg\": 0.350, \"home_runs\": 18, \"runs_batted_in\": 92}}, {\"name\": \"PlayerB\", \"stats\": {\"batting_avg\": 0.320, \"home_runs\": 22, \"runs_batted_in\": 72}}])", "test9": "rank_prospects([{\"name\": \"PlayerX\", \"stats\": {\"batting_avg\": 0.200, \"home_runs\": 42, \"runs_batted_in\": 52}}, {\"name\": \"PlayerY\", \"stats\": {\"batting_avg\": 0.280, \"home_runs\": 28, \"runs_batted_in\": 78}}])", "test10": "rank_prospects([{\"name\": \"Player1\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 20, \"runs_batted_in\": 80}}, {\"name\": \"Player2\", \"stats\": {\"batting_avg\": 0.300, \"home_runs\": 18, \"runs_batted_in\": 82}}])"}, "hidden_information": "def rank_prospects(prospects): \n  # prospects is a list of dictionaries with keys 'name' and 'stats'\n  # stats is a dictionary with keys 'batting_avg', 'home_runs', 'runs_batted_in'\n  # rank prospects based on batting average, then home runs, then runs batted in\n  return sorted(prospects, key=lambda x: (x['stats']['batting_avg'], x['stats']['home_runs'], x['stats']['runs_batted_in']), reverse=True)"}
{"ground_truth": "def filter_profanity(text):\n    profanity_list = ['\\u00f1\\u00f3', '\\u00f1']  # Unicode for Cuban expression \n    words = text.split()\n    filtered_text = [word for word in words if word.lower() not in profanity_list]\n    return ' '.join(filtered_text)", "problem_description": "I want a Python function that can detect and filter out certain words or expressions from a piece of text that might be considered impolite in Cuban culture. Create a function to do this.The signature of the function is: def filter_profanity(text)", "test_cases": {"test1": "filter_profanity('The \u00f1 is silent now!')", "test2": "filter_profanity('Guillermo Alvarez Guedes, the Cuban comic who made a common Cuban expletive his trademark \u2014 which he would reduce to its second syllable, \u00a1\u00f1\u00f3!')", "test3": "filter_profanity('He was just talking like any Cuban would, using \u00a1\u00f1! sometimes.')", "test4": "filter_profanity('The humor works doubly with English and Spanish speakers, the latter recognizing the absurdities of their own culture, especially \u00a1\u00f1\u00f3!.')", "test5": "filter_profanity('He played \u2014 some would say he was \u2014 the cubanazo, a word well known in Miami. Too Cuban For You, \u00a1\u00f1!')", "test6": "filter_profanity('Among others, it was being granted license to laugh at aspects of Cuban speech and culture they already found funny, like \u00a1\u00f1\u00f3!.')", "test7": "filter_profanity('My best memories of Cuba make me sad, even the ones with \u00a1\u00f1!.')", "test8": "filter_profanity('Cuba is a country that no longer exists, even if I was born there, and we used to say \u00a1\u00f1!')", "test9": "filter_profanity('He represented both el gallego\u2014\u2013 a handlebar-moustached Spanish immigrant, whose physical appearance was that of Alvarez Guedes himself \u2014 and el negrito, a street-smart Afro-Cuban who relentlessly mocks el gallego, often with \u00a1\u00f1!')", "test10": "filter_profanity('But such academic wonderings would be dismissed by Alvarez Guedes, who in his radio show on Miami\u2019s Clasica 92.3FM would urge his listeners, in the best tradition of choteo, to tirarlo todo a relajo \u2014 make a joke of everything, even \u00a1\u00f1!.')"}, "hidden_information": "def filter_profanity(text):\n    profanity_list = ['\\u00f1\\u00f3', '\\u00f1']  # Unicode for Cuban expression \n    words = text.split()\n    filtered_text = [word for word in words if word.lower() not in profanity_list]\n    return ' '.join(filtered_text)"}
{"ground_truth": "def get_player_rewards(event_rewards, player_names):\n    rewards_dict = {}\n    for i, reward in enumerate(event_rewards):\n        rewards_dict[player_names[i % len(player_names)]] = reward\n    return rewards_dict", "problem_description": "Can you write a python function that takes in a list of Guild Wars 2 game event rewards and a list of player names, and returns a dictionary where the keys are the player names and the values are the corresponding rewards from the event?The signature of the function is: def get_player_rewards(event_rewards, player_names)", "test_cases": {"test1": "get_player_rewards(['reward1', 'reward2', 'reward3'], ['player1', 'player2'])", "test2": "get_player_rewards(['token1', 'token2', 'token3', 'token4'], ['John', 'Alice', 'Bob', 'Charlie'])", "test3": "get_player_rewards(['gw2_item_1', 'gw2_item_2'], ['MMArts', 'David'])", "test4": "get_player_rewards(['event_item1', 'event_item2', 'event_item3', 'event_item4'], ['random_player1', 'random_player2', 'random_player3'])", "test5": "get_player_rewards(['pvp_reward1', 'pvp_reward2'], ['unknown_player1', 'unknown_player2'])", "test6": "get_player_rewards(['arena_reward1', 'arena_reward2', 'arena_reward3'], ['each player in the arena'])", "test7": "get_player_rewards(['guild item1', 'guild item2'], ['Should work', 'also'])", "test8": "get_player_rewards(['combine', 'many', ' heroes', 'add'], ['InThe', 'idle heroes'])", "test9": "get_player_rewards(['plays together perhaps', '11'], ['After some iterations'])", "test10": "get_player_rewards(['can func if', 'set money', 'how', 'will'], ['a person', 'la'])"}, "hidden_information": "def get_player_rewards(event_rewards, player_names):\n    rewards_dict = {}\n    for i, reward in enumerate(event_rewards):\n        rewards_dict[player_names[i % len(player_names)]] = reward\n    return rewards_dict"}
{"ground_truth": "def parse_abbreviations(text):\n  abbreviations = {\n    'MW': 'Mouse Wait', 'WDW': 'Walt Disney World', 'AK': 'Animal Kingdom', 'DHS': 'Disneys Hollywood Studios', 'CM': 'Cast Member', \n    'BTMRR': 'Big Thunder Mountain Railroad', 'HM': 'Haunted Mansion', 'GMR': 'Great Movie Ride', 'RnRC': 'Rock n Roller Coaster', \n    'ToT': 'Tower of Terror', 'EE': 'Expedition Everest', 'TSMM': 'Toy Story Midway Mania', 'SGE': 'Stitchs Great Escape', \n    'TTA': 'Tomorrowland Transit Authority', 'DTD': 'Downtown Disney', 'DDP': 'Disney Dining Plan', 'FP': 'Fast Pass', \n    'EmH': 'Extra Magic Hours', 'DQ': 'Disneyquest', 'WPF&M': 'Waterpark Fun and More', 'MW FL': 'Mousewait Florida', \n    'BB': 'Blizzard Beach', 'PotC': 'Pirates of the Caribbean', 'Poly': 'Polynesian', 'DVC': 'Disney Vacation Club', \n    'RAK': 'Random Act of Kindness', 'MK': 'Magic Kingdom', \n    'ASMc': 'All Star Music Resort'\n  }\n  words = text.split()\n  parsed_text = ''\n  for word in words:\n    if word in abbreviations:\n      parsed_text += abbreviations[word] + ' '\n    else:\n      parsed_text += word + ' '\n  return parsed_text.strip()", "problem_description": "I want you to write a python function that can look at a given text and convert any Walt Disney World abbreviations it finds into their full form, including things like HM for Haunted Mansion, ASMc for All Star Music Resort etc.The signature of the function is: def parse_abbreviations(text)", "test_cases": {"test1": "parse_abbreviations('I am going to the HM at WDW.')", "test2": "parse_abbreviations('Can you book me a FP for BTMRR at MK?')", "test3": "parse_abbreviations('Do you have any info on the DVC at the Poly?')", "test4": "parse_abbreviations('Do you know when the RAK event is at DHS?')", "test5": "parse_abbreviations('Do you have the schedule for the GMR at Epcot?')", "test6": "parse_abbreviations('Where is the SGE at?')", "test7": "parse_abbreviations('How do I get to the TTA at Magic Kingdom?')", "test8": "parse_abbreviations('What is the weather like in DTD today?')", "test9": "parse_abbreviations('Can I get a DDP at the WPF&M?')", "test10": "parse_abbreviations('Is the EmH going on this week at AK?')"}, "hidden_information": "def parse_abbreviations(text):\n  abbreviations = {\n    'MW': 'Mouse Wait', 'WDW': 'Walt Disney World', 'AK': 'Animal Kingdom', 'DHS': 'Disneys Hollywood Studios', 'CM': 'Cast Member', \n    'BTMRR': 'Big Thunder Mountain Railroad', 'HM': 'Haunted Mansion', 'GMR': 'Great Movie Ride', 'RnRC': 'Rock n Roller Coaster', \n    'ToT': 'Tower of Terror', 'EE': 'Expedition Everest', 'TSMM': 'Toy Story Midway Mania', 'SGE': 'Stitchs Great Escape', \n    'TTA': 'Tomorrowland Transit Authority', 'DTD': 'Downtown Disney', 'DDP': 'Disney Dining Plan', 'FP': 'Fast Pass', \n    'EmH': 'Extra Magic Hours', 'DQ': 'Disneyquest', 'WPF&M': 'Waterpark Fun and More', 'MW FL': 'Mousewait Florida', \n    'BB': 'Blizzard Beach', 'PotC': 'Pirates of the Caribbean', 'Poly': 'Polynesian', 'DVC': 'Disney Vacation Club', \n    'RAK': 'Random Act of Kindness', 'MK': 'Magic Kingdom', \n    'ASMc': 'All Star Music Resort'\n  }\n  words = text.split()\n  parsed_text = ''\n  for word in words:\n    if word in abbreviations:\n      parsed_text += abbreviations[word] + ' '\n    else:\n      parsed_text += word + ' '\n  return parsed_text.strip()"}
{"ground_truth": "def mr_publication(year):\n    mr_dict = {1955: 'Heart of a Dog', 1984: 'The Satanic Verses'}\n    return mr_dict.get(year, 'No publication found')\n", "problem_description": "Hey, I'm looking for a python function to retrieve information about book publications. Can you help me write a function that takes an input and returns the name of the book for that specific year?The signature of the function is: def mr_publication(year)", "test_cases": {"test1": "mr_publication(1955)", "test2": "mr_publication(1984)", "test3": "mr_publication(2000)", "test4": "mr_publication(1945)", "test5": "mr_publication(1950)", "test6": "mr_publication(1960)", "test7": "mr_publication(1980)", "test8": "mr_publication(1985)", "test9": "mr_publication(1990)", "test10": "mr_publication(1955)"}, "hidden_information": "def mr_publication(year):\n    mr_dict = {1955: 'Heart of a Dog', 1984: 'The Satanic Verses'}\n    return mr_dict.get(year, 'No publication found')\n"}
{"ground_truth": "def determine_song_attributes(song_title, genre):\n    song_attributes = {\n        'rock': {'rhythm': 'strong', 'tempo': 'fast'},\n        'pop': {'rhythm': 'upbeat', 'tempo': 'moderate'},\n        'jazz': {'rhythm': 'complex', 'tempo': 'fast'},\n        'classical': {'rhythm': 'soothing', 'tempo': 'slow'}\n    }\n    return song_attributes.get(genre.lower(), {'rhythm': 'unknown', 'tempo': 'unknown'})", "problem_description": "Hey agent, I want you to write a python function that can determine the rhythm and tempo of a song based on its title and genre. For example, a rock song might have a strong rhythm and fast tempo, while a classical song might have a soothing rhythm and slow tempo.The signature of the function is: def determine_song_attributes(song_title, genre)", "test_cases": {"test1": "determine_song_attributes('Happy', 'pop')", "test2": "determine_song_attributes('Stairway to Heaven', 'rock')", "test3": "determine_song_attributes('Moonlight Sonata', 'classical')", "test4": "determine_song_attributes('Uptown Funk', 'funk')", "test5": "determine_song_attributes('Yesterday', 'acoustic')", "test6": "determine_song_attributes('Viva la Vida', 'rock')", "test7": "determine_song_attributes('Clair de Lune', 'classical')", "test8": "determine_song_attributes('I Will Always Love You', 'ballad')", "test9": "determine_song_attributes('Smells Like Teen Spirit', 'grunge')", "test10": "determine_song_attributes('The Final Countdown', 'rock')"}, "hidden_information": "def determine_song_attributes(song_title, genre):\n    song_attributes = {\n        'rock': {'rhythm': 'strong', 'tempo': 'fast'},\n        'pop': {'rhythm': 'upbeat', 'tempo': 'moderate'},\n        'jazz': {'rhythm': 'complex', 'tempo': 'fast'},\n        'classical': {'rhythm': 'soothing', 'tempo': 'slow'}\n    }\n    return song_attributes.get(genre.lower(), {'rhythm': 'unknown', 'tempo': 'unknown'})"}
{"ground_truth": "def get_wolf_population_status(regions, wolf_populations, sustainability_threshold):\n    result = {}\n    for region, population in zip(regions, wolf_populations):\n        if population > sustainability_threshold:\n            result[region] = 'self-sustaining'\n        elif population > 0:\n            result[region] = 'recovering'\n        else:\n            result[region] = 'extinct'\n    return result", "problem_description": "I need a python function to determine the status of wolf populations in different regions, such as 'self-sustaining', 'recovering', or 'extinct'. The function should take in a list of regions and a list of wolf populations, and return a dictionary where each region is mapped to its corresponding status.The signature of the function is: def get_wolf_population_status(regions, wolf_populations, sustainability_threshold)", "test_cases": {"test1": "get_wolf_population_status(['Michigan', 'Minnesota', 'Wisconsin'], [687, 3000, 782], 500)", "test2": "get_wolf_population_status(['Idaho', 'Montana', 'Wyoming'], [750, 500, 200], 500)", "test3": "get_wolf_population_status(['New York', 'Pennsylvania', 'Ohio'], [0, 100, 50], 500)", "test4": "get_wolf_population_status(['Michigan', 'Minnesota', 'Wisconsin'], [687, 3000, 782], 1000)", "test5": "get_wolf_population_status(['Idaho', 'Montana', 'Wyoming'], [750, 500, 200], 750)", "test6": "get_wolf_population_status(['New York', 'Pennsylvania', 'Ohio'], [0, 100, 50], 25)", "test7": "get_wolf_population_status(['Michigan', 'Minnesota', 'Wisconsin'], [687, 3000, 782], 1)", "test8": "get_wolf_population_status(['Idaho', 'Montana', 'Wyoming'], [750, 500, 200], 999)", "test9": "get_wolf_population_status(['New York', 'Pennsylvania', 'Ohio'], [0, 100, 50], 99)", "test10": "get_wolf_population_status(['Michigan', 'Minnesota', 'Wisconsin'], [687, 3000, 782], 500000)"}, "hidden_information": "def get_wolf_population_status(regions, wolf_populations, sustainability_threshold):\n    result = {}\n    for region, population in zip(regions, wolf_populations):\n        if population > sustainability_threshold:\n            result[region] = 'self-sustaining'\n        elif population > 0:\n            result[region] = 'recovering'\n        else:\n            result[region] = 'extinct'\n    return result"}
{"ground_truth": "def calculate_average_test_scores(tv_exposure_years, english_primary_language, mother_education, ethnicity):\n    if tv_exposure_years > 0:\n        if english_primary_language:\n            return 0.02 * tv_exposure_years\n        elif mother_education == 'less_than_high_school':\n            return 0.035 * tv_exposure_years\n        elif not english_primary_language or mother_education == 'less_than_high_school' or ethnicity == 'non_white':\n            return 0.04 * tv_exposure_years\n    return 0\n", "problem_description": "I want you to write a Python function that calculates the average test scores based on preschool television exposure, similar to the study mentioned in the National Bureau of Economic Research paper.The signature of the function is: def calculate_average_test_scores(tv_exposure_years, english_primary_language, mother_education, ethnicity)", "test_cases": {"test1": "calculate_average_test_scores(1, True, 'high_school', 'white')", "test2": "calculate_average_test_scores(2, False, 'less_than_high_school', 'non_white')", "test3": "calculate_average_test_scores(3, True, 'more_than_high_school', 'white')", "test4": "calculate_average_test_scores(0, False, 'less_than_high_school', 'non_white')", "test5": "calculate_average_test_scores(4, True, 'high_school', 'non_white')", "test6": "calculate_average_test_scores(5, False, 'more_than_high_school', 'white')", "test7": "calculate_average_test_scores(1, False, 'less_than_high_school', 'white')", "test8": "calculate_average_test_scores(2, True, 'high_school', 'non_white')", "test9": "calculate_average_test_scores(3, False, 'more_than_high_school', 'non_white')", "test10": "calculate_average_test_scores(0, True, 'less_than_high_school', 'white')"}, "hidden_information": "def calculate_average_test_scores(tv_exposure_years, english_primary_language, mother_education, ethnicity):\n    if tv_exposure_years > 0:\n        if english_primary_language:\n            return 0.02 * tv_exposure_years\n        elif mother_education == 'less_than_high_school':\n            return 0.035 * tv_exposure_years\n        elif not english_primary_language or mother_education == 'less_than_high_school' or ethnicity == 'non_white':\n            return 0.04 * tv_exposure_years\n    return 0\n"}
{"ground_truth": "def calculate_circulation(papers): \n    total_circulation = 0\n    for paper in papers:\n        total_circulation += paper['circulation']\n    if total_circulation >= papers[0]['target']:\n        return True, total_circulation\n    else:\n        return False, total_circulation", "problem_description": "Hi LLM agent, I am trying to analyze the circulation data of our newspaper company. Can you write a Python function that takes in a list of dictionaries containing the circulation data for each newspaper and determines if the total daily circulation meets the target? I want the function to return a boolean indicating if the target is met and the total circulation. But, I'm not sure how I should structure the input data.The signature of the function is: def calculate_circulation(papers)", "test_cases": {"test1": "calculate_circulation([{'name': 'New York Times', 'circulation': 200000, 'target': 300000}, {'name': 'Los Angeles Times', 'circulation': 150000, 'target': 300000}])", "test2": "calculate_circulation([{'name': 'Chicago Tribune', 'circulation': 300000, 'target': 300000}, {'name': 'Houston Chronicle', 'circulation': 250000, 'target': 300000}])", "test3": "calculate_circulation([{'name': 'The Wall Street Journal', 'circulation': 100000, 'target': 200000}, {'name': 'The Washington Post', 'circulation': 150000, 'target': 200000}])", "test4": "calculate_circulation([{'name': 'USA Today', 'circulation': 250000, 'target': 250000}, {'name': 'The New York Post', 'circulation': 200000, 'target': 250000}])", "test5": "calculate_circulation([{'name': 'The Los Angeles Sentinel', 'circulation': 50000, 'target': 100000}, {'name': 'The Chicago Reader', 'circulation': 75000, 'target': 100000}])", "test6": "calculate_circulation([{'name': 'The New York Daily News', 'circulation': 300000, 'target': 300000}])", "test7": "calculate_circulation([{'name': 'The Denver Post', 'circulation': 250000, 'target': 300000}, {'name': 'The Rocky Mountain News', 'circulation': 200000, 'target': 300000}])", "test8": "calculate_circulation([{'name': 'The Boston Globe', 'circulation': 200000, 'target': 250000}, {'name': 'The Boston Herald', 'circulation': 150000, 'target': 250000}])", "test9": "calculate_circulation([{'name': 'The Dallas Morning News', 'circulation': 300000, 'target': 300000}, {'name': 'The Fort Worth Star-Telegram', 'circulation': 250000, 'target': 300000}])", "test10": "calculate_circulation([{'name': 'The Baltimore Sun', 'circulation': 200000, 'target': 250000}, {'name': 'The Baltimore Examiner', 'circulation': 150000, 'target': 250000}, {'name': 'The Washington Times', 'circulation': 100000, 'target': 250000}])"}, "hidden_information": "def calculate_circulation(papers): \n    total_circulation = 0\n    for paper in papers:\n        total_circulation += paper['circulation']\n    if total_circulation >= papers[0]['target']:\n        return True, total_circulation\n    else:\n        return False, total_circulation"}
{"ground_truth": "def format_latex_poster(margins, font_sizes, image_scales, title, authors, sections):\n    latex_code = f\"\\\\documentclass{{poster}}\\n\\\\usepackage[margin={margins}]{{geometry}}\\n\\\\begin{{document}}\\n\"\n    for font in font_sizes:\n        latex_code += f\"\\\\fontsize{{{font}}}\\n\"\n    for image in image_scales:\n        latex_code += f\"\\\\includegraphics[scale={image}]{{image}}\\n\"\n    latex_code += f\"\\\\title{{{title}}}\\n\\\\author{{{ authors}}}\\n\"\n    for section in sections:\n        latex_code += f\"\\\\section{{{section}}}\\n\"\n    latex_code += \"\\end{document}\"\n    return latex_code", "problem_description": "Hey, I need your help writing a Python function to format a LaTeX document for a poster presentation. The function should take in the margins, font sizes, image scales, title, authors, and sections of the poster as inputs. Can you make sure the function adjusts the margins, font sizes, and image scales accordingly and generates the LaTeX code for the poster?The signature of the function is: def format_latex_poster(margins, font_sizes, image_scales, title, authors, sections)", "test_cases": {"test1": "format_latex_poster([1, 1, 1, 1], [12, 14, 16], [0.5, 1, 1.5], 'Poster Title', ['Author 1', 'Author 2'], ['Introduction', 'Methods', 'Results'])", "test2": "format_latex_poster([0.5, 0.5, 0.5, 0.5], [10, 12, 14], [0.2, 0.5, 0.8], 'Another Poster', ['Author 3', 'Author 4'], ['Discussion', 'Conclusion'])", "test3": "format_latex_poster([1, 1, 1, 1], [12, 12, 12], [1, 1, 1], 'Poster 3', ['Author 5'], ['Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion'])", "test4": "format_latex_poster([0.1, 0.1, 0.1, 0.1], [10, 10, 10], [0.1, 0.1, 0.1], 'Poster 4', ['Author 6', 'Author 7'], ['Introduction', 'Methods'])", "test5": "format_latex_poster([1, 1, 1, 1], [18, 18, 18], [2, 2, 2], 'Poster 5', ['Author 8'], ['Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion'])", "test6": "format_latex_poster([0.5, 0.5, 0.5, 0.5], [12, 14, 16], [0.5, 1, 1.5], 'Poster 6', ['Author 9', 'Author 10'], ['Introduction', 'Methods', 'Results'])", "test7": "format_latex_poster([0.1, 0.1, 0.1, 0.1], [10, 12, 14], [0.2, 0.5, 0.8], 'Poster 7', ['Author 11'], ['Discussion', 'Conclusion'])", "test8": "format_latex_poster([1, 1, 1, 1], [12, 12, 12], [1, 1, 1], 'Poster 8', ['Author 12', 'Author 13'], ['Introduction', 'Methods', 'Results', 'Discussion', 'Conclusion'])", "test9": "format_latex_poster([0.5, 0.5, 0.5, 0.5], [10, 10, 10], [0.1, 0.1, 0.1], 'Poster 9', ['Author 14'], ['Introduction', 'Methods', 'Results'])", "test10": "format_latex_poster([0.1, 0.1, 0.1, 0.1], [18, 18, 18], [2, 2, 2], 'Poster 10', ['Author 15', 'Author 16'], ['Discussion', 'Conclusion'])"}, "hidden_information": "def format_latex_poster(margins, font_sizes, image_scales, title, authors, sections):\n    latex_code = f\"\\\\documentclass{{poster}}\\n\\\\usepackage[margin={margins}]{{geometry}}\\n\\\\begin{{document}}\\n\"\n    for font in font_sizes:\n        latex_code += f\"\\\\fontsize{{{font}}}\\n\"\n    for image in image_scales:\n        latex_code += f\"\\\\includegraphics[scale={image}]{{image}}\\n\"\n    latex_code += f\"\\\\title{{{title}}}\\n\\\\author{{{ authors}}}\\n\"\n    for section in sections:\n        latex_code += f\"\\\\section{{{section}}}\\n\"\n    latex_code += \"\\end{document}\"\n    return latex_code"}
{"ground_truth": "def get_best_player_pick(available_players, existing_players, preferred_position):\n    best_player = None\n    max_score = 0\n    for player in available_players:\n        score = 0\n        if player['position'] == preferred_position:\n            score += 10\n        if player['height'] > 6.5:\n            score += 5\n        if player['weight'] > 180:\n            score += 3\n        for existing_player in existing_players:\n            if player['position'] != existing_player['position']:\n                score += 2\n        if score > max_score:\n            max_score = score\n            best_player = player\n    return best_player", "problem_description": "Can you write a Python function to help an NBA team's management pick the best player from a list of available players, considering their height, weight, position, and the team's existing players?The signature of the function is: def get_best_player_pick(available_players, existing_players, preferred_position)", "test_cases": {"test1": "get_best_player_pick([{'name': 'Gerald Green', 'height': 6.7, 'weight': 192, 'position': 'Forward'}, {'name': 'Raymond Felton', 'height': 6.3, 'weight': 205, 'position': 'Guard'}], [{'name': 'Chris Bosh', 'height': 6.9, 'weight': 210, 'position': 'Forward'}], 'Forward')", "test2": "get_best_player_pick([{'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}, {'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}], [{'name': 'Tracy McGrady', 'height': 6.8, 'weight': 210, 'position': 'Guard'}], 'Center')", "test3": "get_best_player_pick([{'name': 'Raymond Felton', 'height': 6.3, 'weight': 205, 'position': 'Guard'}, {'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}], [{'name': 'Gerald Green', 'height': 6.7, 'weight': 192, 'position': 'Forward'}], 'Guard')", "test4": "get_best_player_pick([{'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}, {'name': 'Tracy McGrady', 'height': 6.8, 'weight': 210, 'position': 'Guard'}], [{'name': 'Chris Bosh', 'height': 6.9, 'weight': 210, 'position': 'Forward'}], 'Center')", "test5": "get_best_player_pick([{'name': 'Gerald Green', 'height': 6.7, 'weight': 192, 'position': 'Forward'}, {'name': 'Raymond Felton', 'height': 6.3, 'weight': 205, 'position': 'Guard'}], [{'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}], 'Forward')", "test6": "get_best_player_pick([{'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}, {'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}], [{'name': 'Tracy McGrady', 'height': 6.8, 'weight': 210, 'position': 'Guard'}, {'name': 'Chris Bosh', 'height': 6.9, 'weight': 210, 'position': 'Forward'}], 'Center')", "test7": "get_best_player_pick([{'name': 'Raymond Felton', 'height': 6.3, 'weight': 205, 'position': 'Guard'}, {'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}], [{'name': 'Gerald Green', 'height': 6.7, 'weight': 192, 'position': 'Forward'}, {'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}], 'Guard')", "test8": "get_best_player_pick([{'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}, {'name': 'Tracy McGrady', 'height': 6.8, 'weight': 210, 'position': 'Guard'}], [{'name': 'Chris Bosh', 'height': 6.9, 'weight': 210, 'position': 'Forward'}], 'Guard')", "test9": "get_best_player_pick([{'name': 'Gerald Green', 'height': 6.7, 'weight': 192, 'position': 'Forward'}, {'name': 'Raymond Felton', 'height': 6.3, 'weight': 205, 'position': 'Guard'}], [{'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}], 'Center')", "test10": "get_best_player_pick([{'name': 'Fran Vazquez', 'height': 6.9, 'weight': 225, 'position': 'Center'}, {'name': 'Danny Granger', 'height': 6.8, 'weight': 235, 'position': 'Forward'}], [{'name': 'Tracy McGrady', 'height': 6.8, 'weight': 210, 'position': 'Guard'}], 'Forward')"}, "hidden_information": "def get_best_player_pick(available_players, existing_players, preferred_position):\n    best_player = None\n    max_score = 0\n    for player in available_players:\n        score = 0\n        if player['position'] == preferred_position:\n            score += 10\n        if player['height'] > 6.5:\n            score += 5\n        if player['weight'] > 180:\n            score += 3\n        for existing_player in existing_players:\n            if player['position'] != existing_player['position']:\n                score += 2\n        if score > max_score:\n            max_score = score\n            best_player = player\n    return best_player"}
{"ground_truth": "def calculate_total_prison_time(charges_and_sentences, num_charges):\n    total_time = 0\n    for i, charge_sentence in enumerate(charges_and_sentences):\n        total_time += num_charges[i] * charge_sentence\n    return total_time", "problem_description": "Hey agent, I'm trying to calculate the total possible prison time for a hacker who has committed multiple crimes. Can you write a Python function to do this? The function should take into account the different types of charges and their corresponding sentences.The signature of the function is: def calculate_total_prison_time(charges_and_sentences, num_charges)", "test_cases": {"test1": "calculate_total_prison_time([10, 20, 30], [2, 3, 1])", "test2": "calculate_total_prison_time([5, 10, 15], [1, 1, 1])", "test3": "calculate_total_prison_time([2, 5, 10], [5, 3, 2])", "test4": "calculate_total_prison_time([10, 50], [1, 2])", "test5": "calculate_total_prison_time([50], [1])", "test6": "calculate_total_prison_time([2, 5, 10, 20], [2, 3, 1, 1])", "test7": "calculate_total_prison_time([1, 2, 3], [1, 2, 3])", "test8": "calculate_total_prison_time([15, 30], [2, 1])", "test9": "calculate_total_prison_time([10, 5, 2], [1, 2, 3])", "test10": "calculate_total_prison_time([50, 10, 20, 30, 40], [1, 1, 1, 1, 1])"}, "hidden_information": "def calculate_total_prison_time(charges_and_sentences, num_charges):\n    total_time = 0\n    for i, charge_sentence in enumerate(charges_and_sentences):\n        total_time += num_charges[i] * charge_sentence\n    return total_time"}
{"ground_truth": "def is_production_ready(language_stats, release_threshold=1000, stability_threshold=0.9):\n    if len(language_stats) < release_threshold or sum(1 for stat in language_stats if stat[1] >= stability_threshold) / len(language_stats) < 0.9:\n        return False\n    return True", "problem_description": "I want a function that determines if a programming language is 'production ready'. The function should consider several factors such as the number of releases, stability, and other relevant information. I'm not sure what the exact thresholds should be, but I want the function to be flexible enough to allow for different inputs.The signature of the function is: def is_production_ready(language_stats, release_threshold=1000, stability_threshold=0.9)", "test_cases": {"test1": "is_production_ready([('release1', 0.8), ('release2', 0.9), ('release3', 0.95)], 3, 0.9)", "test2": "is_production_ready([('release1', 0.7), ('release2', 0.8), ('release3', 0.85)], 3, 0.9)", "test3": "is_production_ready([('release1', 0.9), ('release2', 0.95), ('release3', 0.99)], 2, 0.8)", "test4": "is_production_ready([('release1', 0.6), ('release2', 0.7), ('release3', 0.8)], 3, 0.9)", "test5": "is_production_ready([('release1', 0.9), ('release2', 0.95), ('release3', 0.99)], 4, 0.8)", "test6": "is_production_ready([('release1', 0.8), ('release2', 0.85), ('release3', 0.9)], 2, 0.85)", "test7": "is_production_ready([('release1', 0.7), ('release2', 0.8), ('release3', 0.85)], 4, 0.85)", "test8": "is_production_ready([('release1', 0.9), ('release2', 0.95), ('release3', 0.99)], 1, 0.8)", "test9": "is_production_ready([('release1', 0.6), ('release2', 0.7), ('release3', 0.8)], 2, 0.8)", "test10": "is_production_ready([('release1', 0.8), ('release2', 0.85), ('release3', 0.9)], 4, 0.9)"}, "hidden_information": "def is_production_ready(language_stats, release_threshold=1000, stability_threshold=0.9):\n    if len(language_stats) < release_threshold or sum(1 for stat in language_stats if stat[1] >= stability_threshold) / len(language_stats) < 0.9:\n        return False\n    return True"}
{"ground_truth": "def calculate_discounted_price(original_price, discount_percentage, quantity=1):\n    if original_price < 0 or discount_percentage < 0:\n        return \"Price and discount cannot be negative.\"\n    discounted_price = round(original_price * (1 - discount_percentage / 100), 2)\n    return round(discounted_price * quantity, 2)", "problem_description": "I want the agent to write a python function that can calculate the final discounted price of items after a sale. Suppose I am a shop owner, I want to know how much I should charge customers after applying a discount. I have the original price of the item and the discount percentage. Can the agent help me create the function?The signature of the function is: def calculate_discounted_price(original_price, discount_percentage, quantity=1)", "test_cases": {"test1": "calculate_discounted_price(75.00, 29, 1)", "test2": "calculate_discounted_price(100.0, 15, 2)", "test3": "calculate_discounted_price(50.0, 20, 1)", "test4": "calculate_discounted_price(25.0, 10, 1)", "test5": "calculate_discounted_price(1000.0, 50, 1)", "test6": "calculate_discounted_price(52.95, 0, 1)", "test7": "calculate_discounted_price(75.0, 29)", "test8": "calculate_discounted_price(-75.0, 29)", "test9": "calculate_discounted_price(75.0, -29)", "test10": "calculate_discounted_price(75.0, 29, -1)"}, "hidden_information": "def calculate_discounted_price(original_price, discount_percentage, quantity=1):\n    if original_price < 0 or discount_percentage < 0:\n        return \"Price and discount cannot be negative.\"\n    discounted_price = round(original_price * (1 - discount_percentage / 100), 2)\n    return round(discounted_price * quantity, 2)"}
{"ground_truth": "def calculate_light_settings(tank_size, lightFixture, plant_type, desired_plant_growth):\n    tank_size = float(tank_size)\n    if tank_size <= 20:\n        if lightFixture == 'Kessil':\n            return 'Low tech is hard, consider investing in a CO2 setup and use the gooseneck fixture carefully'\n        else:\n            return f'Light duration: 8 hours for low tech, 10 hours for medium, CO2 may be required for high growth'\n    else:\n        if plant_type == 'high requirement':\n            return 'Use CO2, high light duration required'\n        else:\n            return f'Low to medium light duration required, consider high tech for {desired_plant_growth} growth'", "problem_description": "I need a python function that calculates the optimal light settings for my planted tank based on tank size, light fixture, plant type, and desired plant growth rate to avoid algae growth. The function should consider the case where I have a Kessil light fixture and may need a CO2 setup.The signature of the function is: def calculate_light_settings(tank_size, lightFixture, plant_type, desired_plant_growth)", "test_cases": {"test1": "calculate_light_settings(15, 'Kessil', 'low', 'low')", "test2": "calculate_light_settings(30, 'Kessil', 'high', 'high')", "test3": "calculate_light_settings(25, 'basic', 'medium', 'low')", "test4": "calculate_light_settings(18, 'Kessil', 'low', 'high')", "test5": "calculate_light_settings(20, 'CO2_enabled', 'low', 'medium')", "test6": "calculate_light_settings(12, 'gooseneck', 'medium', 'low')", "test7": "calculate_light_settings(35, 'high_end', 'high', 'medium')", "test8": "calculate_light_settings(10, 'basic', 'high', 'medium')", "test9": "calculate_light_settings(22, 'low_light', 'low', 'low')", "test10": "calculate_light_settings(28, 'led', 'high', 'high')"}, "hidden_information": "def calculate_light_settings(tank_size, lightFixture, plant_type, desired_plant_growth):\n    tank_size = float(tank_size)\n    if tank_size <= 20:\n        if lightFixture == 'Kessil':\n            return 'Low tech is hard, consider investing in a CO2 setup and use the gooseneck fixture carefully'\n        else:\n            return f'Light duration: 8 hours for low tech, 10 hours for medium, CO2 may be required for high growth'\n    else:\n        if plant_type == 'high requirement':\n            return 'Use CO2, high light duration required'\n        else:\n            return f'Low to medium light duration required, consider high tech for {desired_plant_growth} growth'"}
{"ground_truth": "def determine_funding(proposal_details, budget, speaker_fees, event_type, student_organization, sponsors):\n  if event_type in ['colloquia', 'research'] and 'peace' in proposal_details['theme'].lower() and 'justice' in proposal_details['theme'].lower() and float(budget['total_cost']) > 1000 and speaker_fees in ['moderate', 'high'] and 'Princeton' in student_organization:\n    if len(sponsors) > 1 and any(sponsor.startswith('Princeton') for sponsor in sponsors):\n      return 500\n    else:\n      return 250\n  else:\n    return 0", "problem_description": "Can you write a python function that determines funding allocation for a Princeton University student organization's event based on the event's proposal details? The agent needs to determine the rules to decide the allocation.The signature of the function is: def determine_funding(proposal_details, budget, speaker_fees, event_type, student_organization, sponsors)", "test_cases": {"test1": "determine_funding({'theme': 'Peace and Justice in the Modern World'}, {'total_cost': 1500.0}, 'high', 'research', 'Princeton Student Union', ['Princeton University', 'Bobst Center'])", "test2": "determine_funding({'theme': 'Climate Change'}, {'total_cost': 800.0}, 'moderate', 'lecture', 'Graduate Student Council', ['GreenPeace', 'Princeton University'])", "test3": "determine_funding({'theme': 'Inequality and Justice'}, {'total_cost': 2000.0}, 'moderate', 'colloquia', 'Princeton Student Union', ['Bobst Center', 'Princeton University'])", "test4": "determine_funding({'theme': 'Peace and Love'}, {'total_cost': 1500.0}, 'low', 'concert', 'Student Organization', ['Random Sponsor', 'Local Business'])", "test5": "determine_funding({'theme': 'Justice for All'}, {'total_cost': 2500.0}, 'high', 'panel discussion', 'Princeton Graduate Students', ['Bobst Center'])", "test6": "determine_funding({'theme': 'Justice'}, {'total_cost': 2000.0}, 'high', 'seminar', 'PUGrad Students', ['Princeton University', 'Outside Sponsor'])", "test7": "determine_funding({'theme': 'World Peace'}, {'total_cost': 3000.0}, 'high', 'symposium', 'PGS', ['Princeton University', 'Internal Sponsor'])", "test8": "determine_funding({'theme': 'No Justice'}, {'total_cost': 1200.0}, 'high', 'movies', 'Student Group', ['Princeton University'])", "test9": "determine_funding({'theme': 'Justince for Economy'}, {'total_cost': 1800.0}, 'moderate', 'radio show', 'PU Communication', ['Bobst Center', 'Other University'])", "test10": "determine_funding({'theme': 'No War'}, {'total_cost': 3500.0}, 'moderate', 'reading', 'Princeton News', ['Princeton University', 'Bobst Center', 'University Grant'])"}, "hidden_information": "def determine_funding(proposal_details, budget, speaker_fees, event_type, student_organization, sponsors):\n  if event_type in ['colloquia', 'research'] and 'peace' in proposal_details['theme'].lower() and 'justice' in proposal_details['theme'].lower() and float(budget['total_cost']) > 1000 and speaker_fees in ['moderate', 'high'] and 'Princeton' in student_organization:\n    if len(sponsors) > 1 and any(sponsor.startswith('Princeton') for sponsor in sponsors):\n      return 500\n    else:\n      return 250\n  else:\n    return 0"}
{"ground_truth": "def translate_text(text, language): return {'es': lambda text: 'Spanish - ' + text, 'fr': lambda text: 'French - ' + text, 'en': lambda text: text}.get(language, lambda text: 'Unsupported language')(text)", "problem_description": "I want a function that can take a piece of English text and translate it into other languages for me, like the ones they use in NYC government communications. I think it would be useful for communicating with residents who speak different languages. Can you write a Python function for me?The signature of the function is: def translate_text(text, language)", "test_cases": {"test1": "translate_text('Hello, how are you?', 'es')", "test2": "translate_text('Welcome to New York City.', 'fr')", "test3": "translate_text('I love this city.', 'en')", "test4": "translate_text('What is your name?', 'es')", "test5": "translate_text('Where is the nearest subway?', 'fr')", "test6": "translate_text('I am lost.', 'en')", "test7": "translate_text('Do you speak English?', 'es')", "test8": "translate_text('I need help.', 'fr')", "test9": "translate_text('What is the time?', 'en')", "test10": "translate_text('Is this a translation function?', 'de')"}, "hidden_information": "def translate_text(text, language): return {'es': lambda text: 'Spanish - ' + text, 'fr': lambda text: 'French - ' + text, 'en': lambda text: text}.get(language, lambda text: 'Unsupported language')(text)"}
{"ground_truth": "def validate_war_crimes_suspects(suspects, war_crimes_evidence): \n\t# Initialize a dictionary to store the level of involvement of each suspect\n\tinvolvement_level = {}\n\t\n\t# Iterate over the list of suspects and check if they exist in the war crimes evidence\n\tfor suspect in suspects:\n\t\tif suspect in war_crimes_evidence:\n\t\t\tinvolvement_level[suspect] = war_crimes_evidence[suspect]\n\n\treturn involvement_level", "problem_description": "Write a Python function to determine the level of involvement of suspects in war crimes. The function should take two parameters: a list of suspects and a dictionary of war crimes evidence with suspect names as keys and their involvement levels as values. The function should return a dictionary of suspects with their corresponding level of involvement.The signature of the function is: def validate_war_crimes_suspects(suspects, war_crimes_evidence)", "test_cases": {"test1": "validate_war_crimes_suspects(['John', 'Jane', 'Doe'], {'John': ' Majority of evidence against', 'Jane': 'Plausible evidence against'})", "test2": "validate_war_crimes_suspects(['Doe'], {'John': ' Majority of evidence against', 'Jane': 'Plausible evidence against'})", "test3": "validate_war_crimes_suspects(['Jim', 'Sarah'], {'Jim': 'Unsubstantiated accusations', 'Sarah': 'Strong evidence against'})", "test4": "validate_war_crimes_suspects([], {'Jim': 'Unsubstantiated accusations', 'Sarah': 'Strong evidence against'})", "test5": "validate_war_crimes_suspects(['John', 'Doe'], {})", "test6": "validate_war_crimes_suspects([], {})", "test7": "validate_war_crimes_suspects(['Jim', 'John'], {'Jim': 'Unsubstantiated accusations', 'John': ' Majority of evidence against'})", "test8": "validate_war_crimes_suspects(['Jane', 'Sarah'], {'Jim': 'Unsubstantiated accusations', 'John': ' Majority of evidence against'})", "test9": "validate_war_crimes_suspects(['Jim', 'Jane'], {'Jim': 'Unsubstantiated accusations'})", "test10": "validate_war_crimes_suspects(['Sarah'], {'Jim': 'Unsubstantiated accusations'})"}, "hidden_information": "def validate_war_crimes_suspects(suspects, war_crimes_evidence): \n\t# Initialize a dictionary to store the level of involvement of each suspect\n\tinvolvement_level = {}\n\t\n\t# Iterate over the list of suspects and check if they exist in the war crimes evidence\n\tfor suspect in suspects:\n\t\tif suspect in war_crimes_evidence:\n\t\t\tinvolvement_level[suspect] = war_crimes_evidence[suspect]\n\n\treturn involvement_level"}
{"ground_truth": "def calculate_compatibility(animal1, animal2, animal_ages, compatible_pairs):\n    if animal1['species'] == animal2['species']:\n        return animal_ages[animal1['species']] >= animal1['age'] and animal_ages[animal2['species']] >= animal2['age']\n    elif (animal1['species'], animal2['species']) in compatible_pairs or (animal2['species'], animal1['species']) in compatible_pairs:\n        return True\n    else:\n        return False", "problem_description": "I need you to write a python function that can determine whether two animals in a zoo are compatible to be in the same enclosure. The function needs to consider the animal's species and age, but there are also some special cases where animals from different species can be compatible. Can you please write the function based on the animal's characteristics?The signature of the function is: def calculate_compatibility(animal1, animal2, animal_ages, compatible_pairs)", "test_cases": {"test1": "calculate_compatibility({'name': 'Owen', 'species': 'hippo', 'age': 2}, {'name': 'Mzee', 'species': 'tortoise', 'age': 100}, {'hippo': 5, 'tortoise': 50}, [('tortoise', 'hippo')])", "test2": "calculate_compatibility({'name': 'Cleo', 'species': 'hippo', 'age': 3}, {'name': 'Owen', 'species': 'hippo', 'age': 2}, {'hippo': 5, 'tortoise': 50}, [('tortoise', 'hippo')])", "test3": "calculate_compatibility({'name': 'Mzee', 'species': 'tortoise', 'age': 100}, {'name': 'Lion', 'species': 'lion', 'age': 10}, {'hippo': 5, 'tortoise': 50}, [('tortoise', 'hippo')])", "test4": "calculate_compatibility({'name': 'Zebra', 'species': 'zebra', 'age': 5}, {'name': 'Giraffe', 'species': 'giraffe', 'age': 7}, {'zebra': 5, 'giraffe': 7}, [('zebra', 'giraffe')])", "test5": "calculate_compatibility({'name': 'Giraffe', 'species': 'giraffe', 'age': 8}, {'name': 'Zebra', 'species': 'zebra', 'age': 6}, {'zebra': 5, 'giraffe': 7}, [('zebra', 'giraffe')])", "test6": "calculate_compatibility({'name': 'Hippo', 'species': 'hippo', 'age': 1}, {'name': 'Tortoise', 'species': 'tortoise', 'age': 60}, {'hippo': 5, 'tortoise': 50}, [('tortoise', 'hippo')])", "test7": "calculate_compatibility({'name': 'Lion', 'species': 'lion', 'age': 6}, {'name': 'Tiger', 'species': 'tiger', 'age': 3}, {'lion': 5, 'tiger': 5}, [])", "test8": "calculate_compatibility({'name': 'Elephant', 'species': 'elephant', 'age': 20}, {'name': 'Monkey', 'species': 'monkey', 'age': 10}, {'elephant': 15, 'monkey': 10}, [('elephant', 'monkey')])", "test9": "calculate_compatibility({'name': 'Kangaroo', 'species': 'kangaroo', 'age': 5}, {'name': 'Koala', 'species': 'koala', 'age': 3}, {'kangaroo': 5, 'koala': 5}, [])", "test10": "calculate_compatibility({'name': 'Penguin', 'species': 'penguin', 'age': 4}, {'name': 'Seal', 'species': 'seal', 'age': 4}, {'penguin': 3, 'seal': 4}, [('penguin', 'seal')])"}, "hidden_information": "def calculate_compatibility(animal1, animal2, animal_ages, compatible_pairs):\n    if animal1['species'] == animal2['species']:\n        return animal_ages[animal1['species']] >= animal1['age'] and animal_ages[animal2['species']] >= animal2['age']\n    elif (animal1['species'], animal2['species']) in compatible_pairs or (animal2['species'], animal1['species']) in compatible_pairs:\n        return True\n    else:\n        return False"}
{"ground_truth": "def check_puzzle_fit(board_width, board_length, puzzle_width, puzzle_length): \n    if puzzle_width <= board_width and puzzle_length <= board_length:\n        return f\"Puzzle fits on the board\"\n    else:\n        return f\"Puzzle does not fit on the board. Board size needed: {max(puzzle_width, board_width)} by {max(puzzle_length, board_length)}\"", "problem_description": "Can you write a python function that helps determine if a jigsaw puzzle fits on a puzzle board given the dimensions of both?The signature of the function is: def check_puzzle_fit(board_width, board_length, puzzle_width, puzzle_length)", "test_cases": {"test1": "check_puzzle_fit(50, 50, 40, 40)", "test2": "check_puzzle_fit(30, 40, 40, 50)", "test3": "check_puzzle_fit(1000, 500, 800, 400)", "test4": "check_puzzle_fit(100, 100, 120, 80)", "test5": "check_puzzle_fit(500, 500, 450, 450)", "test6": "check_puzzle_fit(750, 1000, 800, 950)", "test7": "check_puzzle_fit(80, 60, 70, 50)", "test8": "check_puzzle_fit(200, 200, 180, 220)", "test9": "check_puzzle_fit(350, 450, 320, 420)", "test10": "check_puzzle_fit(60, 60, 65, 60)"}, "hidden_information": "def check_puzzle_fit(board_width, board_length, puzzle_width, puzzle_length): \n    if puzzle_width <= board_width and puzzle_length <= board_length:\n        return f\"Puzzle fits on the board\"\n    else:\n        return f\"Puzzle does not fit on the board. Board size needed: {max(puzzle_width, board_width)} by {max(puzzle_length, board_length)}\""}
{"ground_truth": "def average_farm_size(farm_acres): return sum(farm_acres) / len(farm_acres)", "problem_description": "I have an agriculture-related data set with lists of farm areas and I need a Python function to derive some statistics. Specifically, I need an average measurement. Can you write me a function to compute the average farm size for different historical crop-based farming lists.The signature of the function is: def average_farm_size(farm_acres)", "test_cases": {"test1": "average_farm_size([100, 1046, 200, 300, 250])", "test2": "average_farm_size([500, 750, 1200, 1100, 800, 2000])", "test3": "average_farm_size([400, 600, 550, 700, 450])", "test4": "average_farm_size([105, 205, 55, 60, 65])", "test5": "average_farm_size([5000, 4000, 3500, 1000])", "test6": "average_farm_size([80, 90, 75, 85])", "test7": "average_farm_size([140, 260, 60])", "test8": "average_farm_size([1055, 505, 100])", "test9": "average_farm_size([4000, 450, 800])", "test10": "average_farm_size([205, 405, 305, 455, 505, 305])"}, "hidden_information": "def average_farm_size(farm_acres): return sum(farm_acres) / len(farm_acres)"}
{"ground_truth": "def years_lived_in_location(arrival_year, departure_year, include_departure_year=False):\n    if arrival_year < departure_year:\n        if include_departure_year:\n            return departure_year - arrival_year + 1\n        else:\n            return departure_year - arrival_year\n    elif arrival_year == departure_year:\n        if include_departure_year:\n            return 1\n        else:\n            return 0\n    else:\n        return 0", "problem_description": "Can you write a python function that determines how many years someone has lived in a location given some years they have spent in that location? For example, it would be interesting to know how many years Lee Aldhouse has spent on the Phuket Island before he went back to England.The signature of the function is: def years_lived_in_location(arrival_year, departure_year, include_departure_year=False)", "test_cases": {"test1": "years_lived_in_location(2005, 2010, True)", "test2": "years_lived_in_location(2015, 2015, True)", "test3": "years_lived_in_location(2000, 2000, False)", "test4": "years_lived_in_location(1999, 2001, True)", "test5": "years_lived_in_location(2000, 2000, True)", "test6": "years_lived_in_location(2010, 2005, False)", "test7": "years_lived_in_location(2010, 2015, False)", "test8": "years_lived_in_location(1995, 1998, True)", "test9": "years_lived_in_location(1998, 2001, False)", "test10": "years_lived_in_location(2005, 2005, False)"}, "hidden_information": "def years_lived_in_location(arrival_year, departure_year, include_departure_year=False):\n    if arrival_year < departure_year:\n        if include_departure_year:\n            return departure_year - arrival_year + 1\n        else:\n            return departure_year - arrival_year\n    elif arrival_year == departure_year:\n        if include_departure_year:\n            return 1\n        else:\n            return 0\n    else:\n        return 0"}
{"ground_truth": "def identify_vulnerable_versions(version): return version < '0.8.7g'", "problem_description": "I want a python function that can take the version number of Cacti as input and determine if it is vulnerable to cross-site-scripting and HTML-injection vulnerabilities. Write me a function that can do this.The signature of the function is: def identify_vulnerable_versions(version)", "test_cases": {"test1": "identify_vulnerable_versions('0.8.6h')", "test2": "identify_vulnerable_versions('1.0.0')", "test3": "identify_vulnerable_versions('0.8.7g')", "test4": "identify_vulnerable_versions('0.6.7a')", "test5": "identify_vulnerable_versions('0.8.7f')", "test6": "identify_vulnerable_versions('0.9.0')", "test7": "identify_vulnerable_versions('0.7.3g')", "test8": "identify_vulnerable_versions('0.8.8g')", "test9": "identify_vulnerable_versions('0.5.1')", "test10": "identify_vulnerable_versions('0.8.7e')"}, "hidden_information": "def identify_vulnerable_versions(version): return version < '0.8.7g'"}
{"ground_truth": "def calculate_player_rankings(player_scores, player_names): \n    if not player_scores or not player_names: \n        return 'Error: Invalid input'\n    sorted_scores = sorted(enumerate(player_scores), key=lambda x: x[1], reverse=True)\n    rankings = {}\n    for i, (player, score) in enumerate(sorted_scores):\n        rankings[player_names[player]] = i + 1\n    return rankings", "problem_description": "Hey AI, I want you to write a python function that can calculate player rankings based on some scores I have. I'm not sure what format the scores are in or how to match them with player names, can you figure it out?The signature of the function is: def calculate_player_rankings(player_scores, player_names)", "test_cases": {"test1": "calculate_player_rankings([100, 80, 90], ['Player1', 'Player2', 'Player3'])", "test2": "calculate_player_rankings([10, 20, 30, 40], ['PlayerA', 'PlayerB', 'PlayerC', 'PlayerD'])", "test3": "calculate_player_rankings([], ['Player1', 'Player2'])", "test4": "calculate_player_rankings([50, 60, 70], ['PlayerX', 'PlayerY', 'PlayerZ'])", "test5": "calculate_player_rankings([1000, 500, 750], ['PlayerAlpha', 'PlayerBeta', 'PlayerGamma'])", "test6": "calculate_player_rankings([25, 50, 75, 100], ['Player1', 'Player2', 'Player3', 'Player4'])", "test7": "calculate_player_rankings([10, 10, 10], ['PlayerA', 'PlayerB', 'PlayerC'])", "test8": "calculate_player_rankings([5, 10, 15, 20, 25], ['PlayerI', 'PlayerII', 'PlayerIII', 'PlayerIV', 'PlayerV'])", "test9": "calculate_player_rankings([], [])", "test10": "calculate_player_rankings([100, 80, 90], ['Player1', 'Player2', 'Player3', 'Player4'])"}, "hidden_information": "def calculate_player_rankings(player_scores, player_names): \n    if not player_scores or not player_names: \n        return 'Error: Invalid input'\n    sorted_scores = sorted(enumerate(player_scores), key=lambda x: x[1], reverse=True)\n    rankings = {}\n    for i, (player, score) in enumerate(sorted_scores):\n        rankings[player_names[player]] = i + 1\n    return rankings"}
{"ground_truth": "def calculate_tint_job_cost(tint_brand, moleskin_install, side_windows, rear_window, front_window, leather_protection):\n    # Inserted comment for cost assumptions\n    base_cost = 100\n    brand_cost = {'cheap': 0, 'mid-range': 20, 'high-end': 50}.get(tint_brand, 20)\n    if moleskin_install:\n        base_cost += 30\n    if side_windows == 70 and rear_window == 50:\n        base_cost += 20\n    else:\n        base_cost += 15\n    if leather_protection:\n        base_cost += 10\n    if front_window == 50:\n        base_cost += 25\n    return base_cost + brand_cost", "problem_description": "I want you to write a python function to calculate the total cost of a window tint job. The cost depends on the brand and type of tint, whether or not to apply moleskin for streak-free installation, the percentages of tint for the side and rear windows, and whether leather protection is applied. The cost also depends on whether I decide to tint the front window and its percentage.The signature of the function is: def calculate_tint_job_cost(tint_brand, moleskin_install, side_windows, rear_window, front_window, leather_protection)", "test_cases": {"test1": "calculate_tint_job_cost('cheap', True, 70, 50, 50, True)", "test2": "calculate_tint_job_cost('mid-range', False, 70, 50, 0, False)", "test3": "calculate_tint_job_cost('high-end', True, 60, 40, 50, True)", "test4": "calculate_tint_job_cost('cheap', False, 50, 50, 0, False)", "test5": "calculate_tint_job_cost('mid-range', True, 70, 50, 50, True)", "test6": "calculate_tint_job_cost('high-end', False, 60, 40, 50, False)", "test7": "calculate_tint_job_cost('cheap', False, 50, 50, 50, True)", "test8": "calculate_tint_job_cost('mid-range', True, 70, 50, 0, True)", "test9": "calculate_tint_job_cost('high-end', True, 60, 40, 0, False)", "test10": "calculate_tint_job_cost('cheap', False, 70, 50, 50, False)"}, "hidden_information": "def calculate_tint_job_cost(tint_brand, moleskin_install, side_windows, rear_window, front_window, leather_protection):\n    # Inserted comment for cost assumptions\n    base_cost = 100\n    brand_cost = {'cheap': 0, 'mid-range': 20, 'high-end': 50}.get(tint_brand, 20)\n    if moleskin_install:\n        base_cost += 30\n    if side_windows == 70 and rear_window == 50:\n        base_cost += 20\n    else:\n        base_cost += 15\n    if leather_protection:\n        base_cost += 10\n    if front_window == 50:\n        base_cost += 25\n    return base_cost + brand_cost"}
{"ground_truth": "def calculate_active_players(total_players, expansion_sales, digital_upgrades):\n    if digital_upgrades == 0:\n        active_players = expansion_sales\n    else:\n        active_players = digital_upgrades + (expansion_sales - digital_upgrades)\n    return active_players, total_players - active_players", "problem_description": "Hi, I need your help with writing a python function to calculate the total number of active World of Warcraft players for the expansion 'The Wrath of the Lich King'. Given that there are 11.5 million players in total and the expansion has sold 4 million copies, I need you to derive a way to calculate the active users based on some assumptions about box and digital sales. The function should return the total active players and the number of players not active. But I am unsure if the 4 million number only includes the box sales or it is a combination of box and digital sales. Can you help me to write a python function to handle this problem?The signature of the function is: def calculate_active_players(total_players, expansion_sales, digital_upgrades)", "test_cases": {"test1": "calculate_active_players(11500000, 4000000, 700000)", "test2": "calculate_active_players(11500000, 4000000, 0)", "test3": "calculate_active_players(15500000, 5000000, 1000000)", "test4": "calculate_active_players(10000000, 3500000, 800000)", "test5": "calculate_active_players(11000000, 4000000, 500000)", "test6": "calculate_active_players(10500000, 4500000, 1200000)", "test7": "calculate_active_players(11500000, 4000000, 1000000)", "test8": "calculate_active_players(12500000, 5000000, 1500000)", "test9": "calculate_active_players(9000000, 3000000, 900000)", "test10": "calculate_active_players(12000000, 4000000, 600000)"}, "hidden_information": "def calculate_active_players(total_players, expansion_sales, digital_upgrades):\n    if digital_upgrades == 0:\n        active_players = expansion_sales\n    else:\n        active_players = digital_upgrades + (expansion_sales - digital_upgrades)\n    return active_players, total_players - active_players"}
{"ground_truth": "def calculate_security_liberty_index(war_crimes_prosecuted, torture_cases_exposed, national_security_budget, individual_liberties_protected):\n    # Assign weights to each metric\n    war_crime_weight = 0.3\n    torture_weight = 0.2\n    budget_weight = 0.2\n    liberties_weight = 0.3\n\n    # Calculate the index\n    security_liberty_index = (war_crimes_prosecuted * war_crime_weight +\n                            torture_cases_exposed * torture_weight -\n                            national_security_budget * budget_weight +\n                            individual_liberties_protected * liberties_weight) / 100\n    return security_liberty_index", "problem_description": "I want you to write a Python function that calculates a score indicating the balance between national security and individual liberties. The score should be based on several factors such as the number of war crimes prosecuted, the number of torture cases exposed, the national security budget, and the number of individual liberties protected. The function should take these factors as input and return a single score that represents the balance between national security and individual liberties.The signature of the function is: def calculate_security_liberty_index(war_crimes_prosecuted, torture_cases_exposed, national_security_budget, individual_liberties_protected)", "test_cases": {"test1": "calculate_security_liberty_index(10, 5, 1000000, 8)", "test2": "calculate_security_liberty_index(20, 10, 500000, 9)", "test3": "calculate_security_liberty_index(5, 2, 2000000, 7)", "test4": "calculate_security_liberty_index(15, 8, 1500000, 9)", "test5": "calculate_security_liberty_index(25, 12, 1200000, 10)", "test6": "calculate_security_liberty_index(8, 4, 1800000, 8)", "test7": "calculate_security_liberty_index(12, 6, 2200000, 9)", "test8": "calculate_security_liberty_index(18, 9, 2500000, 10)", "test9": "calculate_security_liberty_index(22, 11, 2800000, 11)", "test10": "calculate_security_liberty_index(20, 10, 3000000, 12)"}, "hidden_information": "def calculate_security_liberty_index(war_crimes_prosecuted, torture_cases_exposed, national_security_budget, individual_liberties_protected):\n    # Assign weights to each metric\n    war_crime_weight = 0.3\n    torture_weight = 0.2\n    budget_weight = 0.2\n    liberties_weight = 0.3\n\n    # Calculate the index\n    security_liberty_index = (war_crimes_prosecuted * war_crime_weight +\n                            torture_cases_exposed * torture_weight -\n                            national_security_budget * budget_weight +\n                            individual_liberties_protected * liberties_weight) / 100\n    return security_liberty_index"}
{"ground_truth": "def calculate_slashing_angle(dough_type, proofing_time, oven_temperature): \n    if dough_type == 'sourdough': \n        if proofing_time > 2: \n            return 45, 0.75 \n        else: \n            return 30, 0.5 \n    elif dough_type == 'yeast': \n        if oven_temperature > 425: \n            return 40, 0.6 \n        else: \n            return 35, 0.4 \n    else: \n        return 45, 0.75", "problem_description": "I want you to write a python function that can help me determine the perfect slashing angle and depth for my loaf of bread. I want to consider factors such as the type of dough, proofing time, and oven temperature.The signature of the function is: def calculate_slashing_angle(dough_type, proofing_time, oven_temperature)", "test_cases": {"test1": "calculate_slashing_angle('sourdough', 3, 450)", "test2": "calculate_slashing_angle('yeast', 1.5, 400)", "test3": "calculate_slashing_angle('sourdough', 1, 420)", "test4": "calculate_slashing_angle('yeast', 2.5, 430)", "test5": "calculate_slashing_angle('rye', 2, 410)", "test6": "calculate_slashing_angle('sourdough', 4, 465)", "test7": "calculate_slashing_angle('yeast', 1, 405)", "test8": "calculate_slashing_angle('brioche', 2.5, 420)", "test9": "calculate_slashing_angle('ciabatta', 1.5, 415)", "test10": "calculate_slashing_angle('focaccia', 3, 435)"}, "hidden_information": "def calculate_slashing_angle(dough_type, proofing_time, oven_temperature): \n    if dough_type == 'sourdough': \n        if proofing_time > 2: \n            return 45, 0.75 \n        else: \n            return 30, 0.5 \n    elif dough_type == 'yeast': \n        if oven_temperature > 425: \n            return 40, 0.6 \n        else: \n            return 35, 0.4 \n    else: \n        return 45, 0.75"}
{"ground_truth": "def calculate_lung_disease_risk(asbestos_exposure_level, age, years_of_exposure): \n    risk = (asbestos_exposure_level * years_of_exposure) / (100 * age) \n    return risk > 0.5", "problem_description": "Hi AI, I'd like you to write a Python function that can predict the risk of lung disease for people living near asbestos mines. Can you please write a function that takes into account the level of asbestos exposure and other relevant factors? I'm not sure what the exact parameters should be, can we discuss?The signature of the function is: def calculate_lung_disease_risk(asbestos_exposure_level, age, years_of_exposure)", "test_cases": {"test1": "calculate_lung_disease_risk(0.1, 30, 5)", "test2": "calculate_lung_disease_risk(0.2, 40, 10)", "test3": "calculate_lung_disease_risk(0.05, 25, 3)", "test4": "calculate_lung_disease_risk(0.3, 50, 15)", "test5": "calculate_lung_disease_risk(0.01, 20, 2)", "test6": "calculate_lung_disease_risk(0.15, 35, 8)", "test7": "calculate_lung_disease_risk(0.25, 45, 12)", "test8": "calculate_lung_disease_risk(0.06, 28, 4)", "test9": "calculate_lung_disease_risk(0.4, 55, 18)", "test10": "calculate_lung_disease_risk(0.02, 22, 1)"}, "hidden_information": "def calculate_lung_disease_risk(asbestos_exposure_level, age, years_of_exposure): \n    risk = (asbestos_exposure_level * years_of_exposure) / (100 * age) \n    return risk > 0.5"}
{"ground_truth": "def calculate_protest_bravery(protesters, average_age, days_protesting): return protesters * (average_age / 100) * (days_protesting / 100)", "problem_description": "Hey LLM, I need you to write a Python function that calculates the bravery of protesters based on some factors. I'm not really sure what factors to include, but I know it's something to do with the number of protesters, their age, and how long they've been protesting. Can you help me figure out what to do?The signature of the function is: def calculate_protest_bravery(protesters, average_age, days_protesting)", "test_cases": {"test1": "calculate_protest_bravery(10000, 25, 10)", "test2": "calculate_protest_bravery(5000, 30, 5)", "test3": "calculate_protest_bravery(20000, 20, 20)", "test4": "calculate_protest_bravery(1000, 40, 15)", "test5": "calculate_protest_bravery(30000, 25, 30)", "test6": "calculate_protest_bravery(50000, 35, 10)", "test7": "calculate_protest_bravery(40000, 20, 25)", "test8": "calculate_protest_bravery(20000, 45, 5)", "test9": "calculate_protest_bravery(30000, 30, 20)", "test10": "calculate_protest_bravery(10000, 40, 10)"}, "hidden_information": "def calculate_protest_bravery(protesters, average_age, days_protesting): return protesters * (average_age / 100) * (days_protesting / 100)"}
{"ground_truth": "def categorize_olympics_countries(countries, medals, naughty_behavior_threshold): \n    categorized_countries = {}\n    for country, medal_count in zip(countries, medals):\n        if medal_count >= naughty_behavior_threshold:\n            categorized_countries[country] = 'Naughty Korea'\n        else:\n            categorized_countries[country] = 'Nice Korea'\n    return categorized_countries", "problem_description": "Can you write a Python function that categorizes countries into 'Naughty Korea' or 'Nice Korea' based on their Olympics performance? The agent needs to ask me what specific criteria determine a country's behavior to provide an accurate answer.The signature of the function is: def categorize_olympics_countries(countries, medals, naughty_behavior_threshold)", "test_cases": {"test1": "categorize_olympics_countries(['North Korea', 'South Korea'], [20, 10], 15)", "test2": "categorize_olympics_countries(['USA', 'China'], [30, 5], 10)", "test3": "categorize_olympics_countries(['Japan', 'Germany'], [8, 25], 20)", "test4": "categorize_olympics_countries(['Australia', 'Russia'], [12, 18], 15)", "test5": "categorize_olympics_countries(['France', 'Italy'], [22, 6], 12)", "test6": "categorize_olympics_countries(['Spain', 'Britain'], [9, 21], 18)", "test7": "categorize_olympics_countries(['Canada', 'Brazil'], [15, 11], 14)", "test8": "categorize_olympics_countries(['India', 'Mexico'], [7, 24], 16)", "test9": "categorize_olympics_countries(['South Africa', 'Argentina'], [19, 4], 10)", "test10": "categorize_olympics_countries(['China', 'USA'], [35, 20], 28)"}, "hidden_information": "def categorize_olympics_countries(countries, medals, naughty_behavior_threshold): \n    categorized_countries = {}\n    for country, medal_count in zip(countries, medals):\n        if medal_count >= naughty_behavior_threshold:\n            categorized_countries[country] = 'Naughty Korea'\n        else:\n            categorized_countries[country] = 'Nice Korea'\n    return categorized_countries"}
{"ground_truth": "def calculate_nightly_rate(hotel_name, stay_dates, num_nights, room_type): \n  nightly_rates = {\n    'Aman, Montenegro': 1000,\n    'Amirandes Hotel, Crete': 300,\n    'Hotel Tel More, Dubrovnik, Croatia': 165,\n    'Demeure Loredana, Corsica': 400,\n    'Falconara Charming Resort, Sicily': 100\n  }\n\n  if hotel_name in nightly_rates:\n    return nightly_rates[hotel_name] * num_nights \n  else: \n    return 'Hotel not found'", "problem_description": "I want to write a function to calculate the total cost of staying in a hotel for certain number of nights, but I'm not sure how to calculate the nightly rate from the hotel name. Can you please help me interactively to write this function?The signature of the function is: def calculate_nightly_rate(hotel_name, stay_dates, num_nights, room_type)", "test_cases": {"test1": "calculate_nightly_rate('Aman, Montenegro', ['2024-01-01', '2024-01-02'], 2, 'Standard')", "test2": "calculate_nightly_rate('Amirandes Hotel, Crete', ['2024-05-20', '2024-06-01'], 12, 'Suite')", "test3": "calculate_nightly_rate('Hotel Tel More, Dubrovnik, Croatia', ['2024-03-01', '2024-03-05'], 4, 'Single')", "test4": "calculate_nightly_rate('Demeure Loredana, Corsica', ['2024-09-15', '2024-09-25'], 10, 'Double')", "test5": "calculate_nightly_rate('Falconara Charming Resort, Sicily', ['2024-07-01', '2024-07-10'], 9, 'Family')", "test6": "calculate_nightly_rate('Non-existent Hotel', ['2024-01-01', '2024-01-02'], 2, 'Standard')", "test7": "calculate_nightly_rate('Aman, Montenegro', ['2024-01-01', '2024-01-02'], 10, 'Suite')", "test8": "calculate_nightly_rate('Amirandes Hotel, Crete', ['2024-05-20', '2024-05-20'], 1, 'Single')", "test9": "calculate_nightly_rate('Hotel Tel More, Dubrovnik, Croatia', ['2024-03-01', '2024-03-30'], 30, 'Double')", "test10": "calculate_nightly_rate('Demeure Loredana, Corsica', ['2024-09-15', '2024-09-15'], 1, 'Standard')"}, "hidden_information": "def calculate_nightly_rate(hotel_name, stay_dates, num_nights, room_type): \n  nightly_rates = {\n    'Aman, Montenegro': 1000,\n    'Amirandes Hotel, Crete': 300,\n    'Hotel Tel More, Dubrovnik, Croatia': 165,\n    'Demeure Loredana, Corsica': 400,\n    'Falconara Charming Resort, Sicily': 100\n  }\n\n  if hotel_name in nightly_rates:\n    return nightly_rates[hotel_name] * num_nights \n  else: \n    return 'Hotel not found'"}
{"ground_truth": "def calculate_civilian_casualties(airstrikes, population_density_per_sqkm, area_sqkm, destruction_ratio):\n    return round(airstrikes * population_density_per_sqkm * area_sqkm * destruction_ratio)", "problem_description": "Can you write a python function to calculate the number of civilian casualties in an area? The human provides the total number of airstrikes, the population in the area, and the approximate square kilometers of the affected area.The signature of the function is: def calculate_civilian_casualties(airstrikes, population_density_per_sqkm, area_sqkm, destruction_ratio)", "test_cases": {"test1": "calculate_civilian_casualties(10, 500, 2.5, 0.08)", "test2": "calculate_civilian_casualties(25, 2000, 1.8, 0.078)", "test3": "calculate_civilian_casualties(50, 1000, 4.2, 0.076)", "test4": "calculate_civilian_casualties(5, 300, 1.2, 0.072)", "test5": "calculate_civilian_casualties(15, 1800, 3.1, 0.074)", "test6": "calculate_civilian_casualties(30, 900, 2.9, 0.075)", "test7": "calculate_civilian_casualties(45, 2500, 1.6, 0.079)", "test8": "calculate_civilian_casualties(20, 400, 4.5, 0.07)", "test9": "calculate_civilian_casualties(40, 2200, 2.3, 0.077)", "test10": "calculate_civilian_casualties(35, 2800, 3.8, 0.071)"}, "hidden_information": "def calculate_civilian_casualties(airstrikes, population_density_per_sqkm, area_sqkm, destruction_ratio):\n    return round(airstrikes * population_density_per_sqkm * area_sqkm * destruction_ratio)"}
{"ground_truth": "def analyze_video_timestamp(video_start_time, impact_time, fatal_injuries, movement_time, movement_lasted): \n  # Calculate time difference between video start and impact\n  time_diff = abs(video_start_time - impact_time) \n  if time_diff > 0: \n    # If there's a time difference, check if the movement time fits within the possible survival time based on fatal injuries\n    if fatal_injuries == 'thermal and traumatic' and time_diff >= 23: \n      return 'Impossible for Paul to have been moving' \n    else: \n      return 'Movement is uncertain' \n  else: \n    return 'Impossible for Paul to have been moving'", "problem_description": "I need a python function to analyze a car crash video, considering the timestamp and the fatal injuries sustained by the driver. The function should determine whether it's possible for the driver to have escaped or moved at a specific time in the video, given the severity of the injuries. The function will take into account the video's start time, impact time, type and severity of fatal injuries, the time the movement occurred, and the duration of the movement. Can the agent provide a python function to accomplish this task?The signature of the function is: def analyze_video_timestamp(video_start_time, impact_time, fatal_injuries, movement_time, movement_lasted)", "test_cases": {"test1": "analyze_video_timestamp(20, 0, 'thermal and traumatic', 23, 1)", "test2": "analyze_video_timestamp(10, 15, 'traumatic', 19, 0.5)", "test3": "analyze_video_timestamp(5, 10, 'thermal', 16, 1.5)", "test4": "analyze_video_timestamp(15, 10, 'thermal and traumatic', 12, 2)", "test5": "analyze_video_timestamp(25, 5, 'traumatic', 20, 0)", "test6": "analyze_video_timestamp(12, 18, 'thermal', 22, 0.3)", "test7": "analyze_video_timestamp(22, 8, 'thermal and traumatic', 10, 0.1)", "test8": "analyze_video_timestamp(18, 25, 'traumatic', 19, 1.1)", "test9": "analyze_video_timestamp(6, 14, 'thermal', 20, 1)", "test10": "analyze_video_timestamp(24, 20, 'thermal and traumatic', 10, 1.2)"}, "hidden_information": "def analyze_video_timestamp(video_start_time, impact_time, fatal_injuries, movement_time, movement_lasted): \n  # Calculate time difference between video start and impact\n  time_diff = abs(video_start_time - impact_time) \n  if time_diff > 0: \n    # If there's a time difference, check if the movement time fits within the possible survival time based on fatal injuries\n    if fatal_injuries == 'thermal and traumatic' and time_diff >= 23: \n      return 'Impossible for Paul to have been moving' \n    else: \n      return 'Movement is uncertain' \n  else: \n    return 'Impossible for Paul to have been moving'"}
{"ground_truth": "def is_anglo_jewish_eccentric(characteristics): \n    required_traits = ['British_accent', 'Jewish_family_background', 'unconventional_behavior', 'public_persona', 'passion_project']\n    if len([trait for trait in required_traits if trait in characteristics]) >= 3:\n        return True\n    else:\n        return False", "problem_description": "Write a python function that can identify individuals who can be classified as Anglo-Jewish eccentrics. They must have a distinctive blend of British characteristics, Jewish family background, unconventional behavior, and a public persona. I want the function to take in a list of traits of an individual as input and return True if they are an Anglo-Jewish eccentric and False otherwise.The signature of the function is: def is_anglo_jewish_eccentric(characteristics)", "test_cases": {"test1": "is_anglo_jewish_eccentric(['British_accent', 'Jewish_family_background', 'unconventional_behavior'])", "test2": "is_anglo_jewish_eccentric(['public_persona', 'passion_project', 'philanthropist'])", "test3": "is_anglo_jewish_eccentric(['Jewish_family_background', 'unconventional_behavior', 'public_persona', 'British_accent'])", "test4": "is_anglo_jewish_eccentric(['British_accent', 'public_persona'])", "test5": "is_anglo_jewish_eccentric(['unconventional_behavior', 'Jewish_family_background', 'philanthropist'])", "test6": "is_anglo_jewish_eccentric(['passion_project', 'public_persona'])", "test7": "is_anglo_jewish_eccentric(['Jewish_family_background', 'British_accent', 'passion_project'])", "test8": "is_anglo_jewish_eccentric(['unconventional_behavior', 'public_persona', 'philanthropist'])", "test9": "is_anglo_jewish_eccentric(['British_accent', 'Jewish_family_background', 'public_persona', 'unconventional_behavior', 'passion_project'])", "test10": "is_anglo_jewish_eccentric(['passion_project', 'philanthropist', 'British_accent'])"}, "hidden_information": "def is_anglo_jewish_eccentric(characteristics): \n    required_traits = ['British_accent', 'Jewish_family_background', 'unconventional_behavior', 'public_persona', 'passion_project']\n    if len([trait for trait in required_traits if trait in characteristics]) >= 3:\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_shadow(border_thickness, title_bar_height, window_height): return (title_bar_height + 2 * border_thickness, max(10, window_height // 4))", "problem_description": "Hey agent, I'm having trouble with a macOS app I'm developing and I need your help with Python functions. I want you to implement a feature related to `NSWindow` but I'm not sure how to approach it. Can you write a Python function for me that could, you know, calculate some sort of shadow dimensions based on an `NSWindow` object? How would you do it?The signature of the function is: def calculate_shadow(border_thickness, title_bar_height, window_height)", "test_cases": {"test1": "calculate_shadow(1, 22, 400)", "test2": "calculate_shadow(2, 20, 300)", "test3": "calculate_shadow(0, 25, 500)", "test4": "calculate_shadow(1, 22, 300)", "test5": "calculate_shadow(3, 20, 600)", "test6": "calculate_shadow(0, 25, 200)", "test7": "calculate_shadow(2, 18, 550)", "test8": "calculate_shadow(1, 22, 350)", "test9": "calculate_shadow(4, 25, 450)", "test10": "calculate_shadow(1, 20, 100)"}, "hidden_information": "def calculate_shadow(border_thickness, title_bar_height, window_height): return (title_bar_height + 2 * border_thickness, max(10, window_height // 4))"}
{"ground_truth": "def get_response(context, relationship, location, disaster_type):\n    if context == 'close_friends' and relationship == 'close':\n        return \"I'll support you in any way I can.\"\n    elif context == 'facebook' or context == 'strangers':\n        return \"If you're looking for ways to help, I can provide information on relief organizations.\"\n    elif relationship == 'family' and location == 'tornado_alley':\n        return \"I can offer you a place to stay if you need it.\"\n    elif context == 'public_place' and disaster_type == 'natural_disaster':\n        return \"I'll send money to the local relief organization instead.\"\n    else:\n        return \"My thoughts are with the victims.\"", "problem_description": "Can you write a python function that determines the best way to respond to someone asking for prayer after a tragedy, considering the context in which they asked, our relationship with the person, the location, and the type of disaster?The signature of the function is: def get_response(context, relationship, location, disaster_type)", "test_cases": {"test1": "get_response('close_friends', 'close', 'home', 'tornado')", "test2": "get_response('facebook', 'acquaintance', 'public_place', 'earthquake')", "test3": "get_response('public_place', 'family', 'tornado_alley', 'hurricane')", "test4": "get_response('close_friends', 'close', 'home', 'natural_disaster')", "test5": "get_response('facebook', 'stranger', 'public_place', 'natural_disaster')", "test6": "get_response('close_friends', 'close', 'tornado_alley', 'tornado')", "test7": "get_response('public_place', 'close', 'home', 'natural_disaster')", "test8": "get_response('strangers', 'stranger', 'public_place', 'earthquake')", "test9": "get_response('family', 'family', 'tornado_alley', 'tornado')", "test10": "get_response('public_place', 'acquaintance', 'public_place', 'natural_disaster')"}, "hidden_information": "def get_response(context, relationship, location, disaster_type):\n    if context == 'close_friends' and relationship == 'close':\n        return \"I'll support you in any way I can.\"\n    elif context == 'facebook' or context == 'strangers':\n        return \"If you're looking for ways to help, I can provide information on relief organizations.\"\n    elif relationship == 'family' and location == 'tornado_alley':\n        return \"I can offer you a place to stay if you need it.\"\n    elif context == 'public_place' and disaster_type == 'natural_disaster':\n        return \"I'll send money to the local relief organization instead.\"\n    else:\n        return \"My thoughts are with the victims.\""}
{"ground_truth": "def calculate_performance_ratio(card1, card2, performance_metric): \n    if performance_metric == 'vertices': \n        return card1['vertices'] / card2['vertices'] \n    elif performance_metric == 'pixels': \n        return card1['pixels'] / card2['pixels'] \n    elif performance_metric == 'memory': \n        return card1['memory'] / card2['memory']\n    else: \n        return 'Invalid performance metric'", "problem_description": "I need a python function to compare the performance of two graphics cards, like ATi's X800 and NVIDIA's GeForce 6800 Ultra. I want the function to take into account different performance metrics, such as vertices, pixels, and memory. Can you write a function to do that?The signature of the function is: def calculate_performance_ratio(card1, card2, performance_metric)", "test_cases": {"test1": "calculate_performance_ratio({'vertices': 1000, 'pixels': 2000, 'memory': 1024}, {'vertices': 500, 'pixels': 1000, 'memory': 512}, 'vertices')", "test2": "calculate_performance_ratio({'vertices': 2000, 'pixels': 4000, 'memory': 2048}, {'vertices': 1000, 'pixels': 2000, 'memory': 1024}, 'pixels')", "test3": "calculate_performance_ratio({'vertices': 1000, 'pixels': 2000, 'memory': 1024}, {'vertices': 500, 'pixels': 1000, 'memory': 512}, 'memory')", "test4": "calculate_performance_ratio({'vertices': 500, 'pixels': 1000, 'memory': 512}, {'vertices': 2000, 'pixels': 4000, 'memory': 2048}, 'vertices')", "test5": "calculate_performance_ratio({'vertices': 2000, 'pixels': 4000, 'memory': 2048}, {'vertices': 1000, 'pixels': 2000, 'memory': 1024}, 'memory')", "test6": "calculate_performance_ratio({'vertices': 1000, 'pixels': 2000, 'memory': 1024}, {'vertices': 500, 'pixels': 1000, 'memory': 512}, 'invalid_metric')", "test7": "calculate_performance_ratio({'vertices': 2000, 'pixels': 4000, 'memory': 2048}, {'vertices': 1000, 'pixels': 2000, 'memory': 1024}, 'vertices')", "test8": "calculate_performance_ratio({'vertices': 500, 'pixels': 1000, 'memory': 512}, {'vertices': 2000, 'pixels': 4000, 'memory': 2048}, 'pixels')", "test9": "calculate_performance_ratio({'vertices': 1000, 'pixels': 2000, 'memory': 1024}, {'vertices': 500, 'pixels': 1000, 'memory': 512}, 'memory')", "test10": "calculate_performance_ratio({'vertices': 2000, 'pixels': 4000, 'memory': 2048}, {'vertices': 1000, 'pixels': 2000, 'memory': 1024}, 'vertices')"}, "hidden_information": "def calculate_performance_ratio(card1, card2, performance_metric): \n    if performance_metric == 'vertices': \n        return card1['vertices'] / card2['vertices'] \n    elif performance_metric == 'pixels': \n        return card1['pixels'] / card2['pixels'] \n    elif performance_metric == 'memory': \n        return card1['memory'] / card2['memory']\n    else: \n        return 'Invalid performance metric'"}
{"ground_truth": "def count_honors_tiles(tiles):\n    red_dragons = tiles.count('red')\n    green_dragons = tiles.count('green')\n    white_dragons = tiles.count('white') + tiles.count('blank')\n    centers = tiles.count('center')\n    get_rich = tiles.count('get rich')\n    return {'red dragon': red_dragons, 'green dragon': green_dragons, 'white dragon': white_dragons, 'center': centers, 'get rich': get_rich}", "problem_description": "I need an agent to write a Python function that calculates the number of each type of honors tile in a mah-jong set. I'm not sure what tiles I want to include, can you help me figure it out? The function should take a list of tile names as input and return a dictionary with the counts of each type of honors tile.The signature of the function is: def count_honors_tiles(tiles)", "test_cases": {"test1": "count_honors_tiles(['red', 'green', 'white', 'center', 'get rich', 'west wind'])", "test2": "count_honors_tiles(['red', 'red', 'green', 'white', 'blank', 'blank', 'east wind'])", "test3": "count_honors_tiles(['red', 'green', 'center', 'get rich', 'north wind', 'south wind'])", "test4": "count_honors_tiles(['white', 'white', 'white', 'blank', 'blank', 'blank'])", "test5": "count_honors_tiles(['red', 'green', 'center', 'get rich', 'west wind', 'east wind', 'north wind', 'south wind'])", "test6": "count_honors_tiles(['blank', 'blank', 'blank', 'blank', 'blank'])", "test7": "count_honors_tiles(['red', 'red', 'red', 'green', 'green', 'green'])", "test8": "count_honors_tiles(['center', 'center', 'center', 'get rich', 'get rich', 'get rich'])", "test9": "count_honors_tiles(['white', 'blank', 'white', 'blank', 'white', 'blank'])", "test10": "count_honors_tiles(['west wind', 'east wind', 'north wind', 'south wind', 'west wind', 'east wind', 'north wind', 'south wind'])"}, "hidden_information": "def count_honors_tiles(tiles):\n    red_dragons = tiles.count('red')\n    green_dragons = tiles.count('green')\n    white_dragons = tiles.count('white') + tiles.count('blank')\n    centers = tiles.count('center')\n    get_rich = tiles.count('get rich')\n    return {'red dragon': red_dragons, 'green dragon': green_dragons, 'white dragon': white_dragons, 'center': centers, 'get rich': get_rich}"}
{"ground_truth": "def calculate_stability_index(conflicts, interference, cooperation, threshold):\n  if conflicts > threshold:\n    return 'Unstable'\n  elif interference > 0.5 and conflicts > 0:\n    return 'Partially Unstable'\n  else:\n    if cooperation > 0.7:\n      return 'Stable'\n    else:\n      return 'Partially Stable'", "problem_description": "I want the agent to write a python function that calculates the stability of a country. The function takes several parameters but I am not sure what exactly, maybe some ratings on conflicts, external interference and how much is the regional cooperation. The function should return the overall stability of the country based on a certain threshold. It can return values such as stable, partially stable, unstable or partially unstable. The agent should interact with me to figure out the exact parameters and logic of the function.The signature of the function is: def calculate_stability_index(conflicts, interference, cooperation, threshold)", "test_cases": {"test1": "calculate_stability_index(0.2, 0.3, 0.8, 0.5)", "test2": "calculate_stability_index(0.6, 0.8, 0.3, 0.5)", "test3": "calculate_stability_index(0.3, 0.1, 0.9, 0.5)", "test4": "calculate_stability_index(0.9, 0.7, 0.2, 0.5)", "test5": "calculate_stability_index(0.1, 0.1, 0.1, 0.5)", "test6": "calculate_stability_index(0.8, 0.6, 0.5, 0.5)", "test7": "calculate_stability_index(0.4, 0.4, 0.4, 0.5)", "test8": "calculate_stability_index(0.1, 0.9, 0.1, 0.5)", "test9": "calculate_stability_index(0.7, 0.3, 0.7, 0.5)", "test10": "calculate_stability_index(0.5, 0.5, 0.5, 0.5)"}, "hidden_information": "def calculate_stability_index(conflicts, interference, cooperation, threshold):\n  if conflicts > threshold:\n    return 'Unstable'\n  elif interference > 0.5 and conflicts > 0:\n    return 'Partially Unstable'\n  else:\n    if cooperation > 0.7:\n      return 'Stable'\n    else:\n      return 'Partially Stable'"}
{"ground_truth": "def calculate_energy_efficiency(usage_hours, watts_per_hour, cost_per_kw): return round(usage_hours * watts_per_hour * cost_per_kw / 1000, 2)", "problem_description": "I want the agent to write a Python function that calculates the energy efficiency of a computer system. The system's usage hours, watts per hour, and cost per kilowatt should be considered. Can you help me with that?The signature of the function is: def calculate_energy_efficiency(usage_hours, watts_per_hour, cost_per_kw)", "test_cases": {"test1": "calculate_energy_efficiency(24, 3.5, 0.15)", "test2": "calculate_energy_efficiency(12, 5, 0.2)", "test3": "calculate_energy_efficiency(168, 1.8, 0.12)", "test4": "calculate_energy_efficiency(8, 2.5, 0.18)", "test5": "calculate_energy_efficiency(720, 4.2, 0.25)", "test6": "calculate_energy_efficiency(240, 2, 0.10)", "test7": "calculate_energy_efficiency(120, 3, 0.22)", "test8": "calculate_energy_efficiency(1, 1.5, 0.08)", "test9": "calculate_energy_efficiency(1000, 6, 0.30)", "test10": "calculate_energy_efficiency(500, 2.8, 0.20)"}, "hidden_information": "def calculate_energy_efficiency(usage_hours, watts_per_hour, cost_per_kw): return round(usage_hours * watts_per_hour * cost_per_kw / 1000, 2)"}
{"ground_truth": "def estimated_deaths(duration, kill_rate):\n    return duration * kill_rate", "problem_description": "Write a Python function that calculates the estimated number of deaths in a genocide event given some information about the duration and kill rate, I don't know the exact details but I want the function to be flexible so it can be applied to different genocide eventsThe signature of the function is: def estimated_deaths(duration, kill_rate)", "test_cases": {"test1": "estimated_deaths(100, 5000)", "test2": "estimated_deaths(365, 2000)", "test3": "estimated_deaths(50, 10000)", "test4": "estimated_deaths(200, 3000)", "test5": "estimated_deaths(150, 4000)", "test6": "estimated_deaths(300, 2500)", "test7": "estimated_deaths(120, 3500)", "test8": "estimated_deaths(90, 4500)", "test9": "estimated_deaths(250, 2200)", "test10": "estimated_deaths(180, 3800)"}, "hidden_information": "def estimated_deaths(duration, kill_rate):\n    return duration * kill_rate"}
{"ground_truth": "def is_extraordinary(topic, popularity_threshold, topic_popularity):\n    return topic_popularity > popularity_threshold", "problem_description": "I want the agent to write a Python function that can determine whether a topic is extraordinary or not. The function should take into account the topic's popularity and a certain threshold. However, I'm not sure how to define 'extraordinary' and what threshold to use.The signature of the function is: def is_extraordinary(topic, popularity_threshold, topic_popularity)", "test_cases": {"test1": "is_extraordinary('AI', 0.5, 0.7)", "test2": "is_extraordinary('AI', 0.7, 0.8)", "test3": "is_extraordinary('history', 0.3, 0.2)", "test4": "is_extraordinary('mathematics', 0.5, 0.4)", "test5": "is_extraordinary('science', 0.6, 0.9)", "test6": "is_extraordinary('literature', 0.5, 0.3)", "test7": "is_extraordinary('language', 0.4, 0.6)", "test8": "is_extraordinary('philosophy', 0.8, 0.5)", "test9": "is_extraordinary('psychology', 0.6, 0.8)", "test10": "is_extraordinary('sociology', 0.7, 0.7)"}, "hidden_information": "def is_extraordinary(topic, popularity_threshold, topic_popularity):\n    return topic_popularity > popularity_threshold"}
{"ground_truth": "def calculate_flight_cost(miles_required, miles_value, destination_type, redemption_time, checked_bags):\n  tax_fee = 5 if destination_type == 'domestic' else 500\n  fuel_surcharge = 0 if destination_type == 'domestic' else 500\n  redemption_fee = 0 if redemption_time > 21 else 75\n  baggage_fee = 0 if checked_bags == 0 else 25 * checked_bags\n  return miles_required * miles_value + tax_fee + fuel_surcharge + redemption_fee + baggage_fee", "problem_description": "Write a Python function to calculate the actual cost of a 'free' flight obtained through an airline's frequent flier program. The function should take into account the cost of miles, taxes, fuel surcharges, redemption fees, and baggage fees. The function should be able to handle both domestic and international flights.The signature of the function is: def calculate_flight_cost(miles_required, miles_value, destination_type, redemption_time, checked_bags)", "test_cases": {"test1": "calculate_flight_cost(25000, 0.02, 'domestic', 30, 0)", "test2": "calculate_flight_cost(50000, 0.01, 'international', 15, 2)", "test3": "calculate_flight_cost(30000, 0.015, 'domestic', 25, 1)", "test4": "calculate_flight_cost(60000, 0.012, 'international', 20, 3)", "test5": "calculate_flight_cost(20000, 0.025, 'domestic', 35, 0)", "test6": "calculate_flight_cost(55000, 0.018, 'international', 12, 2)", "test7": "calculate_flight_cost(40000, 0.022, 'domestic', 28, 1)", "test8": "calculate_flight_cost(65000, 0.015, 'international', 18, 3)", "test9": "calculate_flight_cost(35000, 0.02, 'domestic', 22, 0)", "test10": "calculate_flight_cost(70000, 0.012, 'international', 10, 2)"}, "hidden_information": "def calculate_flight_cost(miles_required, miles_value, destination_type, redemption_time, checked_bags):\n  tax_fee = 5 if destination_type == 'domestic' else 500\n  fuel_surcharge = 0 if destination_type == 'domestic' else 500\n  redemption_fee = 0 if redemption_time > 21 else 75\n  baggage_fee = 0 if checked_bags == 0 else 25 * checked_bags\n  return miles_required * miles_value + tax_fee + fuel_surcharge + redemption_fee + baggage_fee"}
{"ground_truth": "def filter_trolls(participants, troll_names):\n    return [user for user in participants if user not in troll_names]", "problem_description": "I want the LLM agent to write a Python function that can filter out trolls from an online discussion forum like Reddit's AMA session. The function should take a list of all participants and a list of known troll names as inputs and return a list of non-troll users. Can the agent design such a function?The signature of the function is: def filter_trolls(participants, troll_names)", "test_cases": {"test1": "filter_trolls([\"john\", \"jane\", \"troll1\", \"troll2\"], [\"troll1\", \"troll2\"])", "test2": "filter_trolls([\"user1\", \"user2\", \"user3\"], [])", "test3": "filter_trolls([\"troll1\", \"troll2\", \"troll3\"], [\"troll1\", \"troll2\", \"troll3\"])", "test4": "filter_trolls([], [\"troll1\", \"troll2\"])", "test5": "filter_trolls([\"user1\", \"troll1\", \"user2\", \"troll2\"], [\"troll1\", \"troll2\"])", "test6": "filter_trolls([\"jane\", \"john\", \"user1\", \"user2\"], [\"troll1\", \"troll2\"])", "test7": "filter_trolls([\"user1\", \"user2\", \"user3\"], [\"troll1\"])", "test8": "filter_trolls([\"troll1\", \"troll2\"], [\"troll1\", \"troll2\"])", "test9": "filter_trolls([\"user1\", \"troll1\", \"user2\", \"troll2\", \"user3\"], [\"troll1\", \"troll2\"])", "test10": "filter_trolls([\"jane\", \"john\", \"user1\", \"user2\", \"troll1\"], [\"troll1\"])"}, "hidden_information": "def filter_trolls(participants, troll_names):\n    return [user for user in participants if user not in troll_names]"}
{"ground_truth": "def calculate_marriage_success(couple_compatibility, communication_score, conflict_resolution_skill): return (couple_compatibility * 0.4) + (communication_score * 0.3) + (conflict_resolution_skill * 0.3);", "problem_description": "I want you to write a python function that can take some parameters about a married couple and predict how successful their marriage is. I think there are a few key things that decide whether a marriage will work, but I'm not sure what to include or how to weight them. Can you help me figure it out?The signature of the function is: def calculate_marriage_success(couple_compatibility, communication_score, conflict_resolution_skill)", "test_cases": {"test1": "calculate_marriage_success(0.8, 0.7, 0.9)", "test2": "calculate_marriage_success(0.5, 0.4, 0.6)", "test3": "calculate_marriage_success(0.9, 0.8, 0.7)", "test4": "calculate_marriage_success(0.6, 0.5, 0.4)", "test5": "calculate_marriage_success(0.7, 0.6, 0.8)", "test6": "calculate_marriage_success(0.4, 0.3, 0.5)", "test7": "calculate_marriage_success(0.3, 0.4, 0.6)", "test8": "calculate_marriage_success(0.2, 0.1, 0.3)", "test9": "calculate_marriage_success(0.1, 0.2, 0.4)", "test10": "calculate_marriage_success(0.95, 0.92, 0.98)"}, "hidden_information": "def calculate_marriage_success(couple_compatibility, communication_score, conflict_resolution_skill): return (couple_compatibility * 0.4) + (communication_score * 0.3) + (conflict_resolution_skill * 0.3);"}
{"ground_truth": "def analyze_terrorist_attacks(attack_data, start_year, end_year):\n    filtered_attacks = [attack for attack in attack_data if start_year <= attack['year'] <= end_year]\n    attacks_by_year = {}\n    for attack in filtered_attacks:\n        year = attack['year']\n        if year not in attacks_by_year:\n            attacks_by_year[year] = []\n        attacks_by_year[year].append(attack)\n    return attacks_by_year", "problem_description": "I need a Python function that can take a list of Islamist terrorist attacks and report them organized by year. Can you write a function for me?The signature of the function is: def analyze_terrorist_attacks(attack_data, start_year, end_year)", "test_cases": {"test1": "analyze_terrorist_attacks([{'year': 1983, 'location': 'Beirut'}, {'year': 1992, 'location': 'Somewhere'}], 1980, 1990)", "test2": "analyze_terrorist_attacks([{'year': 1995, 'location': 'Riyadh'}, {'year': 2001, 'location': 'New York'}], 1990, 1999)", "test3": "analyze_terrorist_attacks([{'year': 1993, 'location': 'World Trade Center'}, {'year': 2001, 'location': 'Pentagon'}], 1990, 1994)", "test4": "analyze_terrorist_attacks([{'year': 1983, 'location': 'Beirut'}, {'year': 1983, 'location': 'Somewhere Else'}], 1980, 1990)", "test5": "analyze_terrorist_attacks([{'year': 1995, 'location': 'Riyadh'}, {'year': 1990, 'location': 'Somewhere'}], 1990, 1999)", "test6": "analyze_terrorist_attacks([{'year': 1993, 'location': 'World Trade Center'}, {'year': 1993, 'location': 'Somewhere Else'}], 1990, 1994)", "test7": "analyze_terrorist_attacks([{'year': 1983, 'location': 'Beirut'}], 1980, 1990)", "test8": "analyze_terrorist_attacks([{'year': 1995, 'location': 'Riyadh'}, {'year': 2001, 'location': 'New York'}, {'year': 1990, 'location': 'Somewhere'}], 1990, 1999)", "test9": "analyze_terrorist_attacks([{'year': 1993, 'location': 'World Trade Center'}], 1990, 1994)", "test10": "analyze_terrorist_attacks([{'year': 1983, 'location': 'Beirut'}, {'year': 1992, 'location': 'Somewhere'}, {'year': 1990, 'location': 'Somewhere Else'}], 1980, 1990)"}, "hidden_information": "def analyze_terrorist_attacks(attack_data, start_year, end_year):\n    filtered_attacks = [attack for attack in attack_data if start_year <= attack['year'] <= end_year]\n    attacks_by_year = {}\n    for attack in filtered_attacks:\n        year = attack['year']\n        if year not in attacks_by_year:\n            attacks_by_year[year] = []\n        attacks_by_year[year].append(attack)\n    return attacks_by_year"}
{"ground_truth": "def prioritize_expenses(expenses, income):\n    # Sort expenses by cost\n    expenses.sort(key=lambda x: x[1])\n\n    # Calculate total cost of expenses\n    total_cost = sum([expense[1] for expense in expenses])\n\n    # Reduce expenses if total cost is greater than income\n    if total_cost > income:\n        reduced_expenses = []\n        for expense in expenses:\n            if expense[1] > income * 0.1:\n                reduced_expenses.append((expense[0], expense[1] * 0.5))\n            else:\n                reduced_expenses.append(expense)\n        return reduced_expenses\n    else:\n        return expenses", "problem_description": "I'm trying to plan for a potential financial emergency and want to prioritize my expenses, but I'm not sure where to start. Can you write a python function to help me? The function should take in a list of expenses, where each expense is a tuple of the expense name and its cost, as well as my monthly income. It should return the list of expenses, but with the costs reduced or eliminated where possible to ensure I can cover all of them.The signature of the function is: def prioritize_expenses(expenses, income)", "test_cases": {"test1": "prioritize_expenses([('rent', 1500), ('groceries', 500), ('entertainment', 1000), ('transportation', 500), ('savings', 1000)], 4000)", "test2": "prioritize_expenses([('rent', 1500), ('groceries', 500), ('entertainment', 1000), ('transportation', 500)], 3500)", "test3": "prioritize_expenses([('rent', 1000), ('groceries', 500), ('entertainment', 1000), ('transportation', 500)], 2000)", "test4": "prioritize_expenses([('rent', 1500), ('groceries', 1000), ('entertainment', 1000), ('transportation', 500)], 5000)", "test5": "prioritize_expenses([('rent', 1000), ('groceries', 500), ('entertainment', 500), ('transportation', 500)], 2000)", "test6": "prioritize_expenses([('rent', 1500), ('groceries', 500), ('entertainment', 500), ('transportation', 500)], 3000)", "test7": "prioritize_expenses([('rent', 1000), ('groceries', 1000), ('entertainment', 1000), ('transportation', 1000)], 3000)", "test8": "prioritize_expenses([('rent', 1500), ('groceries', 1000), ('entertainment', 500), ('transportation', 500)], 3500)", "test9": "prioritize_expenses([('rent', 1000), ('groceries', 500), ('entertainment', 1000), ('transportation', 1000)], 2500)", "test10": "prioritize_expenses([('rent', 1500), ('groceries', 500), ('entertainment', 1000), ('transportation', 1000)], 4000)"}, "hidden_information": "def prioritize_expenses(expenses, income):\n    # Sort expenses by cost\n    expenses.sort(key=lambda x: x[1])\n\n    # Calculate total cost of expenses\n    total_cost = sum([expense[1] for expense in expenses])\n\n    # Reduce expenses if total cost is greater than income\n    if total_cost > income:\n        reduced_expenses = []\n        for expense in expenses:\n            if expense[1] > income * 0.1:\n                reduced_expenses.append((expense[0], expense[1] * 0.5))\n            else:\n                reduced_expenses.append(expense)\n        return reduced_expenses\n    else:\n        return expenses"}
{"ground_truth": "def calculate_total_calories(quantities, dessert_servings, with_calvados=True):\n    apple_calories = 95 * quantities['apples'] * dessert_servings\n    butter_calories = 102 * quantities['butter'] * dessert_servings\n    sugar_calories = 387 * quantities['Demerara sugar'] * dessert_servings\n    calvados_calories = 0\n    if with_calvados:\n        calvados_calories = 105 * quantities['Calvados'] * dessert_servings\n    ice_cream_calories = 200 * dessert_servings\n    total_calories = apple_calories + butter_calories + sugar_calories + calvados_calories + ice_cream_calories\n    return round(total_calories, 2)", "problem_description": "Can you write a python function to calculate the total calories for a crustless apple pie dessert I am planning to prepare, I have the ingredients and their quantities but I do not know the formula to use. The output should be the total caloriesThe signature of the function is: def calculate_total_calories(quantities, dessert_servings, with_calvados=True)", "test_cases": {"test1": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 1)", "test2": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 2, False)", "test3": "calculate_total_calories({'apples': 2, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 1)", "test4": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 1, 'Calvados': 0.25}, 1)", "test5": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.5}, 1)", "test6": "calculate_total_calories({'apples': 2, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 2)", "test7": "calculate_total_calories({'apples': 2, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 1, False)", "test8": "calculate_total_calories({'apples': 2, 'butter': 0.5, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 1)", "test9": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.25}, 3)", "test10": "calculate_total_calories({'apples': 4, 'butter': 0.25, 'Demerara sugar': 0.5, 'Calvados': 0.5}, 2)"}, "hidden_information": "def calculate_total_calories(quantities, dessert_servings, with_calvados=True):\n    apple_calories = 95 * quantities['apples'] * dessert_servings\n    butter_calories = 102 * quantities['butter'] * dessert_servings\n    sugar_calories = 387 * quantities['Demerara sugar'] * dessert_servings\n    calvados_calories = 0\n    if with_calvados:\n        calvados_calories = 105 * quantities['Calvados'] * dessert_servings\n    ice_cream_calories = 200 * dessert_servings\n    total_calories = apple_calories + butter_calories + sugar_calories + calvados_calories + ice_cream_calories\n    return round(total_calories, 2)"}
{"ground_truth": "def estimate_drivers(total_travelers, year, economy_impact):\n    if year == 2012:\n        return total_travelers * 0.89\n    else:\n        return total_travelers * (0.89 - (economy_impact / 100))", "problem_description": "I want the LLM agent to write a Python function that can estimate the percentage of travelers driving to their destination based on some factors. Can you help me create this function?The signature of the function is: def estimate_drivers(total_travelers, year, economy_impact)", "test_cases": {"test1": "estimate_drivers(34000000, 2012, 0)", "test2": "estimate_drivers(34000000, 2013, 2)", "test3": "estimate_drivers(35000000, 2012, 0)", "test4": "estimate_drivers(33000000, 2013, 1.5)", "test5": "estimate_drivers(32000000, 2012, 0)", "test6": "estimate_drivers(31000000, 2013, 2.5)", "test7": "estimate_drivers(30000000, 2012, 0)", "test8": "estimate_drivers(29000000, 2013, 1)", "test9": "estimate_drivers(28000000, 2012, 0)", "test10": "estimate_drivers(27000000, 2013, 3)"}, "hidden_information": "def estimate_drivers(total_travelers, year, economy_impact):\n    if year == 2012:\n        return total_travelers * 0.89\n    else:\n        return total_travelers * (0.89 - (economy_impact / 100))"}
{"ground_truth": "def calculate_deficit_reduction(income, expenses, target_reduction, time_period):\n    total_deficit = expenses - income\n    monthly_deficit = total_deficit / time_period\n    reduction_per_month = monthly_deficit * target_reduction\n    return reduction_per_month", "problem_description": "I need a Python function to calculate the deficit reduction required per month to meet a certain target. The function should take into account the total income, total expenses, the target reduction, and the time period over which the reduction should be achieved. However, I'm not sure what the exact formula should be or what inputs I should provide. Can you help me create this function?The signature of the function is: def calculate_deficit_reduction(income, expenses, target_reduction, time_period)", "test_cases": {"test1": "calculate_deficit_reduction(1000000, 1500000, 0.1, 12)", "test2": "calculate_deficit_reduction(500000, 800000, 0.2, 6)", "test3": "calculate_deficit_reduction(2000000, 3000000, 0.05, 24)", "test4": "calculate_deficit_reduction(750000, 1200000, 0.15, 18)", "test5": "calculate_deficit_reduction(900000, 1800000, 0.12, 30)", "test6": "calculate_deficit_reduction(600000, 1000000, 0.08, 20)", "test7": "calculate_deficit_reduction(300000, 500000, 0.1, 15)", "test8": "calculate_deficit_reduction(450000, 700000, 0.18, 10)", "test9": "calculate_deficit_reduction(800000, 1200000, 0.12, 12)", "test10": "calculate_deficit_reduction(1100000, 1600000, 0.05, 24)"}, "hidden_information": "def calculate_deficit_reduction(income, expenses, target_reduction, time_period):\n    total_deficit = expenses - income\n    monthly_deficit = total_deficit / time_period\n    reduction_per_month = monthly_deficit * target_reduction\n    return reduction_per_month"}
{"ground_truth": "def calculate_tide_loss(num_bottles, avg_price, street_value=10.99): return num_bottles * (avg_price - street_value)", "problem_description": "I've heard of a weird trend where thieves are stealing tons of Tide detergent and reselling it on the streets. I need you to write a python function that calculates the estimated loss for stores when this happens. Can you figure out what information you need from me and write the function?The signature of the function is: def calculate_tide_loss(num_bottles, avg_price, street_value=10.99)", "test_cases": {"test1": "calculate_tide_loss(100, 20)", "test2": "calculate_tide_loss(500, 15)", "test3": "calculate_tide_loss(25, 20, 10.99)", "test4": "calculate_tide_loss(1000, 18, 12)", "test5": "calculate_tide_loss(200, 22, 9.99)", "test6": "calculate_tide_loss(750, 19, 11.99)", "test7": "calculate_tide_loss(300, 21, 10.49)", "test8": "calculate_tide_loss(50, 17, 12.99)", "test9": "calculate_tide_loss(800, 16, 11.49)", "test10": "calculate_tide_loss(600, 20, 9)"}, "hidden_information": "def calculate_tide_loss(num_bottles, avg_price, street_value=10.99): return num_bottles * (avg_price - street_value)"}
{"ground_truth": "def calculate_replaceable_workers(total_workers, skilled_workers, replacement_rate): return int(total_workers * skilled_workers * replacement_rate)", "problem_description": "I'm the CEO of a company with a large number of workers, but I'm having trouble finding skilled workers due to immigration issues. Can you write a Python function that calculates the number of workers that can be replaced in my company if I need to find alternative solutions?The signature of the function is: def calculate_replaceable_workers(total_workers, skilled_workers, replacement_rate)", "test_cases": {"test1": "calculate_replaceable_workers(100, 0.5, 0.2)", "test2": "calculate_replaceable_workers(500, 0.7, 0.1)", "test3": "calculate_replaceable_workers(1000, 0.3, 0.3)", "test4": "calculate_replaceable_workers(200, 0.8, 0.4)", "test5": "calculate_replaceable_workers(50, 0.4, 0.6)", "test6": "calculate_replaceable_workers(800, 0.9, 0.1)", "test7": "calculate_replaceable_workers(300, 0.6, 0.2)", "test8": "calculate_replaceable_workers(400, 0.5, 0.3)", "test9": "calculate_replaceable_workers(900, 0.7, 0.4)", "test10": "calculate_replaceable_workers(600, 0.8, 0.5)"}, "hidden_information": "def calculate_replaceable_workers(total_workers, skilled_workers, replacement_rate): return int(total_workers * skilled_workers * replacement_rate)"}
{"ground_truth": "def calculate_trading_volume(stock_price, stock_quantity, event_impact_factor): return stock_price * stock_quantity * event_impact_factor", "problem_description": "I want you to write a python function that can calculate the total trading volume of a stock after a major event like an election or a natural disaster. Take into consideration the stock's price and quantity. I'll provide more info if needed.The signature of the function is: def calculate_trading_volume(stock_price, stock_quantity, event_impact_factor)", "test_cases": {"test1": "calculate_trading_volume(10.5, 100, 1.2)", "test2": "calculate_trading_volume(5.0, 500, 0.8)", "test3": "calculate_trading_volume(2.0, 200, 1.0)", "test4": "calculate_trading_volume(15.0, 50, 1.5)", "test5": "calculate_trading_volume(8.0, 300, 0.9)", "test6": "calculate_trading_volume(12.0, 250, 1.1)", "test7": "calculate_trading_volume(6.0, 400, 0.7)", "test8": "calculate_trading_volume(18.0, 100, 1.6)", "test9": "calculate_trading_volume(9.0, 350, 1.0)", "test10": "calculate_trading_volume(7.0, 450, 0.85)"}, "hidden_information": "def calculate_trading_volume(stock_price, stock_quantity, event_impact_factor): return stock_price * stock_quantity * event_impact_factor"}
{"ground_truth": "def calculate_total_cost(subtotal, state, is_charitable_deduction_eligible):\n    federal_tax_rate = 0.25\n    state_tax_rates = {'NY': 0.04, 'CA': 0.05, 'FL': 0.06}\n    state_tax_rate = state_tax_rates.get(state, 0)\n    total_tax_rate = federal_tax_rate + state_tax_rate\n    total_cost = subtotal * (1 + total_tax_rate)\n    if is_charitable_deduction_eligible:\n        total_cost *= 0.9\n    return total_cost", "problem_description": "I want you to write a python function to calculate the total cost of a purchase. The cost should take into account the subtotal, the state the purchase is being made in (NY, CA, or FL), and whether the purchase is eligible for charitable deductions.The signature of the function is: def calculate_total_cost(subtotal, state, is_charitable_deduction_eligible)", "test_cases": {"test1": "calculate_total_cost(100, 'NY', False)", "test2": "calculate_total_cost(200, 'CA', True)", "test3": "calculate_total_cost(50, 'FL', False)", "test4": "calculate_total_cost(150, 'TX', False)", "test5": "calculate_total_cost(250, 'NY', True)", "test6": "calculate_total_cost(75, 'CA', False)", "test7": "calculate_total_cost(300, 'FL', True)", "test8": "calculate_total_cost(400, 'NY', False)", "test9": "calculate_total_cost(500, 'CA', True)", "test10": "calculate_total_cost(600, 'TX', False)"}, "hidden_information": "def calculate_total_cost(subtotal, state, is_charitable_deduction_eligible):\n    federal_tax_rate = 0.25\n    state_tax_rates = {'NY': 0.04, 'CA': 0.05, 'FL': 0.06}\n    state_tax_rate = state_tax_rates.get(state, 0)\n    total_tax_rate = federal_tax_rate + state_tax_rate\n    total_cost = subtotal * (1 + total_tax_rate)\n    if is_charitable_deduction_eligible:\n        total_cost *= 0.9\n    return total_cost"}
{"ground_truth": "def analyze_software_patents(pro_patent_points, anti_patent_points, patent_types):\n    total_score = 0\n    for point in pro_patent_points:\n        if point['type'] in patent_types:\n            total_score += point['score']\n    for point in anti_patent_points:\n        if point['type'] in patent_types:\n            total_score -= point['score']\n    return total_score", "problem_description": "Write a Python function that can help analyze the pros and cons of software patents. The function should take in two lists of points, one for pro-patent arguments and one for anti-patent arguments, and a list of software patent types. It should return a total score indicating the overall stance on software patents based on the provided points and types.The signature of the function is: def analyze_software_patents(pro_patent_points, anti_patent_points, patent_types)", "test_cases": {"test_1": "analyze_software_patents([{'type': 'software', 'score': 5}, {'type': 'hardware', 'score': 3}], [{'type': 'software', 'score': 2}], ['software'])", "test_2": "analyze_software_patents([{'type': 'software', 'score': 1}], [{'type': 'software', 'score': 4}, {'type': 'hardware', 'score': 2}], ['software'])", "test_3": "analyze_software_patents([{'type': 'hardware', 'score': 5}], [{'type': 'software', 'score': 3}], ['software'])", "test_4": "analyze_software_patents([{'type': 'software', 'score': 2}, {'type': 'software', 'score': 3}], [{'type': 'software', 'score': 1}], ['software'])", "test_5": "analyze_software_patents([{'type': 'software', 'score': 1}], [{'type': 'hardware', 'score': 4}, {'type': 'software', 'score': 2}], ['software'])", "test_6": "analyze_software_patents([{'type': 'software', 'score': 5}], [{'type': 'software', 'score': 3}, {'type': 'hardware', 'score': 1}], ['software', 'hardware'])", "test_7": "analyze_software_patents([{'type': 'software', 'score': 2}, {'type': 'hardware', 'score': 1}], [{'type': 'software', 'score': 1}], ['software', 'hardware'])", "test_8": "analyze_software_patents([{'type': 'hardware', 'score': 5}], [{'type': 'software', 'score': 2}, {'type': 'hardware', 'score': 1}], ['software', 'hardware'])", "test_9": "analyze_software_patents([{'type': 'software', 'score': 1}, {'type': 'software', 'score': 2}], [{'type': 'software', 'score': 1}], ['software'])", "test_10": "analyze_software_patents([{'type': 'software', 'score': 3}], [{'type': 'hardware', 'score': 2}, {'type': 'software', 'score': 1}], ['software'])"}, "hidden_information": "def analyze_software_patents(pro_patent_points, anti_patent_points, patent_types):\n    total_score = 0\n    for point in pro_patent_points:\n        if point['type'] in patent_types:\n            total_score += point['score']\n    for point in anti_patent_points:\n        if point['type'] in patent_types:\n            total_score -= point['score']\n    return total_score"}
{"ground_truth": "def can_participate_in_event(license_type, event_sanctioned):\n    if license_type == 'USAC' and not event_sanctioned:\n        return False\n    elif license_type == 'UCI' and not event_sanctioned:\n        return False\n    else:\n        return True", "problem_description": "I have a problem where I need to determine whether a cyclist can participate in a specific event based on their license type and the event's sanctioning. Can you write a Python function that takes the license type and event sanctioning as input and returns a boolean indicating whether the cyclist can participate?The signature of the function is: def can_participate_in_event(license_type, event_sanctioned)", "test_cases": {"test1": "can_participate_in_event('USAC', True)", "test2": "can_participate_in_event('USAC', False)", "test3": "can_participate_in_event('UCI', True)", "test4": "can_participate_in_event('UCI', False)", "test5": "can_participate_in_event('International', True)", "test6": "can_participate_in_event('International', False)", "test7": "can_participate_in_event('USAC', None)", "test8": "can_participate_in_event('UCI', None)", "test9": "can_participate_in_event('International', None)", "test10": "can_participate_in_event(None, True)"}, "hidden_information": "def can_participate_in_event(license_type, event_sanctioned):\n    if license_type == 'USAC' and not event_sanctioned:\n        return False\n    elif license_type == 'UCI' and not event_sanctioned:\n        return False\n    else:\n        return True"}
{"ground_truth": "def calculate_bunny_hop_position(weight, height, bike_wheel_size, jumping_style):\n    # Define possible jumping styles and their effects on rider position\n    styles = {\n        'explosive': {'angle': 45, 'position': 'low_attack'},\n        'bouncing': {'angle': 30, 'position': 'relaxed'}\n    }\n    # Use a simple physics-based calculation to determine the optimal pedal angle\n    pedal_angle = styles.get(jumping_style, {'angle': 45}).get('angle')\n    # Calculate the optimal rider position based on the rider's weight, height, and bike wheel size\n    rider_position = styles.get(jumping_style, {'position': 'low_attack'}).get('position')\n    # Define a linear function that adjusts the rider position based on the rider's weight and height\n    position_adjustment = 0.05 * (weight / 70) * (height / 175)\n    # Adjust the rider position based on the bike wheel size\n    if bike_wheel_size > 26:\n        position_adjustment *= 1.1\n    elif bike_wheel_size < 24:\n        position_adjustment *= 0.9\n    return pedal_angle, rider_position, position_adjustment", "problem_description": "I'm trying to improve my bunny hop technique on my mountain bike, but I'm not sure what pedal angle and rider position would be optimal for me. Can you write a Python function that takes into account my weight, height, bike wheel size, and preferred jumping style (either 'explosive' or 'bouncing') to recommend the best approach?The signature of the function is: def calculate_bunny_hop_position(weight, height, bike_wheel_size, jumping_style)", "test_cases": {"test1": "calculate_bunny_hop_position(70, 175, 26, 'explosive')", "test2": "calculate_bunny_hop_position(60, 165, 24, 'bouncing')", "test3": "calculate_bunny_hop_position(80, 185, 27, 'explosive')", "test4": "calculate_bunny_hop_position(65, 170, 25, 'bouncing')", "test5": "calculate_bunny_hop_position(75, 180, 26, 'explosive')", "test6": "calculate_bunny_hop_position(70, 175, 26, 'bouncing')", "test7": "calculate_bunny_hop_position(60, 160, 23, 'explosive')", "test8": "calculate_bunny_hop_position(85, 190, 28, 'bouncing')", "test9": "calculate_bunny_hop_position(75, 180, 27, 'explosive')", "test10": "calculate_bunny_hop_position(65, 165, 24, 'bouncing')"}, "hidden_information": "def calculate_bunny_hop_position(weight, height, bike_wheel_size, jumping_style):\n    # Define possible jumping styles and their effects on rider position\n    styles = {\n        'explosive': {'angle': 45, 'position': 'low_attack'},\n        'bouncing': {'angle': 30, 'position': 'relaxed'}\n    }\n    # Use a simple physics-based calculation to determine the optimal pedal angle\n    pedal_angle = styles.get(jumping_style, {'angle': 45}).get('angle')\n    # Calculate the optimal rider position based on the rider's weight, height, and bike wheel size\n    rider_position = styles.get(jumping_style, {'position': 'low_attack'}).get('position')\n    # Define a linear function that adjusts the rider position based on the rider's weight and height\n    position_adjustment = 0.05 * (weight / 70) * (height / 175)\n    # Adjust the rider position based on the bike wheel size\n    if bike_wheel_size > 26:\n        position_adjustment *= 1.1\n    elif bike_wheel_size < 24:\n        position_adjustment *= 0.9\n    return pedal_angle, rider_position, position_adjustment"}
{"ground_truth": "def identify_insect(wing_count, wing_characteristics, feeding_habitat):\n    if wing_count == 2 and 'haltere' in wing_characteristics:\n        if feeding_habitat in ['wet soil', 'decomposing vegetable matter']:\n            return 'Crane Fly'\n        else:\n            return 'Other Diptera'\n    elif wing_count == 4:\n        return 'Other Insect'\n    else:\n        return 'Unknown Insect'", "problem_description": "Write a Python function to identify an insect based on its wing characteristics and feeding habitat. The insect might have two or four wings, and might have halters or dark spots on its wings. The function should take the wing count and characteristics, and feeding habitat as input and return the identified insect type.The signature of the function is: def identify_insect(wing_count, wing_characteristics, feeding_habitat)", "test_cases": {"test1": "identify_insect(2, ['haltere', 'dark spot'], 'wet soil')", "test2": "identify_insect(2, ['haltere'], 'nectar')", "test3": "identify_insect(4, ['four equal wings'], 'decomposing vegetable matter')", "test4": "identify_insect(2, ['haltere'], 'unknown habitat')", "test5": "identify_insect(1, ['small wing'], 'unknown habitat')", "test6": "identify_insect(2, ['haltere', 'dark spot'], 'decomposing vegetable matter')", "test7": "identify_insect(4, ['four unequal wings'], 'wet soil')", "test8": "identify_insect(2, ['haltere'], 'moist environments')", "test9": "identify_insect(2, ['dark spot', 'other'], 'necatar')", "test10": "identify_insect(4, ['four equal wings'], 'unknown habitat')"}, "hidden_information": "def identify_insect(wing_count, wing_characteristics, feeding_habitat):\n    if wing_count == 2 and 'haltere' in wing_characteristics:\n        if feeding_habitat in ['wet soil', 'decomposing vegetable matter']:\n            return 'Crane Fly'\n        else:\n            return 'Other Diptera'\n    elif wing_count == 4:\n        return 'Other Insect'\n    else:\n        return 'Unknown Insect'"}
{"ground_truth": "def calculate_portfolio_value(transactions):\n    total_value = 0\n    for transaction in transactions:\n        purchase_price = transaction['purchase_price']\n        sale_price = transaction['sale_price']\n        years_owned = transaction['sale_year'] - transaction['purchase_year']\n        if years_owned > 0:\n            gain = sale_price - purchase_price\n            total_value += gain\n    return total_value", "problem_description": "Hey agent, I need your help writing a Python function to calculate the total value of someone's financial portfolio based on their land deals. I want the function to take a list of transactions, each with purchase and sale prices and dates, and return the total gain or loss from these transactions. Can you write this function for me?The signature of the function is: def calculate_portfolio_value(transactions)", "test_cases": {"test1": "calculate_portfolio_value([{'purchase_price': 10000, 'sale_price': 15000, 'purchase_year': 2000, 'sale_year': 2005}, {'purchase_price': 20000, 'sale_price': 25000, 'purchase_year': 2005, 'sale_year': 2010}])", "test2": "calculate_portfolio_value([{'purchase_price': 50000, 'sale_price': 40000, 'purchase_year': 1990, 'sale_year': 1995}, {'purchase_price': 10000, 'sale_price': 12000, 'purchase_year': 1995, 'sale_year': 2000}])", "test3": "calculate_portfolio_value([{'purchase_price': 100000, 'sale_price': 200000, 'purchase_year': 2000, 'sale_year': 2010}])", "test4": "calculate_portfolio_value([{'purchase_price': 5000, 'sale_price': 7000, 'purchase_year': 1995, 'sale_year': 2000}])", "test5": "calculate_portfolio_value([{'purchase_price': 200000, 'sale_price': 150000, 'purchase_year': 2000, 'sale_year': 2005}])", "test6": "calculate_portfolio_value([])", "test7": "calculate_portfolio_value([{'purchase_price': 10000, 'sale_price': 15000, 'purchase_year': 2000, 'sale_year': 2005}, {'purchase_price': 20000, 'sale_price': 25000, 'purchase_year': 2005, 'sale_year': 2010}, {'purchase_price': 50000, 'sale_price': 60000, 'purchase_year': 2010, 'sale_year': 2015}])", "test8": "calculate_portfolio_value([{'purchase_price': 100000, 'sale_price': 100000, 'purchase_year': 2000, 'sale_year': 2005}])", "test9": "calculate_portfolio_value([{'purchase_price': 50000, 'sale_price': 50000, 'purchase_year': 1990, 'sale_year': 1995}, {'purchase_price': 10000, 'sale_price': 12000, 'purchase_year': 1995, 'sale_year': 2000}])", "test10": "calculate_portfolio_value([{'purchase_price': 10000, 'sale_price': 15000, 'purchase_year': 2000, 'sale_year': 2005}, {'purchase_price': 20000, 'sale_price': 25000, 'purchase_year': 2005, 'sale_year': 2010}, {'purchase_price': 50000, 'sale_price': 60000, 'purchase_year': 2010, 'sale_year': 2015}, {'purchase_price': 100000, 'sale_price': 200000, 'purchase_year': 2015, 'sale_year': 2020}])"}, "hidden_information": "def calculate_portfolio_value(transactions):\n    total_value = 0\n    for transaction in transactions:\n        purchase_price = transaction['purchase_price']\n        sale_price = transaction['sale_price']\n        years_owned = transaction['sale_year'] - transaction['purchase_year']\n        if years_owned > 0:\n            gain = sale_price - purchase_price\n            total_value += gain\n    return total_value"}
{"ground_truth": "def classify_cves(cves, related_to_ms09_035=['CVE-2009-2493', 'CVE-2009-0901'], related_to_ms09_037=['CVE-2009-2493', 'CVE-2009-0901', 'CVE-2008-0015', 'CVE-2008-0020', 'CVE-2009-2494']):\n    classification = {}\n    for cve in cves:\n        if cve in related_to_ms09_035 and cve in related_to_ms09_037:\n            classification[cve] = 'both'\n        elif cve in related_to_ms09_035:\n            classification[cve] = 'MS09-035'\n        elif cve in related_to_ms09_037:\n            classification[cve] = 'MS09-037'\n        else:\n            classification[cve] = 'neither'\n    return classification", "problem_description": "Hey agent, I need a Python function to determine if a given set of CVEs are related to MS09-035 or MS09-037. I'm not really sure how to handle CVEs that are present in both bulletins, or CVEs that are only present in one of them. Can you help me write a function to classify these CVEs?The signature of the function is: def classify_cves(cves, related_to_ms09_035=['CVE-2009-2493', 'CVE-2009-0901'], related_to_ms09_037=['CVE-2009-2493', 'CVE-2009-0901', 'CVE-2008-0015', 'CVE-2008-0020', 'CVE-2009-2494'])", "test_cases": {"test1": "classify_cves(['CVE-2009-2493', 'CVE-2008-0015'])", "test2": "classify_cves(['CVE-2009-0901', 'CVE-2008-0020'])", "test3": "classify_cves(['CVE-2009-2494', 'CVE-2020-1234'])", "test4": "classify_cves(['CVE-2009-2493'])", "test5": "classify_cves(['CVE-2008-0015'])", "test6": "classify_cves(['CVE-2009-2493', 'CVE-2009-0901', 'CVE-2008-0015'])", "test7": "classify_cves([])", "test8": "classify_cves(['CVE-2020-1234', 'CVE-2020-5678'])", "test9": "classify_cves(['CVE-2009-2493', 'CVE-2009-2494'])", "test10": "classify_cves(['CVE-2008-0015', 'CVE-2008-0020', 'CVE-2009-2494'])"}, "hidden_information": "def classify_cves(cves, related_to_ms09_035=['CVE-2009-2493', 'CVE-2009-0901'], related_to_ms09_037=['CVE-2009-2493', 'CVE-2009-0901', 'CVE-2008-0015', 'CVE-2008-0020', 'CVE-2009-2494']):\n    classification = {}\n    for cve in cves:\n        if cve in related_to_ms09_035 and cve in related_to_ms09_037:\n            classification[cve] = 'both'\n        elif cve in related_to_ms09_035:\n            classification[cve] = 'MS09-035'\n        elif cve in related_to_ms09_037:\n            classification[cve] = 'MS09-037'\n        else:\n            classification[cve] = 'neither'\n    return classification"}
{"ground_truth": "def locate_nearby_bakeries(bakeries, distance): return [bakery for bakery, dist in bakeries if dist <= distance]", "problem_description": "Write a Python function to find bakeries within a certain distance from Sebastopol. The function should take in a list of bakeries and their distances from Sebastopol and return the names of the bakeries within the given distance range.The signature of the function is: def locate_nearby_bakeries(bakeries, distance)", "test_cases": {"test1": "locate_nearby_bakeries([('Wild Flour', 10), ('Nightingale Breads', 15), ('Village Bakery', 5)], 12)", "test2": "locate_nearby_bakeries([('Forestville French', 8), ('Swedish Limpa', 3), ('Pannetone', 20)], 10)", "test3": "locate_nearby_bakeries([('Stollen', 25), ('Baguette', 18), ('Batard', 22)], 15)", "test4": "locate_nearby_bakeries([('Rustic Bread', 12), ('French Loaves', 8)], 10)", "test5": "locate_nearby_bakeries([('Whole Grain Loaves', 20), ('Forestville', 18)], 19)", "test6": "locate_nearby_bakeries([('Bohemian Hwy', 15), ('Front St', 10)], 12)", "test7": "locate_nearby_bakeries([('Nightingale Breads', 15), ('Village Bakery', 5)], 16)", "test8": "locate_nearby_bakeries([('Wild Flour', 10), ('Nightingale Breads', 15), ('Forestville French', 8)], 13)", "test9": "locate_nearby_bakeries([('Swedish Limpa', 3), ('Pannetone', 20), ('Stollen', 25)], 12)", "test10": "locate_nearby_bakeries([('Baguette', 18), ('Batard', 22), ('Rustic Bread', 12)], 18)"}, "hidden_information": "def locate_nearby_bakeries(bakeries, distance): return [bakery for bakery, dist in bakeries if dist <= distance]"}
{"ground_truth": "def recommend_restaurant(price_range, cuisine, ambiance):\n    restaurants = [\n        {'name': 'Porter House', 'price_range': 'reasonable', 'cuisine': 'pub', 'ambiance': 'casual'},\n        {'name': 'Oak Tree Inn', 'price_range': 'moderate', 'cuisine': 'Irish pub', 'ambiance': 'cozy'},\n        {'name': 'Harvest', 'price_range': 'high', 'cuisine': 'live jazz', 'ambiance': 'upscale'},\n        {'name': 'Andiamo', 'price_range': 'moderate', 'cuisine': 'Italian', 'ambiance': 'casual'},\n        {'name': 'Buon Gusto', 'price_range': 'moderate', 'cuisine': 'Italian', 'ambiance': 'intimate'},\n    ]\n    recommended_restaurants = [restaurant for restaurant in restaurants if restaurant['price_range'] == price_range and restaurant['cuisine'] == cuisine and restaurant['ambiance'] == ambiance]\n    return recommended_restaurants", "problem_description": "Can you help me write a Python function that recommends a restaurant for a ladies' night out? The function should take into account the price range, type of cuisine, and ambiance we're looking for. The restaurant should have a bar where we can sit and eat, and the prices should be reasonable.The signature of the function is: def recommend_restaurant(price_range, cuisine, ambiance)", "test_cases": {"test1": "recommend_restaurant('reasonable', 'pub', 'casual')", "test2": "recommend_restaurant('moderate', 'Italian', 'cozy')", "test3": "recommend_restaurant('high', 'live jazz', 'upscale')", "test4": "recommend_restaurant('moderate', 'Italian', 'casual')", "test5": "recommend_restaurant('moderate', 'Italian', 'intimate')", "test6": "recommend_restaurant('low', 'pub', 'casual')", "test7": "recommend_restaurant('high', 'Italian', 'upscale')", "test8": "recommend_restaurant('moderate', 'pub', 'cozy')", "test9": "recommend_restaurant('reasonable', 'Italian', 'casual')", "test10": "recommend_restaurant('high', 'Italian', 'intimate')"}, "hidden_information": "def recommend_restaurant(price_range, cuisine, ambiance):\n    restaurants = [\n        {'name': 'Porter House', 'price_range': 'reasonable', 'cuisine': 'pub', 'ambiance': 'casual'},\n        {'name': 'Oak Tree Inn', 'price_range': 'moderate', 'cuisine': 'Irish pub', 'ambiance': 'cozy'},\n        {'name': 'Harvest', 'price_range': 'high', 'cuisine': 'live jazz', 'ambiance': 'upscale'},\n        {'name': 'Andiamo', 'price_range': 'moderate', 'cuisine': 'Italian', 'ambiance': 'casual'},\n        {'name': 'Buon Gusto', 'price_range': 'moderate', 'cuisine': 'Italian', 'ambiance': 'intimate'},\n    ]\n    recommended_restaurants = [restaurant for restaurant in restaurants if restaurant['price_range'] == price_range and restaurant['cuisine'] == cuisine and restaurant['ambiance'] == ambiance]\n    return recommended_restaurants"}
{"ground_truth": "def calculate_victims(suicide_bombing_victims, laborer_victims, bodyguard_victims):\n    total_victims = suicide_bombing_victims + laborer_victims + bodyguard_victims\n    return total_victims", "problem_description": "I want you to write a Python function that can calculate the total number of victims from a recent suicide bombing attack in Iraq. The victims are not only the people directly targeted, but also other innocent bystanders, as well as the bodyguards of the targeted person. The function should take the number of suicide bombing victims, laborer victims, and bodyguard victims as parameters.The signature of the function is: def calculate_victims(suicide_bombing_victims, laborer_victims, bodyguard_victims)", "test_cases": {"test1": "calculate_victims(1, 3, 3)", "test2": "calculate_victims(1, 0, 0)", "test3": "calculate_victims(0, 2, 0)", "test4": "calculate_victims(1, 5, 3)", "test5": "calculate_victims(0, 0, 3)", "test6": "calculate_victims(1, 3, 0)", "test7": "calculate_victims(2, 2, 3)", "test8": "calculate_victims(1, 1, 1)", "test9": "calculate_victims(5, 0, 0)", "test10": "calculate_victims(0, 10, 0)"}, "hidden_information": "def calculate_victims(suicide_bombing_victims, laborer_victims, bodyguard_victims):\n    total_victims = suicide_bombing_victims + laborer_victims + bodyguard_victims\n    return total_victims"}
{"ground_truth": "def will_table_fit(table_fields, x=48):\n    total_size = 3 * len(table_fields) + sum(table_fields)\n    return total_size <= x", "problem_description": "I need a Python function that can determine if a table will fit within the screen width of a BlackBerry device. The table's fields are limited by the device's screen width, which is usually around 48 units. The function should take into account the number of fields and their sizes. Can you write a function to calculate this?The signature of the function is: def will_table_fit(table_fields, x=48)", "test_cases": {"test1": "will_table_fit([10, 15, 8])", "test2": "will_table_fit([20, 20, 20])", "test3": "will_table_fit([5, 5, 5, 5, 5])", "test4": "will_table_fit([48])", "test5": "will_table_fit([10, 10, 10, 10, 10], x=40)", "test6": "will_table_fit([5, 5, 5, 5, 5, 5, 5])", "test7": "will_table_fit([20, 10, 10, 8])", "test8": "will_table_fit([15, 15, 15, 3])", "test9": "will_table_fit([25, 10, 13])", "test10": "will_table_fit([10, 10, 10, 10, 10, 10])"}, "hidden_information": "def will_table_fit(table_fields, x=48):\n    total_size = 3 * len(table_fields) + sum(table_fields)\n    return total_size <= x"}
{"ground_truth": "def smart_lighting(house_layout, light_uuids, desired_states, current_states):\n  # Find the lights that need to be changed\n  light_changes = {uuid: state for uuid, state in desired_states.items() if uuid in light_uuids and state != current_states.get(uuid)}\n\n  # Create the commands for the light API\n  light_commands = [{'light_uuid': uuid, 'state': state} for uuid, state in light_changes.items()]\n\n  # Update the current states\n  current_states.update(desired_states)\n\n  return light_commands", "problem_description": "I want to control my home's lighting system remotely using a smartphone app. I have multiple rooms and I want to be able to turn lights on and off in each room or change their brightness. Can you write a Python function that takes the house layout, light UUIDs, desired light states, and current light states as input and returns a list of commands to be sent to the light API?The signature of the function is: def smart_lighting(house_layout, light_uuids, desired_states, current_states)", "test_cases": {"test1": "smart_lighting({'living_room': ['light1', 'light2'], 'kitchen': ['light3']}, ['light1', 'light2', 'light3'], {'light1': True, 'light2': False, 'light3': True}, {'light1': False, 'light2': True, 'light3': False})", "test2": "smart_lighting({'bedroom': ['light4', 'light5']}, ['light4', 'light5'], {'light4': True, 'light5': False}, {'light4': False, 'light5': False})", "test3": "smart_lighting({'bathroom': ['light6']}, ['light6'], {'light6': True}, {'light6': False})", "test4": "smart_lighting({'garage': ['light7', 'light8']}, ['light7', 'light8'], {'light7': False, 'light8': True}, {'light7': True, 'light8': False})", "test5": "smart_lighting({'hallway': ['light9']}, ['light9'], {'light9': True}, {'light9': True})", "test6": "smart_lighting({'patio': ['light10']}, ['light10'], {'light10': False}, {'light10': False})", "test7": "smart_lighting({'attic': ['light11', 'light12']}, ['light11', 'light12'], {'light11': True, 'light12': False}, {'light11': False, 'light12': True})", "test8": "smart_lighting({'basement': ['light13']}, ['light13'], {'light13': True}, {'light13': False})", "test9": "smart_lighting({'garden': ['light14', 'light15']}, ['light14', 'light15'], {'light14': False, 'light15': True}, {'light14': True, 'light15': False})", "test10": "smart_lighting({'living_room': ['light16', 'light17'], 'kitchen': ['light18']}, ['light16', 'light17', 'light18'], {'light16': True, 'light17': False, 'light18': True}, {'light16': False, 'light17': True, 'light18': False})"}, "hidden_information": "def smart_lighting(house_layout, light_uuids, desired_states, current_states):\n  # Find the lights that need to be changed\n  light_changes = {uuid: state for uuid, state in desired_states.items() if uuid in light_uuids and state != current_states.get(uuid)}\n\n  # Create the commands for the light API\n  light_commands = [{'light_uuid': uuid, 'state': state} for uuid, state in light_changes.items()]\n\n  # Update the current states\n  current_states.update(desired_states)\n\n  return light_commands"}
{"ground_truth": "def keep_child_home(temperature, age): \n if age < 2 and temperature > 100.4: \n  return 2 \n elif age >= 2 and age < 5 and temperature > 102: \n  return 1 \n else: \n  return 0", "problem_description": "Hi LLM Agent, I need your help to write a Python function that calculates the number of days a child should be kept at home based on their temperature. The function should consider the child's age as a factor in determining the number of days to keep them home.The signature of the function is: def keep_child_home(temperature, age)", "test_cases": {"test1": "keep_child_home(101, 3)", "test2": "keep_child_home(102, 2)", "test3": "keep_child_home(99, 1)", "test4": "keep_child_home(103, 5)", "test5": "keep_child_home(100, 4)", "test6": "keep_child_home(101.9, 3)", "test7": "keep_child_home(102.1, 2)", "test8": "keep_child_home(98, 1)", "test9": "keep_child_home(103.5, 5)", "test10": "keep_child_home(100.4, 4)"}, "hidden_information": "def keep_child_home(temperature, age): \n if age < 2 and temperature > 100.4: \n  return 2 \n elif age >= 2 and age < 5 and temperature > 102: \n  return 1 \n else: \n  return 0"}
{"ground_truth": "def calculate_sun_altitude(shadow_vane_angle, sighting_vane_angle):\n    return abs(shadow_vane_angle - sighting_vane_angle)", "problem_description": "Write a Python function to calculate the altitude of the Sun given the angle between the shadow vane and the sighting vane of an almucantar staff. The function should take two input parameters, the angle of the shadow vane and the angle of the sighting vane, and return the altitude of the Sun.The signature of the function is: def calculate_sun_altitude(shadow_vane_angle, sighting_vane_angle)", "test_cases": {"test1": "calculate_sun_altitude(30, 60)", "test2": "calculate_sun_altitude(90, 45)", "test3": "calculate_sun_altitude(20, 80)", "test4": "calculate_sun_altitude(10, 40)", "test5": "calculate_sun_altitude(50, 30)", "test6": "calculate_sun_altitude(0, 90)", "test7": "calculate_sun_altitude(45, 45)", "test8": "calculate_sun_altitude(70, 20)", "test9": "calculate_sun_altitude(60, 10)", "test10": "calculate_sun_altitude(80, 50)"}, "hidden_information": "def calculate_sun_altitude(shadow_vane_angle, sighting_vane_angle):\n    return abs(shadow_vane_angle - sighting_vane_angle)"}
{"ground_truth": "def classify_seaSnake(length, habitat, finnedTail): return 'venomous' if (100 > length > 0) and habitat == 'Pacific' and finnedTail == True else 'non-venomous'", "problem_description": "I want you to write a Python function that can help identify whether a given sea snake is venomous or not. The function should take into account some set of characteristics, but I'm not entirely sure what aspects are most relevant.The signature of the function is: def classify_seaSnake(length, habitat, finnedTail)", "test_cases": {"test1": "classify_seaSnake(0.7, 'Pacific', True)", "test2": "classify_seaSnake(10, 'Pacific', True)", "test3": "classify_seaSnake(0.3, 'Atlantic', True)", "test4": "classify_seaSnake(0.7, 'Pacific', False)", "test5": "classify_seaSnake(0.7, 'Indian', True)", "test6": "classify_seaSnake(0.5, 'Pacific', True)", "test7": "classify_seaSnake(0.85, 'Pacific', True)", "test8": "classify_seaSnake(45, 'Pacific', True)", "test9": "classify_seaSnake(0.73, 'Mediterranean', True)", "test10": "classify_seaSnake(0.9, 'Pacific', False)"}, "hidden_information": "def classify_seaSnake(length, habitat, finnedTail): return 'venomous' if (100 > length > 0) and habitat == 'Pacific' and finnedTail == True else 'non-venomous'"}
{"ground_truth": "def calculate_quanto_adjustment(spot_price, strike_price, volatility, fx_rate_volatility, correlation, risk_free_rate, time_to_maturity, quanto_strike_price):\n    import numpy as np\n    quanto_adjustment = (risk_free_rate - (1 / (1 + volatility ** 2)) * (strike_price / spot_price) * (fx_rate_volatility ** 2) * correlation) * time_to_maturity\n    quanto_payout = max(quanto_strike_price - strike_price, 0) * spot_price\n    return quanto_payout * quanto_adjustment", "problem_description": "I need an AI to write a python function that calculates the quanto adjustment for an option that has an underlying asset denominated in a different currency than the currency the option is settled in. I don't want to just lift the wikipedia model encompassing Girsanov's theorem. I want the model to be flexible enough to take other inputs as well. Can you do that?The signature of the function is: def calculate_quanto_adjustment(spot_price, strike_price, volatility, fx_rate_volatility, correlation, risk_free_rate, time_to_maturity, quanto_strike_price)", "test_cases": {"test1": "calculate_quanto_adjustment(100, 110, 0.2, 0.1, 0.5, 0.05, 1, 105)", "test2": "calculate_quanto_adjustment(500, 520, 0.3, 0.12, 0.6, 0.04, 0.5, 515)", "test3": "calculate_quanto_adjustment(2000, 2100, 0.1, 0.08, 0.4, 0.03, 2, 2050)", "test4": "calculate_quanto_adjustment(800, 850, 0.25, 0.15, 0.7, 0.06, 1.5, 825)", "test5": "calculate_quanto_adjustment(300, 320, 0.18, 0.11, 0.3, 0.02, 0.8, 310)", "test6": "calculate_quanto_adjustment(1200, 1300, 0.22, 0.14, 0.9, 0.08, 3, 1250)", "test7": "calculate_quanto_adjustment(900, 950, 0.28, 0.16, 0.2, 0.01, 0.2, 920)", "test8": "calculate_quanto_adjustment(700, 750, 0.35, 0.18, 0.8, 0.07, 1.2, 725)", "test9": "calculate_quanto_adjustment(1400, 1500, 0.12, 0.09, 0.1, 0.04, 1.8, 1450)", "test10": "calculate_quanto_adjustment(1000, 1100, 0.20, 0.10, 0.6, 0.05, 2.5, 1050)"}, "hidden_information": "def calculate_quanto_adjustment(spot_price, strike_price, volatility, fx_rate_volatility, correlation, risk_free_rate, time_to_maturity, quanto_strike_price):\n    import numpy as np\n    quanto_adjustment = (risk_free_rate - (1 / (1 + volatility ** 2)) * (strike_price / spot_price) * (fx_rate_volatility ** 2) * correlation) * time_to_maturity\n    quanto_payout = max(quanto_strike_price - strike_price, 0) * spot_price\n    return quanto_payout * quanto_adjustment"}
{"ground_truth": "def calculate_sodicity(exchangeable_sodium_percentage):\n    if exchangeable_sodium_percentage > 15:\n        return 'High'\n    else:\n        return 'Low'", "problem_description": "Hey agent, I want you to write a python function that determines the sodicity of a soil sample. It has something to do with sodium, but I'm not sure how it's calculated. Can you help me out?The signature of the function is: def calculate_sodicity(exchangeable_sodium_percentage)", "test_cases": {"test1": "calculate_sodicity(10)", "test2": "calculate_sodicity(20)", "test3": "calculate_sodicity(15)", "test4": "calculate_sodicity(5)", "test5": "calculate_sodicity(30)", "test6": "calculate_sodicity(0)", "test7": "calculate_sodicity(12)", "test8": "calculate_sodicity(18)", "test9": "calculate_sodicity(25)", "test10": "calculate_sodicity(1)"}, "hidden_information": "def calculate_sodicity(exchangeable_sodium_percentage):\n    if exchangeable_sodium_percentage > 15:\n        return 'High'\n    else:\n        return 'Low'"}
{"ground_truth": "def categorize_zekhring_people(population, livelihood):\n    if population > 300 and livelihood == 'agriculture':\n        return 'rural'\n    elif population <= 300 and livelihood == 'Tibetan Buddhism':\n        return 'semi-urban'\n    else:\n        return 'other'", "problem_description": "Hey AI, I want you to write a Python function that can categorize the Zekhring people based on their population and livelihood. I need you to figure out how to do it, but I want the function to take two parameters and return a string.The signature of the function is: def categorize_zekhring_people(population, livelihood)", "test_cases": {"test1": "categorize_zekhring_people(400, 'agriculture')", "test2": "categorize_zekhring_people(250, 'Tibetan Buddhism')", "test3": "categorize_zekhring_people(500, 'fishing')", "test4": "categorize_zekhring_people(200, 'farming')", "test5": "categorize_zekhring_people(350, 'small business')", "test6": "categorize_zekhring_people(100, 'schooling')", "test7": "categorize_zekhring_people(450, 'trade')", "test8": "categorize_zekhring_people(320, 'service')", "test9": "categorize_zekhring_people(280, 'government job')", "test10": "categorize_zekhring_people(420, 'freelancing')"}, "hidden_information": "def categorize_zekhring_people(population, livelihood):\n    if population > 300 and livelihood == 'agriculture':\n        return 'rural'\n    elif population <= 300 and livelihood == 'Tibetan Buddhism':\n        return 'semi-urban'\n    else:\n        return 'other'"}
{"ground_truth": "def choose_bracket(sentence, additional_info, context='clarify'):\n    if context == 'clarify':\n        return f\"({additional_info})\"\n    elif context == 'quote':\n        return f\"[{additional_info}]\"\n    else:\n        return f\" unknown bracket type: {context}\"\n", "problem_description": "I want the agent to write a python function that determines the type of bracket to use in a sentence. The function should take three parameters: the sentence, the additional information to be bracketed, and the context in which the bracket is being used. Can the agent help me come up with a function that returns the correct type of bracket?The signature of the function is: def choose_bracket(sentence, additional_info, context='clarify')", "test_cases": {"test1": "choose_bracket('I love to eat sandwiches', 'especially peanut butter ones', 'clarify')", "test2": "choose_bracket('He said, I love to eat sandwiches ', 'although he actually said pancakes', 'quote')", "test3": "choose_bracket('The capital of France is', 'maybe', 'random')", "test4": "choose_bracket('The teacher asked the student', 'who was very nervous', 'clarify')", "test5": "choose_bracket('The quote was, the only thing we have to fear is fear itself', 'according to Roosevelt', 'quote')", "test6": "choose_bracket('I love to read books', 'but only science fiction', 'clarify')", "test7": "choose_bracket('The student said', 'um, I mean', 'quote')", "test8": "choose_bracket('The weather forecast said it would rain', 'but it actually snowed', 'random')", "test9": "choose_bracket('I love to play sports', 'especially soccer and basketball', 'clarify')", "test10": "choose_bracket('The quote was, be the change you wish to see in the world', 'according to Gandhi', 'quote')"}, "hidden_information": "def choose_bracket(sentence, additional_info, context='clarify'):\n    if context == 'clarify':\n        return f\"({additional_info})\"\n    elif context == 'quote':\n        return f\"[{additional_info}]\"\n    else:\n        return f\" unknown bracket type: {context}\"\n"}
{"ground_truth": "def interpret_intention(statement):\n    past_marker = ['said', 'had said', 'was going to']\n    past_tense = False\n    for marker in past_marker:\n        if marker in statement.lower():\n            past_tense = True\n            break\n    if 'would' in statement.lower() or 'will' in statement.lower():\n        if past_tense:\n            return 'past conditional'\n        else:\n            return 'present conditional'\n    return 'unknown'", "problem_description": "I want you to write a python function that can interpret a person's intention based on their statement about buying a new car. The function should determine if the statement is referring to a past or future action. The human will give a statement as input, and the model needs to ask for clarification if the statement is ambiguous. The model's final output should be either 'past conditional' or 'present conditional' based on the context.The signature of the function is: def interpret_intention(statement)", "test_cases": {"test1": "interpret_intention('He said he would buy a new car')", "test2": "interpret_intention('He would buy a new car')", "test3": "interpret_intention('She said she was going to buy a new car')", "test4": "interpret_intention('They will buy a new car next year')", "test5": "interpret_intention('I would have bought a new car if I had enough money')", "test6": "interpret_intention('He said he is going to buy a new car')", "test7": "interpret_intention('She said she would have bought a new car if she had won the lottery')", "test8": "interpret_intention('They said they would buy a new car next year')", "test9": "interpret_intention('I would buy a new car if I won the lottery')", "test10": "interpret_intention('He said he will buy a new car next year')"}, "hidden_information": "def interpret_intention(statement):\n    past_marker = ['said', 'had said', 'was going to']\n    past_tense = False\n    for marker in past_marker:\n        if marker in statement.lower():\n            past_tense = True\n            break\n    if 'would' in statement.lower() or 'will' in statement.lower():\n        if past_tense:\n            return 'past conditional'\n        else:\n            return 'present conditional'\n    return 'unknown'"}
{"ground_truth": "def is_heavy_metal(tempo, aggression, vocal_style, guitar_use, lyrics):\n    if tempo > 150 and aggression > 5 and vocal_style in ['guttural', 'high_pitched'] and guitar_use and lyrics in ['dark', 'aggressive']:\n        return True\n    elif tempo > 100 and aggression > 3 and vocal_style in ['clean', 'harsh'] and guitar_use and lyrics in ['complex', 'story_telling']:\n        return True\n    else:\n        return False", "problem_description": "Hey, I want you to write a Python function that can determine if a given music genre is heavy metal or not. The function should take into account various parameters such as tempo, aggression, vocal style, guitar use, and lyrics. Can you help me with that?The signature of the function is: def is_heavy_metal(tempo, aggression, vocal_style, guitar_use, lyrics)", "test_cases": {"test1": "is_heavy_metal(160, 6, 'guttural', True, 'dark')", "test2": "is_heavy_metal(100, 2, 'clean', False, 'simple')", "test3": "is_heavy_metal(150, 4, 'high_pitched', True, 'aggressive')", "test4": "is_heavy_metal(80, 1, 'soft', False, 'happy')", "test5": "is_heavy_metal(120, 3, 'harsh', True, 'complex')", "test6": "is_heavy_metal(140, 5, 'clean', True, 'story_telling')", "test7": "is_heavy_metal(180, 7, 'guttural', True, 'dark')", "test8": "is_heavy_metal(90, 2, 'soft', False, 'simple')", "test9": "is_heavy_metal(160, 6, 'high_pitched', True, 'aggressive')", "test10": "is_heavy_metal(110, 3, 'clean', True, 'complex')"}, "hidden_information": "def is_heavy_metal(tempo, aggression, vocal_style, guitar_use, lyrics):\n    if tempo > 150 and aggression > 5 and vocal_style in ['guttural', 'high_pitched'] and guitar_use and lyrics in ['dark', 'aggressive']:\n        return True\n    elif tempo > 100 and aggression > 3 and vocal_style in ['clean', 'harsh'] and guitar_use and lyrics in ['complex', 'story_telling']:\n        return True\n    else:\n        return False"}
{"ground_truth": "def assign_astronauts_to_missions(astronaut_skills, mission_requirements): \n\t# astronaut_skills is a dictionary where the keys are astronaut names and the values are lists of their skills\n\t# mission_requirements is a dictionary where the keys are mission names and the values are lists of required skills\n\tassignments = {}\n\tfor mission, skills_required in mission_requirements.items():\n\t\tbest_match = None\n\t\tbest_skill_match = 0\n\t\tfor astronaut, skills in astronaut_skills.items():\n\t\t\t# Calculate the number of matching skills for the current astronaut\n\t\t\tskill_match = sum(1 for skill in skills_required if skill in skills)\n\t\t\t# If the current astronaut has more matching skills than the previous best match, update the best match\n\t\t\tif skill_match > best_skill_match:\n\t\t\t\tbest_match = astronaut\n\t\t\t\tbest_skill_match = skill_match\n\t\tassignments[mission] = best_match\n\treturn assignments", "problem_description": "I want you to write a python function to assign astronauts to space missions based on their skills and qualifications. I'll give you examples of the input and output if you need, but basically the function should take two inputs: the skills of each astronaut and the requirements of each mission, and output the best assignment of astronauts to missions.The signature of the function is: def assign_astronauts_to_missions(astronaut_skills, mission_requirements)", "test_cases": {"test1": "assign_astronauts_to_missions({'John': ['pilot', 'engineer'], 'Alice': ['scientist', 'engineer'], 'Bob': ['pilot', 'scientist']}, {'Mission1': ['pilot', 'engineer'], 'Mission2': ['scientist', 'engineer']})", "test2": "assign_astronauts_to_missions({'Charlie': ['pilot', 'scientist'], 'David': ['engineer', 'pilot']}, {'Mission1': ['engineer', 'scientist'], 'Mission2': ['pilot']})", "test3": "assign_astronauts_to_missions({'Emily': ['pilot', 'engineer'], 'Frank': ['scientist', 'pilot']}, {'Mission1': ['pilot', 'engineer'], 'Mission2': ['scientist']})", "test4": "assign_astronauts_to_missions({'George': ['pilot', 'scientist'], 'Hannah': ['engineer', 'scientist']}, {'Mission1': ['engineer', 'pilot'], 'Mission2': ['scientist', 'engineer']})", "test5": "assign_astronauts_to_missions({'Ivan': ['pilot', 'engineer'], 'Julia': ['scientist', 'pilot']}, {'Mission1': ['pilot', 'scientist'], 'Mission2': ['engineer']})", "test6": "assign_astronauts_to_missions({'Kevin': ['pilot', 'scientist'], 'Laura': ['engineer', 'scientist']}, {'Mission1': ['scientist', 'engineer'], 'Mission2': ['pilot', 'engineer']})", "test7": "assign_astronauts_to_missions({'Matt': ['pilot', 'engineer'], 'Nancy': ['scientist', 'pilot']}, {'Mission1': ['engineer', 'pilot'], 'Mission2': ['scientist']})", "test8": "assign_astronauts_to_missions({'Oscar': ['pilot', 'scientist'], 'Paige': ['engineer', 'pilot']}, {'Mission1': ['pilot', 'engineer'], 'Mission2': ['scientist', 'engineer']})", "test9": "assign_astronauts_to_missions({'Quebec': ['pilot', 'scientist'], 'Rachael': ['engineer', 'scientist']}, {'Mission1': ['scientist', 'pilot'], 'Mission2': ['engineer', 'pilot']})", "test10": "assign_astronauts_to_missions({'Samuel': ['pilot', 'engineer'], 'Tanya': ['scientist', 'pilot']}, {'Mission1': ['pilot', 'engineer'], 'Mission2': ['scientist', 'engineer']})"}, "hidden_information": "def assign_astronauts_to_missions(astronaut_skills, mission_requirements): \n\t# astronaut_skills is a dictionary where the keys are astronaut names and the values are lists of their skills\n\t# mission_requirements is a dictionary where the keys are mission names and the values are lists of required skills\n\tassignments = {}\n\tfor mission, skills_required in mission_requirements.items():\n\t\tbest_match = None\n\t\tbest_skill_match = 0\n\t\tfor astronaut, skills in astronaut_skills.items():\n\t\t\t# Calculate the number of matching skills for the current astronaut\n\t\t\tskill_match = sum(1 for skill in skills_required if skill in skills)\n\t\t\t# If the current astronaut has more matching skills than the previous best match, update the best match\n\t\t\tif skill_match > best_skill_match:\n\t\t\t\tbest_match = astronaut\n\t\t\t\tbest_skill_match = skill_match\n\t\tassignments[mission] = best_match\n\treturn assignments"}
{"ground_truth": "def rate_rage_comic(comic: str) -> int: \n    # Define a dictionary to store humor levels \n    humor_levels = {\"LULZ\": 1, \"derp\": 2, \"derpette\": 2, \"BASTARD\": 5, \"ASS\": 5}\n    # Tokenize the comic content \n    tokens = comic.split() \n    # Initialize the humor score \n    score = 0 \n    # Iterate over each token and update the humor score \n    for token in tokens: \n        if token in humor_levels: \n            score += humor_levels[token] \n    # Return the humor score \n    return score", "problem_description": "I want you to write a Python function to automatically rate the humor level of rage comics. The function should take a string representing the content of the rage comic as input and return an integer score indicating the humor level. Can you help me with this?The signature of the function is: def rate_rage_comic(comic", "test_cases": {"test1": "rate_rage_comic(\"LULZ this rage comic is so funny\")", "test2": "rate_rage_comic(\"The woman gagged during the blowjob. BASTARD. YOU OWE ME 20 MINUTES OF ASS.\")", "test3": "rate_rage_comic(\"This rage comic is so stupid\")", "test4": "rate_rage_comic(\"derp and derpette are so funny\")", "test5": "rate_rage_comic(\"Princess Beatrice's hat is the best\")", "test6": "rate_rage_comic(\"I love rage comics, they're the best thing on the internet\")", "test7": "rate_rage_comic(\"Rage comics are the worst thing on the internet. They're so unfunny.\")", "test8": "rate_rage_comic(\"This rage comic is okay, I guess. It's got a few LULZ.\")", "test9": "rate_rage_comic(\"The faces in this rage comic are so stupid. DERP.\")", "test10": "rate_rage_comic(\"Rage comics are a sad pantomime of humor.\")"}, "hidden_information": "def rate_rage_comic(comic: str) -> int: \n    # Define a dictionary to store humor levels \n    humor_levels = {\"LULZ\": 1, \"derp\": 2, \"derpette\": 2, \"BASTARD\": 5, \"ASS\": 5}\n    # Tokenize the comic content \n    tokens = comic.split() \n    # Initialize the humor score \n    score = 0 \n    # Iterate over each token and update the humor score \n    for token in tokens: \n        if token in humor_levels: \n            score += humor_levels[token] \n    # Return the humor score \n    return score"}
{"ground_truth": "def calculate_inhaled_protesters(flags_burned, smoke_inhalation_rate, total_protesters): result = int(flags_burned * smoke_inhalation_rate * total_protesters / 100); return result", "problem_description": "Hey agent, I need your help in writing a Python function. I'm trying to analyze the protests in Lahore and I want the function to take into account the number of flags burned during the protests and the rate of smoke inhalation. Can you write a function that calculates the number of protesters who inhaled smoke?The signature of the function is: def calculate_inhaled_protesters(flags_burned, smoke_inhalation_rate, total_protesters)", "test_cases": {"test1": "calculate_inhaled_protesters(100, 0.05, 10000)", "test2": "calculate_inhaled_protesters(50, 0.03, 5000)", "test3": "calculate_inhaled_protesters(200, 0.01, 20000)", "test4": "calculate_inhaled_protesters(80, 0.04, 8000)", "test5": "calculate_inhaled_protesters(150, 0.02, 15000)", "test6": "calculate_inhaled_protesters(300, 0.06, 30000)", "test7": "calculate_inhaled_protesters(250, 0.08, 25000)", "test8": "calculate_inhaled_protesters(120, 0.07, 12000)", "test9": "calculate_inhaled_protesters(180, 0.09, 18000)", "test10": "calculate_inhaled_protesters(400, 0.01, 40000)"}, "hidden_information": "def calculate_inhaled_protesters(flags_burned, smoke_inhalation_rate, total_protesters): result = int(flags_burned * smoke_inhalation_rate * total_protesters / 100); return result"}
{"ground_truth": "def recommend_tv_shows(tv_shows, streaming_history, genres_of_interest, time_of_day, network_bandwidth):    \n    recommended_shows = []\n    for show in tv_shows:\n        if show['genre'] in genres_of_interest and show['streaming_requirement'] <= network_bandwidth and show['viewing_hour'] == time_of_day:\n            if show['total_views'] > 1000 and show['average_rating'] > 4:\n                recommended_shows.append(show['name'])\n            elif show['name'] in streaming_history:\n                recommended_shows.append(show['name'])\n    return recommended_shows", "problem_description": "Can you write a python function that I can use on my iPhone to recommend TV shows that I can stream from my home network or over the 3G network based on my viewing history, favourite genres, my current time, and network bandwidth? I also want to make sure the recommended shows are popular and well-rated.The signature of the function is: def recommend_tv_shows(tv_shows, streaming_history, genres_of_interest, time_of_day, network_bandwidth)", "test_cases": {"test1": "recommend_tv_shows([{'name': 'Show1', 'genre': 'Comedy', 'streaming_requirement': 5, 'viewing_hour': 'evening', 'total_views': 2000, 'average_rating': 4.5}, {'name': 'Show2', 'genre': 'Drama', 'streaming_requirement': 10, 'viewing_hour': 'evening', 'total_views': 500, 'average_rating': 3}], ['Show1'], ['Comedy'], 'evening', 5)", "test2": "recommend_tv_shows([{'name': 'Show3', 'genre': 'Action', 'streaming_requirement': 7, 'viewing_hour': 'night', 'total_views': 1500, 'average_rating': 4.2}], [], ['Action'], 'night', 8)", "test3": "recommend_tv_shows([{'name': 'Show4', 'genre': 'Comedy', 'streaming_requirement': 3, 'viewing_hour': 'morning', 'total_views': 2500, 'average_rating': 4.8}], ['Show3'], ['Comedy'], 'morning', 5)", "test4": "recommend_tv_shows([{'name': 'Show5', 'genre': 'Drama', 'streaming_requirement': 12, 'viewing_hour': 'afternoon', 'total_views': 3000, 'average_rating': 4.9}], [], ['Drama'], 'afternoon', 12)", "test5": "recommend_tv_shows([{'name': 'Show6', 'genre': 'Action', 'streaming_requirement': 9, 'viewing_hour': 'morning', 'total_views': 3500, 'average_rating': 4.7}], ['Show5'], ['Action'], 'morning', 7)", "test6": "recommend_tv_shows([{'name': 'Show7', 'genre': 'Comedy', 'streaming_requirement': 6, 'viewing_hour': 'evening', 'total_views': 4000, 'average_rating': 4.4}], [], ['Comedy'], 'evening', 5)", "test7": "recommend_tv_shows([{'name': 'Show8', 'genre': 'Drama', 'streaming_requirement': 11, 'viewing_hour': 'night', 'total_views': 4500, 'average_rating': 4.6}], [], ['Drama'], 'night', 9)", "test8": "recommend_tv_shows([{'name': 'Show9', 'genre': 'Action', 'streaming_requirement': 8, 'viewing_hour': 'afternoon', 'total_views': 5000, 'average_rating': 4.3}], [], ['Action'], 'afternoon', 7)", "test9": "recommend_tv_shows([{'name': 'Show10', 'genre': 'Comedy', 'streaming_requirement': 4, 'viewing_hour': 'morning', 'total_views': 5500, 'average_rating': 4.1}], [], ['Comedy'], 'morning', 4)", "test10": "recommend_tv_shows([{'name': 'Show11', 'genre': 'Drama', 'streaming_requirement': 13, 'viewing_hour': 'evening', 'total_views': 6000, 'average_rating': 4.0}], ['Show10'], ['Drama'], 'evening', 10)"}, "hidden_information": "def recommend_tv_shows(tv_shows, streaming_history, genres_of_interest, time_of_day, network_bandwidth):    \n    recommended_shows = []\n    for show in tv_shows:\n        if show['genre'] in genres_of_interest and show['streaming_requirement'] <= network_bandwidth and show['viewing_hour'] == time_of_day:\n            if show['total_views'] > 1000 and show['average_rating'] > 4:\n                recommended_shows.append(show['name'])\n            elif show['name'] in streaming_history:\n                recommended_shows.append(show['name'])\n    return recommended_shows"}
{"ground_truth": "def calculate_ideal_force_distribution(bowler_skill_level, lane_condition, ball_weight, desired_score):\n    if bowler_skill_level == 'pro':\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.7, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 25}\n    elif bowler_skill_level == 'intermediate':\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.6, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 20}\n    else:\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.5, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 15}", "problem_description": "I want the agent to write a python function that simulates a smart bowling ball, so when given the skill level of a bowler, the lane conditions, the ball weight and the desired score, it returns the suitable force to get this perfect shotThe signature of the function is: def calculate_ideal_force_distribution(bowler_skill_level, lane_condition, ball_weight, desired_score)", "test_cases": {"test1": "calculate_ideal_force_distribution('pro', 'oily', 14, 250)", "test2": "calculate_ideal_force_distribution('intermediate', 'dry', 12, 200)", "test3": "calculate_ideal_force_distribution('beginner', 'oily', 10, 150)", "test4": "calculate_ideal_force_distribution('pro', 'medium', 16, 280)", "test5": "calculate_ideal_force_distribution('intermediate', 'oily', 13, 220)", "test6": "calculate_ideal_force_distribution('beginner', 'dry', 11, 180)", "test7": "calculate_ideal_force_distribution('pro', 'dry', 15, 260)", "test8": "calculate_ideal_force_distribution('intermediate', 'medium', 14, 240)", "test9": "calculate_ideal_force_distribution('beginner', 'oily', 9, 140)", "test10": "calculate_ideal_force_distribution('pro', 'medium', 16, 300)"}, "hidden_information": "def calculate_ideal_force_distribution(bowler_skill_level, lane_condition, ball_weight, desired_score):\n    if bowler_skill_level == 'pro':\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.7, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 25}\n    elif bowler_skill_level == 'intermediate':\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.6, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 20}\n    else:\n        return {' \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 0.5, ' \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0438\u0432\u0430\u043d\u0438\u044f': 15}"}
{"ground_truth": "def is_steve_a_ninja(action, denied_by_apple, carrying_ninja_star):\n    ninja_points = 0\n    if action == 'sneaking':\n        ninja_points += 1\n    if not carrying_ninja_star:\n        ninja_points += 1\n    if denied_by_apple:\n        ninja_points += 1\n    return ninja_points >= 2", "problem_description": "Hey agent, I want you to write a python function to determine if Steve Jobs is a ninja based on his actions. I just know that he was denied by Apple for some reason and it had something to do with ninja stars. Can you help me write a function to categorize Steves actions?The signature of the function is: def is_steve_a_ninja(action, denied_by_apple, carrying_ninja_star)", "test_cases": {"test1": "is_steve_a_ninja('sneaking', True, False)", "test2": "is_steve_a_ninja('walking', False, False)", "test3": "is_steve_a_ninja('running', True, True)", "test4": "is_steve_a_ninja('hiding', True, False)", "test5": "is_steve_a_ninja('jogging', False, False)", "test6": "is_steve_a_ninja('sneaking', False, True)", "test7": "is_steve_a_ninja('climbing', True, False)", "test8": "is_steve_a_ninja('swimming', False, False)", "test9": "is_steve_a_ninja('sneaking', True, False)", "test10": "is_steve_a_ninja('jumping', False, True)"}, "hidden_information": "def is_steve_a_ninja(action, denied_by_apple, carrying_ninja_star):\n    ninja_points = 0\n    if action == 'sneaking':\n        ninja_points += 1\n    if not carrying_ninja_star:\n        ninja_points += 1\n    if denied_by_apple:\n        ninja_points += 1\n    return ninja_points >= 2"}
{"ground_truth": "def calculate_soap_production(fat_amount, water_amount, soil_alkalinity):\n    # calculate the amount of soap using a simplified saponification model\n    # this model assumes that all fat is converted to soap\n    # and that the amount of soap produced is directly proportional to the amount of fat, water and soil alkalinity\n    if water_amount > 0 and soil_alkalinity > 6:\n        soap_amount = fat_amount * 0.8\n    elif water_amount > 0 and soil_alkalinity > 0:\n        soap_amount = fat_amount * 0.5\n    else:\n        soap_amount = 0\n    return soap_amount", "problem_description": "I need a python function that can calculate the amount of soap that can be produced from a corpse's fat given certain environmental conditions such as the presence of water and alkaline soil. The agent should collaborate with me to determine the exact parameters and conditions that the function will use.The signature of the function is: def calculate_soap_production(fat_amount, water_amount, soil_alkalinity)", "test_cases": {"test1": "calculate_soap_production(10, 5, 7)", "test2": "calculate_soap_production(20, 0, 5)", "test3": "calculate_soap_production(15, 10, 8)", "test4": "calculate_soap_production(30, 0, 6)", "test5": "calculate_soap_production(25, 15, 7)", "test6": "calculate_soap_production(18, 8, 7)", "test7": "calculate_soap_production(12, 6, 5)", "test8": "calculate_soap_production(28, 12, 8)", "test9": "calculate_soap_production(22, 10, 7)", "test10": "calculate_soap_production(35, 0, 5)"}, "hidden_information": "def calculate_soap_production(fat_amount, water_amount, soil_alkalinity):\n    # calculate the amount of soap using a simplified saponification model\n    # this model assumes that all fat is converted to soap\n    # and that the amount of soap produced is directly proportional to the amount of fat, water and soil alkalinity\n    if water_amount > 0 and soil_alkalinity > 6:\n        soap_amount = fat_amount * 0.8\n    elif water_amount > 0 and soil_alkalinity > 0:\n        soap_amount = fat_amount * 0.5\n    else:\n        soap_amount = 0\n    return soap_amount"}
{"ground_truth": "def is_product_copy(product_features, existing_products, similarity_threshold=0.5):\n    if product_features == []:\n        return False\n    max_similarity = 0\n    for existing_product in existing_products:\n        features_similarity = sum([1 for feature in product_features if feature in existing_product]) / len(existing_product)\n        max_similarity = max(max_similarity, features_similarity)\n    return max_similarity > similarity_threshold", "problem_description": "Hey, I need a python function that can determine whether a new product is a copy of an existing product in the tech industry. The product features are represented as lists of strings, and I want the function to return True if the new product is a copy and False otherwise. Can you help me with that?The signature of the function is: def is_product_copy(product_features, existing_products, similarity_threshold=0.5)", "test_cases": {"test1": "is_product_copy(['touch_screen', 'wi_fi', '4k_screen'], [['touch_screen', 'wi_fi', 'full_hd_screen'], ['touch_screen', 'wi_fi', 'hd_screen']])", "test2": "is_product_copy(['hd_screen', 'bluetooth'], [['touch_screen', 'wi_fi', 'hd_screen'], ['hd_screen', 'bluetooth', '4k_screen']])", "test3": "is_product_copy([], [['touch_screen', 'wi_fi', 'hd_screen'], ['hd_screen', 'bluetooth', '4k_screen']])", "test4": "is_product_copy(['ai_assistant', 'vr'], [['ai_assistant'], ['vr', 'hd_screen']])", "test5": "is_product_copy(['wireless_charging', 'fast_charging'], [['wireless_charging'], ['fast_charging', 'longBattery_life']])", "test6": "is_product_copy(['touch_screen', '2010'], [['touch_screen', 'wi_fi', 'full_hd_screen'], ['touch_screen', 'wi_fi', 'hd_screen']])", "test7": "is_product_copy(['hd_screen', 'six Inch'], [['touch_screen', 'wi_fi', 'hd_screen'], ['hd_screen', 'bluetooth', '4k_screen']])", "test8": "is_product_copy(['ip68', 'dual_sim'], [['ai_assistant'], ['vr', 'hd_screen']])", "test9": "is_product_copy(['Flips_mobile'], [['wireless_charging'], ['fast_charging', 'longBattery_life']])", "test10": "is_product_copy(['Weigtedcamsuda', 'fold_screens'], [['wireless_charging'], ['fast_charging', 'longBattery_life']])"}, "hidden_information": "def is_product_copy(product_features, existing_products, similarity_threshold=0.5):\n    if product_features == []:\n        return False\n    max_similarity = 0\n    for existing_product in existing_products:\n        features_similarity = sum([1 for feature in product_features if feature in existing_product]) / len(existing_product)\n        max_similarity = max(max_similarity, features_similarity)\n    return max_similarity > similarity_threshold"}
{"ground_truth": "def optimize_flavors(sugar_level, salt_level, fat_level, target_bliss_point):\n  if sugar_level > target_bliss_point:\n    sugar_level = target_bliss_point\n  if salt_level > target_bliss_point / 2:\n    salt_level = target_bliss_point / 2\n  if fat_level > target_bliss_point / 3:\n    fat_level = target_bliss_point / 3\n  return sugar_level, salt_level, fat_level", "problem_description": "I want the agent to write a python function that can optimize flavor ingredient combinations for junk food. I'm not sure what I want exactly, can you ask me some questions to better understand my requirements?The signature of the function is: def optimize_flavors(sugar_level, salt_level, fat_level, target_bliss_point)", "test_cases": {"test1": "optimize_flavors(10, 5, 3, 8)", "test2": "optimize_flavors(12, 6, 4, 9)", "test3": "optimize_flavors(15, 7, 5, 10)", "test4": "optimize_flavors(8, 4, 2, 7)", "test5": "optimize_flavors(18, 9, 6, 11)", "test6": "optimize_flavors(20, 10, 8, 12)", "test7": "optimize_flavors(12, 8, 6, 10)", "test8": "optimize_flavors(15, 9, 7, 11)", "test9": "optimize_flavors(10, 6, 4, 8)", "test10": "optimize_flavors(18, 10, 8, 12)"}, "hidden_information": "def optimize_flavors(sugar_level, salt_level, fat_level, target_bliss_point):\n  if sugar_level > target_bliss_point:\n    sugar_level = target_bliss_point\n  if salt_level > target_bliss_point / 2:\n    salt_level = target_bliss_point / 2\n  if fat_level > target_bliss_point / 3:\n    fat_level = target_bliss_point / 3\n  return sugar_level, salt_level, fat_level"}
{"ground_truth": "def check_cake_status(baking_time, baking_method, has_stand, has_whistle, flame_level, is_toothpick_clean):\n    if baking_method == 'sand' and has_stand == False and has_whistle == False and baking_time >= 45 and is_toothpick_clean == True:\n        return 'done'\n    elif baking_method == 'water' and has_stand == True and has_whistle == False and baking_time >= 45 and is_toothpick_clean == True and flame_level == 'low':\n        return 'done'\n    else:\n        return 'not done'", "problem_description": "Hey, can you write a Python function that can determine if a cake is done or not when baked in a pressure cooker? I want to know if it's done based on some factors like baking time, baking method, and flame level. Can you please help me with that?The signature of the function is: def check_cake_status(baking_time, baking_method, has_stand, has_whistle, flame_level, is_toothpick_clean)", "test_cases": {"test1": "check_cake_status(45, 'sand', False, False, 'low', True)", "test2": "check_cake_status(30, 'water', True, False, 'medium', False)", "test3": "check_cake_status(50, 'water', True, False, 'low', True)", "test4": "check_cake_status(40, 'sand', False, False, 'high', True)", "test5": "check_cake_status(45, 'water', True, False, 'low', True)", "test6": "check_cake_status(45, 'sand', False, True, 'low', True)", "test7": "check_cake_status(45, 'water', True, False, 'low', False)", "test8": "check_cake_status(50, 'sand', False, False, 'low', True)", "test9": "check_cake_status(40, 'water', False, False, 'low', True)", "test10": "check_cake_status(45, 'sand', True, False, 'low', True)"}, "hidden_information": "def check_cake_status(baking_time, baking_method, has_stand, has_whistle, flame_level, is_toothpick_clean):\n    if baking_method == 'sand' and has_stand == False and has_whistle == False and baking_time >= 45 and is_toothpick_clean == True:\n        return 'done'\n    elif baking_method == 'water' and has_stand == True and has_whistle == False and baking_time >= 45 and is_toothpick_clean == True and flame_level == 'low':\n        return 'done'\n    else:\n        return 'not done'"}
{"ground_truth": "def get_sci_fi_concepts(authors_works): return {author: [concept for concept in work.split(',')] for author, work in [aw.split(':') for aw in authors_works]}", "problem_description": "I want you to write a Python function that can take a list of science fiction authors and their works and return a dictionary where the keys are the authors and the values are lists of the sci-fi concepts they came up with. For example, if the input is ['Isaac Asimov: Robotics, Genetic Engineering', 'E. E. Smith: Deep Space, Pressure Suit'], the output should be {'Isaac Asimov': ['Robotics', 'Genetic Engineering'], 'E. E. Smith': ['Deep Space', 'Pressure Suit']}. Can you help me with this?The signature of the function is: def get_sci_fi_concepts(authors_works)", "test_cases": {"test1": "get_sci_fi_concepts(['Isaac Asimov: Robotics, Genetic Engineering', 'E. E. Smith: Deep Space, Pressure Suit'])", "test2": "get_sci_fi_concepts(['Jack Williamson: Genetic Engineering, Ion Drive', 'Arthur C. Clarke: Zero-gravity'])", "test3": "get_sci_fi_concepts(['Dave Gerrold: Computer Virus', 'John Brunner: Worm'])", "test4": "get_sci_fi_concepts(['James Blish: Gas Giant', 'Poul Anderson: Genetic Engineer'])", "test5": "get_sci_fi_concepts(['E. E. Smith: Blast Off, Galactic Patrol', 'Jack Binder: Zero-gravity'])", "test6": "get_sci_fi_concepts(['Isaac Asimov: Robotics, Three Laws', 'Arthur C. Clarke: Space Odyssey'])", "test7": "get_sci_fi_concepts(['E. E. Smith: Deep Space, Pressure Suit', 'Jack Williamson: Ion Drive, Equalizer'])", "test8": "get_sci_fi_concepts(['Dave Gerrold: Computer Virus, Harlie', 'John Brunner: Worm, Shockwave Rider'])", "test9": "get_sci_fi_concepts(['James Blish: Gas Giant, Solar Plexus', 'Poul Anderson: Genetic Engineer, Brain Wave'])", "test10": "get_sci_fi_concepts(['Isaac Asimov: Robotics, Liar!', 'E. E. Smith: Blast Off, Galactic Patrol'])"}, "hidden_information": "def get_sci_fi_concepts(authors_works): return {author: [concept for concept in work.split(',')] for author, work in [aw.split(':') for aw in authors_works]}"}
{"ground_truth": "def interbreeding_likelihood(population1_genetics, population2_genetics, population1_culture, population2_culture, contact_level):\n    compatibility_score = 0\n    if population1_genetics['species'] == population2_genetics['species']:\n        compatibility_score += 1\n    if population1_culture['values'] == population2_culture['values']:\n        compatibility_score += 1\n    if contact_level > 0.5:\n        compatibility_score += 1\n    return compatibility_score / 3", "problem_description": "I want the agent to write a Python function that determines the likelihood of interbreeding between two ancient human populations based on their genetic and cultural compatibility. The function should take into account the species of each population, their cultural values, and the level of contact between them.The signature of the function is: def interbreeding_likelihood(population1_genetics, population2_genetics, population1_culture, population2_culture, contact_level)", "test_cases": {"test1": "interbreeding_likelihood({'species': 'Homo sapiens'}, {'species': 'Homo sapiens'}, {'values': 'cooperative'}, {'values': 'cooperative'}, 0.8)", "test2": "interbreeding_likelihood({'species': 'Neandertals'}, {'species': 'Homo sapiens'}, {'values': 'competitive'}, {'values': 'cooperative'}, 0.2)", "test3": "interbreeding_likelihood({'species': 'Neandertals'}, {'species': 'Neandertals'}, {'values': 'cooperative'}, {'values': 'cooperative'}, 0.9)", "test4": "interbreeding_likelihood({'species': 'Homo sapiens'}, {'species': 'Denisovans'}, {'values': 'competitive'}, {'values': 'competitive'}, 0.1)", "test5": "interbreeding_likelihood({'species': 'Neandertals'}, {'species': 'Homo sapiens'}, {'values': 'cooperative'}, {'values': 'competitive'}, 0.5)", "test6": "interbreeding_likelihood({'species': 'Homo sapiens'}, {'species': 'Neandertals'}, {'values': 'competitive'}, {'values': 'competitive'}, 0.8)", "test7": "interbreeding_likelihood({'species': 'Denisovans'}, {'species': 'Neandertals'}, {'values': 'cooperative'}, {'values': 'cooperative'}, 0.3)", "test8": "interbreeding_likelihood({'species': 'Homo sapiens'}, {'species': 'Homo sapiens'}, {'values': 'competitive'}, {'values': 'competitive'}, 0.4)", "test9": "interbreeding_likelihood({'species': 'Neandertals'}, {'species': 'Denisovans'}, {'values': 'cooperative'}, {'values': 'competitive'}, 0.6)", "test10": "interbreeding_likelihood({'species': 'Homo sapiens'}, {'species': 'Neandertals'}, {'values': 'cooperative'}, {'values': 'cooperative'}, 0.95)"}, "hidden_information": "def interbreeding_likelihood(population1_genetics, population2_genetics, population1_culture, population2_culture, contact_level):\n    compatibility_score = 0\n    if population1_genetics['species'] == population2_genetics['species']:\n        compatibility_score += 1\n    if population1_culture['values'] == population2_culture['values']:\n        compatibility_score += 1\n    if contact_level > 0.5:\n        compatibility_score += 1\n    return compatibility_score / 3"}
{"ground_truth": "def calculate_steam_truck_efficiency(trucks, max_hp=100, max_tonnage=50):\n    def calculate_efficiency(truck):\n        return (truck['hp'] / max_hp) * (truck['tonnage'] / max_tonnage) * (truck['speed'] / 50)\n    return max([calculate_efficiency(truck) for truck in trucks], default=0)", "problem_description": "Can you write a python function that helps to analyze the efficiency of a list of steam-powered trucks collected from historical archives?The signature of the function is: def calculate_steam_truck_efficiency(trucks, max_hp=100, max_tonnage=50)", "test_cases": {"test1": "calculate_steam_truck_efficiency([{'hp': 80, 'tonnage': 30, 'speed': 30}, {'hp': 60, 'tonnage': 20, 'speed': 40}])", "test2": "calculate_steam_truck_efficiency([{'hp': 120, 'tonnage': 40, 'speed': 35}])", "test3": "calculate_steam_truck_efficiency([{'hp': 80, 'tonnage': 50, 'speed': 50}, {'hp': 120, 'tonnage': 40, 'speed': 35}])", "test4": "calculate_steam_truck_efficiency([{'hp': 0, 'tonnage': 0, 'speed': 0}])", "test5": "calculate_steam_truck_efficiency([])", "test6": "calculate_steam_truck_efficiency([{'hp': 150, 'tonnage': 60, 'speed': 45}])", "test7": "calculate_steam_truck_efficiency([{'hp': 90, 'tonnage': 45, 'speed': 40}, {'hp': 80, 'tonnage': 35, 'speed': 35}])", "test8": "calculate_steam_truck_efficiency([{'hp': 50, 'tonnage': 20, 'speed': 50}])", "test9": "calculate_steam_truck_efficiency([{'hp': 30, 'tonnage': 15, 'speed': 20}])", "test10": "calculate_steam_truck_efficiency([{'hp': 210, 'tonnage': 75, 'speed': 55}])"}, "hidden_information": "def calculate_steam_truck_efficiency(trucks, max_hp=100, max_tonnage=50):\n    def calculate_efficiency(truck):\n        return (truck['hp'] / max_hp) * (truck['tonnage'] / max_tonnage) * (truck['speed'] / 50)\n    return max([calculate_efficiency(truck) for truck in trucks], default=0)"}
{"ground_truth": "def calculate_calorie_burn(temperature, weight, timerate):\n    if temperature < 18:\n        return weight * timerate * 0.1\n    elif 18 <= temperature <= 22:\n        return weight * timerate * 0.05\n    else:\n        return weight * timerate * 0.01", "problem_description": "Hey agent, I need you to write a Python function that calculates the number of calories burned based on the temperature of the office. The idea is that when it's cold, our bodies work harder to warm themselves up, burning more calories. Can you help me come up with a simple function to estimate this calorie burn?The signature of the function is: def calculate_calorie_burn(temperature, weight, timerate)", "test_cases": {"test1": "calculate_calorie_burn(15, 60, 8)", "test2": "calculate_calorie_burn(20, 70, 8)", "test3": "calculate_calorie_burn(25, 55, 8)", "test4": "calculate_calorie_burn(12, 65, 8)", "test5": "calculate_calorie_burn(18, 62, 8)", "test6": "calculate_calorie_burn(22, 75, 8)", "test7": "calculate_calorie_burn(10, 50, 8)", "test8": "calculate_calorie_burn(28, 68, 8)", "test9": "calculate_calorie_burn(19, 58, 8)", "test10": "calculate_calorie_burn(26, 72, 8)"}, "hidden_information": "def calculate_calorie_burn(temperature, weight, timerate):\n    if temperature < 18:\n        return weight * timerate * 0.1\n    elif 18 <= temperature <= 22:\n        return weight * timerate * 0.05\n    else:\n        return weight * timerate * 0.01"}
{"ground_truth": "def check_fashion_description_sensitivity(description, keywords=['Native American', 'Navajo', 'war bonnet'], restricted_words=['pow wow', 'go native', 'rain dance']):\n    description = description.lower()\n    for keyword in keywords:\n        if keyword.lower() in description:\n            for restricted_word in restricted_words:\n                if restricted_word.lower() in description:\n                    return 'Insensitively using cultural symbols'\n    return 'Culturally sensitive'", "problem_description": "Hey LLM agent, I want you to write a Python function that checks if a fashion item description is culturally insensitive. It should check for some specific cultural symbols but I'm not sure which ones to include. Can you please discuss with me what to include and write a function that will classify a description as culturally sensitive or not?The signature of the function is: def check_fashion_description_sensitivity(description, keywords=['Native American', 'Navajo', 'war bonnet'], restricted_words=['pow wow', 'go native', 'rain dance'])", "test_cases": {"test1": "check_fashion_description_sensitivity('This dress features a beautiful Native American-inspired print')", "test2": "check_fashion_description_sensitivity('Our new Pow Wow collection is now live')", "test3": "check_fashion_description_sensitivity('Karlie Kloss is wearing a stunning floor-length war bonnet')", "test4": "check_fashion_description_sensitivity('Get ready to go native with our new summer collection')", "test5": "check_fashion_description_sensitivity('This Rain Dance Refresher cocktail is a perfect drink for the summer')", "test6": "check_fashion_description_sensitivity('Our new collection is inspired by different cultures from around the world')", "test7": "check_fashion_description_sensitivity('This beautiful headdress is not culturally insensitive')", "test8": "check_fashion_description_sensitivity('We are celebrating Native American culture with our new fashion line')", "test9": "check_fashion_description_sensitivity('This fashion item is not related to any cultural symbol')", "test10": "check_fashion_description_sensitivity('Our new collection features a Navajo-inspired design')"}, "hidden_information": "def check_fashion_description_sensitivity(description, keywords=['Native American', 'Navajo', 'war bonnet'], restricted_words=['pow wow', 'go native', 'rain dance']):\n    description = description.lower()\n    for keyword in keywords:\n        if keyword.lower() in description:\n            for restricted_word in restricted_words:\n                if restricted_word.lower() in description:\n                    return 'Insensitively using cultural symbols'\n    return 'Culturally sensitive'"}
{"ground_truth": "def is_tzitzit_required(corner_angle, curvature_length, type='acute'): \n  if type == 'acute': \n    return corner_angle < 90 and curvature_length < 3 * 3.3  # convert tefachim to cm\n  elif type == 'obtuse': \n    return corner_angle > 90 and curvature_length < 2 * 6  # convert etzbaos to cm\n  else: \n    return False", "problem_description": "Hey LLM agent, I want you to write a Python function that determines whether a given corner angle of a garment requires Tzitzit. The angle can be either acute or obtuse, and it has some curvature length. Please take into account the types of clothing that do not require Tzitzit.The signature of the function is: def is_tzitzit_required(corner_angle, curvature_length, type='acute')", "test_cases": {"test1": "is_tzitzit_required(90, 5, 'acute')", "test2": "is_tzitzit_required(120, 2, 'obtuse')", "test3": "is_tzitzit_required(90, 10, 'acute')", "test4": "is_tzitzit_required(150, 3, 'obtuse')", "test5": "is_tzitzit_required(60, 1, 'acute')", "test6": "is_tzitzit_required(140, 2, 'obtuse')", "test7": "is_tzitzit_required(90, 15, 'acute')", "test8": "is_tzitzit_required(110, 1, 'obtuse')", "test9": "is_tzitzit_required(80, 2, 'acute')", "test10": "is_tzitzit_required(130, 3, 'obtuse')"}, "hidden_information": "def is_tzitzit_required(corner_angle, curvature_length, type='acute'): \n  if type == 'acute': \n    return corner_angle < 90 and curvature_length < 3 * 3.3  # convert tefachim to cm\n  elif type == 'obtuse': \n    return corner_angle > 90 and curvature_length < 2 * 6  # convert etzbaos to cm\n  else: \n    return False"}
{"ground_truth": "def calculate_hemoglobin(age, weight, iron_intake):  # simplified for illustration purposes\n    if age < 6:\n        return 11 + (weight / 3) + (iron_intake / 10)\n    elif age < 12:\n        return 12 + (weight / 3) + (iron_intake / 15)\n    elif age < 18:\n        return 13 + (weight / 3) + (iron_intake / 20)\n    else:\n        return 14 + (weight / 3) + (iron_intake / 25)", "problem_description": "I need a python function to figure out how to determine if someone has anemia or not, the doctor told me that their hemoglobin level is dependent on their age, weight, and iron intake - can you write a python function to calculate hemoglobin levels based on these inputs?The signature of the function is: def calculate_hemoglobin(age, weight, iron_intake)", "test_cases": {"test1": "calculate_hemoglobin(10, 50, 10)", "test2": "calculate_hemoglobin(5, 20, 8)", "test3": "calculate_hemoglobin(15, 60, 12)", "test4": "calculate_hemoglobin(20, 70, 10)", "test5": "calculate_hemoglobin(8, 35, 9)", "test6": "calculate_hemoglobin(17, 65, 11)", "test7": "calculate_hemoglobin(7, 30, 8)", "test8": "calculate_hemoglobin(12, 55, 10)", "test9": "calculate_hemoglobin(18, 72, 9)", "test10": "calculate_hemoglobin(9, 42, 11)"}, "hidden_information": "def calculate_hemoglobin(age, weight, iron_intake):  # simplified for illustration purposes\n    if age < 6:\n        return 11 + (weight / 3) + (iron_intake / 10)\n    elif age < 12:\n        return 12 + (weight / 3) + (iron_intake / 15)\n    elif age < 18:\n        return 13 + (weight / 3) + (iron_intake / 20)\n    else:\n        return 14 + (weight / 3) + (iron_intake / 25)"}
{"ground_truth": "def throw_controller(game_type, gamer_frustration, console_type):\n    frustration_thresholds = {\n        'sports': 7,\n        'action': 8,\n        'strategy': 9\n    }\n    console_destruction_costs = {\n        'console': 50,\n        'pc': 100\n    }\n    if gamer_frustration > frustration_thresholds[game_type] and console_type == 'console':\n        return True\n    else:\n        return False", "problem_description": "I want to know when a gamer is likely to throw their controller when playing a game. Can you write a Python function that takes into account the type of game, the gamer's frustration level, and the type of console or gaming platform being used?The signature of the function is: def throw_controller(game_type, gamer_frustration, console_type)", "test_cases": {"test1": "throw_controller('sports', 6, 'console')", "test2": "throw_controller('action', 9, 'pc')", "test3": "throw_controller('strategy', 10, 'console')", "test4": "throw_controller('sports', 5, 'console')", "test5": "throw_controller('action', 7, 'console')", "test6": "throw_controller('strategy', 12, 'pc')", "test7": "throw_controller('sports', 8, 'pc')", "test8": "throw_controller('action', 10, 'console')", "test9": "throw_controller('strategy', 11, 'console')", "test10": "throw_controller('sports', 9, 'console')"}, "hidden_information": "def throw_controller(game_type, gamer_frustration, console_type):\n    frustration_thresholds = {\n        'sports': 7,\n        'action': 8,\n        'strategy': 9\n    }\n    console_destruction_costs = {\n        'console': 50,\n        'pc': 100\n    }\n    if gamer_frustration > frustration_thresholds[game_type] and console_type == 'console':\n        return True\n    else:\n        return False"}
{"ground_truth": "def avoid_villain_countries(country_relations, cultural_sensitivities, game_setting): \n\t# Create a dictionary of countries to avoid based on cultural sensitivities\n\tavoid_countries = {country: sensitivity for country, sensitivity in cultural_sensitivities.items()} \n\t# Update the dictionary based on country relations in the game setting\n\tfor country, relation in country_relations.items():\n\t\tif relation == 'ally' and country in avoid_countries:\n\t\t\tdel avoid_countries[country]\n\t# Return a set of countries to avoid\n\treturn set(avoid_countries.keys())", "problem_description": "I'm designing a war game and I want to avoid offending certain countries. I need a Python function that considers both the game's setting and real-world cultural sensitivities. The function should take a dictionary of country relations in the game and a dictionary of cultural sensitivities as input and return a set of countries to avoid portraying as villains. The agent should ask for clarification on how to handle allied countries and how to weight the cultural sensitivities.The signature of the function is: def avoid_villain_countries(country_relations, cultural_sensitivities, game_setting)", "test_cases": {"test1": "avoid_villain_countries({'USA': 'ally', 'China': 'enemy'}, {'China': 10, 'Russia': 8}, 'modern')", "test2": "avoid_villain_countries({'USA': 'neutral', 'Iran': 'enemy'}, {'Iran': 9, 'North Korea': 7}, 'historical')", "test3": "avoid_villain_countries({'USA': 'ally', 'Russia': 'enemy'}, {'Russia': 8, 'China': 10}, 'futuristic')", "test4": "avoid_villain_countries({'USA': 'neutral', 'Turkey': 'enemy'}, {'Turkey': 6, 'Israel': 5}, 'modern')", "test5": "avoid_villain_countries({'USA': 'ally', 'Syria': 'enemy'}, {'Syria': 9, 'Iraq': 8}, 'historical')", "test6": "avoid_villain_countries({'USA': 'neutral', 'Cuba': 'enemy'}, {'Cuba': 4, 'Venezuela': 3}, 'futuristic')", "test7": "avoid_villain_countries({'USA': 'ally', 'North Korea': 'enemy'}, {'North Korea': 10, 'South Korea': 2}, 'modern')", "test8": "avoid_villain_countries({'USA': 'neutral', 'Egypt': 'enemy'}, {'Egypt': 7, 'Libya': 6}, 'historical')", "test9": "avoid_villain_countries({'USA': 'ally', 'Afghanistan': 'enemy'}, {'Afghanistan': 8, 'Pakistan': 9}, 'futuristic')", "test10": "avoid_villain_countries({'USA': 'neutral', 'Saudi Arabia': 'enemy'}, {'Saudi Arabia': 9, 'Iran': 10}, 'modern')"}, "hidden_information": "def avoid_villain_countries(country_relations, cultural_sensitivities, game_setting): \n\t# Create a dictionary of countries to avoid based on cultural sensitivities\n\tavoid_countries = {country: sensitivity for country, sensitivity in cultural_sensitivities.items()} \n\t# Update the dictionary based on country relations in the game setting\n\tfor country, relation in country_relations.items():\n\t\tif relation == 'ally' and country in avoid_countries:\n\t\t\tdel avoid_countries[country]\n\t# Return a set of countries to avoid\n\treturn set(avoid_countries.keys())"}
{"ground_truth": "def simulate_feather_beta(related_videos, comments, buffering_time, connection_speed):\n    if connection_speed > 100:\n        video_load_time = buffering_time / 2\n    else:\n        video_load_time = buffering_time * 2\n    return related_videos[:5], comments[:3], video_load_time", "problem_description": "Can you write a Python function to simulate YouTube's Feather beta, which simplifies the page layout to reduce video loading time? It should consider the number of related videos and comments, as well as the video's buffering time and the user's connection speed.The signature of the function is: def simulate_feather_beta(related_videos, comments, buffering_time, connection_speed)", "test_cases": {"test1": "simulate_feather_beta([1, 2, 3, 4, 5, 6], ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'], 30, 120)", "test2": "simulate_feather_beta([], ['comment1', 'comment2', 'comment3'], 20, 80)", "test3": "simulate_feather_beta([1], [], 15, 90)", "test4": "simulate_feather_beta([1, 2, 3, 4, 5, 6], ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'], 30, 150)", "test5": "simulate_feather_beta([], ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'], 20, 120)", "test6": "simulate_feather_beta([1, 2, 3, 4, 5], ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'], 25, 110)", "test7": "simulate_feather_beta([], [], 10, 80)", "test8": "simulate_feather_beta([1, 2, 3, 4, 5, 6, 7], ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'], 30, 130)", "test9": "simulate_feather_beta([], ['comment1', 'comment2'], 15, 90)", "test10": "simulate_feather_beta([1, 2, 3, 4, 5], ['comment1', 'comment2', 'comment3', 'comment4'], 20, 120)"}, "hidden_information": "def simulate_feather_beta(related_videos, comments, buffering_time, connection_speed):\n    if connection_speed > 100:\n        video_load_time = buffering_time / 2\n    else:\n        video_load_time = buffering_time * 2\n    return related_videos[:5], comments[:3], video_load_time"}
{"ground_truth": "def calculate_composter_cost(num_composters, pvc_pipe_cost, barrel_cost, lumber_cost, hinge_cost, hasp_cost, sheet_metal_cost):\n    total_cost = (pvc_pipe_cost * num_composters) + (barrel_cost * num_composters) + (lumber_cost * 4 * num_composters) + (hinge_cost * num_composters) + (hasp_cost * num_composters) + (sheet_metal_cost * num_composters)\n    return total_cost", "problem_description": "I want to build multiple tumbling composters and I need a Python function to calculate the total cost of materials. Can you write a function that does this?The signature of the function is: def calculate_composter_cost(num_composters, pvc_pipe_cost, barrel_cost, lumber_cost, hinge_cost, hasp_cost, sheet_metal_cost)", "test_cases": {"test1": "calculate_composter_cost(2, 10.0, 20.0, 5.0, 2.0, 3.0, 8.0)", "test2": "calculate_composter_cost(5, 15.0, 25.0, 6.0, 3.0, 4.0, 10.0)", "test3": "calculate_composter_cost(1, 10.0, 20.0, 5.0, 2.0, 3.0, 8.0)", "test4": "calculate_composter_cost(10, 20.0, 30.0, 7.0, 4.0, 5.0, 12.0)", "test5": "calculate_composter_cost(3, 12.0, 22.0, 5.5, 2.5, 3.5, 9.0)", "test6": "calculate_composter_cost(8, 18.0, 28.0, 6.5, 3.5, 4.5, 11.0)", "test7": "calculate_composter_cost(4, 14.0, 24.0, 6.0, 3.0, 4.0, 10.0)", "test8": "calculate_composter_cost(6, 16.0, 26.0, 6.5, 3.5, 4.5, 11.0)", "test9": "calculate_composter_cost(7, 17.0, 27.0, 7.0, 4.0, 5.0, 12.0)", "test10": "calculate_composter_cost(9, 19.0, 29.0, 7.5, 4.5, 5.5, 13.0)"}, "hidden_information": "def calculate_composter_cost(num_composters, pvc_pipe_cost, barrel_cost, lumber_cost, hinge_cost, hasp_cost, sheet_metal_cost):\n    total_cost = (pvc_pipe_cost * num_composters) + (barrel_cost * num_composters) + (lumber_cost * 4 * num_composters) + (hinge_cost * num_composters) + (hasp_cost * num_composters) + (sheet_metal_cost * num_composters)\n    return total_cost"}
{"ground_truth": "def extract_netid_info(url):\n    netid = url.split(\"NETID=\")[-1]\n    parts = netid.split(\".\")\n    return {\n        \"network\": parts[0],\n        \"station\": parts[1] if len(parts) > 1 else None,\n        \"area\": parts[2] if len(parts) > 2 else None,\n        \"channel\": parts[3] if len(parts) > 3 else None\n    }", "problem_description": "I need you to write a Python function that can take in a URL string with the proposed TV broadcast URL scheme and extract the NETID information. The URL will be in the format '...NETID=cnn.main' or '...NETID=cnn.headlinenews.ny.10', and I need the function to return a dictionary containing the network, station, area, and channel information.The signature of the function is: def extract_netid_info(url)", "test_cases": {"test1": "extract_netid_info('url?NETID=cnn.main')", "test2": "extract_netid_info('url?NETID=cnn.headlinenews')", "test3": "extract_netid_info('url?NETID=cnn.headlinenews.ny')", "test4": "extract_netid_info('url?NETID=cnn.headlinenews.ny.10')", "test5": "extract_netid_info('url?NETID=abc.us_ny')", "test6": "extract_netid_info('url?NETID=def.us_fl.12')", "test7": "extract_netid_info('url?NETID=ghi.eu_fr')", "test8": "extract_netid_info('url?NETID=jkl.eu_fr.15')", "test9": "extract_netid_info('url?NETID=mno.in')", "test10": "extract_netid_info('url?NETID=pqr.in.20')"}, "hidden_information": "def extract_netid_info(url):\n    netid = url.split(\"NETID=\")[-1]\n    parts = netid.split(\".\")\n    return {\n        \"network\": parts[0],\n        \"station\": parts[1] if len(parts) > 1 else None,\n        \"area\": parts[2] if len(parts) > 2 else None,\n        \"channel\": parts[3] if len(parts) > 3 else None\n    }"}
{"ground_truth": "def prioritize_processes(processes, memory_available, io_intensive_processes):\n    processes.sort(key=lambda x: x['last_accessed_time'])\n    prioritized_processes = []\n    for process in processes:\n        if process['process_name'] in io_intensive_processes:\n            continue\n        if len(prioritized_processes) * process['memory_required'] <= memory_available:\n            prioritized_processes.append(process)\n    return prioritized_processes", "problem_description": "Hi agent, I'm having an issue with my system where disk I/O-heavy processes are causing other processes to be pushed out of memory. Can you write a Python function to help me prioritize processes to avoid this issue? The function should take a list of processes, the available memory, and a list of I/O intensive processes as input.The signature of the function is: def prioritize_processes(processes, memory_available, io_intensive_processes)", "test_cases": {"test1": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}], 1000, ['p2'])", "test2": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 200}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 100}], 500, ['p1'])", "test3": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}, {'process_name': 'p3', 'last_accessed_time': 3, 'memory_required': 50}], 1200, ['p2'])", "test4": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 200}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 100}, {'process_name': 'p3', 'last_accessed_time': 3, 'memory_required': 50}], 1000, ['p1', 'p3'])", "test5": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}, {'process_name': 'p3', 'last_accessed_time': 3, 'memory_required': 50}, {'process_name': 'p4', 'last_accessed_time': 1, 'memory_required': 150}], 2000, ['p2'])", "test6": "prioritize_processes([], 1000, ['p1'])", "test7": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}], 200, ['p2'])", "test8": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}], 0, ['p1'])", "test9": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}], 500, [])", "test10": "prioritize_processes([{'process_name': 'p1', 'last_accessed_time': 10, 'memory_required': 100}, {'process_name': 'p2', 'last_accessed_time': 5, 'memory_required': 200}, {'process_name': 'p3', 'last_accessed_time': 3, 'memory_required': 50}], 500, ['p1', 'p2', 'p3'])"}, "hidden_information": "def prioritize_processes(processes, memory_available, io_intensive_processes):\n    processes.sort(key=lambda x: x['last_accessed_time'])\n    prioritized_processes = []\n    for process in processes:\n        if process['process_name'] in io_intensive_processes:\n            continue\n        if len(prioritized_processes) * process['memory_required'] <= memory_available:\n            prioritized_processes.append(process)\n    return prioritized_processes"}
{"ground_truth": "def calculate_community_health(total_questions, total_answers, total_users, active_users, new_questions_per_day, new_answers_per_day):\n    question_rate = new_questions_per_day / total_questions\n    answer_rate = new_answers_per_day / total_answers\n    user_engagement = active_users / total_users\n    return (question_rate + answer_rate + user_engagement) / 3", "problem_description": "Can you write a python function to determine the 'health' of a community? I have been observing and have used it to evaluate communities I care about.The signature of the function is: def calculate_community_health(total_questions, total_answers, total_users, active_users, new_questions_per_day, new_answers_per_day)", "test_cases": {"test1": "calculate_community_health(1000, 2000, 500, 100, 10, 20)", "test2": "calculate_community_health(500, 1000, 200, 50, 5, 10)", "test3": "calculate_community_health(2000, 4000, 1000, 200, 20, 40)", "test4": "calculate_community_health(1500, 3000, 750, 150, 15, 30)", "test5": "calculate_community_health(2500, 5000, 1250, 250, 25, 50)", "test6": "calculate_community_health(100, 200, 50, 10, 1, 2)", "test7": "calculate_community_health(300, 600, 150, 30, 3, 6)", "test8": "calculate_community_health(800, 1600, 400, 80, 8, 16)", "test9": "calculate_community_health(1200, 2400, 600, 120, 12, 24)", "test10": "calculate_community_health(2800, 5600, 1400, 280, 28, 56)"}, "hidden_information": "def calculate_community_health(total_questions, total_answers, total_users, active_users, new_questions_per_day, new_answers_per_day):\n    question_rate = new_questions_per_day / total_questions\n    answer_rate = new_answers_per_day / total_answers\n    user_engagement = active_users / total_users\n    return (question_rate + answer_rate + user_engagement) / 3"}
{"ground_truth": "def is_mergeable(true_account, guest_account):\n    if true_account['email'] != guest_account['email']:\n        return False\n    if true_account['username'] != guest_account['username']:\n        return False\n    return True", "problem_description": "I want to create a function that checks if two accounts can be merged together. Can you help me write this function in Python? The function should take into account certain information about the accounts, but I'm not sure what exactly. I just want to know if two accounts are mergeable or not. Write a function for me to determine this.The signature of the function is: def is_mergeable(true_account, guest_account)", "test_cases": {"test1": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user'})", "test2": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user2@example.com', 'username': 'user2'})", "test3": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user2'})", "test4": "is_mergeable({'email': 'user2@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user'})", "test5": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user'})", "test6": "is_mergeable({'email': 'user2@example.com', 'username': 'user2'}, {'email': 'user@example.com', 'username': 'user'})", "test7": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user3'})", "test8": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user2@example.com', 'username': 'user'})", "test9": "is_mergeable({'email': 'user@example.com', 'username': 'user'}, {'email': 'user@example.com', 'username': 'user4'})", "test10": "is_mergeable({'email': 'user2@example.com', 'username': 'user2'}, {'email': 'user2@example.com', 'username': 'user2'})"}, "hidden_information": "def is_mergeable(true_account, guest_account):\n    if true_account['email'] != guest_account['email']:\n        return False\n    if true_account['username'] != guest_account['username']:\n        return False\n    return True"}
{"ground_truth": "def is_queston_resolved_through_comments(question_comments, accepted_answer=None):\n    if accepted_answer is not None:\n        return False\n    elif len([comment for comment in question_comments if 'thanks' in comment.lower() or 'solved' in comment.lower()]) > 0:\n        return True\n    else:\n        return False", "problem_description": "Can you write a Python function for me that can determine if a stackexchange question has been solved through comments rather than a formal answer?The signature of the function is: def is_queston_resolved_through_comments(question_comments, accepted_answer=None)", "test_cases": {"test1": "is_queston_resolved_through_comments(['thanks for your help!', 'this solved my issue'], None)", "test2": "is_queston_resolved_through_comments(['this is a comment', 'another comment'], 'this is the accepted answer')", "test3": "is_queston_resolved_through_comments(['thanks!', 'this is helpful'], None)", "test4": "is_queston_resolved_through_comments([], None)", "test5": "is_queston_resolved_through_comments(['solved!', 'this worked!'], None)", "test6": "is_queston_resolved_through_comments(['this is a comment'], 'accepted answer')", "test7": "is_queston_resolved_through_comments([], 'accepted answer')", "test8": "is_queston_resolved_through_comments(['thanks', 'solved'], None)", "test9": "is_queston_resolved_through_comments(['thanks', 'not solved'], None)", "test10": "is_queston_resolved_through_comments(['solved', 'thanks'], None)"}, "hidden_information": "def is_queston_resolved_through_comments(question_comments, accepted_answer=None):\n    if accepted_answer is not None:\n        return False\n    elif len([comment for comment in question_comments if 'thanks' in comment.lower() or 'solved' in comment.lower()]) > 0:\n        return True\n    else:\n        return False"}
{"ground_truth": "def extract_injury_data(train_accident_data, injury_type):\n    injured_passengers = [passenger for passenger in train_accident_data if passenger['injuries'] != []]\n    if injury_type == 'all':\n        return injured_passengers\n    else:\n        return [passenger for passenger in injured_passengers if injury_type in passenger['injuries']]\n", "problem_description": "I want you to write a python function that takes in some train accident data and extracts information about injured passengers. I'm not sure how the data will look like, but I want to be able to get a list of all passengers with injuries or those with specific types of injuries. Can you help me clarify the requirements and create a function to do this?The signature of the function is: def extract_injury_data(train_accident_data, injury_type)", "test_cases": {"test1": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': ['concussion']}], 'all')", "test2": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': ['concussion']}], 'lacerations')", "test3": "extract_injury_data([{'name': 'John', 'injuries': []}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': ['concussion']}], 'broken arm')", "test4": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': ['concussion']}, {'name': 'Bob', 'injuries': []}], 'broken arm')", "test5": "extract_injury_data([{'name': 'John', 'injuries': ['concussion']}, {'name': 'Mary', 'injuries': ['concussion']}, {'name': 'Bob', 'injuries': ['concussion']}], 'concussion')", "test6": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': ['concussion']}], 'all')", "test7": "extract_injury_data([{'name': 'John', 'injuries': []}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': []}], 'all')", "test8": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': []}, {'name': 'Bob', 'injuries': ['concussion']}], 'burns')", "test9": "extract_injury_data([{'name': 'John', 'injuries': ['lacerations', 'broken arm']}, {'name': 'Mary', 'injuries': ['burns']}, {'name': 'Bob', 'injuries': ['concussion']}], 'burns')", "test10": "extract_injury_data([{'name': 'John', 'injuries': ['burns']}, {'name': 'Mary', 'injuries': ['burns']}, {'name': 'Bob', 'injuries': ['burns']}], 'burns')"}, "hidden_information": "def extract_injury_data(train_accident_data, injury_type):\n    injured_passengers = [passenger for passenger in train_accident_data if passenger['injuries'] != []]\n    if injury_type == 'all':\n        return injured_passengers\n    else:\n        return [passenger for passenger in injured_passengers if injury_type in passenger['injuries']]\n"}
{"ground_truth": "def classify_conflict(military_intervention, protests, freedom_demands, independence_demands, regime_loyalty):\n    if military_intervention and not regime_loyalty:\n        return 'Pro-democracy uprising'\n    elif protests and freedom_demands and independence_demands:\n        return 'Pro-democracy uprising'\n    else:\n        return 'Not a pro-democracy uprising'", "problem_description": "I want the agent to write a python function that determines whether a given military conflict in a country should be classified as a pro-democracy uprising or not. Think of a function that can take in parameters such as whether the military intervened and if so, how, whether there were protests, whether the protesters demanded freedom, if there were demands for independence, whether the military remained loyal to the regime and so on.The signature of the function is: def classify_conflict(military_intervention, protests, freedom_demands, independence_demands, regime_loyalty)", "test_cases": {"test1": "classify_conflict(True, True, True, True, False)", "test2": "classify_conflict(False, True, False, False, True)", "test3": "classify_conflict(True, False, True, True, False)", "test4": "classify_conflict(False, False, False, False, True)", "test5": "classify_conflict(True, True, True, False, False)", "test6": "classify_conflict(False, True, True, True, False)", "test7": "classify_conflict(False, False, False, True, True)", "test8": "classify_conflict(True, True, False, False, False)", "test9": "classify_conflict(False, True, False, True, False)", "test10": "classify_conflict(True, False, True, False, True)"}, "hidden_information": "def classify_conflict(military_intervention, protests, freedom_demands, independence_demands, regime_loyalty):\n    if military_intervention and not regime_loyalty:\n        return 'Pro-democracy uprising'\n    elif protests and freedom_demands and independence_demands:\n        return 'Pro-democracy uprising'\n    else:\n        return 'Not a pro-democracy uprising'"}
{"ground_truth": "def calculate_distance(point1, point2, dimensions):\n    return (sum((a - b) ** 2 for a, b in zip(point1, point2))) ** 0.5\n\ndef calculate_distance_high_dimensions(point1, point2, dimensions):\n    total_distance_squared = 0\n    for i in range(dimensions):\n        total_distance_squared += (point1[i] - point2[i]) ** 2\n    return total_distance_squared ** 0.5", "problem_description": "I'd like you to write a Python function that can calculate the shortest distance between two points in an n-dimensional space. The agent will need to interact with the human user to resolve ambiguity and uncertainty around the inputs.The signature of the function is: def calculate_distance(point1, point2, dimensions)", "test_cases": {"test1": "calculate_distance([1, 2, 3], [4, 5, 6], 3)", "test2": "calculate_distance([1, 1], [2, 2], 2)", "test3": "calculate_distance_high_dimensions([0, 0, 0], [3, 4, 5], 3)", "test4": "calculate_distance_high_dimensions([-1, -2, -3], [1, 2, 3], 3)", "test5": "calculate_distance([1, 2, 3, 4], [5, 6, 7, 8], 4)", "test6": "calculate_distance_high_dimensions([10, 20], [15, 30], 2)", "test7": "calculate_distance([2, 5, 6], [8, 4, 2], 3)", "test8": "calculate_distance_high_dimensions([-5, -2], [5, 2], 2)", "test9": "calculate_distance([1, 1, 1, 1, 1], [2, 2, 2, 2, 2], 5)", "test10": "calculate_distance_high_dimensions([100, 200, 300], [150, 250, 350], 3)"}, "hidden_information": "def calculate_distance(point1, point2, dimensions):\n    return (sum((a - b) ** 2 for a, b in zip(point1, point2))) ** 0.5\n\ndef calculate_distance_high_dimensions(point1, point2, dimensions):\n    total_distance_squared = 0\n    for i in range(dimensions):\n        total_distance_squared += (point1[i] - point2[i]) ** 2\n    return total_distance_squared ** 0.5"}
{"ground_truth": "def calculate_projected_revenue(current_revenue, growth_rate, utilization_rate, current_utilization, historical_norm):\n    revenue_increase = current_revenue * growth_rate\n    spending_increase = revenue_increase * historical_norm\n    utilization_impact = (utilization_rate - current_utilization) * 0.01 * spending_increase\n    return current_revenue + revenue_increase + utilization_impact", "problem_description": "I want a python function that estimates the new revenue of a drilling company based on Dahlman Rose's upgrade, but I am not sure how to incorporate the factors.The signature of the function is: def calculate_projected_revenue(current_revenue, growth_rate, utilization_rate, current_utilization, historical_norm)", "test_cases": {"test1": "calculate_projected_revenue(100, 0.1, 0.85, 0.77, 0.05)", "test2": "calculate_projected_revenue(200, 0.12, 0.8, 0.7, 0.04)", "test3": "calculate_projected_revenue(300, 0.08, 0.9, 0.8, 0.05)", "test4": "calculate_projected_revenue(400, 0.15, 0.7, 0.6, 0.03)", "test5": "calculate_projected_revenue(500, 0.1, 0.6, 0.5, 0.04)", "test6": "calculate_projected_revenue(600, 0.12, 0.88, 0.78, 0.05)", "test7": "calculate_projected_revenue(700, 0.09, 0.92, 0.82, 0.05)", "test8": "calculate_projected_revenue(800, 0.11, 0.7, 0.62, 0.03)", "test9": "calculate_projected_revenue(900, 0.14, 0.88, 0.68, 0.04)", "test10": "calculate_projected_revenue(1000, 0.13, 0.7, 0.58, 0.05)"}, "hidden_information": "def calculate_projected_revenue(current_revenue, growth_rate, utilization_rate, current_utilization, historical_norm):\n    revenue_increase = current_revenue * growth_rate\n    spending_increase = revenue_increase * historical_norm\n    utilization_impact = (utilization_rate - current_utilization) * 0.01 * spending_increase\n    return current_revenue + revenue_increase + utilization_impact"}
{"ground_truth": "def generate_buffer_zone(center_longitude, center_latitude, distance_km, buffer_type='circle'):\n    import math\n    if buffer_type == 'circle':\n        radius = distance_km / 111\n        longitudes = [center_longitude + radius * math.cos(math.radians(i)) for i in range(0, 360, 10)]\n        latitudes = [center_latitude + radius * math.sin(math.radians(i)) for i in range(0, 360, 10)]\n        return longitudes, latitudes\n    elif buffer_type == 'square':\n        buffer_distance = distance_km / 111\n        longitudes = [center_longitude - buffer_distance, center_longitude + buffer_distance]\n        latitudes = [center_latitude - buffer_distance, center_latitude + buffer_distance]\n        return longitudes, latitudes\n    else:\n        raise ValueError('Invalid buffer type')", "problem_description": "I want the LLM agent to write a Python function that generates a buffer zone around a given geographic point. The function should take in the longitude and latitude of the center point, the distance of the buffer zone in kilometers, and the shape of the buffer zone (either 'circle' or 'square'). The function should return the longitudes and latitudes of the buffer zone.The signature of the function is: def generate_buffer_zone(center_longitude, center_latitude, distance_km, buffer_type='circle')", "test_cases": {"test1": "generate_buffer_zone(37.7749, -122.4194, 5, 'circle')", "test2": "generate_buffer_zone(51.5074, 0.1278, 10, 'square')", "test3": "generate_buffer_zone(-33.9188, 151.2093, 3, 'circle')", "test4": "generate_buffer_zone(48.8566, 2.3522, 8, 'square')", "test5": "generate_buffer_zone(-26.1356, 28.0365, 2, 'circle')", "test6": "generate_buffer_zone(39.7392, -104.9903, 15, 'square')", "test7": "generate_buffer_zone(-12.0431, -77.0283, 6, 'circle')", "test8": "generate_buffer_zone(34.0522, -118.2437, 4, 'square')", "test9": "generate_buffer_zone(37.7749, -122.4194, 5, 'circle')", "test10": "generate_buffer_zone(51.5074, 0.1278, 10, 'square')"}, "hidden_information": "def generate_buffer_zone(center_longitude, center_latitude, distance_km, buffer_type='circle'):\n    import math\n    if buffer_type == 'circle':\n        radius = distance_km / 111\n        longitudes = [center_longitude + radius * math.cos(math.radians(i)) for i in range(0, 360, 10)]\n        latitudes = [center_latitude + radius * math.sin(math.radians(i)) for i in range(0, 360, 10)]\n        return longitudes, latitudes\n    elif buffer_type == 'square':\n        buffer_distance = distance_km / 111\n        longitudes = [center_longitude - buffer_distance, center_longitude + buffer_distance]\n        latitudes = [center_latitude - buffer_distance, center_latitude + buffer_distance]\n        return longitudes, latitudes\n    else:\n        raise ValueError('Invalid buffer type')"}
{"ground_truth": "def filter_svn_actions(log_entries, svn_client_keywords=['PROPFIND', 'PROPGET']):\n    svn_actions = []\n    for entry in log_entries:\n        for keyword in svn_client_keywords:\n            if keyword in entry:\n                svn_actions.append(entry)\n    return svn_actions", "problem_description": "I want you to write a python function to filter out svn actions from log entries so that I can better understand the difference in user behaviors when accessing subversion repository using svn client versus a plain browser. How can you assist me?The signature of the function is: def filter_svn_actions(log_entries, svn_client_keywords=['PROPFIND', 'PROPGET'])", "test_cases": {"test1": "filter_svn_actions(['PROPFIND /svn/!svn/vcc/default', 'GET /svn/repos/ HTTP/1.1'])", "test2": "filter_svn_actions(['GET /svn/repos/ HTTP/1.1', 'GET /svn/repos/trunk/ HTTP/1.1'])", "test3": "filter_svn_actions(['PROPGET /svn/!svn/vcc/default', 'PROPFIND /svn/!svn/vcc/default'])", "test4": "filter_svn_actions(['GET /svn/repos HTTP/1.1', 'GET /svn/repos/trunk HTTP/1.1'])", "test5": "filter_svn_actions([])", "test6": "filter_svn_actions(['PROPFIND /svn/!svn/vcc/default', 'POST /svn/repos HTTP/1.1'])", "test7": "filter_svn_actions(['PUT /svn/repos HTTP/1.1', 'DELETE /svn/repos HTTP/1.1'])", "test8": "filter_svn_actions(['PROPFIND /svn/!svn/vcc/default', 'OPTIONS /svn/repos HTTP/1.1'])", "test9": "filter_svn_actions(['CONNECT /svn/repos HTTP/1.1', 'PATCH /svn/repos HTTP/1.1'])", "test10": "filter_svn_actions(['HEAD /svn/repos HTTP/1.1', 'PROPFIND /svn/!svn/vcc/default'])"}, "hidden_information": "def filter_svn_actions(log_entries, svn_client_keywords=['PROPFIND', 'PROPGET']):\n    svn_actions = []\n    for entry in log_entries:\n        for keyword in svn_client_keywords:\n            if keyword in entry:\n                svn_actions.append(entry)\n    return svn_actions"}
{"ground_truth": "def filter_symbols(symbols, dll_exports):\n    return [symbol for symbol in symbols if not any(symbol.startswith('_imp_' + export) for export in dll_exports)]", "problem_description": "Hey, I need a Python function that takes a list of Fortran compiler symbols and a list of DLL export statements. It should return a new list of symbols with the ones that match the DLL export statements (prefixed with '_imp_') removed. Can you write a function to solve this problem?The signature of the function is: def filter_symbols(symbols, dll_exports)", "test_cases": {"test1": "filter_symbols(['_symbol1', '_imp_symbol2', '_symbol3'], ['symbol2'])", "test2": "filter_symbols(['_imp_symbol1', '_imp_symbol2', '_symbol3'], ['symbol1', 'symbol2'])", "test3": "filter_symbols(['_symbol1', '_symbol2', '_symbol3'], [])", "test4": "filter_symbols(['_imp_symbol1', '_imp_symbol2', '_imp_symbol3'], ['symbol1', 'symbol2', 'symbol3'])", "test5": "filter_symbols([], ['symbol1', 'symbol2'])", "test6": "filter_symbols(['_symbol1'], ['symbol2'])", "test7": "filter_symbols(['_imp_symbol1', '_symbol2', '_imp_symbol3'], ['symbol1'])", "test8": "filter_symbols(['_symbol1', '_symbol2', '_symbol3'], ['symbol1'])", "test9": "filter_symbols(['_imp_symbol1', '_imp_symbol2'], ['symbol1', 'symbol2'])", "test10": "filter_symbols(['_symbol1', '_symbol2', '_symbol3'], ['symbol1', 'symbol2', 'symbol3', 'symbol4'])"}, "hidden_information": "def filter_symbols(symbols, dll_exports):\n    return [symbol for symbol in symbols if not any(symbol.startswith('_imp_' + export) for export in dll_exports)]"}
{"ground_truth": "def join_tables(table1, table2): \n    result = []\n    for row1 in table1:\n        if row1[0] == 'd':\n            for row2 in table2:\n                if row1[1] == row2[0]:\n                    result.append(row1 + [row2[1]])\n                else:\n                    result.append(row1 + [''])\n        else:\n            result.append(row1 + [''])\n    return result\n", "problem_description": "Write a Python function that takes two tables as input and returns a joined table. The first table has two columns - 'Parameters' and 'Values'. The second table has two columns - 'Animal' and 'Mammal'. The function should join the two tables on the 'Values' column of the first table and the 'Animal' column of the second table, but only when the 'Parameters' column is 'd'. If the 'Parameters' column is not 'd', the function should return an empty string for the 'Mammal' column.The signature of the function is: def join_tables(table1, table2)", "test_cases": {"test1": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'fish'], ['f', 2]], [['cat', 'yes'], ['dog', 'yes'], ['fish', 'no'], ['rat', 'yes']])", "test2": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'snake'], ['f', 2]], [['cat', 'yes'], ['dog', 'yes'], ['fish', 'no'], ['rat', 'yes']])", "test3": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'hamster'], ['f', 2]], [['cat', 'yes'], ['dog', 'yes'], ['fish', 'no'], ['rat', 'yes']])", "test4": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'fish'], ['f', 2]], [['cat', 'yes'], ['dog', 'yes']])", "test5": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'snake'], ['f', 2]], [['fish', 'no'], ['rat', 'yes']])", "test6": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'hamster'], ['f', 2]], [['cat', 'yes'], ['dog', 'yes'], ['fish', 'no']])", "test7": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'fish'], ['f', 2]], [['rat', 'yes']])", "test8": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'snake'], ['f', 2]], [['cat', 'yes'], ['dog', 'no']])", "test9": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'hamster'], ['f', 2]], [['cat', 'no'], ['dog', 'yes']])", "test10": "join_tables([['a', 1], ['b', 3], ['d', 'cat'], ['c', 4], ['d', 'dog'], ['e', 3], ['d', 'fish'], ['f', 2]], [['snake', 'yes']])"}, "hidden_information": "def join_tables(table1, table2): \n    result = []\n    for row1 in table1:\n        if row1[0] == 'd':\n            for row2 in table2:\n                if row1[1] == row2[0]:\n                    result.append(row1 + [row2[1]])\n                else:\n                    result.append(row1 + [''])\n        else:\n            result.append(row1 + [''])\n    return result\n"}
{"ground_truth": "def get_player_kills(game_data, player_name):\n    kills = []\n    for entry in game_data:\n        if 'kills' in entry and player_name in entry['kills']:\n            kills.append({'killer': entry['killer'], 'victim': entry['victim']})\n    return kills", "problem_description": "Can you write a Python function to detect when a specific player gets a kill in a game? The function should take in some sort of game data and the player's name, and return the kills made by that player.The signature of the function is: def get_player_kills(game_data, player_name)", "test_cases": {"test1": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}, {'time': 20, 'event': 'death', 'victim': 'Player1'}], 'Player1')", "test2": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}, {'time': 20, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player1'}], 'Player1')", "test3": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}, {'time': 20, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player3'}], 'Player1')", "test4": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player1'}, {'time': 20, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player3'}], 'Player1')", "test5": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}, {'time': 20, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player1'}, {'time': 30, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player3'}], 'Player1')", "test6": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player1'}, {'time': 20, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player3'}, {'time': 30, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player4'}], 'Player1')", "test7": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}], 'Player1')", "test8": "get_player_kills([{'time': 10, 'event': 'death', 'victim': 'Player1'}], 'Player1')", "test9": "get_player_kills([], 'Player1')", "test10": "get_player_kills([{'time': 10, 'event': 'kill', 'killer': 'Player2', 'victim': 'Player1'}, {'time': 20, 'event': 'kill', 'killer': 'Player1', 'victim': 'Player2'}], 'Player3')"}, "hidden_information": "def get_player_kills(game_data, player_name):\n    kills = []\n    for entry in game_data:\n        if 'kills' in entry and player_name in entry['kills']:\n            kills.append({'killer': entry['killer'], 'victim': entry['victim']})\n    return kills"}
{"ground_truth": "def calculate_standard_deviation(data, r, N):\n    M = len(data)\n    mean = sum(data) / M\n    variance = sum((x - mean) ** 2 for x in data) / (M - 1)\n    return (variance ** 0.5) * (M / (M - 1)) ** 0.5 * (2.71828 ** (-2 * r * N))", "problem_description": "I need a Python function to calculate the standard deviation in a Monte Carlo simulation. I think I need to use a specific formula, but I'm not sure what it is. Can you help me write a function to do this? The input will be a list of numbers and some other parameters.The signature of the function is: def calculate_standard_deviation(data, r, N)", "test_cases": {"test1": "calculate_standard_deviation([1, 2, 3, 4, 5], 0.5, 10)", "test2": "calculate_standard_deviation([10, 20, 30, 40, 50], 0.2, 20)", "test3": "calculate_standard_deviation([100, 200, 300, 400, 500], 0.1, 30)", "test4": "calculate_standard_deviation([1.5, 2.5, 3.5, 4.5, 5.5], 0.7, 40)", "test5": "calculate_standard_deviation([10.5, 20.5, 30.5, 40.5, 50.5], 0.3, 50)", "test6": "calculate_standard_deviation([100.2, 200.2, 300.2, 400.2, 500.2], 0.9, 60)", "test7": "calculate_standard_deviation([1.2, 2.2, 3.2, 4.2, 5.2], 0.11, 70)", "test8": "calculate_standard_deviation([10.8, 20.8, 30.8, 40.8, 50.8], 0.4, 80)", "test9": "calculate_standard_deviation([100.9, 200.9, 300.9, 400.9, 500.9], 0.6, 90)", "test10": "calculate_standard_deviation([1.1, 2.1, 3.1, 4.1, 5.1], 0.8, 100)"}, "hidden_information": "def calculate_standard_deviation(data, r, N):\n    M = len(data)\n    mean = sum(data) / M\n    variance = sum((x - mean) ** 2 for x in data) / (M - 1)\n    return (variance ** 0.5) * (M / (M - 1)) ** 0.5 * (2.71828 ** (-2 * r * N))"}
{"ground_truth": "def position_element(canvas_width, canvas_height, element_width, element_height, position='center'): \n  if position == 'top_left':\n    x = 0\n    y = 0\n  elif position == 'top_right':\n    x = canvas_width - element_width\n    y = 0\n  elif position == 'bottom_left':\n    x = 0\n    y = canvas_height - element_height\n  elif position == 'bottom_right':\n    x = canvas_width - element_width\n    y = canvas_height - element_height\n  elif position == 'center':\n    x = (canvas_width - element_width) // 2\n    y = (canvas_height - element_height) // 2\n  else:\n    raise ValueError('Invalid position')\n  return x, y", "problem_description": "Write a Python function that helps me position elements of different sizes on a graphical canvas of a given size, so that they are visually appealing and don't overlap with each other. I want to be able to specify the position of the element, such as top left, top right, bottom left, bottom right, or center. The function should take the canvas size and the element size as input and return the x and y coordinates of the element's position.The signature of the function is: def position_element(canvas_width, canvas_height, element_width, element_height, position='center')", "test_cases": {"test1": "position_element(100, 100, 20, 20, 'center')", "test2": "position_element(500, 500, 50, 50, 'top_left')", "test3": "position_element(200, 200, 30, 30, 'bottom_right')", "test4": "position_element(800, 600, 40, 40, 'top_right')", "test5": "position_element(1024, 768, 60, 60, 'center')", "test6": "position_element(640, 480, 20, 20, 'bottom_left')", "test7": "position_element(3840, 2160, 100, 100, 'top_left')", "test8": "position_element(1920, 1080, 80, 80, 'bottom_right')", "test9": "position_element(1280, 720, 30, 30, 'top_right')", "test10": "position_element(1680, 1050, 90, 90, 'center')"}, "hidden_information": "def position_element(canvas_width, canvas_height, element_width, element_height, position='center'): \n  if position == 'top_left':\n    x = 0\n    y = 0\n  elif position == 'top_right':\n    x = canvas_width - element_width\n    y = 0\n  elif position == 'bottom_left':\n    x = 0\n    y = canvas_height - element_height\n  elif position == 'bottom_right':\n    x = canvas_width - element_width\n    y = canvas_height - element_height\n  elif position == 'center':\n    x = (canvas_width - element_width) // 2\n    y = (canvas_height - element_height) // 2\n  else:\n    raise ValueError('Invalid position')\n  return x, y"}
{"ground_truth": "def calculate_pointer_conversion_cost(pointer_type, frequency, architecture):\n    if pointer_type == 'byte' and architecture == 'most architectures':\n        return 0\n    elif pointer_type == 'word' and architecture == 'word-based architectures':\n        return 1\n    else:\n        return 'unknown'", "problem_description": "I want you to write a Python function that calculates the cost of pointer conversion in CPU cycles. For example, if I have a loop that converts a pointer type 1 million times, I want to know how many CPU cycles it would take. However, the cost depends on the type of pointer and the underlying architecture. Can you write a function that takes into account these factors and gives me the correct cost?The signature of the function is: def calculate_pointer_conversion_cost(pointer_type, frequency, architecture)", "test_cases": {"test1": "calculate_pointer_conversion_cost('byte', 1000000, 'most architectures')", "test2": "calculate_pointer_conversion_cost('word', 1000000, 'most architectures')", "test3": "calculate_pointer_conversion_cost('byte', 1000000, 'word-based architectures')", "test4": "calculate_pointer_conversion_cost('word', 1000000, 'word-based architectures')", "test5": "calculate_pointer_conversion_cost('byte', 1000000, 'other architectures')", "test6": "calculate_pointer_conversion_cost('word', 1000000, 'other architectures')", "test7": "calculate_pointer_conversion_cost('byte', 0, 'most architectures')", "test8": "calculate_pointer_conversion_cost('word', 0, 'most architectures')", "test9": "calculate_pointer_conversion_cost('byte', 'invalid frequency', 'most architectures')", "test10": "calculate_pointer_conversion_cost('word', 1000000, 'invalid architecture')"}, "hidden_information": "def calculate_pointer_conversion_cost(pointer_type, frequency, architecture):\n    if pointer_type == 'byte' and architecture == 'most architectures':\n        return 0\n    elif pointer_type == 'word' and architecture == 'word-based architectures':\n        return 1\n    else:\n        return 'unknown'"}
{"ground_truth": "def track_code_modifications(commits, tasks):\n    tracked_modifications = {}\n    for commit in commits:\n        for task in commit['tasks']:\n            if task not in tracked_modifications:\n                tracked_modifications[task] = []\n            tracked_modifications[task].append(commit['modification'])\n    return tracked_modifications", "problem_description": "Can you create a python function to integrate with Git to track code modifications against certain tasks in the product backlog? I am looking for a function that will be able to map these modifications to respective tasks but I am unsure of how to design it.The signature of the function is: def track_code_modifications(commits, tasks)", "test_cases": {"test1": "track_code_modifications([{'tasks': ['task1'], 'modification': 'added file.txt'}, {'tasks': ['task2'], 'modification': 'removed file2.txt'}], ['task1', 'task2'])", "test2": "track_code_modifications([{'tasks': ['task1', 'task2'], 'modification': 'modified file.txt'}, {'tasks': ['task2'], 'modification': 'added file2.txt'}], ['task1', 'task2'])", "test3": "track_code_modifications([{'tasks': ['task1'], 'modification': 'added file.txt'}, {'tasks': ['task2'], 'modification': 'removed file2.txt'}, {'tasks': ['task1', 'task3'], 'modification': 'modified file3.txt'}], ['task1', 'task2', 'task3'])", "test4": "track_code_modifications([{'tasks': ['task1'], 'modification': 'added file.txt'}], ['task1'])", "test5": "track_code_modifications([{'tasks': ['task1'], 'modification': 'modified file.txt'}], ['task1'])", "test6": "track_code_modifications([], ['task1'])", "test7": "track_code_modifications([{'tasks': ['task1', 'task2'], 'modification': 'added file.txt'}], ['task1', 'task2'])", "test8": "track_code_modifications([{'tasks': ['task1'], 'modification': 'removed file.txt'}], ['task1'])", "test9": "track_code_modifications([{'tasks': ['task1', 'task2'], 'modification': 'modified file.txt'}, {'tasks': ['task3'], 'modification': 'added file3.txt'}], ['task1', 'task2', 'task3'])", "test10": "track_code_modifications([{'tasks': ['task1'], 'modification': 'added file.txt'}, {'tasks': ['task2'], 'modification': 'removed file2.txt'}, {'tasks': ['task1'], 'modification': 'modified file4.txt'}], ['task1', 'task2'])"}, "hidden_information": "def track_code_modifications(commits, tasks):\n    tracked_modifications = {}\n    for commit in commits:\n        for task in commit['tasks']:\n            if task not in tracked_modifications:\n                tracked_modifications[task] = []\n            tracked_modifications[task].append(commit['modification'])\n    return tracked_modifications"}
{"ground_truth": "def reconstruct_url(scheme, server_name, server_port, context_path, servlet_path, path_info, query_string):\n    url = f\"{scheme}://{server_name}\" \n    if server_port not in [80, 443]:\n        url += f\":{server_port}\"\n    url += f\"{context_path}{servlet_path}\" \n    if path_info is not None:\n        url += f\"{path_info}\" \n    if query_string is not None:\n        url += f\"?{query_string}\"\n    return url", "problem_description": "Hi, can you write a python function that can reconstruct the original requesting URL from the given HttpServletRequest object? I have the URI, scheme, server name, server port, context path, servlet path, path info, and query string. I just want to combine them into a URL.The signature of the function is: def reconstruct_url(scheme, server_name, server_port, context_path, servlet_path, path_info, query_string)", "test_cases": {"test1": "reconstruct_url('http', 'localhost', 8080, '/mywebapp', '/servlet/MyServlet', '/a/b;c=123', 'd=789')", "test2": "reconstruct_url('https', 'example.com', 443, '/mywebapp', '/servlet/MyServlet', None, None)", "test3": "reconstruct_url('http', 'example.com', 80, '/mywebapp', '/servlet/MyServlet', '/a/b;c=123', None)", "test4": "reconstruct_url('https', 'example.com', 443, '/mywebapp', '/servlet/MyServlet', None, 'd=789')", "test5": "reconstruct_url('http', 'localhost', 8080, '/mywebapp', '/servlet/MyServlet', None, None)", "test6": "reconstruct_url('https', 'example.com', 80, '/mywebapp', '/servlet/MyServlet', '/a/b;c=123', 'd=789')", "test7": "reconstruct_url('http', 'example.com', 443, '/mywebapp', '/servlet/MyServlet', None, 'd=789')", "test8": "reconstruct_url('http', 'localhost', 8080, '/mywebapp', '/servlet/MyServlet', '/a/b;c=123', 'd=789')", "test9": "reconstruct_url('https', 'example.com', 443, '/mywebapp', '/servlet/MyServlet', '/a/b;c=123', None)", "test10": "reconstruct_url('http', 'example.com', 80, '/mywebapp', '/servlet/MyServlet', None, None)"}, "hidden_information": "def reconstruct_url(scheme, server_name, server_port, context_path, servlet_path, path_info, query_string):\n    url = f\"{scheme}://{server_name}\" \n    if server_port not in [80, 443]:\n        url += f\":{server_port}\"\n    url += f\"{context_path}{servlet_path}\" \n    if path_info is not None:\n        url += f\"{path_info}\" \n    if query_string is not None:\n        url += f\"?{query_string}\"\n    return url"}
{"ground_truth": "def manage_state(user_auth_data, user_permissions, resource_states): \n  # stores user authentication data, permissions, and resource states in memory\n  # to be used across multiple RESTful services\n  user_session_data = {}\n  user_session_data['auth_data'] = user_auth_data\n  user_session_data['permissions'] = user_permissions\n  user_session_data['resource_states'] = resource_states\n  return user_session_data", "problem_description": "I am building a RESTful API and I need to manage state across multiple services. Each service needs to authenticate the user and check their permissions before accessing certain resources. The resources also have their own states that need to be stored and retrieved. I want a way to store all this information in a way that can be easily accessed and updated across all services. Can you write a Python function that can handle this task?The signature of the function is: def manage_state(user_auth_data, user_permissions, resource_states)", "test_cases": {"test1": "manage_state({'username': 'john', 'password': 'password'}, ['read', 'write'], {'resource1': 'state1'})", "test2": "manage_state({'username': 'jane', 'password': 'password'}, ['read'], {'resource2': 'state2'})", "test3": "manage_state({'username': 'john', 'password': 'wrong_password'}, ['read', 'write'], {'resource1': 'state1'})", "test4": "manage_state({'username': 'jane', 'password': 'password'}, ['write'], {'resource2': 'state2'})", "test5": "manage_state({'username': 'john', 'password': 'password'}, [], {'resource1': 'state1'})", "test6": "manage_state({'username': 'jane', 'password': 'password'}, ['read', 'write'], {})", "test7": "manage_state({'username': 'john', 'password': 'password'}, ['read'], {'resource1': 'state1', 'resource2': 'state2'})", "test8": "manage_state({'username': 'jane', 'password': 'password'}, ['write'], {'resource2': 'state2', 'resource3': 'state3'})", "test9": "manage_state({}, ['read', 'write'], {'resource1': 'state1'})", "test10": "manage_state({'username': 'john', 'password': 'password'}, [], {})"}, "hidden_information": "def manage_state(user_auth_data, user_permissions, resource_states): \n  # stores user authentication data, permissions, and resource states in memory\n  # to be used across multiple RESTful services\n  user_session_data = {}\n  user_session_data['auth_data'] = user_auth_data\n  user_session_data['permissions'] = user_permissions\n  user_session_data['resource_states'] = resource_states\n  return user_session_data"}
{"ground_truth": "def update_viewmodel_field_on_post(viewModel, model_state, field_name, new_value):\n    if model_state.get(field_name) is not None:\n        model_state[field_name] = new_value\n    else:\n        model_state[field_name] = [new_value]\n    return model_state", "problem_description": "I'm trying to modify a value in a ViewModel after a POST request in my ASP.NET MVC 3 application. I have a form with several fields, and I want to update the value of one of the fields in the ViewModel after the form is submitted. I've tried modifying the ViewModel directly, but it's not working as expected. Can you write a Python function to help me update the ViewModel field on POST request without losing any error messages?The signature of the function is: def update_viewmodel_field_on_post(viewModel, model_state, field_name, new_value)", "test_cases": {"test1": "update_viewmodel_field_on_post({'name': 'John'}, {'name': ['Error: invalid input']}, 'name', 'Jane')", "test2": "update_viewmodel_field_on_post({'age': 30}, {}, 'age', 31)", "test3": "update_viewmodel_field_on_post({'city': 'New York'}, {'city': ['Error: invalid city']}, 'city', 'Los Angeles')", "test4": "update_viewmodel_field_on_post({'phone': '123-456-7890'}, {'phone': ['Error: invalid phone']}, 'phone', '987-654-3210')", "test5": "update_viewmodel_field_on_post({'email': 'john@example.com'}, {}, 'email', 'jane@example.com')", "test6": "update_viewmodel_field_on_post({'name': 'John', 'age': 30}, {'name': ['Error: invalid input'], 'age': ['Error: invalid age']}, 'age', 31)", "test7": "update_viewmodel_field_on_post({'city': 'New York', 'phone': '123-456-7890'}, {'city': ['Error: invalid city']}, 'phone', '987-654-3210')", "test8": "update_viewmodel_field_on_post({'name': 'John', 'email': 'john@example.com'}, {}, 'name', 'Jane')", "test9": "update_viewmodel_field_on_post({'age': 30, 'phone': '123-456-7890'}, {'age': ['Error: invalid age']}, 'phone', '987-654-3210')", "test10": "update_viewmodel_field_on_post({'city': 'New York', 'email': 'john@example.com'}, {'city': ['Error: invalid city']}, 'email', 'jane@example.com')"}, "hidden_information": "def update_viewmodel_field_on_post(viewModel, model_state, field_name, new_value):\n    if model_state.get(field_name) is not None:\n        model_state[field_name] = new_value\n    else:\n        model_state[field_name] = [new_value]\n    return model_state"}
{"ground_truth": "def optimize_cgi_startup(mode, perl5lib, modules_to_import):\n    startup_time = 0\n    if mode == 'console':\n        # Optimize for console mode\n        # Consolidate everything in a short PERL5LIB\n        if len(perl5lib) > 1000:\n            # Optimize perl5lib\n            perl5lib = [module for module in perl5lib if module.startswith('essential_')]\n            startup_time = 0.5\n        else:\n            startup_time = 1.0\n\n    elif mode == 'cgi':\n        # Optimize for CGI mode\n        if len(modules_to_import) > 5:\n            # Only import essential modules\n            modules_to_import = [module for module in modules_to_import if module.startswith('essential_')]\n            startup_time = 0.3\n        else:\n            startup_time = 0.8\n\n    return startup_time", "problem_description": "I'm trying to improve the startup time of my CGI scripts by optimizing the time it takes to import modules. I need a python function that takes into account the operating mode (console or CGI) and optimizes the import process accordingly. Can you write a python function that reduces the startup time in both modes?The signature of the function is: def optimize_cgi_startup(mode, perl5lib, modules_to_import)", "test_cases": {"test1": "optimize_cgi_startup('console', ['essential_module1', 'essential_module2'], ['module1', 'module2', 'module3'])", "test2": "optimize_cgi_startup('cgi', ['module1', 'module2', 'module3', 'module4', 'module5', 'module6', 'module7'], ['module1', 'module2', 'module3'])", "test3": "optimize_cgi_startup('console', ['module1', 'module2', 'module3', 'module4', 'module5', 'module6', 'module7'], ['essential_module1', 'essential_module2'])", "test4": "optimize_cgi_startup('cgi', ['essential_module1', 'essential_module2'], ['module1', 'module2', 'module3'])", "test5": "optimize_cgi_startup('console', ['essential_module1', 'essential_module2', 'module3', 'module4', 'module5'], ['module1', 'module2', 'module3'])", "test6": "optimize_cgi_startup('cgi', ['module1', 'module2', 'module3', 'module4'], ['module1', 'module2', 'module3'])", "test7": "optimize_cgi_startup('console', ['module1', 'module2'], ['module1', 'module2', 'module3', 'module4', 'module5', 'module6'])", "test8": "optimize_cgi_startup('cgi', ['essential_module1', 'essential_module2', 'essential_module3', 'essential_module4'], ['module1', 'module2', 'module3'])", "test9": "optimize_cgi_startup('console', ['essential_module1', 'essential_module2', 'module3', 'module4', 'module5', 'module6', 'module7'], ['essential_module1', 'essential_module2'])", "test10": "optimize_cgi_startup('cgi', ['module1', 'module2', 'module3', 'module4'], ['module1', 'module2', 'module3', 'module4'])"}, "hidden_information": "def optimize_cgi_startup(mode, perl5lib, modules_to_import):\n    startup_time = 0\n    if mode == 'console':\n        # Optimize for console mode\n        # Consolidate everything in a short PERL5LIB\n        if len(perl5lib) > 1000:\n            # Optimize perl5lib\n            perl5lib = [module for module in perl5lib if module.startswith('essential_')]\n            startup_time = 0.5\n        else:\n            startup_time = 1.0\n\n    elif mode == 'cgi':\n        # Optimize for CGI mode\n        if len(modules_to_import) > 5:\n            # Only import essential modules\n            modules_to_import = [module for module in modules_to_import if module.startswith('essential_')]\n            startup_time = 0.3\n        else:\n            startup_time = 0.8\n\n    return startup_time"}
{"ground_truth": "def extract_all_but_first(input_string, sep=' '):\n    return input_string.split(sep)[1:]", "problem_description": "I want you to write a Python function that takes a string as input and returns a list of values that are separated by a specific delimiter. The catch is that I want you to exclude the first value from the result. I don't have a clear idea of how the string will be formatted, but it will definitely have at least two values. Can you come up with a solution using regular expressions?The signature of the function is: def extract_all_but_first(input_string, sep=' ')", "test_cases": {"test1": "extract_all_but_first('hello world', ' ')", "test2": "extract_all_but_first('foo,bar,baz', ',')", "test3": "extract_all_but_first('one;two;three', ';')", "test4": "extract_all_but_first('a:b:c', ':')", "test5": "extract_all_but_first('apple,orange,grape', ',')", "test6": "extract_all_but_first('dog;cat;mouse', ';')", "test7": "extract_all_but_first('pear,peach,pineapple', ',')", "test8": "extract_all_but_first('car,train,plane', ',')", "test9": "extract_all_but_first('red,green,blue', ',')", "test10": "extract_all_but_first('10,20,30', ',')"}, "hidden_information": "def extract_all_but_first(input_string, sep=' '):\n    return input_string.split(sep)[1:]"}
{"ground_truth": "def filter_products(products, locations, categories, expiry_date):\n    filtered_products = []\n    for product in products:\n        if product['expiry_date'] > expiry_date:\n            if product['location'] in locations and product['category'] in categories:\n                filtered_products.append(product)\n    return filtered_products", "problem_description": "I want the agent to write a python function that takes in a list of products, a list of locations, a list of categories, and an expiry date. The function should return a list of products that are not expired and are from the specified locations and categories. I'm not sure how to structure the data and the function, can you help me with that?The signature of the function is: def filter_products(products, locations, categories, expiry_date)", "test_cases": {"test1": "filter_products([{'name': 'Product 1', 'location': 'New York', 'category': 'Electronics', 'expiry_date': '2024-05-01'}], ['New York'], ['Electronics'], '2023-05-01')", "test2": "filter_products([{'name': 'Product 2', 'location': 'Los Angeles', 'category': 'Fashion', 'expiry_date': '2024-06-01'}], ['Los Angeles'], ['Fashion'], '2023-06-01')", "test3": "filter_products([{'name': 'Product 3', 'location': 'New York', 'category': 'Electronics', 'expiry_date': '2022-05-01'}], ['New York'], ['Electronics'], '2023-05-01')", "test4": "filter_products([{'name': 'Product 4', 'location': 'Chicago', 'category': 'Food', 'expiry_date': '2024-07-01'}], ['Chicago'], ['Fashion'], '2023-07-01')", "test5": "filter_products([{'name': 'Product 5', 'location': 'New York', 'category': 'Electronics', 'expiry_date': '2024-08-01'}], ['Los Angeles'], ['Electronics'], '2023-08-01')", "test6": "filter_products([{'name': 'Product 6', 'location': 'New York', 'category': 'Fashion', 'expiry_date': '2024-09-01'}], ['New York'], ['Fashion'], '2023-09-01')", "test7": "filter_products([{'name': 'Product 7', 'location': 'Los Angeles', 'category': 'Electronics', 'expiry_date': '2024-10-01'}], ['Los Angeles'], ['Electronics'], '2023-10-01')", "test8": "filter_products([{'name': 'Product 8', 'location': 'Chicago', 'category': 'Food', 'expiry_date': '2024-11-01'}], ['Chicago'], ['Food'], '2023-11-01')", "test9": "filter_products([{'name': 'Product 9', 'location': 'New York', 'category': 'Electronics', 'expiry_date': '2024-12-01'}], ['New York'], ['Electronics'], '2023-12-01')", "test10": "filter_products([{'name': 'Product 10', 'location': 'Los Angeles', 'category': 'Fashion', 'expiry_date': '2025-01-01'}], ['Los Angeles'], ['Fashion'], '2024-01-01')"}, "hidden_information": "def filter_products(products, locations, categories, expiry_date):\n    filtered_products = []\n    for product in products:\n        if product['expiry_date'] > expiry_date:\n            if product['location'] in locations and product['category'] in categories:\n                filtered_products.append(product)\n    return filtered_products"}
{"ground_truth": "def select_n_items(input_list, n):\n    return input_list[:n]", "problem_description": "Hi, I need a Python function to take a list of items and return only the first n items. The list is too large, and I only need to bind a certain amount of items to a data display. Can you help me write this function?The signature of the function is: def select_n_items(input_list, n)", "test_cases": {"test1": "select_n_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)", "test2": "select_n_items(['a', 'b', 'c', 'd', 'e'], 3)", "test3": "select_n_items([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 4)", "test4": "select_n_items([], 5)", "test5": "select_n_items([1], 1)", "test6": "select_n_items(['apple', 'banana', 'cherry'], 2)", "test7": "select_n_items([True, False, True, False, True], 3)", "test8": "select_n_items([1, 2, 3, 4, 5, 6, 7], 7)", "test9": "select_n_items(['hello', 'world'], 1)", "test10": "select_n_items([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7], 6)"}, "hidden_information": "def select_n_items(input_list, n):\n    return input_list[:n]"}
{"ground_truth": "def classify_volcanic_fragments(fragment_types, fragment_sizes, crater_radius):\n    fragment_distribution = {}\n    for fragment in fragment_types:\n        if fragment == \"volcanic bomb\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if size > 10]), crater_radius * 2)\n        elif fragment == \"driblet\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if 5 < size <= 10]), crater_radius * 1.5)\n        elif fragment == \"scoria\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if 1 < size <= 5]), crater_radius * 1)\n        elif fragment == \"pumice block\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if size <= 1]), crater_radius * 0.5)\n        else:\n            fragment_distribution[fragment] = (sum(fragment_sizes), crater_radius)\n    return fragment_distribution", "problem_description": "I need a Python program to classify volcanic fragments and determine their distribution around the crater in Wudalianchi Scenic Spots. There are different types of fragments, such as volcanic bombs, driblets, scoria, pumice blocks, and lapilli. Each type has a specific size range and distribution around the crater. Can you write a function that can classify these fragments and calculate their distribution?The signature of the function is: def classify_volcanic_fragments(fragment_types, fragment_sizes, crater_radius)", "test_cases": {"test1": "classify_volcanic_fragments(['volcanic bomb', 'driblet', 'scoria'], [15, 12, 8, 6, 4], 100)", "test2": "classify_volcanic_fragments(['pumice block', 'lapilli', 'scoria'], [0.5, 1.2, 3, 2.5], 50)", "test3": "classify_volcanic_fragments(['volcanic bomb', 'driblet'], [12, 9, 6, 3], 80)", "test4": "classify_volcanic_fragments(['scoria', 'pumice block'], [2, 1.5, 1, 0.8], 60)", "test5": "classify_volcanic_fragments(['lapilli', 'driblet'], [0.2, 0.5, 1, 2], 40)", "test6": "classify_volcanic_fragments(['volcanic bomb', 'scoria'], [18, 12, 10, 8], 120)", "test7": "classify_volcanic_fragments(['pumice block', 'lapilli'], [1, 1.2, 1.5, 0.8], 30)", "test8": "classify_volcanic_fragments(['driblet', 'scoria'], [5, 4, 3, 2], 70)", "test9": "classify_volcanic_fragments(['volcanic bomb', 'pumice block'], [20, 15, 10, 5], 150)", "test10": "classify_volcanic_fragments(['lapilli', 'scoria'], [0.3, 0.5, 1, 1.5], 20)"}, "hidden_information": "def classify_volcanic_fragments(fragment_types, fragment_sizes, crater_radius):\n    fragment_distribution = {}\n    for fragment in fragment_types:\n        if fragment == \"volcanic bomb\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if size > 10]), crater_radius * 2)\n        elif fragment == \"driblet\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if 5 < size <= 10]), crater_radius * 1.5)\n        elif fragment == \"scoria\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if 1 < size <= 5]), crater_radius * 1)\n        elif fragment == \"pumice block\":\n            fragment_distribution[fragment] = (sum([size for size in fragment_sizes if size <= 1]), crater_radius * 0.5)\n        else:\n            fragment_distribution[fragment] = (sum(fragment_sizes), crater_radius)\n    return fragment_distribution"}
{"ground_truth": "def recommend_apps(user_interests, app_database): apps = app_database[1]; recommended_apps = [app for app in apps if any(interest.lower() in app[1].lower() for interest in user_interests)]; return recommended_apps", "problem_description": "I'm looking for an iPhone app recommender. I want a Python function that takes user interests and an app database as input and returns a list of recommended apps. Can you write this function for me?The signature of the function is: def recommend_apps(user_interests, app_database)", "test_cases": {"test1": "recommend_apps(['music', 'productivity'], [['App1', 'A music streaming app'], ['App2', 'A productivity tool'], ['App3', 'A social media app']])", "test2": "recommend_apps(['games', 'education'], [['App4', 'A puzzle game'], ['App5', 'A learning platform'], ['App6', 'A photography app']])", "test3": "recommend_apps(['finance', 'travel'], [['App7', 'A stock market app'], ['App8', 'A navigation app'], ['App9', 'A social media app']])", "test4": "recommend_apps(['sports', 'food'], [['App10', 'A sports news app'], ['App11', 'A recipe app'], ['App12', 'A health app']])", "test5": "recommend_apps(['music', 'movies'], [['App13', 'A movie streaming app'], ['App14', 'A music video app'], ['App15', 'A social media app']])", "test6": "recommend_apps(['shopping', 'reading'], [['App16', 'A bookstore app'], ['App17', 'A shopping app'], ['App18', 'A news app']])", "test7": "recommend_apps(['fitness', 'travel'], [['App19', 'A fitness tracker app'], ['App20', 'A trip planning app'], ['App21', 'A food app']])", "test8": "recommend_apps(['business', 'music'], [['App22', 'A music streaming app'], ['App23', 'A business news app'], ['App24', 'A social media app']])", "test9": "recommend_apps(['education', 'finance'], [['App25', 'A learning platform'], ['App26', 'A stock market app'], ['App27', 'A productivity app']])", "test10": "recommend_apps(['games', 'sports'], [['App28', 'A puzzle game'], ['App29', 'A sports news app'], ['App30', 'A photography app']])"}, "hidden_information": "def recommend_apps(user_interests, app_database): apps = app_database[1]; recommended_apps = [app for app in apps if any(interest.lower() in app[1].lower() for interest in user_interests)]; return recommended_apps"}
{"ground_truth": "def diagnose_truck_problem(compression_readings, back_pressure_test_result, current_codes, rpm_threshold=3000, load_condition=True):\n    if load_condition and any(reading < 90 for reading in compression_readings):\n        if  compression_readings.index(min(compression_readings)) == 3:\n            return 'Low compression in cylinder 3'\n        else:\n            return 'Low compression in other cylinders'\n    elif back_pressure_test_result > 5:\n        return 'Cat converter failure'\n    elif any(code in current_codes for code in ['P0300', 'P0303']):\n        return 'Random multiple misfire or cylinder 3 misfire'\n    elif rpm_threshold > 3000:\n        return 'RPM threshold exceeded'\n", "problem_description": "I need help diagnosing an issue with my truck. It's a 2001 Chevrolet Silverado with a Vortec 5300 V8 motor. When I accelerate above 3000 RPM, the engine starts to rattle and the SES light flashes. I've already replaced the spark plugs, fuel filter, and air filter, and I've done a transmission rebuild. I'm also getting some error codes like P0300 and P1133. Can you write a Python function to help me figure out what's going on?The signature of the function is: def diagnose_truck_problem(compression_readings, back_pressure_test_result, current_codes, rpm_threshold=3000, load_condition=True)", "test_cases": {"test1": "diagnose_truck_problem([90, 100, 80, 95, 98, 92], 3, ['P0300', 'P1133'], 3500, True)", "test2": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 3, ['P0300', 'P1133'], 2500, True)", "test3": "diagnose_truck_problem([80, 100, 80, 95, 98, 92], 3, ['P0300', 'P1133'], 3500, True)", "test4": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 10, ['P0300', 'P1133'], 3500, True)", "test5": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 3, ['P0303'], 3500, True)", "test6": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 3, ['P1133'], 3500, True)", "test7": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 3, [], 3500, True)", "test8": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 3, ['P0300', 'P1133'], 3500, False)", "test9": "diagnose_truck_problem([90, 100, 80, 95, 98, 92], 3, ['P0300', 'P1133'], 2500, False)", "test10": "diagnose_truck_problem([90, 100, 90, 95, 98, 92], 10, ['P0300', 'P1133'], 2500, False)"}, "hidden_information": "def diagnose_truck_problem(compression_readings, back_pressure_test_result, current_codes, rpm_threshold=3000, load_condition=True):\n    if load_condition and any(reading < 90 for reading in compression_readings):\n        if  compression_readings.index(min(compression_readings)) == 3:\n            return 'Low compression in cylinder 3'\n        else:\n            return 'Low compression in other cylinders'\n    elif back_pressure_test_result > 5:\n        return 'Cat converter failure'\n    elif any(code in current_codes for code in ['P0300', 'P0303']):\n        return 'Random multiple misfire or cylinder 3 misfire'\n    elif rpm_threshold > 3000:\n        return 'RPM threshold exceeded'\n"}
{"ground_truth": "def calculate_gdp_impact(debt_to_gdp_ratio, unemployment_rate, investment_in_education, tax_rate): return (1 - debt_to_gdp_ratio) * (1 - unemployment_rate) * (1 + investment_in_education) * (1 - tax_rate)", "problem_description": "Hi agent, I need a Python function to estimate how austerity measures will affect a country's GDP. Can you write a function that considers various economic factors?The signature of the function is: def calculate_gdp_impact(debt_to_gdp_ratio, unemployment_rate, investment_in_education, tax_rate)", "test_cases": {"test1": "calculate_gdp_impact(0.8, 0.1, 0.05, 0.2)", "test2": "calculate_gdp_impact(0.9, 0.15, 0.03, 0.25)", "test3": "calculate_gdp_impact(0.7, 0.05, 0.07, 0.1)", "test4": "calculate_gdp_impact(0.85, 0.2, 0.04, 0.18)", "test5": "calculate_gdp_impact(0.95, 0.12, 0.06, 0.22)", "test6": "calculate_gdp_impact(0.65, 0.08, 0.01, 0.15)", "test7": "calculate_gdp_impact(0.92, 0.18, 0.05, 0.28)", "test8": "calculate_gdp_impact(0.75, 0.1, 0.03, 0.2)", "test9": "calculate_gdp_impact(0.88, 0.16, 0.07, 0.25)", "test10": "calculate_gdp_impact(0.82, 0.12, 0.02, 0.18)"}, "hidden_information": "def calculate_gdp_impact(debt_to_gdp_ratio, unemployment_rate, investment_in_education, tax_rate): return (1 - debt_to_gdp_ratio) * (1 - unemployment_rate) * (1 + investment_in_education) * (1 - tax_rate)"}
{"ground_truth": "def calculate_population_growth(initial_population, birth_rate, death_rate, years):\n    for _ in range(years):\n        births = initial_population * birth_rate\n        deaths = initial_population * death_rate\n        initial_population += births - deaths\n    return initial_population", "problem_description": "Write a Python function to calculate the population growth of a hypothetical colony based on initial population, birth rate, death rate, and number of years. The colony has a mix of men, women, and children. Take into account the challenges faced by the Roanoke colony, such as disease, conflicts with Native Americans, and the role of family-centered models in population growth. The agent should ask for clarifications on the specific parameters and assumptions to make.The signature of the function is: def calculate_population_growth(initial_population, birth_rate, death_rate, years)", "test_cases": {"test1": "calculate_population_growth(100, 0.05, 0.01, 5)", "test2": "calculate_population_growth(50, 0.03, 0.02, 3)", "test3": "calculate_population_growth(200, 0.04, 0.015, 4)", "test4": "calculate_population_growth(150, 0.035, 0.018, 2)", "test5": "calculate_population_growth(250, 0.04, 0.02, 6)", "test6": "calculate_population_growth(100, 0.05, 0.01, 1)", "test7": "calculate_population_growth(75, 0.04, 0.012, 7)", "test8": "calculate_population_growth(225, 0.045, 0.019, 5)", "test9": "calculate_population_growth(300, 0.035, 0.025, 3)", "test10": "calculate_population_growth(400, 0.05, 0.02, 10)"}, "hidden_information": "def calculate_population_growth(initial_population, birth_rate, death_rate, years):\n    for _ in range(years):\n        births = initial_population * birth_rate\n        deaths = initial_population * death_rate\n        initial_population += births - deaths\n    return initial_population"}
{"ground_truth": "def get_conflict_data(conflict_areas, abuses_dict, organizations):\n    conflict_data = {}\n    for area in conflict_areas:\n        conflict_data[area] = {'abuses': abuses_dict[area], 'organizations': organizations[area]['LRA']}\n    return conflict_data", "problem_description": "I want a python function that takes three parameters: a list of conflict areas, a dictionary mapping areas to their corresponding human rights abuses, and a dictionary of organizations involved in the conflict. The function should return a dictionary with the conflict areas as keys and another dictionary with their abuses and the LRA organization details as values.The signature of the function is: def get_conflict_data(conflict_areas, abuses_dict, organizations)", "test_cases": {"test1": "get_conflict_data(['Gulu', 'Kitgum'], {'Gulu': ['abduction', 'killings'], 'Kitgum': ['displacement', 'torture']}, {'Gulu': {'LRA': 'Militia Group'}, 'Kitgum': {'LRA': 'Armed Opposition'}})", "test2": "get_conflict_data(['Acholi'], {'Acholi': ['arbitrary arrests', 'beatings']}, {'Acholi': {'LRA': 'Rebel Group'}})", "test3": "get_conflict_data(['Uganda', 'Sudan'], {'Uganda': ['executions', 'torture'], 'Sudan': ['arbitrary arrests', 'displacement']}, {'Uganda': {'LRA': 'Insurgent Group'}, 'Sudan': {'LRA': 'Foreign Backer'}})", "test4": "get_conflict_data(['Gulu'], {'Gulu': ['rape', 'abduction']}, {'Gulu': {'LRA': 'Abduction Group'}})", "test5": "get_conflict_data(['Kitgum', 'Acholi'], {'Kitgum': ['displacement', 'torture'], 'Acholi': ['arbitrary arrests', 'beatings']}, {'Kitgum': {'LRA': 'Armed Opposition'}, 'Acholi': {'LRA': 'Rebel Group'}})", "test6": "get_conflict_data(['Uganda', 'Gulu'], {'Uganda': ['executions', 'torture'], 'Gulu': ['rape', 'abduction']}, {'Uganda': {'LRA': 'Insurgent Group'}, 'Gulu': {'LRA': 'Abduction Group'}})", "test7": "get_conflict_data(['Sudan', 'Acholi'], {'Sudan': ['arbitrary arrests', 'displacement'], 'Acholi': ['arbitrary arrests', 'beatings']}, {'Sudan': {'LRA': 'Foreign Backer'}, 'Acholi': {'LRA': 'Rebel Group'}})", "test8": "get_conflict_data(['Gulu', 'Kitgum', 'Acholi'], {'Gulu': ['rape', 'abduction'], 'Kitgum': ['displacement', 'torture'], 'Acholi': ['arbitrary arrests', 'beatings']}, {'Gulu': {'LRA': 'Abduction Group'}, 'Kitgum': {'LRA': 'Armed Opposition'}, 'Acholi': {'LRA': 'Rebel Group'}})", "test9": "get_conflict_data(['Uganda', 'Gulu', 'Kitgum'], {'Uganda': ['executions', 'torture'], 'Gulu': ['rape', 'abduction'], 'Kitgum': ['displacement', 'torture']}, {'Uganda': {'LRA': 'Insurgent Group'}, 'Gulu': {'LRA': 'Abduction Group'}, 'Kitgum': {'LRA': 'Armed Opposition'}})", "test10": "get_conflict_data(['Sudan', 'Uganda', 'Acholi'], {'Sudan': ['arbitrary arrests', 'displacement'], 'Uganda': ['executions', 'torture'], 'Acholi': ['arbitrary arrests', 'beatings']}, {'Sudan': {'LRA': 'Foreign Backer'}, 'Uganda': {'LRA': 'Insurgent Group'}, 'Acholi': {'LRA': 'Rebel Group'}})"}, "hidden_information": "def get_conflict_data(conflict_areas, abuses_dict, organizations):\n    conflict_data = {}\n    for area in conflict_areas:\n        conflict_data[area] = {'abuses': abuses_dict[area], 'organizations': organizations[area]['LRA']}\n    return conflict_data"}
{"ground_truth": "def find_redemption(steps_to_self_discovery, fears_to_overcome, inner_truths): total_steps = len(steps_to_self_discovery) + len(fears_to_overcome) + len(inner_truths); return { 'steps': total_steps, 'redemption': total_steps > 0}", "problem_description": "I want you to write a python function that represents a person's journey to find redemption. The function should take several steps, including understanding oneself, overcoming personal fears, and discovering inner truths. The function should return a dictionary with the total number of steps taken and a boolean indicating whether redemption has been achieved.The signature of the function is: def find_redemption(steps_to_self_discovery, fears_to_overcome, inner_truths)", "test_cases": {"test1": "find_redemption(['self_reflection', 'meditation', 'journaling'], ['fear_of_failure', 'fear_of_success'], ['authenticity', 'compassion'])", "test2": "find_redemption([], [], [])", "test3": "find_redemption(['introspection'], ['fear_of_rejection'], ['self_awareness'])", "test4": "find_redemption(['therapy', 'self_help_books'], ['fear_of_ abandonment'], ['self_forgiveness', 'self_love'])", "test5": "find_redemption([], ['fear_of_uncertainty'], [])", "test6": "find_redemption(['prayer', 'mindfulness'], ['fear_of_loneliness'], ['connection_to_others', 'hope'])", "test7": "find_redemption(['travel', 'exploration'], ['fear_of_change'], ['adventurous_spirit'])", "test8": "find_redemption(['friendship', 'community'], ['fear_of_rejection'], ['social_support'])", "test9": "find_redemption([], [], ['inner_peace'])", "test10": "find_redemption(['journaling', 'therapy'], ['fear_of_vulnerability'], ['emotional_intelligence', 'empathy'])"}, "hidden_information": "def find_redemption(steps_to_self_discovery, fears_to_overcome, inner_truths): total_steps = len(steps_to_self_discovery) + len(fears_to_overcome) + len(inner_truths); return { 'steps': total_steps, 'redemption': total_steps > 0}"}
{"ground_truth": "def calculate_casualties(total_protesters, protesters_killed, protesters_injured): return {'killed': protesters_killed, 'injured': protesters_injured, 'total_protesters': total_protesters, 'survived': total_protesters - protesters_killed}", "problem_description": "I want the agent to write a python function that analyzes casualties from a protest given the total number of protesters, the number of protesters killed, and the number of protesters injured. The function should return a dictionary with the number of protesters killed, injured, total protesters and survived. Please write the python function.The signature of the function is: def calculate_casualties(total_protesters, protesters_killed, protesters_injured)", "test_cases": {"test1": "calculate_casualties(100, 9, 100)", "test2": "calculate_casualties(500, 10, 200)", "test3": "calculate_casualties(0, 0, 0)", "test4": "calculate_casualties(100, 0, 100)", "test5": "calculate_casualties(100, 10, 0)", "test6": "calculate_casualties(1000, 50, 200)", "test7": "calculate_casualties(200, 5, 100)", "test8": "calculate_casualties(800, 10, 50)", "test9": "calculate_casualties(50, 5, 20)", "test10": "calculate_casualties(300, 2, 100)"}, "hidden_information": "def calculate_casualties(total_protesters, protesters_killed, protesters_injured): return {'killed': protesters_killed, 'injured': protesters_injured, 'total_protesters': total_protesters, 'survived': total_protesters - protesters_killed}"}
{"ground_truth": "def bbc_news_url(date_string):\n    date_parts = date_string.split('/')\n    day, month, year = date_parts[0], date_parts[1], date_parts[2]\n    base_url = 'http://www.bbc.co.uk/programmes/p015krsb/'\n    return f'{base_url}{day}/{month}/{year}/qrcode'", "problem_description": "Can you write a python function that generates a url that links to a specific BBC News page, given a date string in the format DD/MM/YYYY. I want the agent to figure out how to construct the URL by asking me for clarification.The signature of the function is: def bbc_news_url(date_string)", "test_cases": {"test1": "bbc_news_url('18/03/2013')", "test2": "bbc_news_url('01/01/2022')", "test3": "bbc_news_url('31/12/2020')", "test4": "bbc_news_url('25/12/2015')", "test5": "bbc_news_url('02/02/2024')", "test6": "bbc_news_url('10/10/2010')", "test7": "bbc_news_url('07/07/2007')", "test8": "bbc_news_url('12/05/2018')", "test9": "bbc_news_url('28/02/2019')", "test10": "bbc_news_url('24/08/2021')"}, "hidden_information": "def bbc_news_url(date_string):\n    date_parts = date_string.split('/')\n    day, month, year = date_parts[0], date_parts[1], date_parts[2]\n    base_url = 'http://www.bbc.co.uk/programmes/p015krsb/'\n    return f'{base_url}{day}/{month}/{year}/qrcode'"}
{"ground_truth": "def separate_students(students_grades, passing_grade):\n    return [student for student, grade in students_grades.items() if grade >= passing_grade]", "problem_description": "Hey LLM Agent, I need you to write a Python function that helps me to separate a group of students into righteous and wicked students aka performers and non-performers based on their grades. I want you to write a function that takes in student grades as input and some criteria to determine who's righteous but I'm not sure what criteria we should use. I want you to interact with me to make this determination.The signature of the function is: def separate_students(students_grades, passing_grade)", "test_cases": {"test1": "separate_students({'John': 80, 'Alice': 70, 'Bob': 90}, 75)", "test2": "separate_students({'Mike': 60, 'Emma': 85, 'Tom': 77}, 70)", "test3": "separate_students({'Jack': 75, 'Lily': 90, 'David': 60}, 75)", "test4": "separate_students({'Sophia': 65, 'Oliver': 95, 'Ava': 80}, 75)", "test5": "separate_students({'Mia': 85, 'William': 70, 'Isabella': 88}, 75)", "test6": "separate_students({'Charlotte': 60, 'James': 90, 'Abigail': 78}, 75)", "test7": "separate_students({'Emily': 75, 'Benjamin': 95, 'Harper': 72}, 75)", "test8": "separate_students({'Amelia': 70, 'Lucas': 85, 'Evelyn': 92}, 75)", "test9": "separate_students({'Jackson': 65, 'Mason': 80, 'Liam': 81}, 75)", "test10": "separate_students({'Ethan': 70, 'Olivia': 75, 'Noah': 98}, 75)"}, "hidden_information": "def separate_students(students_grades, passing_grade):\n    return [student for student, grade in students_grades.items() if grade >= passing_grade]"}
{"ground_truth": "def find_sequence(dna_sequence, target_sequence):\n    sequence_length = len(target_sequence)\n    for i in range(len(dna_sequence) - sequence_length + 1):\n        if dna_sequence[i:i + sequence_length] == target_sequence:\n            return True\n    return False", "problem_description": "I need a Python function that can find a specific DNA sequence within a larger DNA sequence. The function should return True if the target sequence is found and False otherwise. Can you write a Python function for me?The signature of the function is: def find_sequence(dna_sequence, target_sequence)", "test_cases": {"test1": "find_sequence('ATCGATCG', 'ATCG')", "test2": "find_sequence('ATCGATCG', 'TCG')", "test3": "find_sequence('ATCGATCG', 'GCTA')", "test4": "find_sequence('ATCG', 'GCTA')", "test5": "find_sequence('ATCG', 'ATCG')", "test6": "find_sequence('ATCGATCG', 'ATCGATCG')", "test7": "find_sequence('ATCG', 'AT')", "test8": "find_sequence('ATCG', 'TC')", "test9": "find_sequence('ATCG', 'GC')", "test10": "find_sequence('ATCG', 'GGGG')"}, "hidden_information": "def find_sequence(dna_sequence, target_sequence):\n    sequence_length = len(target_sequence)\n    for i in range(len(dna_sequence) - sequence_length + 1):\n        if dna_sequence[i:i + sequence_length] == target_sequence:\n            return True\n    return False"}
{"ground_truth": "def identify_person(description, people): return next((name for name, person in people.items() if all(key in person and person[key] == value for key, value in description.items())), 'Unknown')", "problem_description": "Can you write a python function that identifies a person based on a given description, it should take into account multiple characteristics, for example, department, relation, occupation etc. We need to verify an identity based on witness descriptions. The signature of the function is: def identify_person(description, people)", "test_cases": {"test1": "identify_person({'occupation': 'Socialist machinist'}, {'Jimmie Higgins': {'relation': 'None', 'department': 'None', 'occupation': 'Socialist machinist'}})", "test2": "identify_person({'relation': 'Heir of Empire Machine Shops'}, {'Lacey Granitch': {'relation': 'Heir of Empire Machine Shops', 'department': 'None', 'occupation': 'None'}})", "test3": "identify_person({'department': 'None', 'occupation': 'old gentleman'}, {'Jimmie Higgins': {'relation': 'None', 'department': 'None', 'occupation': 'Socialist machinist'}, 'Robert Bloke': {'relation': 'None', 'department': 'Leesville', 'occupation': 'old gentleman'}})", "test4": "identify_person({'relation': 'King'}, {'Lacey Granitch': {'relation': 'Heir of Empire Machine Shops', 'department': 'None', 'occupation': 'None'}})", "test5": "identify_person({}, {'Jimmie Higgins': {'relation': 'None', 'department': 'None', 'occupation': 'Socialist machinist'}})", "test6": "identify_person({'relation': 'Heir of Empire Machine Shops', 'department': 'None'}, {'Lacey Granitch': {'relation': 'Heir of Empire Machine Shops', 'department': 'None', 'occupation': 'None'}, 'Jimmie Higgins': {'relation': 'None', 'department': 'None', 'occupation': 'Socialist machinist'}})", "test7": "identify_person({'department': 'Leesville'}, {'Lacey Granitch': {'relation': 'Heir of Empire Machine Shops', 'department': 'None', 'occupation': 'None'}, 'Jimmie Higgins': {'relation': 'None', 'department': 'Leesville', 'occupation': 'Socialist machinist'}})", "test8": "identify_person({}, {})", "test9": "identify_person({}, {'Jimmie Higgins': {'relation': 'None', 'department': 'None', 'occupation': 'Socialist machinist'}})", "test10": "identify_person({'relation': 'Heir of Empire Machine Shops', 'department': 'None', 'occupation': 'Socialist machinist'}, {})"}, "hidden_information": "def identify_person(description, people): return next((name for name, person in people.items() if all(key in person and person[key] == value for key, value in description.items())), 'Unknown')"}
{"ground_truth": "def calculate_distance(x1, y1, x2, y2): return ((x2 - x1)**2 + (y2 - y1)**2)**0.5", "problem_description": "I want you to write a Python function that can calculate the distance between two points in a plane, using the Euclidean geometry principles. The function should take the x and y coordinates of the two points as input and return the distance between them.The signature of the function is: def calculate_distance(x1, y1, x2, y2)", "test_cases": {"test1": "calculate_distance(1, 2, 4, 6)", "test2": "calculate_distance(0, 0, 3, 4)", "test3": "calculate_distance(-1, -1, 2, 2)", "test4": "calculate_distance(10, 10, 20, 20)", "test5": "calculate_distance(0, 0, 0, 0)", "test6": "calculate_distance(-5, -5, 5, 5)", "test7": "calculate_distance(100, 100, 200, 200)", "test8": "calculate_distance(1.5, 2.5, 4.5, 6.5)", "test9": "calculate_distance(-10, -10, 10, 10)", "test10": "calculate_distance(1000, 1000, 2000, 2000)"}, "hidden_information": "def calculate_distance(x1, y1, x2, y2): return ((x2 - x1)**2 + (y2 - y1)**2)**0.5"}
{"ground_truth": "def american_idol_judge(contestant_songs, judges_preferences):\n    # Initialize an empty dictionary to store the scores\n    scores = {}\n    \n    # Define the judges' preferences\n    preferences = judges_preferences\n    \n    # Iterate over the contestants\n    for contestant, songs in contestant_songs.items():\n        # Initialize the score for this contestant to 0\n        score = 0\n        \n        # Iterate over the songs performed by the contestant\n        for song in songs:\n            # Check if the song is in the judges' preferences\n            if song in preferences:\n                # Add the corresponding score to the contestant's total score\n                score += preferences[song]\n        \n        # Store the contestant's score\n        scores[contestant] = score\n    \n    # Sort the contestants by their scores in descending order\n    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted list of contestants and their scores\n    return sorted_scores", "problem_description": "I need a python function written from scratch that ranks a list of American Idol contestants based on their performances. The function should take two inputs: 'contestant_songs', a dictionary where the keys are the names of the contestants and the values are lists of songs they performed, and 'judges_preferences', a dictionary where the keys are the song titles and the values are the scores assigned by the judges. Can you write this function that, when given these two inputs, will return the list of sorted contestants based on the scores in descending order?The signature of the function is: def american_idol_judge(contestant_songs, judges_preferences)", "test_cases": {"test1": "american_idol_judge({'Contestant1': ['Song1', 'Song2'], 'Contestant2': ['Song2', 'Song3']}, {'Song1': 10, 'Song2': 20, 'Song3': 10})", "test2": "american_idol_judge({'ContestantA': ['SongX', 'SongY'], 'ContestantB': ['SongY', 'SongZ']}, {'SongX': 25, 'SongY': 30, 'SongZ': 10})", "test3": "american_idol_judge({'Contestant1': ['SongA', 'SongB', 'SongC'], 'Contestant2': ['SongB', 'SongC', 'SongD']}, {'SongA': 15, 'SongB': 20, 'SongC': 25, 'SongD': 10})", "test4": "american_idol_judge({'Contestant1': ['Song1', 'Song1', 'Song2'], 'Contestant2': ['Song2', 'Song3', 'Song3']}, {'Song1': 20, 'Song2': 15, 'Song3': 10})", "test5": "american_idol_judge({'ContestantA': [], 'ContestantB': []}, {'SongX': 10, 'SongY': 20, 'SongZ': 30})", "test6": "american_idol_judge({'Contestant1': ['SongA', 'SongB'], 'Contestant2': ['SongC', 'SongD']}, {'SongA': 20, 'SongB': 15, 'SongC': 10, 'SongD': 30})", "test7": "american_idol_judge({'Contestant1': ['Song1'], 'Contestant2': ['Song2']}, {'Song1': 10, 'Song2': 20})", "test8": "american_idol_judge({'Contestant1': ['SongA', 'SongB', 'SongC'], 'Contestant2': ['SongB', 'SongD', 'SongE']}, {'SongA': 10, 'SongB': 15, 'SongC': 20, 'SongD': 25, 'SongE': 30})", "test9": "american_idol_judge({'ContestantA': ['SongX', 'SongY', 'SongZ'], 'ContestantB': ['SongY', 'SongZ']}, {'SongX': 20, 'SongY': 30, 'SongZ': 15})", "test10": "american_idol_judge({'Contestant1': ['SongA', 'SongB', 'SongC'], 'Contestant2': ['SongA', 'SongB', 'SongD']}, {'SongA': 15, 'SongB': 20, 'SongC': 25, 'SongD': 10})"}, "hidden_information": "def american_idol_judge(contestant_songs, judges_preferences):\n    # Initialize an empty dictionary to store the scores\n    scores = {}\n    \n    # Define the judges' preferences\n    preferences = judges_preferences\n    \n    # Iterate over the contestants\n    for contestant, songs in contestant_songs.items():\n        # Initialize the score for this contestant to 0\n        score = 0\n        \n        # Iterate over the songs performed by the contestant\n        for song in songs:\n            # Check if the song is in the judges' preferences\n            if song in preferences:\n                # Add the corresponding score to the contestant's total score\n                score += preferences[song]\n        \n        # Store the contestant's score\n        scores[contestant] = score\n    \n    # Sort the contestants by their scores in descending order\n    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted list of contestants and their scores\n    return sorted_scores"}
{"ground_truth": "def filter_and_score_applications(applications):\n    required_fields = ['letter', 'writing_sample', 'grade', 'school', 'address', 'phone_number', 'email']\n    application_scores = {}\n    for application in applications:\n        has_required_fields = all(field in application for field in required_fields)\n        has_valid_grade = application['grade'] >= 9 and application['grade'] <= 12\n        score = has_required_fields + has_valid_grade\n        if application['letter'] and 'NeXt' in application['letter']:\n            score += 1\n        application_scores[application['name']] = score\n    return {k: v for k, v in sorted(application_scores.items(), key=lambda x: x[1], reverse=True)}", "problem_description": "can you write a python function to help filter out and score applications from high school students who are interested in joining the crew, the application should be scored on whether they contain all the required fields, whether they are within a certain grade range, and additional points if the letter they provided mentions NeXt, we will provide more information on what we need the function to look like as we go alongThe signature of the function is: def filter_and_score_applications(applications)", "test_cases": {"test1": "filter_and_score_applications([{'name': 'John Doe', 'letter': 'I want to write for NeXt.', 'writing_sample': 'sample.txt', 'grade': 10, 'school': 'Lincoln High School', 'address': '123 Main St', 'phone_number': '123-456-7890', 'email': 'johndoe@example.com'}, {'name': 'Jane Doe', 'letter': 'I want to write for the newspaper.', 'writing_sample': None, 'grade': 11, 'school': 'Washington High School', 'address': '456 Elm St', 'phone_number': '987-654-3210', 'email': 'janedoe@example.com'}])", "test2": "filter_and_score_applications([{'name': 'Bob Johnson', 'letter': 'I love NeXt.', 'writing_sample': 'sample2.txt', 'grade': 9, 'school': 'Kennedy High School', 'address': '789 Oak St', 'phone_number': '555-123-4567', 'email': 'bobjohnson@example.com'}, {'name': 'Sarah Smith', 'letter': 'I hate NeXt.', 'writing_sample': 'sample3.txt', 'grade': 12, 'school': 'Franklin High School', 'address': '321 Maple St', 'phone_number': '901-234-5678', 'email': 'sarahsmith@example.com'}])", "test3": "filter_and_score_applications([{'name': 'Alice Johnson', 'letter': 'I love NeXt and want to write for it.', 'writing_sample': 'sample4.txt', 'grade': 10, 'school': 'Jefferson High School', 'address': '901 Broadway', 'phone_number': '111-222-3333', 'email': 'alicejohnson@example.com'}])", "test4": "filter_and_score_applications([{'name': 'Mark Davis', 'letter': 'I want to be a photographer.', 'writing_sample': None, 'grade': 11, 'school': 'Adams High School', 'address': '555 5th St', 'phone_number': '444-555-6666', 'email': 'markdavis@example.com'}, {'name': 'Emily Taylor', 'letter': 'I want to write for the school paper.', 'writing_sample': 'sample5.txt', 'grade': 9, 'school': 'Madison High School', 'address': '222 2nd St', 'phone_number': '777-888-9999', 'email': 'emilytaylor@example.com'}])", "test5": "filter_and_score_applications([{'name': 'David Miller', 'letter': 'I am interested in joining the crew.', 'writing_sample': 'sample6.txt', 'grade': 10, 'school': 'Roosevelt High School', 'address': '678 1st St', 'phone_number': '333-444-5555', 'email': 'davemiller@example.com'}, {'name': 'Emily Lee', 'letter': 'I am also interested in joining.', 'writing_sample': None, 'grade': 11, 'school': 'Truman High School', 'address': '111 Main St', 'phone_number': '888-999-0000', 'email': 'emilylee@example.com'}])", "test6": "filter_and_score_applications([{'name': 'Kevin Brown', 'letter': 'I love writing and photography.', 'writing_sample': 'sample7.txt', 'grade': 9, 'school': 'Jackson High School', 'address': '789 High St', 'phone_number': '555-666-7777', 'email': 'kevinbrown@example.com'}, {'name': 'Amanda White', 'letter': 'I love reading and writing.', 'writing_sample': 'sample8.txt', 'grade': 10, 'school': 'Van Buren High School', 'address': '321 Oak St', 'phone_number': '111-222-3333', 'email': 'amandawhite@example.com'}])", "test7": "filter_and_score_applications([{'name': 'Stephanie Harris', 'letter': 'I want to write about sports.', 'writing_sample': 'sample9.txt', 'grade': 11, 'school': 'Cleveland High School', 'address': '123 Broadway', 'phone_number': '444-555-6666', 'email': 'stephanieharris@example.com'}, {'name': 'Matthew Patel', 'letter': 'I want to take photographs.', 'writing_sample': None, 'grade': 9, 'school': 'Grant High School', 'address': '901 Main St', 'phone_number': '777-888-9999', 'email': 'matthewpatel@example.com'}])", "test8": "filter_and_score_applications([{'name': 'Julia Brooks', 'letter': 'I am interested in journalism.', 'writing_sample': 'sample10.txt', 'grade': 10, 'school': 'Monroe High School', 'address': '678 5th St', 'phone_number': '333-444-5555', 'email': 'juliabrooks@example.com'}, {'name': 'Olivia Martin', 'letter': 'I am also interested in journalism.', 'writing_sample': 'sample11.txt', 'grade': 11, 'school': 'Lincoln High School', 'address': '123 Main St', 'phone_number': '888-999-0000', 'email': 'oliviamartin@example.com'}])", "test9": "filter_and_score_applications([{'name': 'Noah Thompson', 'letter': 'I want to be a cartoonist.', 'writing_sample': None, 'grade': 9, 'school': 'Washington High School', 'address': '456 Elm St', 'phone_number': '555-666-7777', 'email': 'noahthompson@example.com'}, {'name': 'Ava Lee', 'letter': 'I want to write a movie review.', 'writing_sample': 'sample12.txt', 'grade': 10, 'school': 'Jefferson High School', 'address': '789 Oak St', 'phone_number': '111-222-3333', 'email': 'avaLee@example.com'}])", "test10": "filter_and_score_applications([{'name': 'Isabella Davis', 'letter': 'I love writing and photography.', 'writing_sample': 'sample13.txt', 'grade': 11, 'school': 'Franklin High School', 'address': '321 Maple St', 'phone_number': '444-555-6666', 'email': 'isabelladavis@example.com'}, {'name': 'Alexander Brown', 'letter': 'I love reading and writing.', 'writing_sample': 'sample14.txt', 'grade': 9, 'school': 'Kennedy High School', 'address': '901 Broadway', 'phone_number': '777-888-9999', 'email': 'alexanderbrown@example.com'}])"}, "hidden_information": "def filter_and_score_applications(applications):\n    required_fields = ['letter', 'writing_sample', 'grade', 'school', 'address', 'phone_number', 'email']\n    application_scores = {}\n    for application in applications:\n        has_required_fields = all(field in application for field in required_fields)\n        has_valid_grade = application['grade'] >= 9 and application['grade'] <= 12\n        score = has_required_fields + has_valid_grade\n        if application['letter'] and 'NeXt' in application['letter']:\n            score += 1\n        application_scores[application['name']] = score\n    return {k: v for k, v in sorted(application_scores.items(), key=lambda x: x[1], reverse=True)}"}
{"ground_truth": "def analyze_sales_stats(sales_data, quarter_range, product_type): return [(quarter, sum([sales['amount'] for sales in sales_data if sales['quarter'] == quarter and sales['product'] == product_type])) for quarter in quarter_range]", "problem_description": "Can you help me write a python function to analyze the sales performance of HP's new android and windows products? Maybe it can take some data as input and I want the output to be like quarter-wise or something.The signature of the function is: def analyze_sales_stats(sales_data, quarter_range, product_type)", "test_cases": {"test1": "analyze_sales_stats([{\"quarter\": \"Q1\", \"product\": \"Windows\", \"amount\": 1000}, {\"quarter\": \"Q1\", \"product\": \"Android\", \"amount\": 500}], [\"Q1\"] , \"Windows\")", "test2": "analyze_sales_stats([{\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}], [\"Q2\"] , \"Android\")", "test3": "analyze_sales_stats([{\"quarter\": \"Q3\", \"product\": \"Windows\", \"amount\": 1200}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 600}], [\"Q3\"] , \"Windows\")", "test4": "analyze_sales_stats([{\"quarter\": \"Q1\", \"product\": \"Windows\", \"amount\": 1000}, {\"quarter\": \"Q1\", \"product\": \"Android\", \"amount\": 500}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1200}], [\"Q1\", \"Q2\"] , \"Windows\")", "test5": "analyze_sales_stats([{\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 900}], [\"Q2\", \"Q3\"] , \"Android\")", "test6": "analyze_sales_stats([{\"quarter\": \"Q1\", \"product\": \"Windows\", \"amount\": 1000}, {\"quarter\": \"Q1\", \"product\": \"Android\", \"amount\": 500}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}], [\"Q1\", \"Q2\"] , \"Windows\")", "test7": "analyze_sales_stats([{\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 900}, {\"quarter\": \"Q3\", \"product\": \"Windows\", \"amount\": 1800}], [\"Q2\", \"Q3\"] , \"Android\")", "test8": "analyze_sales_stats([{\"quarter\": \"Q3\", \"product\": \"Windows\", \"amount\": 1800}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 900}], [\"Q3\"] , \"Windows\")", "test9": "analyze_sales_stats([{\"quarter\": \"Q1\", \"product\": \"Android\", \"amount\": 500}, {\"quarter\": \"Q1\", \"product\": \"Windows\", \"amount\": 1000}, {\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 900}], [\"Q1\", \"Q2\", \"Q3\"] , \"Windows\")", "test10": "analyze_sales_stats([{\"quarter\": \"Q1\", \"product\": \"Windows\", \"amount\": 1000}, {\"quarter\": \"Q1\", \"product\": \"Android\", \"amount\": 500}, {\"quarter\": \"Q2\", \"product\": \"Windows\", \"amount\": 1500}, {\"quarter\": \"Q2\", \"product\": \"Android\", \"amount\": 750}, {\"quarter\": \"Q3\", \"product\": \"Windows\", \"amount\": 1800}, {\"quarter\": \"Q3\", \"product\": \"Android\", \"amount\": 900}], [\"Q1\", \"Q2\", \"Q3\"] , \"Android\")"}, "hidden_information": "def analyze_sales_stats(sales_data, quarter_range, product_type): return [(quarter, sum([sales['amount'] for sales in sales_data if sales['quarter'] == quarter and sales['product'] == product_type])) for quarter in quarter_range]"}
{"ground_truth": "def calculate_effective_tax_rate(income, tax_brackets):\n    # Initialize total tax and effective tax rate\n    total_tax = 0\n    effective_tax_rate = 0\n\n    # Calculate total tax based on tax brackets\n    for i in range(len(tax_brackets) - 1):\n        if income > tax_brackets[i + 1][0]:\n            total_tax += (tax_brackets[i + 1][0] - tax_brackets[i][0]) * tax_brackets[i + 1][1]\n        elif income > tax_brackets[i][0]:\n            total_tax += (income - tax_brackets[i][0]) * tax_brackets[i][1]\n            break\n\n    # Handle income above highest tax bracket\n    if income > tax_brackets[-1][0]:\n        total_tax += (income - tax_brackets[-1][0]) * tax_brackets[-1][1]\n\n    # Calculate effective tax rate\n    if income > 0:\n        effective_tax_rate = total_tax / income\n\n    return effective_tax_rate * 100", "problem_description": "Can you write a Python function that calculates the effective tax rate for an individual based on their annual income? I want to use this function to compare the tax rates of different individuals, including billionaires and middle-class Americans.The signature of the function is: def calculate_effective_tax_rate(income, tax_brackets)", "test_cases": {"test1": "calculate_effective_tax_rate(1000000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test2": "calculate_effective_tax_rate(50000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test3": "calculate_effective_tax_rate(200000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test4": "calculate_effective_tax_rate(10000000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test5": "calculate_effective_tax_rate(500000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test6": "calculate_effective_tax_rate(2500000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test7": "calculate_effective_tax_rate(75000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test8": "calculate_effective_tax_rate(3750000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test9": "calculate_effective_tax_rate(22500, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])", "test10": "calculate_effective_tax_rate(15000, [(0, 0.10), (9875, 0.12), (40125, 0.22), (85525, 0.24), (163300, 0.32), (207350, 0.35), (518400, 0.37)])"}, "hidden_information": "def calculate_effective_tax_rate(income, tax_brackets):\n    # Initialize total tax and effective tax rate\n    total_tax = 0\n    effective_tax_rate = 0\n\n    # Calculate total tax based on tax brackets\n    for i in range(len(tax_brackets) - 1):\n        if income > tax_brackets[i + 1][0]:\n            total_tax += (tax_brackets[i + 1][0] - tax_brackets[i][0]) * tax_brackets[i + 1][1]\n        elif income > tax_brackets[i][0]:\n            total_tax += (income - tax_brackets[i][0]) * tax_brackets[i][1]\n            break\n\n    # Handle income above highest tax bracket\n    if income > tax_brackets[-1][0]:\n        total_tax += (income - tax_brackets[-1][0]) * tax_brackets[-1][1]\n\n    # Calculate effective tax rate\n    if income > 0:\n        effective_tax_rate = total_tax / income\n\n    return effective_tax_rate * 100"}
{"ground_truth": "def determine_cause_of_death(evidence):\n    causes = []\n    if 'witnesses' in evidence and evidence['witnesses'] > 0:\n        causes.append('Homicide')\n    if 'suspicious_circumstances' in evidence and evidence['suspicious_circumstances']:\n        causes.append('Murder')\n    if len(causes) > 0:\n        return ', '.join(causes)\n    elif 'suicide_note' in evidence and evidence['suicide_note']:\n        return 'Suicide'\n    else:\n        return 'Accident'", "problem_description": "Write a python function that determines the cause of death based on the given evidence. The evidence can include the presence of witnesses, suspicious circumstances, and a suicide note. But I am not sure about the exact rules to apply here and how to weigh the importance of each piece of evidence. I want the function to return the cause of death as a string.The signature of the function is: def determine_cause_of_death(evidence)", "test_cases": {"test1": "determine_cause_of_death({'witnesses': 2, 'suspicious_circumstances': True, 'suicide_note': False})", "test2": "determine_cause_of_death({'witnesses': 0, 'suspicious_circumstances': False, 'suicide_note': True})", "test3": "determine_cause_of_death({'witnesses': 1, 'suspicious_circumstances': False, 'suicide_note': False})", "test4": "determine_cause_of_death({'witnesses': 0, 'suspicious_circumstances': True, 'suicide_note': False})", "test5": "determine_cause_of_death({})", "test6": "determine_cause_of_death({'witnesses': 1, 'suspicious_circumstances': True, 'suicide_note': True})", "test7": "determine_cause_of_death({'witnesses': 0, 'suspicious_circumstances': False, 'suicide_note': False})", "test8": "determine_cause_of_death({'witnesses': 2, 'suspicious_circumstances': True, 'suicide_note': False})", "test9": "determine_cause_of_death({'witnesses': 1, 'suspicious_circumstances': True, 'suicide_note': False})", "test10": "determine_cause_of_death({'witnesses': 0, 'suspicious_circumstances': False, 'suicide_note': True})"}, "hidden_information": "def determine_cause_of_death(evidence):\n    causes = []\n    if 'witnesses' in evidence and evidence['witnesses'] > 0:\n        causes.append('Homicide')\n    if 'suspicious_circumstances' in evidence and evidence['suspicious_circumstances']:\n        causes.append('Murder')\n    if len(causes) > 0:\n        return ', '.join(causes)\n    elif 'suicide_note' in evidence and evidence['suicide_note']:\n        return 'Suicide'\n    else:\n        return 'Accident'"}
{"ground_truth": "def calculate_replanted_trees(original_tree_count, tree_removal_limit, actual_removals, replant_ratio):\n    if actual_removals > tree_removal_limit:\n        return \"Error: Actual removals exceed limit\"\n    else:\n        return int((actual_removals / original_tree_count) * replant_ratio * original_tree_count)", "problem_description": "Can you write a Python function to calculate the number of trees that need to be replanted after the Grand Prix? I want to know how many trees will be replanted based on the number of trees removed, but I'm not sure what numbers to use.The signature of the function is: def calculate_replanted_trees(original_tree_count, tree_removal_limit, actual_removals, replant_ratio)", "test_cases": {"test1": "calculate_replanted_trees(100, 50, 31, 1.4)", "test2": "calculate_replanted_trees(200, 30, 40, 1.2)", "test3": "calculate_replanted_trees(50, 50, 31, 1.4)", "test4": "calculate_replanted_trees(150, 50, 50, 1.4)", "test5": "calculate_replanted_trees(100, 50, 60, 1.4)", "test6": "calculate_replanted_trees(200, 50, 31, 1.4)", "test7": "calculate_replanted_trees(100, 50, 31, 1.2)", "test8": "calculate_replanted_trees(50, 50, 50, 1.4)", "test9": "calculate_replanted_trees(150, 50, 31, 1.4)", "test10": "calculate_replanted_trees(100, 50, 40, 1.4)"}, "hidden_information": "def calculate_replanted_trees(original_tree_count, tree_removal_limit, actual_removals, replant_ratio):\n    if actual_removals > tree_removal_limit:\n        return \"Error: Actual removals exceed limit\"\n    else:\n        return int((actual_removals / original_tree_count) * replant_ratio * original_tree_count)"}
{"ground_truth": "def estimate_earthquake_damage(magnitude, ground_type, population_density):\n    if ground_type == 'bedrock':\n        damage_factor = 0.1\n    elif ground_type == 'soft_sediments':\n        damage_factor = 0.5\n    else:\n        damage_factor = 0.3\n\n    if population_density < 1000:\n        population_factor = 0.5\n    elif population_density < 10000:\n        population_factor = 1\n    else:\n        population_factor = 2\n\n    damage = magnitude * damage_factor * population_factor\n    return damage", "problem_description": "I want you to write a Python function to estimate the potential damage from an earthquake based on its magnitude, the type of ground it occurs on, and the population density of the area. The function should take these three parameters as inputs and return the estimated damage. However, I'm not sure what scale to use for estimating the damage or what types of ground to consider. Can you help me figure that out?The signature of the function is: def estimate_earthquake_damage(magnitude, ground_type, population_density)", "test_cases": {"test1": "estimate_earthquake_damage(5, 'bedrock', 5000)", "test2": "estimate_earthquake_damage(7, 'soft_sediments', 20000)", "test3": "estimate_earthquake_damage(3, 'other', 1000)", "test4": "estimate_earthquake_damage(9, 'bedrock', 100000)", "test5": "estimate_earthquake_damage(2, 'soft_sediments', 500)", "test6": "estimate_earthquake_damage(6, 'other', 5000)", "test7": "estimate_earthquake_damage(8, 'bedrock', 20000)", "test8": "estimate_earthquake_damage(4, 'soft_sediments', 1000)", "test9": "estimate_earthquake_damage(1, 'other', 500)", "test10": "estimate_earthquake_damage(10, 'bedrock', 100000)"}, "hidden_information": "def estimate_earthquake_damage(magnitude, ground_type, population_density):\n    if ground_type == 'bedrock':\n        damage_factor = 0.1\n    elif ground_type == 'soft_sediments':\n        damage_factor = 0.5\n    else:\n        damage_factor = 0.3\n\n    if population_density < 1000:\n        population_factor = 0.5\n    elif population_density < 10000:\n        population_factor = 1\n    else:\n        population_factor = 2\n\n    damage = magnitude * damage_factor * population_factor\n    return damage"}
{"ground_truth": "def calculate_time(distance, speed):\n    return distance / speed", "problem_description": "Hey agent, I'm comparing different cars and I need a way to calculate how long it takes to cover a certain distance at different speeds. Can you write a python function to help me with that?The signature of the function is: def calculate_time(distance, speed)", "test_cases": {"test1": "calculate_time(200, 60)", "test2": "calculate_time(450, 150)", "test3": "calculate_time(100, 25)", "test4": "calculate_time(320, 80)", "test5": "calculate_time(189, 553/2)", "test6": "calculate_time(62, 553/3.9)", "test7": "calculate_time(516, 189)", "test8": "calculate_time(120, 250)", "test9": "calculate_time(180, 360)", "test10": "calculate_time(350, 190)"}, "hidden_information": "def calculate_time(distance, speed):\n    return distance / speed"}
{"ground_truth": "def calculate_intern_pay(hours_worked, min_wage, unpaid_hours=0): return (hours_worked - unpaid_hours) * min_wage", "problem_description": "Can you write a Python function for me to calculate how much money an intern should be paid if they work certain number of hours and there is minimum wage? The intern will work certain hours for free.The signature of the function is: def calculate_intern_pay(hours_worked, min_wage, unpaid_hours=0)", "test_cases": {"test1": "calculate_intern_pay(hours_worked=20, min_wage=10, unpaid_hours=0)", "test2": "calculate_intern_pay(hours_worked=30, min_wage=12, unpaid_hours=5)", "test3": "calculate_intern_pay(hours_worked=0, min_wage=15, unpaid_hours=10)", "test4": "calculate_intern_pay(hours_worked=15, min_wage=10, unpaid_hours=5)", "test5": "calculate_intern_pay(hours_worked=25, min_wage=12, unpaid_hours=0)", "test6": "calculate_intern_pay(hours_worked=18, min_wage=10, unpaid_hours=3)", "test7": "calculate_intern_pay(hours_worked=0, min_wage=10, unpaid_hours=0)", "test8": "calculate_intern_pay(hours_worked=12, min_wage=15, unpaid_hours=4)", "test9": "calculate_intern_pay(hours_worked=20, min_wage=10, unpaid_hours=2)", "test10": "calculate_intern_pay(hours_worked=30, min_wage=12, unpaid_hours=10)"}, "hidden_information": "def calculate_intern_pay(hours_worked, min_wage, unpaid_hours=0): return (hours_worked - unpaid_hours) * min_wage"}
{"ground_truth": "def calculate_peace_index(election_turnout, rebel_support, economic_justice, minority_rights, num_violent_incidents, total_population): return (election_turnout * 0.3 + rebel_support * 0.2 + economic_justice * 0.2 + minority_rights * 0.1 + (1 - num_violent_incidents / total_population) * 0.2)", "problem_description": "I want to measure the peace level in a country based on some factors. Can you write a python function to calculate this 'peace index'? I'm thinking it should be based on how fair the elections are, how much support the rebels have, and some other stuff. Also, it should take into account the impact of violence.The signature of the function is: def calculate_peace_index(election_turnout, rebel_support, economic_justice, minority_rights, num_violent_incidents, total_population)", "test_cases": {"test1": "calculate_peace_index(0.8, 0.2, 0.6, 0.8, 100, 1000000)", "test2": "calculate_peace_index(0.4, 0.6, 0.3, 0.4, 50, 500000)", "test3": "calculate_peace_index(0.9, 0.1, 0.8, 0.9, 20, 2000000)", "test4": "calculate_peace_index(0.5, 0.5, 0.5, 0.5, 500, 5000000)", "test5": "calculate_peace_index(0.7, 0.3, 0.4, 0.7, 150, 1500000)", "test6": "calculate_peace_index(0.1, 0.9, 0.2, 0.1, 1000, 1000000)", "test7": "calculate_peace_index(0.6, 0.4, 0.7, 0.6, 80, 800000)", "test8": "calculate_peace_index(0.3, 0.7, 0.5, 0.3, 200, 2000000)", "test9": "calculate_peace_index(0.2, 0.8, 0.1, 0.2, 1200, 1200000)", "test10": "calculate_peace_index(0.85, 0.15, 0.85, 0.85, 10, 1000000)"}, "hidden_information": "def calculate_peace_index(election_turnout, rebel_support, economic_justice, minority_rights, num_violent_incidents, total_population): return (election_turnout * 0.3 + rebel_support * 0.2 + economic_justice * 0.2 + minority_rights * 0.1 + (1 - num_violent_incidents / total_population) * 0.2)"}
{"ground_truth": "def manage_theme_park(visitors, capacity, vip_list):\n    if len(visitors) > capacity:\n        return 'Park is full'\n    elif len([guest for guest in visitors if guest not in vip_list]) > capacity * 0.8:\n        return 'Not enough space for non-VIP guests'\n    else:\n        return True", "problem_description": "Hey, can you write a Python function for me to manage a theme park? It should take into account the number of visitors, the park's capacity, and some special guests. The function should return a message indicating whether the park can accommodate all visitors.The signature of the function is: def manage_theme_park(visitors, capacity, vip_list)", "test_cases": {"test1": "manage_theme_park(['Alice', 'Bob', 'Charlie'], 3, ['Alice'])", "test2": "manage_theme_park(['John', 'Emma', 'Michael'], 5, ['Emma'])", "test3": "manage_theme_park(['David', 'Sophia', 'William', 'Olivia'], 3, ['David'])", "test4": "manage_theme_park(['Mia', 'Jackson', 'Isabella', 'James', 'Benjamin'], 5, ['Isabella'])", "test5": "manage_theme_park(['Charlotte', 'Elijah', 'Amelia', 'William', 'Ava', 'Lucas', 'Isabella'], 7, ['Amelia', 'William'])", "test6": "manage_theme_park(['Aiden', 'Harper', 'Ethan', 'Abigail', 'Logan'], 5, [])", "test7": "manage_theme_park(['Liam', 'Ava', 'Noah', 'Emma', 'Oliver', 'Isabella'], 6, ['Ava', 'Oliver'])", "test8": "manage_theme_park(['William', 'Sophia', 'Benjamin', 'Mia', 'Lucas', 'Charlotte', 'Mason'], 7, ['William', 'Mia'])", "test9": "manage_theme_park(['Elijah', 'Olivia', 'James', 'Abigail', 'Alexander', 'Emily', 'Daniel', 'Harper'], 8, ['Elijah', 'Abigail', 'Daniel'])", "test10": "manage_theme_park(['Jackson', 'Ava', 'Logan', 'Isabella', 'David', 'Sophia', 'Michael', 'Charlotte', 'Aiden'], 9, ['Jackson', 'Ava', 'Logan'])"}, "hidden_information": "def manage_theme_park(visitors, capacity, vip_list):\n    if len(visitors) > capacity:\n        return 'Park is full'\n    elif len([guest for guest in visitors if guest not in vip_list]) > capacity * 0.8:\n        return 'Not enough space for non-VIP guests'\n    else:\n        return True"}
{"ground_truth": "def calculate_success_rate(total_embryos, chosen_gender_embryos):\n    if total_embryos == 0:\n        return 0\n    else:\n        return (chosen_gender_embryos / total_embryos) * 100", "problem_description": "I want you to write a Python function to calculate the success rate of sex selection for Dr. Steinberg's clinic. I have some data on the number of embryos that are the chosen gender, but I need help figuring out how to use it to calculate the success rate. Can you help me with that?The signature of the function is: def calculate_success_rate(total_embryos, chosen_gender_embryos)", "test_cases": {"test1": "calculate_success_rate(10, 8)", "test2": "calculate_success_rate(12, 9)", "test3": "calculate_success_rate(8, 6)", "test4": "calculate_success_rate(0, 0)", "test5": "calculate_success_rate(15, 12)", "test6": "calculate_success_rate(20, 16)", "test7": "calculate_success_rate(5, 4)", "test8": "calculate_success_rate(7, 6)", "test9": "calculate_success_rate(25, 20)", "test10": "calculate_success_rate(30, 24)"}, "hidden_information": "def calculate_success_rate(total_embryos, chosen_gender_embryos):\n    if total_embryos == 0:\n        return 0\n    else:\n        return (chosen_gender_embryos / total_embryos) * 100"}
{"ground_truth": "def analyze_sentiment(comments, threshold):\n    sentiments = []\n    for comment in comments:\n        if comment['rating'] >= threshold:\n            sentiments.append('positive')\n        elif comment['rating'] < -threshold:\n            sentiments.append('negative')\n        else:\n            sentiments.append('neutral')\n    return sentiments", "problem_description": "I want you to write a Python function that can analyze user comments and determine their sentiment, but I'm not sure what threshold to use to differentiate between positive and negative comments. Can you figure out the details and write the function?The signature of the function is: def analyze_sentiment(comments, threshold)", "test_cases": {"test1": "analyze_sentiment([{'rating': 2}, {'rating': 0}, {'rating': -3}], 1)", "test2": "analyze_sentiment([{'rating': 5}, {'rating': -5}, {'rating': 0}], 2)", "test3": "analyze_sentiment([{'rating': 1}, {'rating': -1}, {'rating': 3}], 0)", "test4": "analyze_sentiment([{'rating': 10}, {'rating': -10}, {'rating': 5}], 5)", "test5": "analyze_sentiment([{'rating': 0}, {'rating': 0}, {'rating': 0}], 1)", "test6": "analyze_sentiment([{'rating': 10}, {'rating': 5}, {'rating': 3}], 2)", "test7": "analyze_sentiment([{'rating': -5}, {'rating': -10}, {'rating': -8}], 3)", "test8": "analyze_sentiment([{'rating': 1}, {'rating': 1}, {'rating': 1}], 0)", "test9": "analyze_sentiment([{'rating': 2}, {'rating': -2}, {'rating': 0}], 1)", "test10": "analyze_sentiment([{'rating': 10}, {'rating': -10}, {'rating': 0}], 5)"}, "hidden_information": "def analyze_sentiment(comments, threshold):\n    sentiments = []\n    for comment in comments:\n        if comment['rating'] >= threshold:\n            sentiments.append('positive')\n        elif comment['rating'] < -threshold:\n            sentiments.append('negative')\n        else:\n            sentiments.append('neutral')\n    return sentiments"}
{"ground_truth": "def is_eligible_to_buy_gun(age, has_felony, is_citizen, background_check_passed, required_id_provided):\n    if age >= 18 and not has_felony and is_citizen and background_check_passed and required_id_provided:\n        return True\n    else:\n        return False", "problem_description": "I want you to write a python function to determine if someone can buy a gun at a gun show. There are some restrictions that need to be taken into account, so please ask me for clarification on what rules should be applied. The output should be a boolean value indicating whether the person is eligible to buy a gun or not.The signature of the function is: def is_eligible_to_buy_gun(age, has_felony, is_citizen, background_check_passed, required_id_provided)", "test_cases": {"test1": "is_eligible_to_buy_gun(25, False, True, True, True)", "test2": "is_eligible_to_buy_gun(17, False, True, True, True)", "test3": "is_eligible_to_buy_gun(25, True, True, True, True)", "test4": "is_eligible_to_buy_gun(25, False, False, True, True)", "test5": "is_eligible_to_buy_gun(25, False, True, False, True)", "test6": "is_eligible_to_buy_gun(25, False, True, True, False)", "test7": "is_eligible_to_buy_gun(30, False, True, True, True)", "test8": "is_eligible_to_buy_gun(25, False, True, True, True)", "test9": "is_eligible_to_buy_gun(40, False, False, True, True)", "test10": "is_eligible_to_buy_gun(35, True, True, False, True)"}, "hidden_information": "def is_eligible_to_buy_gun(age, has_felony, is_citizen, background_check_passed, required_id_provided):\n    if age >= 18 and not has_felony and is_citizen and background_check_passed and required_id_provided:\n        return True\n    else:\n        return False"}
{"ground_truth": "def classify_character(trait_list, action_list):\n    if 'vampire' in trait_list and 'killed human' in action_list:\n        return 'Villain'\n    elif 'vampire' in trait_list and 'killed vampire' in action_list:\n        return 'Anti-Hero'\n    elif 'human' in trait_list and 'killed vampire' in action_list:\n        return 'Hero'\n    elif 'human' in trait_list and 'killed human' in action_list:\n        return 'Villain'\n    elif 'hybrid' in trait_list and 'killed vampire' in action_list:\n        return 'Anti-Hero'\n    else:\n        return 'Neutral'", "problem_description": "Hi, I need your help in creating a Python function that can classify characters from 'The Vampire Diaries' TV show based on their traits and actions. The function should take two lists as input: one for traits (e.g., vampire, human, hybrid) and one for actions (e.g., killed human, killed vampire). The function should return the character's classification as 'Villain', 'Anti-Hero', 'Hero', or 'Neutral'. Can you help me?The signature of the function is: def classify_character(trait_list, action_list)", "test_cases": {"test1": "classify_character(['vampire'], ['killed human'])", "test2": "classify_character(['vampire'], ['killed vampire'])", "test3": "classify_character(['human'], ['killed vampire'])", "test4": "classify_character(['human'], ['killed human'])", "test5": "classify_character(['hybrid'], ['killed vampire'])", "test6": "classify_character(['vampire'], ['saved human'])", "test7": "classify_character(['human'], ['healed vampire'])", "test8": "classify_character(['hybrid'], ['saved hybrid'])", "test9": "classify_character(['vampire'], ['ignored human danger'])", "test10": "classify_character(['human'], ['warned vampire of danger'])"}, "hidden_information": "def classify_character(trait_list, action_list):\n    if 'vampire' in trait_list and 'killed human' in action_list:\n        return 'Villain'\n    elif 'vampire' in trait_list and 'killed vampire' in action_list:\n        return 'Anti-Hero'\n    elif 'human' in trait_list and 'killed vampire' in action_list:\n        return 'Hero'\n    elif 'human' in trait_list and 'killed human' in action_list:\n        return 'Villain'\n    elif 'hybrid' in trait_list and 'killed vampire' in action_list:\n        return 'Anti-Hero'\n    else:\n        return 'Neutral'"}
{"ground_truth": "def calculate_investment_shares(private_enterprise_investments, total_investments):\n    soe_investment = total_investments - private_enterprise_investments\n    private_enterprise_share = (private_enterprise_investments / total_investments) * 100\n    soe_share = (soe_investment / total_investments) * 100\n    return private_enterprise_share, soe_share", "problem_description": "I need a python function that can calculate the percentage of investment capital coming from private enterprises and state-owned enterprises in China. The function should take two parameters: the amount of investment from private enterprises and the total investment amount.The signature of the function is: def calculate_investment_shares(private_enterprise_investments, total_investments)", "test_cases": {"test1": "calculate_investment_shares(577, 1000)", "test2": "calculate_investment_shares(350, 1000)", "test3": "calculate_investment_shares(300, 1500)", "test4": "calculate_investment_shares(500, 2000)", "test5": "calculate_investment_shares(421, 1500)", "test6": "calculate_investment_shares(678, 2200)", "test7": "calculate_investment_shares(200, 500)", "test8": "calculate_investment_shares(800, 2500)", "test9": "calculate_investment_shares(351, 1200)", "test10": "calculate_investment_shares(100, 1000)"}, "hidden_information": "def calculate_investment_shares(private_enterprise_investments, total_investments):\n    soe_investment = total_investments - private_enterprise_investments\n    private_enterprise_share = (private_enterprise_investments / total_investments) * 100\n    soe_share = (soe_investment / total_investments) * 100\n    return private_enterprise_share, soe_share"}
{"ground_truth": "def calculate_revenue_lost(state_tax, other_state_tax, packs_sold, pack_price):\n    tax_difference = other_state_tax - state_tax\n    revenue_lost = tax_difference * packs_sold * pack_price\n    return revenue_lost", "problem_description": "I want you to write a python function that calculates the revenue lost by a state due to cigarette smuggling from a neighboring state with lower taxes. Can you please write a function that takes into account the tax difference, number of packs sold, and the price per pack to calculate the revenue lost?The signature of the function is: def calculate_revenue_lost(state_tax, other_state_tax, packs_sold, pack_price)", "test_cases": {"test1": "calculate_revenue_lost(4, 2, 1000000, 5)", "test2": "calculate_revenue_lost(3, 1, 500000, 6)", "test3": "calculate_revenue_lost(2, 4, 2000000, 7)", "test4": "calculate_revenue_lost(1, 3, 3000000, 8)", "test5": "calculate_revenue_lost(4, 2, 4000000, 9)", "test6": "calculate_revenue_lost(2, 1, 2500000, 4)", "test7": "calculate_revenue_lost(3, 2, 600000, 3)", "test8": "calculate_revenue_lost(1, 0.5, 100000, 10)", "test9": "calculate_revenue_lost(2.5, 2, 700000, 5)", "test10": "calculate_revenue_lost(4.5, 3.5, 900000, 6)"}, "hidden_information": "def calculate_revenue_lost(state_tax, other_state_tax, packs_sold, pack_price):\n    tax_difference = other_state_tax - state_tax\n    revenue_lost = tax_difference * packs_sold * pack_price\n    return revenue_lost"}
{"ground_truth": "def get_economic_potential(country_stats, year): \n    # Calculate the economic potential based on macro-economic factors\n    gdp_growth_rate = country_stats['gdp_growth_rate']\n    human_development_index = country_stats['human_development_index']\n    investment_innovation = country_stats['investment_innovation']\n    corruption_perception_index = country_stats['corruption_perception_index']\n\n    economic_potential = (gdp_growth_rate * 0.3) + (human_development_index * 0.2) + (investment_innovation * 0.2) + (corruption_perception_index * 0.3)\n\n    if year > 2010:\n        economic_potential *= 1.05\n\n    return economic_potential", "problem_description": "Hey, I'm interested in learning more about the Brazilian economy. I want the agent to write a python function that calculates the economic potential of Brazil based on various macro-economic factors. The function should take into account GDP growth rate, human development index, investment in innovation, and corruption perception index. I also want it to consider the impact of the year, as I believe that more recent years have more potential for growth.The signature of the function is: def get_economic_potential(country_stats, year)", "test_cases": {"test1": "get_economic_potential({'gdp_growth_rate': 2.5, 'human_development_index': 0.8, 'investment_innovation': 1.2, 'corruption_perception_index': 0.6}, 2015)", "test2": "get_economic_potential({'gdp_growth_rate': 1.2, 'human_development_index': 0.6, 'investment_innovation': 0.8, 'corruption_perception_index': 0.4}, 2000)", "test3": "get_economic_potential({'gdp_growth_rate': 3.0, 'human_development_index': 0.9, 'investment_innovation': 1.5, 'corruption_perception_index': 0.7}, 2020)", "test4": "get_economic_potential({'gdp_growth_rate': 1.5, 'human_development_index': 0.7, 'investment_innovation': 1.0, 'corruption_perception_index': 0.5}, 2010)", "test5": "get_economic_potential({'gdp_growth_rate': 2.0, 'human_development_index': 0.5, 'investment_innovation': 1.2, 'corruption_perception_index': 0.4}, 1995)", "test6": "get_economic_potential({'gdp_growth_rate': 3.5, 'human_development_index': 0.95, 'investment_innovation': 1.8, 'corruption_perception_index': 0.9}, 2018)", "test7": "get_economic_potential({'gdp_growth_rate': 1.0, 'human_development_index': 0.6, 'investment_innovation': 0.8, 'corruption_perception_index': 0.3}, 2005)", "test8": "get_economic_potential({'gdp_growth_rate': 2.8, 'human_development_index': 0.85, 'investment_innovation': 1.4, 'corruption_perception_index': 0.65}, 2012)", "test9": "get_economic_potential({'gdp_growth_rate': 1.8, 'human_development_index': 0.75, 'investment_innovation': 1.1, 'corruption_perception_index': 0.55}, 2008)", "test10": "get_economic_potential({'gdp_growth_rate': 3.2, 'human_development_index': 0.92, 'investment_innovation': 1.6, 'corruption_perception_index': 0.8}, 2019)"}, "hidden_information": "def get_economic_potential(country_stats, year): \n    # Calculate the economic potential based on macro-economic factors\n    gdp_growth_rate = country_stats['gdp_growth_rate']\n    human_development_index = country_stats['human_development_index']\n    investment_innovation = country_stats['investment_innovation']\n    corruption_perception_index = country_stats['corruption_perception_index']\n\n    economic_potential = (gdp_growth_rate * 0.3) + (human_development_index * 0.2) + (investment_innovation * 0.2) + (corruption_perception_index * 0.3)\n\n    if year > 2010:\n        economic_potential *= 1.05\n\n    return economic_potential"}
{"ground_truth": "def calculate_casualties(opposing_groups, conflict_zones, casualties_per_zone):\n    total_casualties = 0\n    for zone in conflict_zones:\n        total_casualties += casualties_per_zone[zone]\n    return total_casualties", "problem_description": "I need the agent to create a Python function that can calculate the total number of casualties in a hypothetical conflict in Iraq, considering multiple opposing groups and conflict zones. The function should take the names of the opposing groups and the conflict zones, along with the number of casualties per zone, and return the total number of casualties. The agent will need to clarify the input parameters and the logic of the function with me before providing the final answer.The signature of the function is: def calculate_casualties(opposing_groups, conflict_zones, casualties_per_zone)", "test_cases": {"test1": "calculate_casualties(['ISIS', 'Peshmerga'], ['Mosul', 'Erbil'], {'Mosul': 100, 'Erbil': 50})", "test2": "calculate_casualties(['ISIS', 'Iraqi Army'], ['Baghdad', 'Kirkuk'], {'Baghdad': 200, 'Kirkuk': 75})", "test3": "calculate_casualties(['Peshmerga', 'Kurdistan Army'], ['Dohuk', 'Sulaimaniyah'], {'Dohuk': 150, 'Sulaimaniyah': 25})", "test4": "calculate_casualties(['ISIS', 'Syrian Army'], ['Raqqa', 'Aleppo'], {'Raqqa': 300, 'Aleppo': 100})", "test5": "calculate_casualties(['Iraqi Army', 'Kurdistan Army'], ['Basra', 'Najaf'], {'Basra': 250, 'Najaf': 50})", "test6": "calculate_casualties(['ISIS', 'Peshmerga', 'Iraqi Army'], ['Mosul', 'Erbil', 'Baghdad'], {'Mosul': 100, 'Erbil': 50, 'Baghdad': 200})", "test7": "calculate_casualties(['ISIS', 'Syrian Army', 'Kurdistan Army'], ['Raqqa', 'Aleppo', 'Dohuk'], {'Raqqa': 300, 'Aleppo': 100, 'Dohuk': 150})", "test8": "calculate_casualties(['Peshmerga', 'Iraqi Army', 'Kurdistan Army'], ['Erbil', 'Baghdad', 'Sulaimaniyah'], {'Erbil': 50, 'Baghdad': 200, 'Sulaimaniyah': 25})", "test9": "calculate_casualties(['ISIS', 'Peshmerga', 'Syrian Army'], ['Mosul', 'Raqqa', 'Aleppo'], {'Mosul': 100, 'Raqqa': 300, 'Aleppo': 100})", "test10": "calculate_casualties(['Iraqi Army', 'Kurdistan Army', 'Peshmerga'], ['Baghdad', 'Basra', 'Erbil'], {'Baghdad': 200, 'Basra': 250, 'Erbil': 50})"}, "hidden_information": "def calculate_casualties(opposing_groups, conflict_zones, casualties_per_zone):\n    total_casualties = 0\n    for zone in conflict_zones:\n        total_casualties += casualties_per_zone[zone]\n    return total_casualties"}
{"ground_truth": "def calculate_debt_to_equity(total_debt, total_equity):\n    if total_equity == 0:\n        return \"Error: Total equity is zero\"\n    else:\n        return total_debt / total_equity", "problem_description": "Can you write a python function to help me calculate the debt-to-equity ratio of a company? The ratio is supposed to be the total debt divided by the total equity but I'm not quite sure how to correctly implement it.The signature of the function is: def calculate_debt_to_equity(total_debt, total_equity)", "test_cases": {"test1": "calculate_debt_to_equity(1000, 500)", "test2": "calculate_debt_to_equity(500, 0)", "test3": "calculate_debt_to_equity(2000, 1000)", "test4": "calculate_debt_to_equity(0, 1000)", "test5": "calculate_debt_to_equity(1000000, 500000)", "test6": "calculate_debt_to_equity(500000, 250000)", "test7": "calculate_debt_to_equity(100000, 0)", "test8": "calculate_debt_to_equity(250000, 50000)", "test9": "calculate_debt_to_equity(75000, 37500)", "test10": "calculate_debt_to_equity(90000, 0)"}, "hidden_information": "def calculate_debt_to_equity(total_debt, total_equity):\n    if total_equity == 0:\n        return \"Error: Total equity is zero\"\n    else:\n        return total_debt / total_equity"}
{"ground_truth": "def calculate_agent_commission(policies, renewal_rate, commission_rate, customers_per_agent): commission = (policies - policies * renewal_rate) * commission_rate / customers_per_agent; return commission", "problem_description": "I need a Python function to calculate the total commission an insurance agent earns from selling policies in India. Can you write a function that takes into account policy sales, renewal rates, commission rates, and the number of customers per agent?The signature of the function is: def calculate_agent_commission(policies, renewal_rate, commission_rate, customers_per_agent)", "test_cases": {"test1": "calculate_agent_commission(1000, 0.4, 0.25, 20)", "test2": "calculate_agent_commission(2000, 0.3, 0.1, 10)", "test3": "calculate_agent_commission(500, 0.5, 0.15, 5)", "test4": "calculate_agent_commission(1500, 0.2, 0.2, 15)", "test5": "calculate_agent_commission(800, 0.6, 0.12, 8)", "test6": "calculate_agent_commission(1200, 0.4, 0.18, 12)", "test7": "calculate_agent_commission(250, 0.7, 0.22, 2)", "test8": "calculate_agent_commission(1800, 0.1, 0.11, 18)", "test9": "calculate_agent_commission(350, 0.8, 0.28, 3)", "test10": "calculate_agent_commission(2200, 0.45, 0.19, 22)"}, "hidden_information": "def calculate_agent_commission(policies, renewal_rate, commission_rate, customers_per_agent): commission = (policies - policies * renewal_rate) * commission_rate / customers_per_agent; return commission"}
{"ground_truth": "def calculate_voter_turnout(voter_data, total_population):\n    voter_turnout_rate = (voter_data['voters'] / total_population['population']) * 100\n    return voter_turnout_rate", "problem_description": "I want a python function that can help me calculate the voter turnout in different cities. I have some data on the number of voters and the total population, but I'm not sure how to use it to get the turnout percentage. Can the function handle this for me?The signature of the function is: def calculate_voter_turnout(voter_data, total_population)", "test_cases": {"test1": "print(calculate_voter_turnout({'voters': 1000, 'election_type': 'mayoral'}, {'population': 10000, 'city': 'London'})) == 10.0", "test2": "print(calculate_voter_turnout({'voters': 500, 'election_type': 'general'}, {'population': 5000, 'city': 'Manchester'})) == 10.0", "test3": "print(calculate_voter_turnout({'voters': 2000, 'election_type': 'mayoral'}, {'population': 20000, 'city': 'Paris'})) == 10.0", "test4": "print(calculate_voter_turnout({'voters': 1500, 'election_type': 'mayoral'}, {'population': 15000, 'city': 'New York'})) == 10.0", "test5": "print(calculate_voter_turnout({'voters': 2500, 'election_type': 'general'}, {'population': 25000, 'city': 'Berlin'})) == 10.0", "test6": "print(calculate_voter_turnout({'voters': 800, 'election_type': 'mayoral'}, {'population': 8000, 'city': 'Rome'})) == 10.0", "test7": "print(calculate_voter_turnout({'voters': 1200, 'election_type': 'general'}, {'population': 12000, 'city': 'Tokyo'})) == 10.0", "test8": "print(calculate_voter_turnout({'voters': 1800, 'election_type': 'mayoral'}, {'population': 18000, 'city': 'Sydney'})) == 10.0", "test9": "print(calculate_voter_turnout({'voters': 900, 'election_type': 'mayoral'}, {'population': 9000, 'city': 'Beijing'})) == 10.0", "test10": "print(calculate_voter_turnout({'voters': 2200, 'election_type': 'general'}, {'population': 22000, 'city': 'Mumbai'})) == 10.0"}, "hidden_information": "def calculate_voter_turnout(voter_data, total_population):\n    voter_turnout_rate = (voter_data['voters'] / total_population['population']) * 100\n    return voter_turnout_rate"}
{"ground_truth": "def calculate_exhibit_popularity(exhibit_type, exhibit_size, exhibit_value, unique_provenance):\n    if unique_provenance:\n        return 9\n    score = 0\n    if exhibit_type == 'ivory' or exhibit_type == 'jewellery' or exhibit_type == 'silver' or exhibit_type == 'gold':\n        score += 2\n    if exhibit_size in ['small', 'medium']:\n        score += 1\n    elif exhibit_size == 'large':\n        score += 3\n    if exhibit_value > 1000000:\n        score += 2\n    return score", "problem_description": "Hi LLM agent, I need your help in writing a Python function to predict the popularity of an exhibit in a museum like the Historic Green Vault. I know that the type, size, monetary value, and provenance of an exhibit may influence its popularity. The agent will need to know the rating system being used to determine how popular an exhibit might be.The signature of the function is: def calculate_exhibit_popularity(exhibit_type, exhibit_size, exhibit_value, unique_provenance)", "test_cases": {"test1": "calculate_exhibit_popularity('ivory', 'small', 10000, True)", "test2": "calculate_exhibit_popularity('painting', 'medium', 200000, False)", "test3": "calculate_exhibit_popularity('silver', 'large', 50000, True)", "test4": "calculate_exhibit_popularity('rock crystal', 'small', 2000, True)", "test5": "calculate_exhibit_popularity('silver-gilt', 'large', 1500000, False)", "test6": "calculate_exhibit_popularity('malachite', 'small', 5000, True)", "test7": "calculate_exhibit_popularity('ivory', 'medium', 100000, False)", "test8": "calculate_exhibit_popularity('jewellery', 'large', 2000000, True)", "test9": "calculate_exhibit_popularity('gold', 'small', 1000, True)", "test10": "calculate_exhibit_popularity('ruby', 'medium', 50000, False)"}, "hidden_information": "def calculate_exhibit_popularity(exhibit_type, exhibit_size, exhibit_value, unique_provenance):\n    if unique_provenance:\n        return 9\n    score = 0\n    if exhibit_type == 'ivory' or exhibit_type == 'jewellery' or exhibit_type == 'silver' or exhibit_type == 'gold':\n        score += 2\n    if exhibit_size in ['small', 'medium']:\n        score += 1\n    elif exhibit_size == 'large':\n        score += 3\n    if exhibit_value > 1000000:\n        score += 2\n    return score"}
{"ground_truth": "def calculate_laptop_price_difference(prices_dict): \n  # prices_dict is a dictionary of dictionaries containing laptop prices and specs for different vendors \n  price_diff = {}\n  for vendor in prices_dict:\n    min_price = min(prices_dict[vendor]['prices'])\n    max_price = max(prices_dict[vendor]['prices'])\n    price_diff[vendor] = max_price - min_price\n  return price_diff", "problem_description": "I want the agent to create a python function that calculates the price difference of laptops by different vendors. The laptops will have prices associated with different models and may also contain other details like RAM size, storage, and screen resolution.The signature of the function is: def calculate_laptop_price_difference(prices_dict)", "test_cases": {"test1": "calculate_laptop_price_difference({'Apple': {'prices': [1000, 1200, 1500], 'specs': ['RAM: 16GB', 'Screen: 13.3-inch']}})", "test2": "calculate_laptop_price_difference({'Dell': {'prices': [800, 900, 1000], 'specs': ['RAM: 8GB', 'Screen: 14-inch']}})", "test3": "calculate_laptop_price_difference({'Toshiba': {'prices': [700, 800, 900, 1000], 'specs': ['RAM: 4GB', 'Screen: 13.3-inch']}})", "test4": "calculate_laptop_price_difference({'Sony': {'prices': [1100, 1200, 1300], 'specs': ['RAM: 16GB', 'Screen: 15-inch']}})", "test5": "calculate_laptop_price_difference({'Apple': {'prices': [1000, 1200, 1500], 'specs': ['RAM: 16GB', 'Screen: 13.3-inch']}, 'Dell': {'prices': [800, 900, 1000], 'specs': ['RAM: 8GB', 'Screen: 14-inch']}})", "test6": "calculate_laptop_price_difference({'Toshiba': {'prices': [700, 800, 900, 1000], 'specs': ['RAM: 4GB', 'Screen: 13.3-inch']}, 'Sony': {'prices': [1100, 1200, 1300], 'specs': ['RAM: 16GB', 'Screen: 15-inch']}})", "test7": "calculate_laptop_price_difference({'Apple': {'prices': [1000, 1200, 1500], 'specs': ['RAM: 16GB', 'Screen: 13.3-inch']}, 'Dell': {'prices': [800, 900, 1000], 'specs': ['RAM: 8GB', 'Screen: 14-inch']}, 'Toshiba': {'prices': [700, 800, 900, 1000], 'specs': ['RAM: 4GB', 'Screen: 13.3-inch']}})", "test8": "calculate_laptop_price_difference({'Sony': {'prices': [1100, 1200, 1300], 'specs': ['RAM: 16GB', 'Screen: 15-inch']}, 'Dell': {'prices': [800, 900, 1000], 'specs': ['RAM: 8GB', 'Screen: 14-inch']}, 'Apple': {'prices': [1000, 1200, 1500], 'specs': ['RAM: 16GB', 'Screen: 13.3-inch']}})", "test9": "calculate_laptop_price_difference({'Toshiba': {'prices': [700, 800, 900, 1000], 'specs': ['RAM: 4GB', 'Screen: 13.3-inch']}, 'Apple': {'prices': [1000, 1200, 1500], 'specs': ['RAM: 16GB', 'Screen: 13.3-inch']}, 'Sony': {'prices': [1100, 1200, 1300], 'specs': ['RAM: 16GB', 'Screen: 15-inch']}})", "test10": "calculate_laptop_price_difference({'Dell': {'prices': [800, 900, 1000], 'specs': ['RAM: 8GB', 'Screen: 14-inch']}, 'Sony': {'prices': [1100, 1200, 1300], 'specs': ['RAM: 16GB', 'Screen: 15-inch']}, 'Toshiba': {'prices': [700, 800, 900, 1000], 'specs': ['RAM: 4GB', 'Screen: 13.3-inch']}})"}, "hidden_information": "def calculate_laptop_price_difference(prices_dict): \n  # prices_dict is a dictionary of dictionaries containing laptop prices and specs for different vendors \n  price_diff = {}\n  for vendor in prices_dict:\n    min_price = min(prices_dict[vendor]['prices'])\n    max_price = max(prices_dict[vendor]['prices'])\n    price_diff[vendor] = max_price - min_price\n  return price_diff"}
{"ground_truth": "def calculate_total_cost(items, prices, fees=0.05, shipping_cost=10):\n    total_cost = sum(prices) * (1 + fees) + shipping_cost\n    return total_cost", "problem_description": "Hey, I want you to write a python function to calculate the total cost of items purchased through this new Twitter Commerce thing I heard about. It needs to take into account the price of the items, some kind of processing fee and shipping costs.The signature of the function is: def calculate_total_cost(items, prices, fees=0.05, shipping_cost=10)", "test_cases": {"test1": "calculate_total_cost(2, [10, 20], 0.05, 10)", "test2": "calculate_total_cost(3, [5, 10, 15], 0.03, 5)", "test3": "calculate_total_cost(1, [30], 0.01, 0)", "test4": "calculate_total_cost(4, [10, 20, 30, 40], 0.06, 15)", "test5": "calculate_total_cost(2, [50, 100], 0.04, 20)", "test6": "calculate_total_cost(1, [25], 0.02, 5)", "test7": "calculate_total_cost(3, [10, 20, 30], 0.08, 10)", "test8": "calculate_total_cost(2, [75, 100], 0.07, 25)", "test9": "calculate_total_cost(4, [5, 10, 15, 20], 0.03, 5)", "test10": "calculate_total_cost(1, [150], 0.05, 30)"}, "hidden_information": "def calculate_total_cost(items, prices, fees=0.05, shipping_cost=10):\n    total_cost = sum(prices) * (1 + fees) + shipping_cost\n    return total_cost"}
{"ground_truth": "def compare_phone_specs(phone1, phone2, specs): return {spec: phone1[spec] > phone2[spec] for spec in specs}", "problem_description": "Write a python function for me to decide which HTC smartphone model is better based on certain specifications.The signature of the function is: def compare_phone_specs(phone1, phone2, specs)", "test_cases": {"test1": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 3, 'memory': 128, 'processor_speed': 2.5}, ['ram', 'memory'])", "test2": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 3, 'memory': 64, 'processor_speed': 2.5}, ['memory', 'processor_speed'])", "test3": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 4, 'memory': 128, 'processor_speed': 2.8}, ['ram', 'processor_speed'])", "test4": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 4, 'memory': 128, 'processor_speed': 2.5}, ['ram', 'memory', 'processor_speed'])", "test5": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 8, 'memory': 256, 'processor_speed': 3.2}, ['ram', 'memory', 'processor_speed'])", "test6": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 2, 'memory': 256, 'processor_speed': 1.8}, ['ram', 'processor_speed'])", "test7": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 2, 'memory': 128, 'processor_speed': 2.5}, ['memory'])", "test8": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 4, 'memory': 256, 'processor_speed': 2.5}, ['ram', 'memory'])", "test9": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 8, 'memory': 128, 'processor_speed': 2.5}, ['ram', 'processor_speed'])", "test10": "compare_phone_specs({'ram': 4, 'memory': 128, 'processor_speed': 2.5}, {'ram': 4, 'memory': 128, 'processor_speed': 2.5}, ['ram', 'memory', 'processor_speed'])"}, "hidden_information": "def compare_phone_specs(phone1, phone2, specs): return {spec: phone1[spec] > phone2[spec] for spec in specs}"}
{"ground_truth": "def allocate_shelter_space(shelter_capacity, current_occupants, new_dogs, max_occupancy_ratio):\n    available_space = shelter_capacity - current_occupants\n    if new_dogs > available_space * max_occupancy_ratio:\n        return False\n    else:\n        return True", "problem_description": "I need a Python function to figure out if we can fit more dogs in our Sochi shelter. We want to make sure we don't overcrowd the shelter, but we also want to save as many dogs as possible. Can you help me with that?The signature of the function is: def allocate_shelter_space(shelter_capacity, current_occupants, new_dogs, max_occupancy_ratio)", "test_cases": {"test1": "allocate_shelter_space(100, 50, 20, 0.8)", "test2": "allocate_shelter_space(100, 50, 60, 0.8)", "test3": "allocate_shelter_space(100, 80, 10, 0.8)", "test4": "allocate_shelter_space(100, 50, 30, 0.7)", "test5": "allocate_shelter_space(100, 70, 20, 0.9)", "test6": "allocate_shelter_space(50, 30, 10, 0.8)", "test7": "allocate_shelter_space(50, 40, 15, 0.6)", "test8": "allocate_shelter_space(200, 100, 50, 0.8)", "test9": "allocate_shelter_space(200, 150, 20, 0.7)", "test10": "allocate_shelter_space(200, 180, 10, 0.9)"}, "hidden_information": "def allocate_shelter_space(shelter_capacity, current_occupants, new_dogs, max_occupancy_ratio):\n    available_space = shelter_capacity - current_occupants\n    if new_dogs > available_space * max_occupancy_ratio:\n        return False\n    else:\n        return True"}
{"ground_truth": "def calculate_rural_education_funding(government_budget, rural_population, urban_population, funding_ratio):\n    if rural_population == 0:\n        return 0\n    funding = (government_budget * funding_ratio) / (rural_population / (rural_population + urban_population))\n    return funding", "problem_description": "I need a Python function that can help determine how much funding should be allocated to rural education initiatives based on government budget and population demographics. Can you write a function that takes into account the rural and urban populations, as well as a funding ratio? The function should return the amount of funding that should be allocated to rural education.The signature of the function is: def calculate_rural_education_funding(government_budget, rural_population, urban_population, funding_ratio)", "test_cases": {"test1": "calculate_rural_education_funding(1000000, 50000, 200000, 0.5)", "test2": "calculate_rural_education_funding(500000, 20000, 300000, 0.3)", "test3": "calculate_rural_education_funding(2000000, 100000, 500000, 0.4)", "test4": "calculate_rural_education_funding(1500000, 0, 400000, 0.6)", "test5": "calculate_rural_education_funding(1200000, 80000, 250000, 0.2)", "test6": "calculate_rural_education_funding(1800000, 120000, 380000, 0.55)", "test7": "calculate_rural_education_funding(2200000, 90000, 620000, 0.45)", "test8": "calculate_rural_education_funding(1000000, 30000, 170000, 0.35)", "test9": "calculate_rural_education_funding(2800000, 200000, 580000, 0.6)", "test10": "calculate_rural_education_funding(3500000, 150000, 750000, 0.5)"}, "hidden_information": "def calculate_rural_education_funding(government_budget, rural_population, urban_population, funding_ratio):\n    if rural_population == 0:\n        return 0\n    funding = (government_budget * funding_ratio) / (rural_population / (rural_population + urban_population))\n    return funding"}
{"ground_truth": "def get_country_positions(countries, values, negotiations): \n    country_positions = {}\n    for country in countries:\n        country_positions[country] = []\n        for value in values:\n            country_positions[country].append((value, negotiations[country].get(value, 0)))\n    return country_positions", "problem_description": "I'm trying to analyze the positions of different countries during international negotiations. Can you write a Python function that takes in a list of country names, a list of values, and a dictionary of negotiations where each key is a country and the value is a dictionary of value positions? The function should return a dictionary where each key is a country and the value is a list of tuples, where each tuple contains a value and that country's position on that value during the negotiations.The signature of the function is: def get_country_positions(countries, values, negotiations)", "test_cases": {"test1": "get_country_positions(['France', 'Germany', 'Italy'], ['environment', 'economy', 'security'], {'France': {'environment': 5, 'economy': 3, 'security': 4}, 'Germany': {'environment': 4, 'economy': 5, 'security': 3}, 'Italy': {'environment': 3, 'economy': 4, 'security': 5}})", "test2": "get_country_positions(['USA', 'Canada', 'Mexico'], ['trade', 'immigration', 'security'], {'USA': {'trade': 5, 'immigration': 3, 'security': 4}, 'Canada': {'trade': 4, 'immigration': 5, 'security': 3}, 'Mexico': {'trade': 3, 'immigration': 4, 'security': 5}})", "test3": "get_country_positions(['UK', 'Poland', 'Spain'], ['environment', 'economy', 'security'], {'UK': {'environment': 5, 'economy': 4, 'security': 3}, 'Poland': {'environment': 4, 'economy': 3, 'security': 5}, 'Spain': {'environment': 3, 'economy': 5, 'security': 4}})", "test4": "get_country_positions(['China', 'Japan', 'Korea'], ['trade', 'security', 'human_rights'], {'China': {'trade': 5, 'security': 4, 'human_rights': 2}, 'Japan': {'trade': 4, 'security': 5, 'human_rights': 3}, 'Korea': {'trade': 3, 'security': 4, 'human_rights': 5}})", "test5": "get_country_positions(['India', 'Brazil', 'South Africa'], ['environment', 'economy', 'security'], {'India': {'environment': 5, 'economy': 4, 'security': 3}, 'Brazil': {'environment': 4, 'economy': 5, 'security': 3}, 'South Africa': {'environment': 3, 'economy': 4, 'security': 5}})", "test6": "get_country_positions(['Russia', 'Turkey', 'Egypt'], ['security', 'human_rights', 'trade'], {'Russia': {'security': 5, 'human_rights': 2, 'trade': 4}, 'Turkey': {'security': 4, 'human_rights': 3, 'trade': 5}, 'Egypt': {'security': 3, 'human_rights': 4, 'trade': 5}})", "test7": "get_country_positions(['France', 'Germany', 'Italy'], ['environment', 'economy', 'security'], {'France': {'environment': 4, 'economy': 5, 'security': 3}, 'Germany': {'environment': 5, 'economy': 4, 'security': 3}, 'Italy': {'environment': 3, 'economy': 4, 'security': 5}})", "test8": "get_country_positions(['USA', 'Canada', 'Mexico'], ['trade', 'immigration', 'security'], {'USA': {'trade': 4, 'immigration': 5, 'security': 3}, 'Canada': {'trade': 5, 'immigration': 4, 'security': 3}, 'Mexico': {'trade': 3, 'immigration': 5, 'security': 4}})", "test9": "get_country_positions(['UK', 'Poland', 'Spain'], ['environment', 'economy', 'security'], {'UK': {'environment': 4, 'economy': 3, 'security': 5}, 'Poland': {'environment': 5, 'economy': 4, 'security': 3}, 'Spain': {'environment': 3, 'economy': 4, 'security': 5}})", "test10": "get_country_positions(['China', 'Japan', 'Korea'], ['trade', 'security', 'human_rights'], {'China': {'trade': 4, 'security': 5, 'human_rights': 2}, 'Japan': {'trade': 5, 'security': 4, 'human_rights': 3}, 'Korea': {'trade': 3, 'security': 4, 'human_rights': 5}})"}, "hidden_information": "def get_country_positions(countries, values, negotiations): \n    country_positions = {}\n    for country in countries:\n        country_positions[country] = []\n        for value in values:\n            country_positions[country].append((value, negotiations[country].get(value, 0)))\n    return country_positions"}
{"ground_truth": "def calculate_car_depreciation(initial_price, years, model):\n    if model == 'Toyota' or model == 'Honda':\n        return initial_price * (1 - 0.3 * years)\n    elif model == 'Saturn':\n        return initial_price * (1 - 0.4 * years)\n    else:\n        return initial_price * (1 - 0.35 * years)", "problem_description": "I want the agent to write a Python function that calculates the depreciation of a car's value after a certain number of years, taking into account the type of car. The function should be called with the initial purchase price and the number of years as arguments, as well as the car model.The signature of the function is: def calculate_car_depreciation(initial_price, years, model)", "test_cases": {"test1": "calculate_car_depreciation(25000, 5, 'Toyota')", "test2": "calculate_car_depreciation(20000, 3, 'Saturn')", "test3": "calculate_car_depreciation(30000, 10, 'Honda')", "test4": "calculate_car_depreciation(35000, 2, 'Ford')", "test5": "calculate_car_depreciation(40000, 7, 'Toyota')", "test6": "calculate_car_depreciation(45000, 4, 'Saturn')", "test7": "calculate_car_depreciation(50000, 1, 'Honda')", "test8": "calculate_car_depreciation(55000, 9, 'Toyota')", "test9": "calculate_car_depreciation(60000, 6, 'Saturn')", "test10": "calculate_car_depreciation(65000, 8, 'Honda')"}, "hidden_information": "def calculate_car_depreciation(initial_price, years, model):\n    if model == 'Toyota' or model == 'Honda':\n        return initial_price * (1 - 0.3 * years)\n    elif model == 'Saturn':\n        return initial_price * (1 - 0.4 * years)\n    else:\n        return initial_price * (1 - 0.35 * years)"}
{"ground_truth": "def calculate_football_score(wins, losses, draws):\n    return wins * 3 + draws", "problem_description": "I am trying to determine a football team's overall score but I am not sure how to calculate it. Can you please write a python function to determine a football team's score? The team has played a certain number of matches and I know the number of wins, losses, and draws.The signature of the function is: def calculate_football_score(wins, losses, draws)", "test_cases": {"test1": "calculate_football_score(10, 5, 3)", "test2": "calculate_football_score(0, 0, 5)", "test3": "calculate_football_score(8, 6, 2)", "test4": "calculate_football_score(5, 10, 5)", "test5": "calculate_football_score(0, 5, 0)", "test6": "calculate_football_score(12, 3, 1)", "test7": "calculate_football_score(1, 0, 0)", "test8": "calculate_football_score(8, 5, 1)", "test9": "calculate_football_score(5, 1, 2)", "test10": "calculate_football_score(9, 3, 2)"}, "hidden_information": "def calculate_football_score(wins, losses, draws):\n    return wins * 3 + draws"}
{"ground_truth": "def determine_responsibility(accident_type, driver_error, computer_malfunction):\n    if driver_error:\n        return \"Driver\"\n    elif computer_malfunction:\n        return \"Manufacturer\"\n    else:\n        return \"Unknown\"", "problem_description": "Write a python function that can help determine who is responsible in case of a vehicle accident when a car is parking itself. It should take into account whether the accident was caused by driver error or a computer malfunction.The signature of the function is: def determine_responsibility(accident_type, driver_error, computer_malfunction)", "test_cases": {"test1": "determine_responsibility(\"Collision\", True, False)", "test2": "determine_responsibility(\"Collision\", False, True)", "test3": "determine_responsibility(\"Collision\", False, False)", "test4": "determine_responsibility(\"Scratch\", True, False)", "test5": "determine_responsibility(\"Scratch\", False, True)", "test6": "determine_responsibility(\"Scratch\", False, False)", "test7": "determine_responsibility(\"Dent\", True, False)", "test8": "determine_responsibility(\"Dent\", False, True)", "test9": "determine_responsibility(\"Dent\", False, False)", "test10": "determine_responsibility(\"Bump\", True, False)"}, "hidden_information": "def determine_responsibility(accident_type, driver_error, computer_malfunction):\n    if driver_error:\n        return \"Driver\"\n    elif computer_malfunction:\n        return \"Manufacturer\"\n    else:\n        return \"Unknown\""}
{"ground_truth": "def process_user_comments(comments, keywords):\n    processed_comments = {}\n    for comment in comments:\n        comment_id = comment['id']\n        comment_text = comment['text']\n        keyword_matches = [keyword for keyword in keywords if keyword in comment_text]\n        processed_comments[comment_id] = keyword_matches\n    return processed_comments", "problem_description": "Hey agent, I need your help with writing a python function to analyze user comments from a TV show discussion forum. The function should take a list of comments and a list of keywords as input, and return a dictionary where each key is a comment ID and the value is a list of keywords that appear in the comment. Can you help me write this function?The signature of the function is: def process_user_comments(comments, keywords)", "test_cases": {"test1": "process_user_comments([{'id': 1, 'text': 'I love the new season!'}, {'id': 2, 'text': 'The villain is so cool'}], ['love', 'villain'])", "test2": "process_user_comments([{'id': 3, 'text': 'This show is awesome'}, {'id': 4, 'text': 'I hate the main character'}], ['awesome', 'hate'])", "test3": "process_user_comments([{'id': 5, 'text': 'The plot twist was amazing'}, {'id': 6, 'text': 'I saw it coming'}], ['amazing', 'plot'])", "test4": "process_user_comments([{'id': 7, 'text': 'I love the characters'}, {'id': 8, 'text': 'The writing is terrible'}], ['love', 'terrible'])", "test5": "process_user_comments([{'id': 9, 'text': 'This is the best show ever'}, {'id': 10, 'text': 'I disagree'}], ['best', 'disagree'])", "test6": "process_user_comments([{'id': 11, 'text': 'The special effects are great'}, {'id': 12, 'text': 'The acting is bad'}], ['great', 'bad'])", "test7": "process_user_comments([{'id': 13, 'text': 'I love the music'}, {'id': 14, 'text': 'The pacing is slow'}], ['love', 'slow'])", "test8": "process_user_comments([{'id': 15, 'text': 'The characters are well-developed'}, {'id': 16, 'text': 'The story is boring'}], ['well-developed', 'boring'])", "test9": "process_user_comments([{'id': 17, 'text': 'I love the humor'}, {'id': 18, 'text': 'The drama is too much'}], ['love', 'drama'])", "test10": "process_user_comments([{'id': 19, 'text': 'The show is so underrated'}, {'id': 20, 'text': 'I agree'}], ['underrated', 'agree'])"}, "hidden_information": "def process_user_comments(comments, keywords):\n    processed_comments = {}\n    for comment in comments:\n        comment_id = comment['id']\n        comment_text = comment['text']\n        keyword_matches = [keyword for keyword in keywords if keyword in comment_text]\n        processed_comments[comment_id] = keyword_matches\n    return processed_comments"}
{"ground_truth": "def can_have_beard(occupation, age): return occupation != 'military' or age < 20 or age > 40", "problem_description": "Hi agent, I want you to write a python function that determines whether someone can grow a beard or not based on their job - note that soldiers are prohibited from growing beard. However there might be other restrictions. Can you just write the function please?The signature of the function is: def can_have_beard(occupation, age)", "test_cases": {"test1": "can_have_beard('military', 25)", "test2": "can_have_beard('engineer', 35)", "test3": "can_have_beard('military', 45)", "test4": "can_have_beard('lawyer', 50)", "test5": "can_have_beard('military', 18)", "test6": "can_have_beard('scientist', 60)", "test7": "can_have_beard('police officer', 38)", "test8": "can_have_beard('military', 55)", "test9": "can_have_beard('doctor', 42)", "test10": "can_have_beard('military', 19)"}, "hidden_information": "def can_have_beard(occupation, age): return occupation != 'military' or age < 20 or age > 40"}
{"ground_truth": "def get_top_games(game_names, ratings, desired_ranking, min_rating=3.0):\n    # Filter games by minimum rating and sort by ranking criteria\n    filtered_games = [(name, rating) for name, rating in zip(game_names, ratings) if rating >= min_rating]\n    sorted_games = sorted(filtered_games, key=lambda x: x[desired_ranking], reverse=True)\n    return sorted_games", "problem_description": "Hey AI, I have a ton of user-submitted ratings and reviews for various video games, could you please create a python function for me to filter out low-rated games and rank the remaining ones based on the user's input? The problem is that I can't decide on a specific method for ranking them.The signature of the function is: def get_top_games(game_names, ratings, desired_ranking, min_rating=3.0)", "test_cases": {"test1": "get_top_games(['MGS', 'S-Cry-Ed', 'CS:GO'], [4.5, 3.2, 4.8], 1)", "test2": "get_top_games(['Tribes', 'Star Trek Online'], [2.1, 4.2], 0, min_rating=3.5)", "test3": "get_top_games(['SSB4', 'Axis TV'], [4.0, 4.9], 0)", "test4": "get_top_games(['Die Hard'], [4.6], 1)", "test5": "get_top_games(['PS4'], [4.1], 0, min_rating=4.0)", "test6": "get_top_games(['Knights of Badassdom'], [4.0], 0)", "test7": "get_top_games(['XB1'], [3.5], 1)", "test8": "get_top_games(['Superhero/Hero/Antihero'], [4.4], 1)", "test9": "get_top_games(['Winterbolt'], [4.7], 0)", "test10": "get_top_games(['Metal Gear Solid HD Collection'], [4.2], 1)"}, "hidden_information": "def get_top_games(game_names, ratings, desired_ranking, min_rating=3.0):\n    # Filter games by minimum rating and sort by ranking criteria\n    filtered_games = [(name, rating) for name, rating in zip(game_names, ratings) if rating >= min_rating]\n    sorted_games = sorted(filtered_games, key=lambda x: x[desired_ranking], reverse=True)\n    return sorted_games"}
{"ground_truth": "def get_recommended_move(pokemon_name, ability, nature):\n    if ability == 'Technician' and (pokemon_name == 'Scizor' or pokemon_name == 'Scyther'):\n        return 'Bullet Punch'\n    elif ability == 'Swarm' and pokemon_name == 'Scizor':\n        return 'Night Slash'\n    else:\n        return 'Unknown'", "problem_description": "I want to create a Pok\u00e9mon move recommendation tool. The agent should write a python function that takes in the Pok\u00e9mon's name, ability, and nature as input and returns a recommended move. Can you help me design such a function?The signature of the function is: def get_recommended_move(pokemon_name, ability, nature)", "test_cases": {"test1": "get_recommended_move('Scizor', 'Technician', 'Rash')", "test2": "get_recommended_move('Scizor', 'Swarm', 'Rash')", "test3": "get_recommended_move('Scyther', 'Technician', 'Naive')", "test4": "get_recommended_move('Sceptile', 'Overgrow', 'Mild')", "test5": "get_recommended_move('Gengar', 'Cursed Body', 'Lonely')", "test6": "get_recommended_move('Flygon', 'Compound Eyes', 'Adamant')", "test7": "get_recommended_move('Infernape', 'Blaze', 'Naive')", "test8": "get_recommended_move('Scizor', 'Technician', 'Quiet')", "test9": "get_recommended_move('Emolga', 'Static', 'Timid')", "test10": "get_recommended_move('Lucario', 'Steadfast', 'Hasty')"}, "hidden_information": "def get_recommended_move(pokemon_name, ability, nature):\n    if ability == 'Technician' and (pokemon_name == 'Scizor' or pokemon_name == 'Scyther'):\n        return 'Bullet Punch'\n    elif ability == 'Swarm' and pokemon_name == 'Scizor':\n        return 'Night Slash'\n    else:\n        return 'Unknown'"}
{"ground_truth": "def calculate_xp_needed(current_level, target_level, xp_required_per_level):\n    xp_needed = 0\n    for i in range(current_level + 1, target_level + 1):\n        xp_needed += xp_required_per_level[i]\n    return xp_needed", "problem_description": "I want you to write a python function that calculates the experience points (XP) needed to reach a certain level in a game, the function should take multiple inputs so I need you to figure out what are those inputs and what is the logic that the function should implement. Let's assume that the experience required to reach each level is pre-computed and givenThe signature of the function is: def calculate_xp_needed(current_level, target_level, xp_required_per_level)", "test_cases": {"test1": "calculate_xp_needed(1, 5, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500})", "test2": "calculate_xp_needed(3, 8, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600, 7: 700, 8: 800})", "test3": "calculate_xp_needed(2, 4, {1: 100, 2: 200, 3: 300, 4: 400})", "test4": "calculate_xp_needed(5, 1, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500})", "test5": "calculate_xp_needed(1, 1, {1: 100})", "test6": "calculate_xp_needed(10, 15, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600, 7: 700, 8: 800, 9: 900, 10: 1000, 11: 1100, 12: 1200, 13: 1300, 14: 1400, 15: 1500})", "test7": "calculate_xp_needed(2, 6, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600})", "test8": "calculate_xp_needed(4, 9, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600, 7: 700, 8: 800, 9: 900})", "test9": "calculate_xp_needed(8, 12, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600, 7: 700, 8: 800, 9: 900, 10: 1000, 11: 1100, 12: 1200})", "test10": "calculate_xp_needed(6, 10, {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600, 7: 700, 8: 800, 9: 900, 10: 1000})"}, "hidden_information": "def calculate_xp_needed(current_level, target_level, xp_required_per_level):\n    xp_needed = 0\n    for i in range(current_level + 1, target_level + 1):\n        xp_needed += xp_required_per_level[i]\n    return xp_needed"}
{"ground_truth": "def predict_average_rating(num_reviews, num_ratings, avg_rating_per_review): return (num_reviews * avg_rating_per_review + num_ratings) / (num_reviews + 1)", "problem_description": "Can you write a Python function that can predict the average rating of a book on Goodreads? I want to give you some vague information about the number of reviews and ratings, but I'm not quite sure how they relate to the average rating. Can you ask me some questions to clarify?The signature of the function is: def predict_average_rating(num_reviews, num_ratings, avg_rating_per_review)", "test_cases": {"test1": "predict_average_rating(100, 200, 4.5)", "test2": "predict_average_rating(50, 100, 3.8)", "test3": "predict_average_rating(500, 1000, 4.2)", "test4": "predict_average_rating(200, 500, 4.8)", "test5": "predict_average_rating(10, 20, 3.5)", "test6": "predict_average_rating(150, 300, 4.1)", "test7": "predict_average_rating(250, 500, 4.6)", "test8": "predict_average_rating(80, 150, 4.3)", "test9": "predict_average_rating(30, 50, 4.0)", "test10": "predict_average_rating(400, 800, 4.4)"}, "hidden_information": "def predict_average_rating(num_reviews, num_ratings, avg_rating_per_review): return (num_reviews * avg_rating_per_review + num_ratings) / (num_reviews + 1)"}
{"ground_truth": "def summarize_book_review(review, keywords): \n    keywords_count = {}\n    words = review.lower().split()\n    for word in words:\n        if word in keywords:\n            if word not in keywords_count:\n                keywords_count[word] = 1\n            else:\n                keywords_count[word] += 1\n    return dict(sorted(keywords_count.items(), key=lambda item: item[1], reverse=True))", "problem_description": "I want a python function that takes a book review as a string and certain keywords as a list of words and provides me a dictionary showing how many times each of the keywords was mentioned in the review where the words count starts from the most frequently occurring wordThe signature of the function is: def summarize_book_review(review, keywords)", "test_cases": {"test1": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [\"string\"])", "test2": "summarize_book_review(\"A review can be multiple reviews but most notable ones go right through book.\", [\"review\"])", "test3": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [\"through\"])", "test4": "summarize_book_review(\"A review can be multiple reviews but most notable ones go right through book.\", [\"multiple\"])", "test5": "summarize_book_review(\"Hello, world!\", [\"Hello\", \"world\"])", "test6": "summarize_book_review(\"Hello, world! world.\", [\"Hello\", \"world\"])", "test7": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [\"book\"])", "test8": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [])", "test9": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [\"string\", \"multiple\"])", "test10": "summarize_book_review(\"The string is a multiple of many things but most notable words string string go right through book.\", [\"through\", \"many\"])"}, "hidden_information": "def summarize_book_review(review, keywords): \n    keywords_count = {}\n    words = review.lower().split()\n    for word in words:\n        if word in keywords:\n            if word not in keywords_count:\n                keywords_count[word] = 1\n            else:\n                keywords_count[word] += 1\n    return dict(sorted(keywords_count.items(), key=lambda item: item[1], reverse=True))"}
{"ground_truth": "def calculate_sandwich_healthiness(bread_type, protein, cheese, vegetables, spreads):\n  healthiness_score = 0\n  if bread_type == 'whole grain':\n    healthiness_score += 2\n  if protein in ['turkey breast', 'ham', 'chicken', 'roast beef', 'smoked salmon']:\n    healthiness_score += 2\n  if cheese in ['low-fat']:\n    healthiness_score += 1\n  healthiness_score += len(vegetables) * 0.5\n  if spreads in [['mustard', 'avocado'], ['low-fat mayonnaise']]:\n    healthiness_score += 1\n  return healthiness_score", "problem_description": "Hey agent, I want you to write a python function that can determine how healthy a sandwich is. We all know that some sandwiches are healthier than others, but I want a way to measure it. Can you write a function that takes the ingredients of a sandwich as input and outputs a healthiness score?The signature of the function is: def calculate_sandwich_healthiness(bread_type, protein, cheese, vegetables, spreads)", "test_cases": {"test1": "calculate_sandwich_healthiness('whole grain', 'turkey breast', 'low-fat', ['lettuce', 'tomato', 'cucumber'], ['mustard'])", "test2": "calculate_sandwich_healthiness('white bread', 'bacon', 'cheddar', ['lettuce'], ['mayonnaise'])", "test3": "calculate_sandwich_healthiness('whole grain', 'grilled chicken', 'low-fat', ['bell peppers', 'onions'], ['avocado'])", "test4": "calculate_sandwich_healthiness('whole grain', 'smoked salmon', 'low-fat', ['sprouts', 'spinach'], ['low-fat mayonnaise'])", "test5": "calculate_sandwich_healthiness('white bread', 'roast beef', 'cheddar', [], ['mayonnaise'])", "test6": "calculate_sandwich_healthiness('whole grain', 'turkey breast', 'feta', ['zucchini', 'tomato'], ['mustard'])", "test7": "calculate_sandwich_healthiness('white bread', 'ham', 'low-fat', ['cucumber', 'lettuce'], ['avocado'])", "test8": "calculate_sandwich_healthiness('whole grain', 'grilled chicken', 'cheddar', ['bell peppers', 'onions'], ['low-fat mayonnaise'])", "test9": "calculate_sandwich_healthiness('white bread', 'bacon', 'low-fat', [], ['mayonnaise'])", "test10": "calculate_sandwich_healthiness('whole grain', 'smoked salmon', 'feta', ['sprouts', 'spinach'], ['mustard'])"}, "hidden_information": "def calculate_sandwich_healthiness(bread_type, protein, cheese, vegetables, spreads):\n  healthiness_score = 0\n  if bread_type == 'whole grain':\n    healthiness_score += 2\n  if protein in ['turkey breast', 'ham', 'chicken', 'roast beef', 'smoked salmon']:\n    healthiness_score += 2\n  if cheese in ['low-fat']:\n    healthiness_score += 1\n  healthiness_score += len(vegetables) * 0.5\n  if spreads in [['mustard', 'avocado'], ['low-fat mayonnaise']]:\n    healthiness_score += 1\n  return healthiness_score"}
{"ground_truth": "def character_attributes(age, grudge_duration, has_realized_desire):\n    if age > 60 and grudge_duration > 20 and has_realized_desire:\n        return 'Romantically involved'\n    elif age > 30 and grudge_duration > 10 and not has_realized_desire:\n        return 'In stunted emotional development'\n    else:\n        return 'Unknown'", "problem_description": "Write a python function to determine a character's relationship status in the play Outside Mullingar based on their age, the duration of their grudge, and whether they've realized their desires for another character. The function should classify the character as 'Romantically involved', 'In stunted emotional development', or 'Unknown'The signature of the function is: def character_attributes(age, grudge_duration, has_realized_desire)", "test_cases": {"test1": "character_attributes(65, 25, True)", "test2": "character_attributes(35, 15, False)", "test3": "character_attributes(58, 8, True)", "test4": "character_attributes(72, 30, True)", "test5": "character_attributes(20, 5, False)", "test6": "character_attributes(48, 22, True)", "test7": "character_attributes(29, 12, False)", "test8": "character_attributes(67, 20, False)", "test9": "character_attributes(38, 18, True)", "test10": "character_attributes(50, 10, False)"}, "hidden_information": "def character_attributes(age, grudge_duration, has_realized_desire):\n    if age > 60 and grudge_duration > 20 and has_realized_desire:\n        return 'Romantically involved'\n    elif age > 30 and grudge_duration > 10 and not has_realized_desire:\n        return 'In stunted emotional development'\n    else:\n        return 'Unknown'"}
{"ground_truth": "def should_follow_on_twitter(twitter_description, followers, friends):\n    keywords_to_follow = ['tech', 'education', 'entrepreneurship']\n    for keyword in keywords_to_follow:\n        if keyword in twitter_description.lower() and followers < 10000 and friends < 1000:\n            return True\n    return False", "problem_description": "Hey agent, I want you to help me write a Python function that determines whether to follow someone on Twitter or not. I want to follow users who are interesting but not too popular. The function should take some inputs from the Twitter user's data and output a boolean value.The signature of the function is: def should_follow_on_twitter(twitter_description, followers, friends)", "test_cases": {"test1": "should_follow_on_twitter('I love tech and entrepreneurship', 500, 200)", "test2": "should_follow_on_twitter('I love fashion and beauty', 500, 200)", "test3": "should_follow_on_twitter('I am a tech entrepreneur', 10001, 1000)", "test4": "should_follow_on_twitter('I love education and entrepreneurship', 500, 1500)", "test5": "should_follow_on_twitter('I love tech and coding', 100, 100)", "test6": "should_follow_on_twitter('I am a beauty blogger', 500, 200)", "test7": "should_follow_on_twitter('I love entrepreneurship and business', 10001, 1000)", "test8": "should_follow_on_twitter('I am a tech enthusiast', 500, 500)", "test9": "should_follow_on_twitter('I love fashion and style', 10001, 1000)", "test10": "should_follow_on_twitter('I love education and learning', 500, 800)"}, "hidden_information": "def should_follow_on_twitter(twitter_description, followers, friends):\n    keywords_to_follow = ['tech', 'education', 'entrepreneurship']\n    for keyword in keywords_to_follow:\n        if keyword in twitter_description.lower() and followers < 10000 and friends < 1000:\n            return True\n    return False"}
{"ground_truth": "def select_scenarios(scenarios, criteria):\n    selected_scenarios = []\n    for scenario in scenarios:\n        if scenario['primary_applicant_employment_status'] == 'retired' and any(rule_name.endswith('Retired Discount') for rule_name in scenario['rules-fired']):\n            selected_scenarios.append(scenario)\n    return selected_scenarios", "problem_description": "Write a Python function that takes in a list of test scenarios and a set of criteria, and returns a filtered list of scenarios that match the given criteria. The criteria should include the employment status of the primary applicant and the rules that were fired during the scenario execution. The function should be flexible enough to handle different types of criteria in the future.The signature of the function is: def select_scenarios(scenarios, criteria)", "test_cases": {"test1": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], ['retired', 'Retired Discount'])", "test2": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], ['employed', 'Rule1'])", "test3": "select_scenarios([{'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}, {'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}], ['retired', 'Retired Discount'])", "test4": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], ['employed', 'Retired Discount'])", "test5": "select_scenarios([{'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}, {'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}], ['retired', 'Rule1'])", "test6": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], [])", "test7": "select_scenarios([{'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}, {'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}], [])", "test8": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], ['retired'])", "test9": "select_scenarios([{'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}, {'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}], ['employed'])", "test10": "select_scenarios([{'primary_applicant_employment_status': 'employed', 'rules-fired': ['Rule1', 'Rule2']}, {'primary_applicant_employment_status': 'retired', 'rules-fired': ['Retired Discount', 'Rule3']}], [])"}, "hidden_information": "def select_scenarios(scenarios, criteria):\n    selected_scenarios = []\n    for scenario in scenarios:\n        if scenario['primary_applicant_employment_status'] == 'retired' and any(rule_name.endswith('Retired Discount') for rule_name in scenario['rules-fired']):\n            selected_scenarios.append(scenario)\n    return selected_scenarios"}
{"ground_truth": "def calculate_us_trade_deficit(us_exports_to_china, us_imports_from_china):\n    return us_imports_from_china - us_exports_to_china", "problem_description": "Hi, I'd like the agent to create a Python function to calculate the trade deficit between the US and China, given the total value of US exports to China and the total value of US imports from China.The signature of the function is: def calculate_us_trade_deficit(us_exports_to_china, us_imports_from_china)", "test_cases": {"test1": "calculate_us_trade_deficit(100, 160)", "test2": "calculate_us_trade_deficit(1000, 2000)", "test3": "calculate_us_trade_deficit(50000, 70000)", "test4": "calculate_us_trade_deficit(1000000, 1200000)", "test5": "calculate_us_trade_deficit(5000000, 6000000)", "test6": "calculate_us_trade_deficit(100, 100)", "test7": "calculate_us_trade_deficit(100000, 100000)", "test8": "calculate_us_trade_deficit(0, 100)", "test9": "calculate_us_trade_deficit(500, 0)", "test10": "calculate_us_trade_deficit(1000000, 0)"}, "hidden_information": "def calculate_us_trade_deficit(us_exports_to_china, us_imports_from_china):\n    return us_imports_from_china - us_exports_to_china"}
{"ground_truth": "def analyze_pelvic_congestion_symptoms(patient_data, symptom_threshold):\n    symptoms = patient_data['symptoms']\n    symptom_scores = [score for score in symptoms.values() if score > symptom_threshold]\n    relief_suggestions = {\n        'heat_therapy': symptom_scores.count('pain') >= 2,\n        'exercise': 'constipation' in symptoms,\n        'weight_loss': 'bloating' in symptoms\n    }\n    return relief_suggestions", "problem_description": "I'd like the agent to write a Python function that can analyze patient symptoms and provide relief suggestions for Pelvic Congestion Syndrome based on the input data. The function should take patient data and a symptom threshold as inputs.The signature of the function is: def analyze_pelvic_congestion_symptoms(patient_data, symptom_threshold)", "test_cases": {"test1": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 8, 'bloating': 6, 'constipation': 4}}, 5)", "test2": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 3, 'bloating': 2, 'constipation': 1}}, 4)", "test3": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 9, 'bloating': 8, 'constipation': 5}}, 6)", "test4": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 1, 'bloating': 1, 'constipation': 8}}, 2)", "test5": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 5, 'bloating': 4, 'constipation': 2}}, 3)", "test6": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 8, 'bloating': 3, 'constipation': 1}}, 4)", "test7": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 2, 'bloating': 9, 'constipation': 6}}, 5)", "test8": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 4, 'bloating': 1, 'constipation': 9}}, 1)", "test9": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 6, 'bloating': 5, 'constipation': 3}}, 2)", "test10": "analyze_pelvic_congestion_symptoms({'symptoms': {'pain': 7, 'bloating': 2, 'constipation': 7}}, 1)"}, "hidden_information": "def analyze_pelvic_congestion_symptoms(patient_data, symptom_threshold):\n    symptoms = patient_data['symptoms']\n    symptom_scores = [score for score in symptoms.values() if score > symptom_threshold]\n    relief_suggestions = {\n        'heat_therapy': symptom_scores.count('pain') >= 2,\n        'exercise': 'constipation' in symptoms,\n        'weight_loss': 'bloating' in symptoms\n    }\n    return relief_suggestions"}
{"ground_truth": "def calculate_prairie_chicken_population(initial_population, burning_frequency, grazing_intensity, percent_tallgrass, years):\n    if burning_frequency == 1:\n        annual_decline = 0.3\n    elif burning_frequency == 3:\n        annual_decline = 0.2\n    else:\n        annual_decline = 0.4\n\n    if grazing_intensity == \"high\":\n        annual_decline += 0.1\n    elif grazing_intensity == \"low\":\n        annual_decline -= 0.05\n\n    if percent_tallgrass < 30:\n        annual_decline += 0.05\n    elif percent_tallgrass > 70:\n        annual_decline -= 0.05\n\n    final_population = initial_population * (1 - annual_decline) ** years\n    return final_population", "problem_description": "I have some data on prairie chicken populations and I want you to write a Python function that calculates the future population after a certain number of years. The function should take into account the burning frequency, grazing intensity, and percentage of area covered with tallgrass. Can you write a function that does this?The signature of the function is: def calculate_prairie_chicken_population(initial_population, burning_frequency, grazing_intensity, percent_tallgrass, years)", "test_cases": {"test1": "calculate_prairie_chicken_population(1000, 1, \"high\", 40, 5)", "test2": "calculate_prairie_chicken_population(2000, 3, \"low\", 80, 10)", "test3": "calculate_prairie_chicken_population(500, 2, \"medium\", 50, 3)", "test4": "calculate_prairie_chicken_population(1500, 1, \"high\", 20, 8)", "test5": "calculate_prairie_chicken_population(3000, 3, \"low\", 90, 12)", "test6": "calculate_prairie_chicken_population(800, 2, \"medium\", 60, 6)", "test7": "calculate_prairie_chicken_population(1200, 1, \"high\", 30, 9)", "test8": "calculate_prairie_chicken_population(2500, 3, \"low\", 85, 15)", "test9": "calculate_prairie_chicken_population(1000, 2, \"medium\", 45, 7)", "test10": "calculate_prairie_chicken_population(1800, 1, \"high\", 25, 11)"}, "hidden_information": "def calculate_prairie_chicken_population(initial_population, burning_frequency, grazing_intensity, percent_tallgrass, years):\n    if burning_frequency == 1:\n        annual_decline = 0.3\n    elif burning_frequency == 3:\n        annual_decline = 0.2\n    else:\n        annual_decline = 0.4\n\n    if grazing_intensity == \"high\":\n        annual_decline += 0.1\n    elif grazing_intensity == \"low\":\n        annual_decline -= 0.05\n\n    if percent_tallgrass < 30:\n        annual_decline += 0.05\n    elif percent_tallgrass > 70:\n        annual_decline -= 0.05\n\n    final_population = initial_population * (1 - annual_decline) ** years\n    return final_population"}
{"ground_truth": "def calculate_average_minutes(player_minutes, player_positions):\n    total_minutes = sum(minutes for minutes, position in player_minutes if position in player_positions)\n    total_games = sum(1 for _, position in player_minutes if position in player_positions)\n    return total_minutes / total_games if total_games > 0 else 0", "problem_description": "Write a python function to help determine the average minutes per game a specific player will play when starting at the point guard (PG) or shooting guard (SG) position. The function should take into account the player's total minutes at different positions throughout the season.The signature of the function is: def calculate_average_minutes(player_minutes, player_positions)", "test_cases": {"test1": "calculate_average_minutes([(60, 'PG'), (30, 'SG'), (40, 'PG'), (20, 'SF')], ['PG'])", "test2": "calculate_average_minutes([(20, 'PG'), (40, 'SG'), (30, 'PG'), (10, 'PF')], ['PG', 'SG'])", "test3": "calculate_average_minutes([(50, 'PG'), (25, 'SG'), (35, 'PG'), (15, 'PG')], ['PG'])", "test4": "calculate_average_minutes([(32, 'PG'), (28, 'SG'), (42, 'PG'), (20, 'C')], ['PG'])", "test5": "calculate_average_minutes([(40, 'PG'), (10, 'SG'), (30, 'PG'), (25, 'PG')], ['SG'])", "test6": "calculate_average_minutes([(48, 'PG'), (22, 'SG'), (50, 'PG'), (12, 'PG')], ['PG'])", "test7": "calculate_average_minutes([(36, 'PG'), (16, 'SG'), (44, 'PG'), (18, 'PG')], ['PG'])", "test8": "calculate_average_minutes([(28, 'PG'), (20, 'SG'), (38, 'PG'), (14, 'PG')], ['PG', 'SG'])", "test9": "calculate_average_minutes([(45, 'PG'), (12, 'SG'), (30, 'PG'), (25, 'PG')], ['PG'])", "test10": "calculate_average_minutes([(50, 'PG'), (18, 'SG'), (35, 'PG'), (15, 'PG')], ['PG', 'SG'])"}, "hidden_information": "def calculate_average_minutes(player_minutes, player_positions):\n    total_minutes = sum(minutes for minutes, position in player_minutes if position in player_positions)\n    total_games = sum(1 for _, position in player_minutes if position in player_positions)\n    return total_minutes / total_games if total_games > 0 else 0"}
{"ground_truth": "def calculate_withheld_privileges_and_immunities(citizens_withheld_from_residence, citizens_withheld_from_egress, total_citizens, total_privileges, total_immunities):\n    withheld_residence_privileges = citizens_withheld_from_residence * (total_privileges / total_citizens)\n    withheld_egress_immunities = citizens_withheld_from_egress * (total_immunities / total_citizens)\n    return withheld_residence_privileges + withheld_egress_immunities", "problem_description": "I need a Python function to calculate the total privileges and immunities rights that are being withheld from a group of citizens. The function should take into account the number of citizens who are being prevented from residing in a state, the number of citizens being prevented from leaving a state, the total number of citizens, the total number of privileges, and the total number of immunities. Can the agent help me write such a function?The signature of the function is: def calculate_withheld_privileges_and_immunities(citizens_withheld_from_residence, citizens_withheld_from_egress, total_citizens, total_privileges, total_immunities)", "test_cases": {"test1": "calculate_withheld_privileges_and_immunities(100, 50, 1000, 10, 15)", "test2": "calculate_withheld_privileges_and_immunities(200, 100, 500, 20, 30)", "test3": "calculate_withheld_privileges_and_immunities(50, 20, 2000, 5, 10)", "test4": "calculate_withheld_privileges_and_immunities(150, 75, 1000, 15, 20)", "test5": "calculate_withheld_privileges_and_immunities(250, 125, 500, 10, 15)", "test6": "calculate_withheld_privileges_and_immunities(300, 150, 2000, 5, 10)", "test7": "calculate_withheld_privileges_and_immunities(400, 200, 1000, 20, 30)", "test8": "calculate_withheld_privileges_and_immunities(500, 250, 500, 15, 20)", "test9": "calculate_withheld_privileges_and_immunities(600, 300, 2000, 10, 15)", "test10": "calculate_withheld_privileges_and_immunities(700, 350, 1000, 5, 10)"}, "hidden_information": "def calculate_withheld_privileges_and_immunities(citizens_withheld_from_residence, citizens_withheld_from_egress, total_citizens, total_privileges, total_immunities):\n    withheld_residence_privileges = citizens_withheld_from_residence * (total_privileges / total_citizens)\n    withheld_egress_immunities = citizens_withheld_from_egress * (total_immunities / total_citizens)\n    return withheld_residence_privileges + withheld_egress_immunities"}
{"ground_truth": "def calculate_trade_balance(usa_trade, china_trade, african_countries):\n    trade_balance = usa_trade - china_trade\n    return {country: trade_balance for country in african_countries}", "problem_description": "I need a Python function to compare the trade balances between the US and China in Africa. Can you write a function that takes into account the trade volumes of both countries with African nations?The signature of the function is: def calculate_trade_balance(usa_trade, china_trade, african_countries)", "test_cases": {"test1": "calculate_trade_balance(100, 50, ['South Africa', 'Nigeria'])", "test2": "calculate_trade_balance(200, 100, ['Egypt', 'Morocco'])", "test3": "calculate_trade_balance(300, 250, ['Kenya', 'Tanzania'])", "test4": "calculate_trade_balance(50, 75, ['Senegal', 'Ghana'])", "test5": "calculate_trade_balance(150, 100, ['Congo', 'Sudan'])", "test6": "calculate_trade_balance(250, 200, ['Zimbabwe', 'Mali'])", "test7": "calculate_trade_balance(100, 150, ['Nigeria', 'South Africa'])", "test8": "calculate_trade_balance(300, 350, ['Egypt', 'Morocco'])", "test9": "calculate_trade_balance(50, 50, ['Kenya', 'Tanzania'])", "test10": "calculate_trade_balance(200, 200, ['Senegal', 'Ghana'])"}, "hidden_information": "def calculate_trade_balance(usa_trade, china_trade, african_countries):\n    trade_balance = usa_trade - china_trade\n    return {country: trade_balance for country in african_countries}"}
{"ground_truth": "def calculate_ceo_performance(separate_roles, company_performance):\n    if separate_roles:\n        return sum(company_performance) / len(company_performance) * 1.1\n    else:\n        return sum(company_performance) / len(company_performance)", "problem_description": "Can you write a python function to calculate the performance score of CEOs based on whether their company has separate CEO and Chairman roles? I'm not really sure what the formula should be but the score should somehow reflect better or worse performance based on this distinctionThe signature of the function is: def calculate_ceo_performance(separate_roles, company_performance)", "test_cases": {"test1": "calculate_ceo_performance(True, [0.9, 0.8, 0.7, 0.6])", "test2": "calculate_ceo_performance(False, [0.5, 0.4, 0.3, 0.2])", "test3": "calculate_ceo_performance(True, [1.0, 0.9, 0.8, 0.7])", "test4": "calculate_ceo_performance(False, [0.6, 0.5, 0.4, 0.3])", "test5": "calculate_ceo_performance(True, [0.95, 0.9, 0.85])", "test6": "calculate_ceo_performance(False, [0.75, 0.7, 0.65, 0.6])", "test7": "calculate_ceo_performance(True, [0.99, 0.98, 0.97, 0.96])", "test8": "calculate_ceo_performance(False, [0.4, 0.3, 0.2, 0.1])", "test9": "calculate_ceo_performance(True, [0.9, 0.8, 0.7])", "test10": "calculate_ceo_performance(False, [0.6, 0.5, 0.4, 0.3, 0.2])"}, "hidden_information": "def calculate_ceo_performance(separate_roles, company_performance):\n    if separate_roles:\n        return sum(company_performance) / len(company_performance) * 1.1\n    else:\n        return sum(company_performance) / len(company_performance)"}
{"ground_truth": "def estimate_chalk_deposit(cell_size, coccolith_density, bloom_area):\n    # Assuming cell size in micrometers (\u00b5m)\n    # coccolith density in g/cm\u00b3\n    # bloom area in square meters (m\u00b2)\n    # Chalk density is around 1.97 g/cm\u00b3\n    chalk_density = 1.97\n    cell_volume = (4/3) * 3.14 * (cell_size / 2) ** 3  # in cubic micrometers\n    coccolith_mass = coccolith_density * (bloom_area * 1e+10)  # in grams\n    chalk_volume = coccolith_mass / chalk_density  # in cm\u00b3\n    return chalk_volume * 1000000  # return result in liters", "problem_description": "I want a python function that can estimate the amount of chalk deposit that forms from coccolithophorid blooms. The function needs to take into account the size and density of coccoliths. Please help me write this function.The signature of the function is: def estimate_chalk_deposit(cell_size, coccolith_density, bloom_area)", "test_cases": {"test1": "estimate_chalk_deposit(2, 0.5, 100)", "test2": "estimate_chalk_deposit(5, 0.8, 500)", "test3": "estimate_chalk_deposit(1.2, 0.2, 2000)", "test4": "estimate_chalk_deposit(3, 0.9, 800)", "test5": "estimate_chalk_deposit(6, 0.1, 400)", "test6": "estimate_chalk_deposit(4, 0.6, 300)", "test7": "estimate_chalk_deposit(0.8, 0.4, 1000)", "test8": "estimate_chalk_deposit(7, 0.3, 600)", "test9": "estimate_chalk_deposit(2.5, 0.7, 250)", "test10": "estimate_chalk_deposit(9, 0.2, 900)"}, "hidden_information": "def estimate_chalk_deposit(cell_size, coccolith_density, bloom_area):\n    # Assuming cell size in micrometers (\u00b5m)\n    # coccolith density in g/cm\u00b3\n    # bloom area in square meters (m\u00b2)\n    # Chalk density is around 1.97 g/cm\u00b3\n    chalk_density = 1.97\n    cell_volume = (4/3) * 3.14 * (cell_size / 2) ** 3  # in cubic micrometers\n    coccolith_mass = coccolith_density * (bloom_area * 1e+10)  # in grams\n    chalk_volume = coccolith_mass / chalk_density  # in cm\u00b3\n    return chalk_volume * 1000000  # return result in liters"}
{"ground_truth": "def categorize_tv_show_topics(topics): \n    tv_show_topics = { \n        'news': ['politics', 'current events', 'investigative journalism'],\n        'entertainment': ['pop culture', 'movies', 'music'],\n        'human_interest': ['social issues', 'trends', 'lifestyle'],\n        'other': ['unable to categorize']\n    }\n    categorized_topics = {}\n    for topic in topics:\n        topic = topic.lower()\n        if any(keyword in topic for keyword in tv_show_topics['news']):\n            categorized_topics[topic] = 'news'\n        elif any(keyword in topic for keyword in tv_show_topics['entertainment']):\n            categorized_topics[topic] = 'entertainment'\n        elif any(keyword in topic for keyword in tv_show_topics['human_interest']):\n            categorized_topics[topic] = 'human_interest'\n        else:\n            categorized_topics[topic] = 'other'\n    return categorized_topics", "problem_description": "I want you to write a Python function that can categorize topics of TV shows. The function should take in a list of topics and return a dictionary with the topics as keys and their corresponding categories as values. The categories should include 'news', 'entertainment', 'human interest', and 'other'. Can you write such a function for me?The signature of the function is: def categorize_tv_show_topics(topics)", "test_cases": {"test1": "categorize_tv_show_topics(['politics and current events', 'pop culture', 'social issues'])", "test2": "categorize_tv_show_topics(['movies', 'investigative journalism', 'lifestyle'])", "test3": "categorize_tv_show_topics(['music', 'trends', 'unable to categorize'])", "test4": "categorize_tv_show_topics(['politics', 'entertainment news', 'human interest story'])", "test5": "categorize_tv_show_topics(['current events', 'pop culture news', 'lifestyle trend'])", "test6": "categorize_tv_show_topics(['investigative journalism', 'movie review', 'social issue'])", "test7": "categorize_tv_show_topics(['news analysis', 'entertainment news', 'human interest story'])", "test8": "categorize_tv_show_topics(['politics and current events', 'pop culture trend', 'lifestyle'])", "test9": "categorize_tv_show_topics(['entertainment news', 'investigative journalism', 'social issue'])", "test10": "categorize_tv_show_topics(['human interest story', 'pop culture news', 'unable to categorize'])"}, "hidden_information": "def categorize_tv_show_topics(topics): \n    tv_show_topics = { \n        'news': ['politics', 'current events', 'investigative journalism'],\n        'entertainment': ['pop culture', 'movies', 'music'],\n        'human_interest': ['social issues', 'trends', 'lifestyle'],\n        'other': ['unable to categorize']\n    }\n    categorized_topics = {}\n    for topic in topics:\n        topic = topic.lower()\n        if any(keyword in topic for keyword in tv_show_topics['news']):\n            categorized_topics[topic] = 'news'\n        elif any(keyword in topic for keyword in tv_show_topics['entertainment']):\n            categorized_topics[topic] = 'entertainment'\n        elif any(keyword in topic for keyword in tv_show_topics['human_interest']):\n            categorized_topics[topic] = 'human_interest'\n        else:\n            categorized_topics[topic] = 'other'\n    return categorized_topics"}
{"ground_truth": "def filter_highflyer_stocks(stocks, min_growth_rate, max_pe, min_short_interest):\n    return [{'name': stock['name'], 'price': stock['price'], 'growth_rate': stock['growth_rate'], 'pe': stock['pe'], 'short_interest': stock['short_interest']} for stock in stocks if stock['growth_rate'] >= min_growth_rate and stock['pe'] <= max_pe and stock['short_interest'] >= min_short_interest]", "problem_description": "I want the agent to write a python function that can help me filter some highflyer stocks, but I don't want to specify what criteria to use. Just make sure the function takes in a list of stocks and returns a list of stocks that fit some condition.The signature of the function is: def filter_highflyer_stocks(stocks, min_growth_rate, max_pe, min_short_interest)", "test_cases": {"test1": "filter_highflyer_stocks([{'name': 'FB', 'price': 100, 'growth_rate': 0.2, 'pe': 50, 'short_interest': 0.1}, {'name': 'NFLX', 'price': 200, 'growth_rate': 0.3, 'pe': 100, 'short_interest': 0.2}], 0.1, 60, 0.1)", "test2": "filter_highflyer_stocks([{'name': 'PCLN', 'price': 1200, 'growth_rate': 0.4, 'pe': 30, 'short_interest': 0.3}, {'name': 'GOOG', 'price': 500, 'growth_rate': 0.1, 'pe': 20, 'short_interest': 0.05}], 0.2, 40, 0.2)", "test3": "filter_highflyer_stocks([{'name': 'AAPL', 'price': 150, 'growth_rate': 0.15, 'pe': 25, 'short_interest': 0.15}], 0.1, 30, 0.1)", "test4": "filter_highflyer_stocks([{'name': 'MSFT', 'price': 200, 'growth_rate': 0.25, 'pe': 35, 'short_interest': 0.25}], 0.2, 40, 0.2)", "test5": "filter_highflyer_stocks([{'name': 'AMZN', 'price': 250, 'growth_rate': 0.35, 'pe': 45, 'short_interest': 0.35}], 0.3, 50, 0.3)", "test6": "filter_highflyer_stocks([{'name': 'GOOGL', 'price': 1000, 'growth_rate': 0.4, 'pe': 30, 'short_interest': 0.4}], 0.1, 60, 0.1)", "test7": "filter_highflyer_stocks([{'name': 'FB', 'price': 120, 'growth_rate': 0.25, 'pe': 55, 'short_interest': 0.15}], 0.2, 50, 0.2)", "test8": "filter_highflyer_stocks([{'name': 'NFLX', 'price': 220, 'growth_rate': 0.35, 'pe': 105, 'short_interest': 0.3}], 0.3, 60, 0.2)", "test9": "filter_highflyer_stocks([{'name': 'PCLN', 'price': 1250, 'growth_rate': 0.4, 'pe': 32, 'short_interest': 0.35}], 0.2, 40, 0.2)", "test10": "filter_highflyer_stocks([], 0.1, 30, 0.1)"}, "hidden_information": "def filter_highflyer_stocks(stocks, min_growth_rate, max_pe, min_short_interest):\n    return [{'name': stock['name'], 'price': stock['price'], 'growth_rate': stock['growth_rate'], 'pe': stock['pe'], 'short_interest': stock['short_interest']} for stock in stocks if stock['growth_rate'] >= min_growth_rate and stock['pe'] <= max_pe and stock['short_interest'] >= min_short_interest]"}
{"ground_truth": "def calculate_optimal_asset_allocation(retirement_year, current_year, retirement_account_balance, current_age):\n  # years until retirement\n  years_until_retirement = retirement_year - current_year\n\n  # Based on research, we know that younger people are in a better position to bear market risk in their retirement portfolios.\n  # So, we'll use a \"through\" glide path that decreases equity exposure over time.\n  # For Vanguard, funds reach their final allocation of 30% equity and 70% fixed income 7 years after the target date\n  equity_exposure = 0.9 - (0.05 * (years_until_retirement - 7))\n  if equity_exposure < 0.3:\n    equity_exposure = 0.3\n  asset_allocation = {'equity': equity_exposure, 'fixed_income': 1 - equity_exposure}\n\n  return asset_allocation", "problem_description": "I want to create a target date retirement fund and I need help determining the optimal asset allocation. Specifically, I want a python function that calculates the optimal asset allocation for a given year and current age. Can you write a python function to do that?The signature of the function is: def calculate_optimal_asset_allocation(retirement_year, current_year, retirement_account_balance, current_age)", "test_cases": {"test1": "calculate_optimal_asset_allocation(2030, 2022, 100000, 30)", "test2": "calculate_optimal_asset_allocation(2040, 2022, 50000, 25)", "test3": "calculate_optimal_asset_allocation(2035, 2022, 75000, 35)", "test4": "calculate_optimal_asset_allocation(2025, 2022, 80000, 40)", "test5": "calculate_optimal_asset_allocation(2045, 2022, 60000, 20)", "test6": "calculate_optimal_asset_allocation(2032, 2022, 90000, 32)", "test7": "calculate_optimal_asset_allocation(2038, 2022, 70000, 28)", "test8": "calculate_optimal_asset_allocation(2028, 2022, 65000, 38)", "test9": "calculate_optimal_asset_allocation(2042, 2022, 85000, 22)", "test10": "calculate_optimal_asset_allocation(2032, 2022, 95000, 42)"}, "hidden_information": "def calculate_optimal_asset_allocation(retirement_year, current_year, retirement_account_balance, current_age):\n  # years until retirement\n  years_until_retirement = retirement_year - current_year\n\n  # Based on research, we know that younger people are in a better position to bear market risk in their retirement portfolios.\n  # So, we'll use a \"through\" glide path that decreases equity exposure over time.\n  # For Vanguard, funds reach their final allocation of 30% equity and 70% fixed income 7 years after the target date\n  equity_exposure = 0.9 - (0.05 * (years_until_retirement - 7))\n  if equity_exposure < 0.3:\n    equity_exposure = 0.3\n  asset_allocation = {'equity': equity_exposure, 'fixed_income': 1 - equity_exposure}\n\n  return asset_allocation"}
{"ground_truth": "def get_ideal_clothing(climate, temperature, season, has_sensory_needs):\n  if climate == 'cold' and temperature < 60:\n    return ['undershirt', 't-shirt', 'hoodie', 'rain jacket']\n  elif season == 'summer':\n    return ['t-shirt']\n  elif has_sensory_needs:\n    return ['ribbed tank top', 't-shirt']\n  else:\n    return ['t-shirt', 'hoodie']", "problem_description": "I live in a region with varying temperatures and I want to dress my kids comfortably. Can you write a Python function to suggest the most suitable clothing items based on the climate, temperature, season, and my child's sensory needs?The signature of the function is: def get_ideal_clothing(climate, temperature, season, has_sensory_needs)", "test_cases": {"test1": "get_ideal_clothing('cold', 50, 'winter', False)", "test2": "get_ideal_clothing('warm', 75, 'summer', False)", "test3": "get_ideal_clothing('mild', 60, 'spring', True)", "test4": "get_ideal_clothing('cold', 40, 'winter', True)", "test5": "get_ideal_clothing('hot', 80, 'summer', False)", "test6": "get_ideal_clothing('mild', 65, 'spring', False)", "test7": "get_ideal_clothing('cold', 55, 'winter', False)", "test8": "get_ideal_clothing('warm', 70, 'summer', True)", "test9": "get_ideal_clothing('mild', 58, 'spring', True)", "test10": "get_ideal_clothing('hot', 85, 'summer', False)"}, "hidden_information": "def get_ideal_clothing(climate, temperature, season, has_sensory_needs):\n  if climate == 'cold' and temperature < 60:\n    return ['undershirt', 't-shirt', 'hoodie', 'rain jacket']\n  elif season == 'summer':\n    return ['t-shirt']\n  elif has_sensory_needs:\n    return ['ribbed tank top', 't-shirt']\n  else:\n    return ['t-shirt', 'hoodie']"}
{"ground_truth": "def direct_to_a_e_or_ooh(symptoms, conditions):\n    priority_symptoms = ['difficulty_breathing', 'chest_pain', 'severe_burns', 'major_injury', 'confusion', 'severe_pain', 'unconsciousness']\n    for symptom in symptoms:\n        if symptom.lower() in priority_symptoms or symptom.lower() in conditions:\n            return 'A&E'\n    return 'OOH'", "problem_description": "Write a python function that can determine whether a patient's condition requires a visit to the Accident and Emergency department (A&E) or an out-of-hours (OOH) doctor's service.The signature of the function is: def direct_to_a_e_or_ooh(symptoms, conditions)", "test_cases": {"test1": "direct_to_a_e_or_ooh(['high_temperature', 'vomiting'], ['diabetes'])", "test2": "direct_to_a_e_or_ooh(['difficulty_breathing', 'coughing'], [])", "test3": "direct_to_a_e_or_ooh(['headache', 'stomach_ache'], [])", "test4": "direct_to_a_e_or_ooh([], ['diabetes', 'heart_condition'])", "test5": "direct_to_a_e_or_ooh(['major_injury'], [])", "test6": "direct_to_a_e_or_ooh(['nausea', 'dizziness'], ['pregnancy'])", "test7": "direct_to_a_e_or_ooh(['severe_allergic_reaction'], [])", "test8": "direct_to_a_e_or_ooh(['broken_bone'], ['history_of_fractures'])", "test9": "direct_to_a_e_or_ooh(['confusion', 'disorientation'], ['dementia'])", "test10": "direct_to_a_e_or_ooh(['minor_cut'], ['allergies'])"}, "hidden_information": "def direct_to_a_e_or_ooh(symptoms, conditions):\n    priority_symptoms = ['difficulty_breathing', 'chest_pain', 'severe_burns', 'major_injury', 'confusion', 'severe_pain', 'unconsciousness']\n    for symptom in symptoms:\n        if symptom.lower() in priority_symptoms or symptom.lower() in conditions:\n            return 'A&E'\n    return 'OOH'"}
{"ground_truth": "def should_grant_asylum(nationality, criminal_history):\n    # Assume a list of safe nationalities and a list of severe crimes\n    safe_nationalities = ['UK', 'USA', 'Canada']\n    severe_crimes = ['murder', 'terrorism']\n\n    if nationality in safe_nationalities and criminal_history not in severe_crimes:\n        return True\n    else:\n        return False", "problem_description": "Write a python function to decide whether we should grant asylum to someone. The function should take into account the person's nationality and their criminal history. We want to ensure we're not providing a safe haven for dangerous people, but at the same time, we don't want to turn away those who genuinely need help.The signature of the function is: def should_grant_asylum(nationality, criminal_history)", "test_cases": {"test1": "should_grant_asylum('UK', 'theft')", "test2": "should_grant_asylum('Jordan', 'murder')", "test3": "should_grant_asylum('USA', 'terrorism')", "test4": "should_grant_asylum('Canada', None)", "test5": "should_grant_asylum('Syria', 'None')", "test6": "should_grant_asylum('Australia', 'assault')", "test7": "should_grant_asylum('Germany', 'arson')", "test8": "should_grant_asylum('France', 'pickpocketing')", "test9": "should_grant_asylum('Italy', 'manslaughter')", "test10": "should_grant_asylum('Spain', 'burglary')"}, "hidden_information": "def should_grant_asylum(nationality, criminal_history):\n    # Assume a list of safe nationalities and a list of severe crimes\n    safe_nationalities = ['UK', 'USA', 'Canada']\n    severe_crimes = ['murder', 'terrorism']\n\n    if nationality in safe_nationalities and criminal_history not in severe_crimes:\n        return True\n    else:\n        return False"}
{"ground_truth": "def calculate_cognitive_readiness(test_scores, demographic_data, cognitive_models):\n    # Calculate cognitive readiness based on test scores, demographic data, and cognitive models\n    readiness_scores = {}\n    for participant in test_scores:\n        score = test_scores[participant]\n        demographic_info = demographic_data[participant]\n        model = cognitive_models[participant]\n        # Apply a simple algorithm to calculate cognitive readiness\n        readiness = (score * 0.4) + (demographic_info['average reaction time'] * 0.3) + (model['expected performance'] * 0.3)\n        readiness_scores[participant] = readiness\n    return readiness_scores", "problem_description": "I want you to write a Python function that calculates the cognitive readiness of military personnel based on some test scores, demographic data, and cognitive models. I need this function to take into account various factors, but I'm not sure what the precise relationship between these factors is. Can you help me figure this out?The signature of the function is: def calculate_cognitive_readiness(test_scores, demographic_data, cognitive_models)", "test_cases": {"test1": "calculate_cognitive_readiness({'John': 85, 'Alice': 90}, {'John': {'average reaction time': 0.5}, 'Alice': {'average reaction time': 0.7}}, {'John': {'expected performance': 0.8}, 'Alice': {'expected performance': 0.9}})", "test2": "calculate_cognitive_readiness({'Bob': 70, 'Charlie': 80}, {'Bob': {'average reaction time': 0.4}, 'Charlie': {'average reaction time': 0.6}}, {'Bob': {'expected performance': 0.7}, 'Charlie': {'expected performance': 0.8}})", "test3": "calculate_cognitive_readiness({'Dave': 60, 'Eve': 65}, {'Dave': {'average reaction time': 0.3}, 'Eve': {'average reaction time': 0.4}}, {'Dave': {'expected performance': 0.6}, 'Eve': {'expected performance': 0.7}})", "test4": "calculate_cognitive_readiness({'Frank': 75, 'Grace': 70}, {'Frank': {'average reaction time': 0.6}, 'Grace': {'average reaction time': 0.5}}, {'Frank': {'expected performance': 0.8}, 'Grace': {'expected performance': 0.7}})", "test5": "calculate_cognitive_readiness({'Helen': 80, 'Ivan': 85}, {'Helen': {'average reaction time': 0.7}, 'Ivan': {'average reaction time': 0.8}}, {'Helen': {'expected performance': 0.9}, 'Ivan': {'expected performance': 0.9}})", "test6": "calculate_cognitive_readiness({'Julia': 90, 'Kevin': 95}, {'Julia': {'average reaction time': 0.9}, 'Kevin': {'average reaction time': 1.0}}, {'Julia': {'expected performance': 0.9}, 'Kevin': {'expected performance': 1.0}})", "test7": "calculate_cognitive_readiness({'Laura': 75, 'Mike': 80}, {'Laura': {'average reaction time': 0.6}, 'Mike': {'average reaction time': 0.7}}, {'Laura': {'expected performance': 0.8}, 'Mike': {'expected performance': 0.9}})", "test8": "calculate_cognitive_readiness({'Nina': 65, 'Owen': 70}, {'Nina': {'average reaction time': 0.5}, 'Owen': {'average reaction time': 0.6}}, {'Nina': {'expected performance': 0.7}, 'Owen': {'expected performance': 0.8}})", "test9": "calculate_cognitive_readiness({'Paige': 70, 'Quincy': 75}, {'Paige': {'average reaction time': 0.6}, 'Quincy': {'average reaction time': 0.7}}, {'Paige': {'expected performance': 0.8}, 'Quincy': {'expected performance': 0.9}})", "test10": "calculate_cognitive_readiness({'Rachel': 85, 'Sam': 90}, {'Rachel': {'average reaction time': 0.8}, 'Sam': {'average reaction time': 0.9}}, {'Rachel': {'expected performance': 0.9}, 'Sam': {'expected performance': 1.0}})"}, "hidden_information": "def calculate_cognitive_readiness(test_scores, demographic_data, cognitive_models):\n    # Calculate cognitive readiness based on test scores, demographic data, and cognitive models\n    readiness_scores = {}\n    for participant in test_scores:\n        score = test_scores[participant]\n        demographic_info = demographic_data[participant]\n        model = cognitive_models[participant]\n        # Apply a simple algorithm to calculate cognitive readiness\n        readiness = (score * 0.4) + (demographic_info['average reaction time'] * 0.3) + (model['expected performance'] * 0.3)\n        readiness_scores[participant] = readiness\n    return readiness_scores"}
{"ground_truth": "def count_neopets_words(text, neopets_names):\n    return sum(1 for word in text.split() if word in neopets_names)", "problem_description": "Can you write a python function that can count the number of times different Neopets-related words appear in an article from the Neopian Times? I want to know how often certain words show up in an article. Can the agent write this function for me?The signature of the function is: def count_neopets_words(text, neopets_names)", "test_cases": {"test1": "count_neopets_words('Maraquan pets, fishy friends. Maraquan pets are unique.', ['Maraquan', 'pets']) == 3", "test2": "count_neopets_words('Do YOU Want Retired Avatars To Come Back?', ['Avatars', 'Maraquan']) == 1", "test3": "count_neopets_words('Your Neopets are waiting for you!', ['Neopets']) == 1", "test4": "count_neopets_words('Maragquan pets are not your average neopets.', ['Maragquan', 'neopets']) == 2", "test5": "count_neopets_words('Skeith-Shaming is not ok.', ['Skeith']) == 1", "test6": "count_neopets_words('Jetams are cool pets.', ['Jetams', 'pets']) == 2", "test7": "count_neopets_words('Other Neopian pets are nice too.', ['Neopian', 'pets']) == 2", "test8": "count_neopets_words('Circulation: 191,275,612 Issue: 601', ['Neopets']) == 0", "test9": "count_neopets_words('We all know how it goes. You do something.', ['Neopets']) == 0", "test10": "count_neopets_words('Stop Skeith-Shaming!', ['Skeith', 'Shaming']) == 1"}, "hidden_information": "def count_neopets_words(text, neopets_names):\n    return sum(1 for word in text.split() if word in neopets_names)"}
{"ground_truth": "def categorize_questions(question_text):\n    topics = {\n        'Chris Christie': 'politics', 'tax cut': 'politics', 'Jersey Shore': 'entertainment',\n        'Euro 2012': 'sports', 'Roger Clemens': 'sports', 'NJTV': 'news',\n        'Mitt Romney': 'politics', 'President Obama': 'politics', 'Bruce Springsteen': 'entertainment',\n        'Higgs boson': 'science'\n    }\n    for topic, category in topics.items():\n        if topic in question_text:\n            return category\n    return 'unknown'", "problem_description": "I need a python function that can categorize news questions from 2012 into different topics such as politics, sports, entertainment, or science. The function should take the question text as input and return the corresponding topic.The signature of the function is: def categorize_questions(question_text)", "test_cases": {"test1": "categorize_questions('What was Gov. Chris Christie willing to put back on the table for his tax cut?')", "test2": "categorize_questions('Which team won the Euro 2012 soccer championship?')", "test3": "categorize_questions('Who said \u201cI love, and I am loved\u201d?')", "test4": "categorize_questions('After Roger Clemens was acquitted on accusations of lying to Congress, who said he should be in the Baseball Hall of Fame?')", "test5": "categorize_questions('How much did the Haledon Borough School District receive from the state for anti-bullying efforts?')", "test6": "categorize_questions('What was the average combined viewership for the three nightly broadcasts of NJTV\u2019s news program, \u201cNJ Today\u201d?')", "test7": "categorize_questions('What resumed in Paris on July 4?')", "test8": "categorize_questions('Higgs boson is: a new dance taking clubs by storm, the new Wonderbra or a subatomic particle considered fundamental to existence?')", "test9": "categorize_questions('\u201cPolice Tape\u201d is: a way to measure uniforms, a parody of \u201cLaw & Order\u201d or a smart phone app to secretly record police?')", "test10": "categorize_questions('Christie recently called a reporter: an SOB, idiot or numbnuts?')"}, "hidden_information": "def categorize_questions(question_text):\n    topics = {\n        'Chris Christie': 'politics', 'tax cut': 'politics', 'Jersey Shore': 'entertainment',\n        'Euro 2012': 'sports', 'Roger Clemens': 'sports', 'NJTV': 'news',\n        'Mitt Romney': 'politics', 'President Obama': 'politics', 'Bruce Springsteen': 'entertainment',\n        'Higgs boson': 'science'\n    }\n    for topic, category in topics.items():\n        if topic in question_text:\n            return category\n    return 'unknown'"}
{"ground_truth": "def plan_economic_strategy(target_gdp_growth, export_promotion_fund, job_creation_incentive, existing_exports): return {'forecasted_jobs': target_gdp_growth * 20000, 'export_growth': export_promotion_fund * 0.05, 'gdp_growth': job_creation_incentive * 0.02 + existing_exports * 0.01}", "problem_description": "Can you write a python function to plan an economic strategy based on certain parameters? The strategy should forecast job creation, export growth and overall gdp growth. The function should take into account the planned target gdp growth, how much the government is willing to allocate from the export promotion fund, an incentive for job creation and the current export figures. We need this function to plan our next budget.The signature of the function is: def plan_economic_strategy(target_gdp_growth, export_promotion_fund, job_creation_incentive, existing_exports)", "test_cases": {"test1": "plan_economic_strategy(0.05, 1000000, 0.05, 15000000)", "test2": "plan_economic_strategy(0.03, 500000, 0.03, 10000000)", "test3": "plan_economic_strategy(0.01, 2000000, 0.01, 20000000)", "test4": "plan_economic_strategy(0.025, 1500000, 0.025, 12000000)", "test5": "plan_economic_strategy(0.075, 2500000, 0.075, 25000000)", "test6": "plan_economic_strategy(0.035, 1800000, 0.035, 18000000)", "test7": "plan_economic_strategy(0.045, 2200000, 0.045, 22000000)", "test8": "plan_economic_strategy(0.055, 2800000, 0.055, 28000000)", "test9": "plan_economic_strategy(0.015, 1000000, 0.015, 10000000)", "test10": "plan_economic_strategy(0.065, 3000000, 0.065, 30000000)"}, "hidden_information": "def plan_economic_strategy(target_gdp_growth, export_promotion_fund, job_creation_incentive, existing_exports): return {'forecasted_jobs': target_gdp_growth * 20000, 'export_growth': export_promotion_fund * 0.05, 'gdp_growth': job_creation_incentive * 0.02 + existing_exports * 0.01}"}
{"ground_truth": "def calculate_purification_solvent(dna_volume, desired_concentration, solvent='ethanol'): \n    if solvent == 'ethanol': \n        ratio = 2.5 \n    elif solvent == 'isopropanol': \n        ratio = 1 \n    else: \n        raise ValueError('Invalid solvent') \n    return (dna_volume * desired_concentration) / ratio", "problem_description": "I need a Python function to calculate the optimal amount of a solvent, either ethanol or isopropanol, required for purifying a DNA sample. The function should take the volume of the DNA sample and the desired concentration of the purified DNA as input, as well as an optional argument to specify the solvent. The function should return the amount of solvent required. Can you write such a function?The signature of the function is: def calculate_purification_solvent(dna_volume, desired_concentration, solvent='ethanol')", "test_cases": {"test1": "calculate_purification_solvent(100, 100, 'ethanol')", "test2": "calculate_purification_solvent(50, 50, 'isopropanol')", "test3": "calculate_purification_solvent(200, 200, 'ethanol')", "test4": "calculate_purification_solvent(75, 75, 'isopropanol')", "test5": "calculate_purification_solvent(150, 150, 'ethanol')", "test6": "calculate_purification_solvent(25, 25, 'isopropanol')", "test7": "calculate_purification_solvent(300, 300, 'ethanol')", "test8": "calculate_purification_solvent(400, 400, 'isopropanol')", "test9": "calculate_purification_solvent(100, 200, 'ethanol')", "test10": "calculate_purification_solvent(200, 100, 'isopropanol')"}, "hidden_information": "def calculate_purification_solvent(dna_volume, desired_concentration, solvent='ethanol'): \n    if solvent == 'ethanol': \n        ratio = 2.5 \n    elif solvent == 'isopropanol': \n        ratio = 1 \n    else: \n        raise ValueError('Invalid solvent') \n    return (dna_volume * desired_concentration) / ratio"}
{"ground_truth": "def calculate_battery_life(performance_mode, scheduler, cores, utilization, battery_capacity, powerConsumption_rate_per_core):\n    if performance_mode == 'performance' and scheduler == 'noop':\n        energy_consumption = powerConsumption_rate_per_core * cores * utilization\n    elif performance_mode == 'normal' and scheduler == 'cfq':\n        energy_consumption = powerConsumption_rate_per_core * (cores * 0.8) * utilization\n    elif performance_mode == 'power_save' and scheduler == 'deadline':\n        energy_consumption = powerConsumption_rate_per_core * (cores * 0.5) * utilization\n    else:\n        return 'Invalid performance mode or scheduler'\n    battery_life = battery_capacity / energy_consumption\n    return battery_life", "problem_description": "Write a python function that calculates the battery life of a device based on some parameters, I need to measure the typical experience of a user doing taskX, my device has different performance modes and schedulers, and I want the agent to help me.The signature of the function is: def calculate_battery_life(performance_mode, scheduler, cores, utilization, battery_capacity, powerConsumption_rate_per_core)", "test_cases": {"test1": "calculate_battery_life('performance', 'noop', 4, 0.8, 3000, 1.5)", "test2": "calculate_battery_life('normal', 'cfq', 4, 0.6, 3000, 1.0)", "test3": "calculate_battery_life('power_save', 'deadline', 2, 0.4, 3000, 0.5)", "test4": "calculate_battery_life('invalid_mode', 'noop', 4, 0.8, 3000, 1.0)", "test5": "calculate_battery_life('performance', 'invalid_scheduler', 4, 0.8, 3000, 1.0)", "test6": "calculate_battery_life('normal', 'cfq', 4, 1.2, 3000, 1.2)", "test7": "calculate_battery_life('power_save', 'deadline', 2, 0.2, 3000, 0.3)", "test8": "calculate_battery_life('performance', 'noop', 4, 1.0, 3000, 2.0)", "test9": "calculate_battery_life('normal', 'cfq', 2, 0.6, 3000, 1.0)", "test10": "calculate_battery_life('power_save', 'deadline', 4, 0.4, 3000, 1.0)"}, "hidden_information": "def calculate_battery_life(performance_mode, scheduler, cores, utilization, battery_capacity, powerConsumption_rate_per_core):\n    if performance_mode == 'performance' and scheduler == 'noop':\n        energy_consumption = powerConsumption_rate_per_core * cores * utilization\n    elif performance_mode == 'normal' and scheduler == 'cfq':\n        energy_consumption = powerConsumption_rate_per_core * (cores * 0.8) * utilization\n    elif performance_mode == 'power_save' and scheduler == 'deadline':\n        energy_consumption = powerConsumption_rate_per_core * (cores * 0.5) * utilization\n    else:\n        return 'Invalid performance mode or scheduler'\n    battery_life = battery_capacity / energy_consumption\n    return battery_life"}
{"ground_truth": "def suggest_food(ingredients, diet_restrictions = None):\n    # Load the recipe database\n    recipe_db = {\n        'veggie_bites': ['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'],\n        'burgers': ['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs', 'mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato']\n    }\n    \n    # Filter the recipes based on ingredients\n    suggested_recipes = {}\n    for recipe, ingredient_list in recipe_db.items():\n        if all(ingredient in ingredients for ingredient in ingredient_list):\n            suggested_recipes[recipe] = ingredient_list\n    \n    # Filter based on diet restrictions if provided\n    if diet_restrictions:\n        for recipe, ingredient_list in list(suggested_recipes.items()):\n            for restriction in diet_restrictions:\n                if restriction in ingredient_list:\n                    del suggested_recipes[recipe]\n                    break\n    \n    return list(suggested_recipes.keys())", "problem_description": "I want a Python function that can take in a list of ingredients and optionally, a list of diet restrictions, and return a list of kid-friendly finger food items that can be made using those ingredients. The function should have access to a database of recipes, and it should filter the recipes based on the ingredients and diet restrictions. Can you write such a function for me?The signature of the function is: def suggest_food(ingredients, diet_restrictions = None)", "test_cases": {"test1": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'])", "test2": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato'], ['mushrooms'])", "test3": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'])", "test4": "suggest_food(['shallot', 'celery', 'carrot', 'leek'])", "test5": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'], ['celery'])", "test6": "suggest_food(['mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato'])", "test7": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato'], ['mushrooms', 'Cheese'])", "test8": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'])", "test9": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'])", "test10": "suggest_food(['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato'], ['mushrooms', 'Cheese', 'bread'])"}, "hidden_information": "def suggest_food(ingredients, diet_restrictions = None):\n    # Load the recipe database\n    recipe_db = {\n        'veggie_bites': ['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs'],\n        'burgers': ['shallot', 'celery', 'carrot', 'leek', 'mushrooms', 'Parmesan', 'bread crumbs', 'mayonnaise', 'Cheddar', 'buns', 'lettuce', 'tomato']\n    }\n    \n    # Filter the recipes based on ingredients\n    suggested_recipes = {}\n    for recipe, ingredient_list in recipe_db.items():\n        if all(ingredient in ingredients for ingredient in ingredient_list):\n            suggested_recipes[recipe] = ingredient_list\n    \n    # Filter based on diet restrictions if provided\n    if diet_restrictions:\n        for recipe, ingredient_list in list(suggested_recipes.items()):\n            for restriction in diet_restrictions:\n                if restriction in ingredient_list:\n                    del suggested_recipes[recipe]\n                    break\n    \n    return list(suggested_recipes.keys())"}
{"ground_truth": "def calculate_retina_display_pixels(resolution, pixel_density, screen_size): \n  return resolution[0] * resolution[1]", "problem_description": "I want you to write a Python function to help me calculate the total number of pixels in Apple's Super Retina display based on its resolution, pixel density, and screen size, especially since the next iPhone might have a 4-inch display with 1.5 million pixels.The signature of the function is: def calculate_retina_display_pixels(resolution, pixel_density, screen_size)", "test_cases": {"test1": "calculate_retina_display_pixels((1360, 640), 326, 4)", "test2": "calculate_retina_display_pixels((2272, 1280), 522, 5)", "test3": "calculate_retina_display_pixels((1080, 1920), 486, 4.7)", "test4": "calculate_retina_display_pixels((640, 1136), 326, 4)", "test5": "calculate_retina_display_pixels((750, 1334), 326, 4.7)", "test6": "calculate_retina_display_pixels((1080, 2244), 458, 5.5)", "test7": "calculate_retina_display_pixels((720, 1280), 294, 4.7)", "test8": "calculate_retina_display_pixels((800, 1280), 280, 4.7)", "test9": "calculate_retina_display_pixels((900, 1600), 267, 5.5)", "test10": "calculate_retina_display_pixels((540, 960), 260, 4.7)"}, "hidden_information": "def calculate_retina_display_pixels(resolution, pixel_density, screen_size): \n  return resolution[0] * resolution[1]"}
{"ground_truth": "def compare_phones(find5_specs, other_phone_specs):\n  # Initialize the number of better specs for each phone\n  find5_better_specs = 0\n  other_phone_better_specs = 0\n\n  # Compare each spec\n  if find5_specs['processor_speed'] > other_phone_specs['processor_speed']:\n    find5_better_specs += 1\n  elif find5_specs['processor_speed'] < other_phone_specs['processor_speed']:\n    other_phone_better_specs += 1\n\n  if find5_specs['display_resolution'] > other_phone_specs['display_resolution']:\n    find5_better_specs += 1\n  elif find5_specs['display_resolution'] < other_phone_specs['display_resolution']:\n    other_phone_better_specs += 1\n\n  if find5_specs['battery_capacity'] > other_phone_specs['battery_capacity']:\n    find5_better_specs += 1\n  elif find5_specs['battery_capacity'] < other_phone_specs['battery_capacity']:\n    other_phone_better_specs += 1\n\n  # Return the result\n  if find5_better_specs > other_phone_better_specs:\n    return 'Find 5'\n  elif find5_better_specs < other_phone_better_specs:\n    return 'Other Phone'\n  else:\n    return 'Tie'", "problem_description": "I want you to write a Python function that can compare the specs of the Oppo Find 5 with other phones. I need to determine which phone has the better specs in terms of processor speed, display resolution, and battery capacity.The signature of the function is: def compare_phones(find5_specs, other_phone_specs)", "test_cases": {"test1": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.8, 'display_resolution': 400, 'battery_capacity': 3000})", "test2": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.2, 'display_resolution': 450, 'battery_capacity': 2200})", "test3": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500})", "test4": "compare_phones({'processor_speed': 1.8, 'display_resolution': 400, 'battery_capacity': 3000}, {'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500})", "test5": "compare_phones({'processor_speed': 1.2, 'display_resolution': 450, 'battery_capacity': 2200}, {'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500})", "test6": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.5, 'display_resolution': 400, 'battery_capacity': 2500})", "test7": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.2, 'display_resolution': 441, 'battery_capacity': 2200})", "test8": "compare_phones({'processor_speed': 1.8, 'display_resolution': 400, 'battery_capacity': 3000}, {'processor_speed': 1.8, 'display_resolution': 400, 'battery_capacity': 3000})", "test9": "compare_phones({'processor_speed': 1.2, 'display_resolution': 450, 'battery_capacity': 2200}, {'processor_speed': 1.2, 'display_resolution': 450, 'battery_capacity': 2200})", "test10": "compare_phones({'processor_speed': 1.5, 'display_resolution': 441, 'battery_capacity': 2500}, {'processor_speed': 1.5, 'display_resolution': 450, 'battery_capacity': 2500})"}, "hidden_information": "def compare_phones(find5_specs, other_phone_specs):\n  # Initialize the number of better specs for each phone\n  find5_better_specs = 0\n  other_phone_better_specs = 0\n\n  # Compare each spec\n  if find5_specs['processor_speed'] > other_phone_specs['processor_speed']:\n    find5_better_specs += 1\n  elif find5_specs['processor_speed'] < other_phone_specs['processor_speed']:\n    other_phone_better_specs += 1\n\n  if find5_specs['display_resolution'] > other_phone_specs['display_resolution']:\n    find5_better_specs += 1\n  elif find5_specs['display_resolution'] < other_phone_specs['display_resolution']:\n    other_phone_better_specs += 1\n\n  if find5_specs['battery_capacity'] > other_phone_specs['battery_capacity']:\n    find5_better_specs += 1\n  elif find5_specs['battery_capacity'] < other_phone_specs['battery_capacity']:\n    other_phone_better_specs += 1\n\n  # Return the result\n  if find5_better_specs > other_phone_better_specs:\n    return 'Find 5'\n  elif find5_better_specs < other_phone_better_specs:\n    return 'Other Phone'\n  else:\n    return 'Tie'"}
{"ground_truth": "def calculate_guilt_index(food, social_setting=False, ranking={'Candy and Ice Cream': 1, 'Potato Chips': 2, 'Cake': 3, 'Pastries': 4, 'Fast Food': 5}): guilt_index = ranking.get(food, 10) if social_setting else 2 * ranking.get(food, 10); return guilt_index", "problem_description": "I want you to write a python function to calculate a 'guilt index' based on food type and setting. The guilt index of a food item increases when consumed in a social setting (i.e., eating with others). Implement this function.The signature of the function is: def calculate_guilt_index(food, social_setting=False, ranking={'Candy and Ice Cream'", "test_cases": {"test1": "calculate_guilt_index('Candy and Ice Cream', True)", "test2": "calculate_guilt_index('Carrots', False)", "test3": "calculate_guilt_index('Cake', False)", "test4": "calculate_guilt_index('Potato Chips', True)", "test5": "calculate_guilt_index('Fast Food', False)", "test6": "calculate_guilt_index('Pastries', True)", "test7": "calculate_guilt_index('Ice Cream', True)", "test8": "calculate_guilt_index('Popcorn', False)", "test9": "calculate_guilt_index('Candy', False)", "test10": "calculate_guilt_index('Pizza', True)"}, "hidden_information": "def calculate_guilt_index(food, social_setting=False, ranking={'Candy and Ice Cream': 1, 'Potato Chips': 2, 'Cake': 3, 'Pastries': 4, 'Fast Food': 5}): guilt_index = ranking.get(food, 10) if social_setting else 2 * ranking.get(food, 10); return guilt_index"}
{"ground_truth": "def calculate_creationist_abortion_rate(defective_birth_rate, human_induced_abortion_rate): return defective_birth_rate / (defective_birth_rate + human_induced_abortion_rate)", "problem_description": "I need you to write a python function that calculates a creationist's abortion rate, considering their stance that every embryo is a gift from God. This rate should be compared to the rate of human-induced abortions. I want the function to take the defective birth rate and human-induced abortion rate as parameters.The signature of the function is: def calculate_creationist_abortion_rate(defective_birth_rate, human_induced_abortion_rate)", "test_cases": {"test1": "calculate_creationist_abortion_rate(0.5, 0.05)", "test2": "calculate_creationist_abortion_rate(0.25, 0.1)", "test3": "calculate_creationist_abortion_rate(0.75, 0.2)", "test4": "calculate_creationist_abortion_rate(0.1, 0.4)", "test5": "calculate_creationist_abortion_rate(0.3, 0.15)", "test6": "calculate_creationist_abortion_rate(0.4, 0.25)", "test7": "calculate_creationist_abortion_rate(0.2, 0.3)", "test8": "calculate_creationist_abortion_rate(0.6, 0.35)", "test9": "calculate_creationist_abortion_rate(0.45, 0.1)", "test10": "calculate_creationist_abortion_rate(0.55, 0.05)"}, "hidden_information": "def calculate_creationist_abortion_rate(defective_birth_rate, human_induced_abortion_rate): return defective_birth_rate / (defective_birth_rate + human_induced_abortion_rate)"}
{"ground_truth": "def get_playoff_standings(series_score, current_game_score):\n    if series_score[0] > series_score[1]:\n        return f'Team 1 leads {series_score[0]}-{series_score[1]} in series and current game is {current_game_score[0]}-{current_game_score[1]}'\n    elif series_score[1] > series_score[0]:\n        return f'Team 2 leads {series_score[1]}-{series_score[0]} in series and current game is {current_game_score[0]}-{current_game_score[1]}'\n    else:\n        return f'The series is tied {series_score[0]}-{series_score[1]} and current game is {current_game_score[0]}-{current_game_score[1]}'", "problem_description": "I'm thinking of a hockey playoff series and I want a function that will tell me the current standing of the teams in the series after each game. The input should be the current series score and the current game's score. The function should write a string stating which team is leading, the current score in the series and the score of the current game. Can you write a python function that does this?The signature of the function is: def get_playoff_standings(series_score, current_game_score)", "test_cases": {"test1": "get_playoff_standings([3, 1], [4, 3])", "test2": "get_playoff_standings([2, 1], [3, 2])", "test3": "get_playoff_standings([0, 3], [1, 2])", "test4": "get_playoff_standings([2, 2], [2, 2])", "test5": "get_playoff_standings([4, 0], [5, 0])", "test6": "get_playoff_standings([1, 3], [2, 3])", "test7": "get_playoff_standings([2, 2], [3, 1])", "test8": "get_playoff_standings([3, 1], [2, 3])", "test9": "get_playoff_standings([0, 3], [1, 1])", "test10": "get_playoff_standings([4, 0], [1, 1])"}, "hidden_information": "def get_playoff_standings(series_score, current_game_score):\n    if series_score[0] > series_score[1]:\n        return f'Team 1 leads {series_score[0]}-{series_score[1]} in series and current game is {current_game_score[0]}-{current_game_score[1]}'\n    elif series_score[1] > series_score[0]:\n        return f'Team 2 leads {series_score[1]}-{series_score[0]} in series and current game is {current_game_score[0]}-{current_game_score[1]}'\n    else:\n        return f'The series is tied {series_score[0]}-{series_score[1]} and current game is {current_game_score[0]}-{current_game_score[1]}'"}
{"ground_truth": "def calculate_emotion(text):\n    emotions = {\n        'happy': ['excited', 'happy', 'joy'],\n        'sad': ['sad', 'loss', 'pain', 'grief'],\n        'angry': ['angry', 'scared', 'hurt', 'pissed'],\n        'neutral': ['none']\n    }\n    words = text.lower().split()\n    emotion_counts = {emotion: 0 for emotion in emotions.keys()}\n    for word in words:\n        for emotion, word_list in emotions.items():\n            if word in word_list:\n                emotion_counts[emotion] += 1\n    max_emotion = max(emotion_counts, key=emotion_counts.get)\n    return max_emotion", "problem_description": "Hi, I want to write a story and I want the agent to write a python function that can help me determine the emotions of the characters based on the events that occur in the story. The agent needs to collaborate and interact with me to resolve the ambiguity and clarify what I mean by 'emotions' and 'events'.The signature of the function is: def calculate_emotion(text)", "test_cases": {"test1": "calculate_emotion('What is the emotion of the text: I am excited for my upcoming birthday party?')", "test2": "calculate_emotion('What is the emotion of the text: I lost my favorite toy and I am very sad.')", "test3": "calculate_emotion('What is the emotion of the text: I am scared of the monster in the closet.')", "test4": "calculate_emotion('What is the emotion of the text: I am feeling neutral about this situation.')", "test5": "calculate_emotion('What is the emotion of the text: I just won the game and I am happy.')", "test6": "calculate_emotion('What is the emotion of the text: I just got hurt and I am in pain.')", "test7": "calculate_emotion('What is the emotion of the text: I just had a fight with my friend and I am angry.')", "test8": "calculate_emotion('What is the emotion of the text: I just watched a funny movie and I am joyful.')", "test9": "calculate_emotion('What is the emotion of the text: I just received some bad news and I am sad.')", "test10": "calculate_emotion('What is the emotion of the text: I am just hanging out with my friends and I am neutral.')"}, "hidden_information": "def calculate_emotion(text):\n    emotions = {\n        'happy': ['excited', 'happy', 'joy'],\n        'sad': ['sad', 'loss', 'pain', 'grief'],\n        'angry': ['angry', 'scared', 'hurt', 'pissed'],\n        'neutral': ['none']\n    }\n    words = text.lower().split()\n    emotion_counts = {emotion: 0 for emotion in emotions.keys()}\n    for word in words:\n        for emotion, word_list in emotions.items():\n            if word in word_list:\n                emotion_counts[emotion] += 1\n    max_emotion = max(emotion_counts, key=emotion_counts.get)\n    return max_emotion"}
{"ground_truth": "def is_election_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)", "problem_description": "I want you to write a function that can tell me whether a given year is an election year or not, but I am not sure how to define an election year... can you please create a function in Python that will help me determine this?The signature of the function is: def is_election_year(year)", "test_cases": {"test1": "is_election_year(2024)", "test2": "is_election_year(2023)", "test3": "is_election_year(1900)", "test4": "is_election_year(2000)", "test5": "is_election_year(2012)", "test6": "is_election_year(1996)", "test7": "is_election_year(2020)", "test8": "is_election_year(1920)", "test9": "is_election_year(1950)", "test10": "is_election_year(2050)"}, "hidden_information": "def is_election_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"}
{"ground_truth": "def generate_playlist(mood, playlist_length, artist_influence):\n    # Define a dictionary of moods, genres and artists\n    mood_dict = {\n        'cinematic': ['soundtrack', 'film scoring'],\n        'suspenseful': ['psycho', 'vertigo'],\n        'atmospheric': ['twin peaks']\n    }\n\n    # Get the genre and influenced artists for the given mood\n    genre = mood_dict.get(mood)\n    artists = [f'{artist} inspired' for artist in genre]\n\n    # Generate the playlist with the desired length\n    playlist = [f'{artist} - Song {i}' for i in range(1, playlist_length + 1) for artist in artists]\n\n    return playlist", "problem_description": "Hey LLM agent, I want you to write a Python function that generates a music playlist for me. I'd like the playlist to evoke a specific mood, have a certain length, and be influenced by a particular artist. Can you help me out?The signature of the function is: def generate_playlist(mood, playlist_length, artist_influence)", "test_cases": {"test1": "generate_playlist('cinematic', 10, 'bernard herrmann')", "test2": "generate_playlist('suspenseful', 8, 'alfred hitchcock')", "test3": "generate_playlist('atmospheric', 12, 'twin peaks')", "test4": "generate_playlist('cinematic', 5, 'sune rose wagner')", "test5": "generate_playlist('suspenseful', 7, 'twilight zone')", "test6": "generate_playlist('cinematic', 9, 'psycho')", "test7": "generate_playlist('atmospheric', 11, 'vertigo')", "test8": "generate_playlist('cinematic', 6, 'raveonettes')", "test9": "generate_playlist('suspenseful', 10, 'bernard herrmann')", "test10": "generate_playlist('atmospheric', 8, 'twin peaks')"}, "hidden_information": "def generate_playlist(mood, playlist_length, artist_influence):\n    # Define a dictionary of moods, genres and artists\n    mood_dict = {\n        'cinematic': ['soundtrack', 'film scoring'],\n        'suspenseful': ['psycho', 'vertigo'],\n        'atmospheric': ['twin peaks']\n    }\n\n    # Get the genre and influenced artists for the given mood\n    genre = mood_dict.get(mood)\n    artists = [f'{artist} inspired' for artist in genre]\n\n    # Generate the playlist with the desired length\n    playlist = [f'{artist} - Song {i}' for i in range(1, playlist_length + 1) for artist in artists]\n\n    return playlist"}
{"ground_truth": "def translate_used_car_jargon(term):\n    translations = {\n        \"One lady owner\": \"We can't find the rego papers.\",\n        \"Only ever driven on Sunday\": \"It doesn't always start when you turn the key...\",\n        \"Good for its age\" : \"This is a reeeeeeally old car.\",\n        \"Always garaged\" : \"My mate's cousin has a garage and I used it once.\",\n        \"No rust\" : \"I asked the dodgy repair bloke to cover up all the orange stuff.\",\n        \"As new\" : \"It's got four wheels.\",\n        \"Owner moving overseas\" : \"I'll halve the price.\",\n        \"Regretful sale\" : \"Crikies, I can't wait to get rid of this jalopy.\",\n        \"Selling it for my mum\" : \"Mum gave me the car for my 18th birthday.\",\n        \"Never been in a crash\" : \"It's been repaired after every crash.\",\n        \"Full service history\" : \"I'm pretty sure it's had an oil change.\",\n        \"Very reliable\" : \"It hasn't broken down since last time.\",\n        \"One of its kind\" : \"No one else has scraped the right hand side down a wall like that before.\",\n        \"Don't hesitate to call\" : \"Please. Please\u2026.. PLEASE. Someone call!\",\n        \"Negotiable\" : \"I have no idea how much my car is worth.\",\n        \"ONO\" : \"I have no idea how much my car is worth.\",\n        \"No tyre kickers\" : \"Unless you've got $300 jeans or sunglasses you're not getting behind the wheel.\",\n        \"Has been a fantastic family car\" : \"\u2026 but now it's buggered.\",\n        \"New tyres\" : \"The rest of the car looks like it's been dragged through a creekbed, but check out the new rubber.\"\n    }\n    return translations.get(term, \"No translation found\")\n", "problem_description": "Hey, I need help writing a Python function that translates used car ad jargon into plain English. Can you write a function that takes a term as input and returns its corresponding translation?The signature of the function is: def translate_used_car_jargon(term)", "test_cases": {"test1": "translate_used_car_jargon(\"One lady owner\")", "test2": "translate_used_car_jargon(\"Only ever driven on Sunday\")", "test3": "translate_used_car_jargon(\"Good for its age\")", "test4": "translate_used_car_jargon(\"Always garaged\")", "test5": "translate_used_car_jargon(\"No rust\")", "test6": "translate_used_car_jargon(\"As new\")", "test7": "translate_used_car_jargon(\"Owner moving overseas\")", "test8": "translate_used_car_jargon(\"Regretful sale\")", "test9": "translate_used_car_jargon(\"Selling it for my mum\")", "test10": "translate_used_car_jargon(\"Unknown term\")"}, "hidden_information": "def translate_used_car_jargon(term):\n    translations = {\n        \"One lady owner\": \"We can't find the rego papers.\",\n        \"Only ever driven on Sunday\": \"It doesn't always start when you turn the key...\",\n        \"Good for its age\" : \"This is a reeeeeeally old car.\",\n        \"Always garaged\" : \"My mate's cousin has a garage and I used it once.\",\n        \"No rust\" : \"I asked the dodgy repair bloke to cover up all the orange stuff.\",\n        \"As new\" : \"It's got four wheels.\",\n        \"Owner moving overseas\" : \"I'll halve the price.\",\n        \"Regretful sale\" : \"Crikies, I can't wait to get rid of this jalopy.\",\n        \"Selling it for my mum\" : \"Mum gave me the car for my 18th birthday.\",\n        \"Never been in a crash\" : \"It's been repaired after every crash.\",\n        \"Full service history\" : \"I'm pretty sure it's had an oil change.\",\n        \"Very reliable\" : \"It hasn't broken down since last time.\",\n        \"One of its kind\" : \"No one else has scraped the right hand side down a wall like that before.\",\n        \"Don't hesitate to call\" : \"Please. Please\u2026.. PLEASE. Someone call!\",\n        \"Negotiable\" : \"I have no idea how much my car is worth.\",\n        \"ONO\" : \"I have no idea how much my car is worth.\",\n        \"No tyre kickers\" : \"Unless you've got $300 jeans or sunglasses you're not getting behind the wheel.\",\n        \"Has been a fantastic family car\" : \"\u2026 but now it's buggered.\",\n        \"New tyres\" : \"The rest of the car looks like it's been dragged through a creekbed, but check out the new rubber.\"\n    }\n    return translations.get(term, \"No translation found\")\n"}
{"ground_truth": "def calculate_cancer_relapse_probability(diet_factor, exercise_factor): return 1 - (diet_factor * 0.33 + exercise_factor * 0.5)", "problem_description": "Hey, I want you to write a python function to calculate the probability of cancer relapse based on some factors, but I am not sure what factors I need, can you help me figure it out?The signature of the function is: def calculate_cancer_relapse_probability(diet_factor, exercise_factor)", "test_cases": {"test1": "calculate_cancer_relapse_probability(0.5, 0.8)", "test2": "calculate_cancer_relapse_probability(0.2, 0.4)", "test3": "calculate_cancer_relapse_probability(0.8, 0.8)", "test4": "calculate_cancer_relapse_probability(0.1, 0.1)", "test5": "calculate_cancer_relapse_probability(1.0, 1.0)", "test6": "calculate_cancer_relapse_probability(0.5, 0.2)", "test7": "calculate_cancer_relapse_probability(0.8, 0.1)", "test8": "calculate_cancer_relapse_probability(0.2, 0.5)", "test9": "calculate_cancer_relapse_probability(0.4, 0.4)", "test10": "calculate_cancer_relapse_probability(0.6, 0.6)"}, "hidden_information": "def calculate_cancer_relapse_probability(diet_factor, exercise_factor): return 1 - (diet_factor * 0.33 + exercise_factor * 0.5)"}
{"ground_truth": "def calculate_flip_flop_risk(hours_worn, activities):\n    risk_level = 0\n    activities_score = {'walking': 1, 'running': 2, 'standing': 3}\n    for activity in activities:\n        risk_level += activities_score.get(activity, 0)\n    if hours_worn > 4:\n        risk_level *= 1.5\n    if risk_level > 5:\n        return 'High'\n    elif risk_level > 2:\n        return 'Moderate'\n    else:\n        return 'Low'", "problem_description": "Can you write a python function that can help me determine the risk level of wearing flip-flops? I'm not really sure how to define the risk level, but I know it depends on how long I've been wearing them and what I've been doing while wearing them. Can you figure out the details?The signature of the function is: def calculate_flip_flop_risk(hours_worn, activities)", "test_cases": {"test1": "calculate_flip_flop_risk(2, ['walking', 'standing'])", "test2": "calculate_flip_flop_risk(5, ['running'])", "test3": "calculate_flip_flop_risk(3, [])", "test4": "calculate_flip_flop_risk(6, ['walking', 'running'])", "test5": "calculate_flip_flop_risk(1, ['standing'])", "test6": "calculate_flip_flop_risk(4, ['walking', 'standing', 'running'])", "test7": "calculate_flip_flop_risk(0, ['running'])", "test8": "calculate_flip_flop_risk(4, [])", "test9": "calculate_flip_flop_risk(5, ['walking', 'standing'])", "test10": "calculate_flip_flop_risk(3, ['running', 'running'])"}, "hidden_information": "def calculate_flip_flop_risk(hours_worn, activities):\n    risk_level = 0\n    activities_score = {'walking': 1, 'running': 2, 'standing': 3}\n    for activity in activities:\n        risk_level += activities_score.get(activity, 0)\n    if hours_worn > 4:\n        risk_level *= 1.5\n    if risk_level > 5:\n        return 'High'\n    elif risk_level > 2:\n        return 'Moderate'\n    else:\n        return 'Low'"}
{"ground_truth": "def calculate_player_performance(player_goals, player_shots, player_minutes_played):\n  minutes_per_goal = player_minutes_played / player_goals\n  shots_per_goal = player_shots / player_goals\n  performance_score = minutes_per_goal / shots_per_goal\n  return performance_score", "problem_description": "Can you write a python function to calculate some football player performance metrics? I want to track how well my players are doing but I don't know which metrics are the most important. I want something to do with goals, shots, and minutes played.The signature of the function is: def calculate_player_performance(player_goals, player_shots, player_minutes_played)", "test_cases": {"test1": "calculate_player_performance(10, 50, 900)", "test2": "calculate_player_performance(5, 20, 450)", "test3": "calculate_player_performance(8, 40, 720)", "test4": "calculate_player_performance(12, 60, 1080)", "test5": "calculate_player_performance(7, 30, 630)", "test6": "calculate_player_performance(9, 45, 810)", "test7": "calculate_player_performance(11, 55, 990)", "test8": "calculate_player_performance(6, 25, 540)", "test9": "calculate_player_performance(4, 18, 360)", "test10": "calculate_player_performance(3, 15, 270)"}, "hidden_information": "def calculate_player_performance(player_goals, player_shots, player_minutes_played):\n  minutes_per_goal = player_minutes_played / player_goals\n  shots_per_goal = player_shots / player_goals\n  performance_score = minutes_per_goal / shots_per_goal\n  return performance_score"}
{"ground_truth": "def calculate_economic_impact(deficit, inflation_rate, employment_rate, spending_cut_percentage):\n    # assuming the national economy is 80% of the government's budget\n    economy_size = deficit * 0.8\n    # calculate the impact of spending cuts on employment\n    employment_impact = (spending_cut_percentage / 100) * employment_rate\n    # calculate the impact of spending cuts on inflation\n    inflation_impact = (spending_cut_percentage / 100) * inflation_rate\n    # calculate the overall economic impact\n    economic_impact = (employment_impact + inflation_impact) / economy_size\n    return economic_impact", "problem_description": "I need a Python function to calculate the impact of government spending cuts on the national economy. Can you write a function that takes into account the current deficit, inflation rate, employment rate, and percentage of spending cuts? I'm not sure about the exact formula, but I want to see how the agent comes up with it.The signature of the function is: def calculate_economic_impact(deficit, inflation_rate, employment_rate, spending_cut_percentage)", "test_cases": {"test1": "calculate_economic_impact(1000000, 0.05, 0.8, 10)", "test2": "calculate_economic_impact(500000, 0.03, 0.7, 15)", "test3": "calculate_economic_impact(2000000, 0.01, 0.9, 20)", "test4": "calculate_economic_impact(800000, 0.02, 0.6, 5)", "test5": "calculate_economic_impact(1500000, 0.04, 0.85, 12)", "test6": "calculate_economic_impact(2500000, 0.01, 0.95, 8)", "test7": "calculate_economic_impact(1000000, 0.03, 0.75, 18)", "test8": "calculate_economic_impact(1800000, 0.02, 0.8, 10)", "test9": "calculate_economic_impact(2200000, 0.05, 0.9, 15)", "test10": "calculate_economic_impact(2800000, 0.04, 0.85, 12)"}, "hidden_information": "def calculate_economic_impact(deficit, inflation_rate, employment_rate, spending_cut_percentage):\n    # assuming the national economy is 80% of the government's budget\n    economy_size = deficit * 0.8\n    # calculate the impact of spending cuts on employment\n    employment_impact = (spending_cut_percentage / 100) * employment_rate\n    # calculate the impact of spending cuts on inflation\n    inflation_impact = (spending_cut_percentage / 100) * inflation_rate\n    # calculate the overall economic impact\n    economic_impact = (employment_impact + inflation_impact) / economy_size\n    return economic_impact"}
{"ground_truth": "def is_worth_watching(genre, director, cast):\n    worth_watching_genres = ['Drama', 'Thriller']\n    worth_watching_directors = ['Juan Antonio Bayona', 'David Lynch']\n    worth_watching_cast = ['Naomi Watts', 'Ewan McGregor']\n    return genre in worth_watching_genres and director in worth_watching_directors and any(actor in worth_watching_cast for actor in cast)", "problem_description": "Write a python function that determines if a movie is worth watching based on the genre, director and the cast. The function should take list of actors in the cast as an argument and decide whether a person should go watch the movie. For the sake of argument, assume that action movies are bad and  thrillers are always good.The signature of the function is: def is_worth_watching(genre, director, cast)", "test_cases": {"test1": "is_worth_watching('Thriller', 'Juan Antonio Bayona', ['Naomi Watts'])", "test2": "is_worth_watching('Action', 'Quentin Tarantino', ['Leonardo DiCaprio'])", "test3": "is_worth_watching('Drama', 'David Lynch', ['Ewan McGregor'])", "test4": "is_worth_watching('Comedy', 'Juan Antonio Bayona', ['Naomi Watts'])", "test5": "is_worth_watching('Thriller', 'Quentin Tarantino', ['Naomi Watts'])", "test6": "is_worth_watching('Drama', 'Juan Antonio Bayona', ['Tom Holland'])", "test7": "is_worth_watching('Thriller', 'David Lynch', ['Ewan McGregor', 'Naomi Watts'])", "test8": "is_worth_watching('Action', 'Juan Antonio Bayona', ['Naomi Watts'])", "test9": "is_worth_watching('Comedy', 'David Lynch', ['Naomi Watts'])", "test10": "is_worth_watching('Drama', 'Quentin Tarantino', ['Ewan McGregor'])"}, "hidden_information": "def is_worth_watching(genre, director, cast):\n    worth_watching_genres = ['Drama', 'Thriller']\n    worth_watching_directors = ['Juan Antonio Bayona', 'David Lynch']\n    worth_watching_cast = ['Naomi Watts', 'Ewan McGregor']\n    return genre in worth_watching_genres and director in worth_watching_directors and any(actor in worth_watching_cast for actor in cast)"}
{"ground_truth": "def calculate_video_popularity(video_name, clicks, view_time, related_articles):\n    score = (clicks * view_time) / (related_articles + 1)\n    if score > 1000:\n        return 'Viral Sensation'\n    elif score > 500:\n        return 'Trending'\n    elif score > 100:\n        return 'Popular'\n    else:\n        return 'Niche'", "problem_description": "I want you to write a python function that determines if a video is popular based on its clicks, view time, and related articles. I have some ideas, but I don't know how to turn them into code.The signature of the function is: def calculate_video_popularity(video_name, clicks, view_time, related_articles)", "test_cases": {"test1": "calculate_video_popularity('Countdown: Snuggie Version', 1000, 5, 100)", "test2": "calculate_video_popularity('Cuddly Pop Queen Covers', 577, 3, 104)", "test3": "calculate_video_popularity('Soul Sister Fashion', 200, 2, 20)", "test4": "calculate_video_popularity('Celeb Personal Photo Blogs', 500, 4, 38)", "test5": "calculate_video_popularity('Un-glamorized Model Captures', 300, 3, 50)", "test6": "calculate_video_popularity('Viral Video', 10000, 10, 500)", "test7": "calculate_video_popularity('Niche Video', 50, 1, 10)", "test8": "calculate_video_popularity('Trending Video', 750, 5, 75)", "test9": "calculate_video_popularity('Popular Video', 2000, 6, 150)", "test10": "calculate_video_popularity('Unknown Video', 10, 0.5, 5)"}, "hidden_information": "def calculate_video_popularity(video_name, clicks, view_time, related_articles):\n    score = (clicks * view_time) / (related_articles + 1)\n    if score > 1000:\n        return 'Viral Sensation'\n    elif score > 500:\n        return 'Trending'\n    elif score > 100:\n        return 'Popular'\n    else:\n        return 'Niche'"}
{"ground_truth": "def calculate_bbt_orders(sales_data):\n    bbt_orders = 0\n    for order in sales_data:\n        if order['drinks'] == 'BBT':\n            bbt_orders += order['quantity']\n    return bbt_orders", "problem_description": "Hey agent, I want you to write a Python function that can calculate the number of BBT orders from a cafe's sales data for a given day. Can you figure out what BBT stands for and how to process the data?The signature of the function is: def calculate_bbt_orders(sales_data)", "test_cases": {"test1": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 2}, {'drinks': 'coffee', 'quantity': 1}])", "test2": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 3}, {'drinks': 'tea', 'quantity': 2}, {'drinks': 'BBT', 'quantity': 1}])", "test3": "calculate_bbt_orders([{'drinks': 'latte', 'quantity': 1}, {'drinks': 'BBT', 'quantity': 2}])", "test4": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 1}, {'drinks': 'BBT', 'quantity': 1}])", "test5": "calculate_bbt_orders([{'drinks': 'mocha', 'quantity': 2}])", "test6": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 5}])", "test7": "calculate_bbt_orders([{'drinks': 'tea', 'quantity': 1}, {'drinks': 'coffee', 'quantity': 1}])", "test8": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 3}, {'drinks': 'latte', 'quantity': 2}])", "test9": "calculate_bbt_orders([{'drinks': 'BBT', 'quantity': 2}, {'drinks': 'mocha', 'quantity': 1}])", "test10": "calculate_bbt_orders([{'drinks': 'coffee', 'quantity': 1}, {'drinks': 'tea', 'quantity': 1}, {'drinks': 'BBT', 'quantity': 1}])"}, "hidden_information": "def calculate_bbt_orders(sales_data):\n    bbt_orders = 0\n    for order in sales_data:\n        if order['drinks'] == 'BBT':\n            bbt_orders += order['quantity']\n    return bbt_orders"}
{"ground_truth": "def calculate_overpayment(total_retirees, target_growth_rate, actual_growth_rate, pension_pool):\n    if actual_growth_rate > target_growth_rate:\n        thirteenth_check = (actual_growth_rate - target_growth_rate) * pension_pool\n        return thirteenth_check * total_retirees\n    else:\n        return 0", "problem_description": "Hi LLM, I need your help with a problem. Apparently, there's been a miscalculation in the pension payments to San Jose retirees. I want you to write a Python function that calculates the total overpayment made to these retirees. The pension system has some sort of additional benefit called a '13th check' which only gets paid when the growth of pension fund investments is higher than the target. Can you please help me figure this out?The signature of the function is: def calculate_overpayment(total_retirees, target_growth_rate, actual_growth_rate, pension_pool)", "test_cases": {"test1": "calculate_overpayment(1000, 0.05, 0.06, 1000000)", "test2": "calculate_overpayment(500, 0.04, 0.035, 500000)", "test3": "calculate_overpayment(2000, 0.07, 0.07, 2000000)", "test4": "calculate_overpayment(300, 0.03, 0.025, 300000)", "test5": "calculate_overpayment(1500, 0.055, 0.065, 1500000)", "test6": "calculate_overpayment(2500, 0.045, 0.04, 2500000)", "test7": "calculate_overpayment(1200, 0.06, 0.055, 1200000)", "test8": "calculate_overpayment(1800, 0.04, 0.035, 1800000)", "test9": "calculate_overpayment(2800, 0.065, 0.07, 2800000)", "test10": "calculate_overpayment(100, 0.025, 0.02, 100000)"}, "hidden_information": "def calculate_overpayment(total_retirees, target_growth_rate, actual_growth_rate, pension_pool):\n    if actual_growth_rate > target_growth_rate:\n        thirteenth_check = (actual_growth_rate - target_growth_rate) * pension_pool\n        return thirteenth_check * total_retirees\n    else:\n        return 0"}
{"ground_truth": "def get_graffiti_floor(report_time, graffiti_time_range): return min(int(max(report_time - graffiti_time_range[0], 0) / (graffiti_time_range[1] - graffiti_time_range[0]) * 25), 25)", "problem_description": "Can you write a python function that can determine the floor on which a graffiti is spotted based on the reported time of graffiti sightings from witnesses? I want to know which floor the graffiti is seen given multiple times from multiple witnesses.The signature of the function is: def get_graffiti_floor(report_time, graffiti_time_range)", "test_cases": {"test1": "get_graffiti_floor(8, (7, 8)) == 5", "test2": "get_graffiti_floor(7.8, (7.6, 8.2)) == 21", "test3": "get_graffiti_floor(9, (8, 10)) == 5", "test4": "get_graffiti_floor(8, (7, 8)) == 5", "test5": "get_graffiti_floor(7.9, (7.5, 8.5)) == 9", "test6": "get_graffiti_floor(8.5, (8, 9)) == 17", "test7": "get_graffiti_floor(8.1, (7.9, 8.3)) == 11", "test8": "get_graffiti_floor(8, (7, 8)) == 5", "test9": "get_graffiti_floor(7.95, (7.8, 8.1)) == 15", "test10": "get_graffiti_floor(8.2, (7.8, 8.4)) == 18"}, "hidden_information": "def get_graffiti_floor(report_time, graffiti_time_range): return min(int(max(report_time - graffiti_time_range[0], 0) / (graffiti_time_range[1] - graffiti_time_range[0]) * 25), 25)"}
{"ground_truth": "def repeat_string(s, n):\n    return [s] * n", "problem_description": "I want a python function that repeats words in a sentence a certain number of times and returns all the words as a list. The agent needs to ask me clarifying questions to figure out what I mean.The signature of the function is: def repeat_string(s, n)", "test_cases": {"test1": "repeat_string('well', 3)", "test2": "repeat_string('', 5)", "test3": "repeat_string('hello', 0)", "test4": "repeat_string('hi', 1)", "test5": "repeat_string('what', 2)", "test6": "repeat_string('test', 10)", "test7": "repeat_string('a', 4)", "test8": "repeat_string('xyz', 0)", "test9": "repeat_string('go', 8)", "test10": "repeat_string('negative', 1)"}, "hidden_information": "def repeat_string(s, n):\n    return [s] * n"}
{"ground_truth": "def calculate_years_of_service(birth_year, death_year, start_year, end_year):\n  if birth_year < start_year and death_year > end_year:\n    return end_year - start_year + 1\n  elif birth_year < start_year and death_year > start_year and death_year < end_year:\n    return death_year - start_year\n  elif birth_year > start_year and death_year < end_year:\n    return end_year - birth_year\n  elif birth_year > start_year and death_year > end_year:\n    return end_year - birth_year\n  else:\n    return 0", "problem_description": "I need a python function to calculate the years of service for historical figures like politicians. I have the birth year, death year, start year, and end year of their term in office. Can you write a function that uses this information to determine how many years they served? Note that the politician may have started serving before or after their birth year or may have died before or after their term ended.The signature of the function is: def calculate_years_of_service(birth_year, death_year, start_year, end_year)", "test_cases": {"test1": "calculate_years_of_service(1820, 1871, 1855, 1870)", "test2": "calculate_years_of_service(1800, 1850, 1820, 1840)", "test3": "calculate_years_of_service(1810, 1880, 1830, 1870)", "test4": "calculate_years_of_service(1820, 1871, 1850, 1860)", "test5": "calculate_years_of_service(1810, 1880, 1850, 1870)", "test6": "calculate_years_of_service(1800, 1850, 1820, 1840)", "test7": "calculate_years_of_service(1810, 1880, 1830, 1870)", "test8": "calculate_years_of_service(1820, 1871, 1855, 1865)", "test9": "calculate_years_of_service(1810, 1880, 1850, 1870)", "test10": "calculate_years_of_service(1800, 1850, 1820, 1840)"}, "hidden_information": "def calculate_years_of_service(birth_year, death_year, start_year, end_year):\n  if birth_year < start_year and death_year > end_year:\n    return end_year - start_year + 1\n  elif birth_year < start_year and death_year > start_year and death_year < end_year:\n    return death_year - start_year\n  elif birth_year > start_year and death_year < end_year:\n    return end_year - birth_year\n  elif birth_year > start_year and death_year > end_year:\n    return end_year - birth_year\n  else:\n    return 0"}
{"ground_truth": "def calculate_profit(short_term_gain, long_term_profit, sacrifice_factor): return short_term_gain * sacrifice_factor - long_term_profit * sacrifice_factor if sacrifice_factor > 0 else long_term_profit", "problem_description": "I want you to write a python function that represents the concept of killing the goose that lays the golden eggs. I need this function to calculate the result of prioritizing short-term gains over long-term profits. I'm not sure what inputs or outputs should be, can you help me figure it out?The signature of the function is: def calculate_profit(short_term_gain, long_term_profit, sacrifice_factor)", "test_cases": {"test1": "calculate_profit(1000, 10000, 0.1)", "test2": "calculate_profit(500, 5000, 0.2)", "test3": "calculate_profit(2000, 20000, 0)", "test4": "calculate_profit(800, 8000, 0.5)", "test5": "calculate_profit(1200, 12000, -0.1)", "test6": "calculate_profit(300, 3000, 0.8)", "test7": "calculate_profit(1500, 15000, 0.3)", "test8": "calculate_profit(900, 9000, -0.2)", "test9": "calculate_profit(2500, 25000, 0.4)", "test10": "calculate_profit(1800, 18000, 1)"}, "hidden_information": "def calculate_profit(short_term_gain, long_term_profit, sacrifice_factor): return short_term_gain * sacrifice_factor - long_term_profit * sacrifice_factor if sacrifice_factor > 0 else long_term_profit"}
{"ground_truth": "def calculate_jewish_population(demographic_trends, affinity_for_liberalism, years_to_project): return [population * (1 + (0.01 * (1 - affinity_for_liberalism / 100))) for population in demographic_trends] + [population * (0.9 ** years_to_project) for population in demographic_trends[1:]]", "problem_description": "I want the agent to write a Python function that models the growth and decline of the American Jewish population based on certain factors such as affinity for liberalism and trends. However, as a high-level description, it's unclear how the agent should precisely define these factors or structure the function.The signature of the function is: def calculate_jewish_population(demographic_trends, affinity_for_liberalism, years_to_project)", "test_cases": {"test1": "calculate_jewish_population([6000000, 5500000], 0.7, 10)", "test2": "calculate_jewish_population([5500000, 5000000], 0.4, 15)", "test3": "calculate_jewish_population([5000000, 4500000], 0.9, 20)", "test4": "calculate_jewish_population([4500000, 4000000], 0.3, 5)", "test5": "calculate_jewish_population([4000000, 3500000], 0.6, 12)", "test6": "calculate_jewish_population([3500000, 3000000], 0.8, 18)", "test7": "calculate_jewish_population([3000000, 2500000], 0.2, 8)", "test8": "calculate_jewish_population([2500000, 2000000], 0.5, 22)", "test9": "calculate_jewish_population([2000000, 1500000], 0.1, 25)", "test10": "calculate_jewish_population([1500000, 1000000], 0.9, 30)"}, "hidden_information": "def calculate_jewish_population(demographic_trends, affinity_for_liberalism, years_to_project): return [population * (1 + (0.01 * (1 - affinity_for_liberalism / 100))) for population in demographic_trends] + [population * (0.9 ** years_to_project) for population in demographic_trends[1:]]"}
{"ground_truth": "def predict_tension_headache(stress_level, sleep_hours, work_posture, typing_frequency):\n    if stress_level > 6 and (sleep_hours < 7 or work_posture == 'poor' or typing_frequency > 5):\n        return 'High'\n    elif stress_level > 3 and (sleep_hours < 8 or work_posture == 'average' or typing_frequency > 3):\n        return 'Moderate'\n    else:\n        return 'Low'", "problem_description": "Design a python function that takes a user's stress level, sleep hours, work posture, and typing frequency as inputs and outputs the likelihood of them experiencing a tension headache. The function should consider the causes of tension headaches mentioned in the article.The signature of the function is: def predict_tension_headache(stress_level, sleep_hours, work_posture, typing_frequency)", "test_cases": {"test1": "predict_tension_headache(8, 5, 'poor', 7)", "test2": "predict_tension_headache(4, 8, 'good', 2)", "test3": "predict_tension_headache(6, 7, 'average', 5)", "test4": "predict_tension_headache(9, 6, 'poor', 8)", "test5": "predict_tension_headache(3, 9, 'good', 1)", "test6": "predict_tension_headache(7, 6, 'average', 6)", "test7": "predict_tension_headache(5, 7, 'good', 4)", "test8": "predict_tension_headache(8, 5, 'poor', 7)", "test9": "predict_tension_headache(2, 8, 'good', 3)", "test10": "predict_tension_headache(6, 7, 'poor', 6)"}, "hidden_information": "def predict_tension_headache(stress_level, sleep_hours, work_posture, typing_frequency):\n    if stress_level > 6 and (sleep_hours < 7 or work_posture == 'poor' or typing_frequency > 5):\n        return 'High'\n    elif stress_level > 3 and (sleep_hours < 8 or work_posture == 'average' or typing_frequency > 3):\n        return 'Moderate'\n    else:\n        return 'Low'"}
{"ground_truth": "def calculate_gas_surface_density(gas_content, size):\n    # assuming gas content is in units of solar masses and size is in kiloparsecs\n    # and using a conversion factor of 1000 m_sun / kpc^2 per unit\n    return gas_content / (size ** 2) * 1000", "problem_description": "I want you to write a Python function that calculates a value that can be used to determine if a Low Surface Brightness galaxy has a high or low level of star formation based on its gas content and size. Please collaborate with me to resolve any ambiguities.The signature of the function is: def calculate_gas_surface_density(gas_content, size)", "test_cases": {"test1": "calculate_gas_surface_density(1000000, 10)", "test2": "calculate_gas_surface_density(500000, 5)", "test3": "calculate_gas_surface_density(2000000, 20)", "test4": "calculate_gas_surface_density(100000, 1)", "test5": "calculate_gas_surface_density(3000000, 30)", "test6": "calculate_gas_surface_density(800000, 8)", "test7": "calculate_gas_surface_density(1200000, 12)", "test8": "calculate_gas_surface_density(250000, 2.5)", "test9": "calculate_gas_surface_density(900000, 9)", "test10": "calculate_gas_surface_density(1500000, 15)"}, "hidden_information": "def calculate_gas_surface_density(gas_content, size):\n    # assuming gas content is in units of solar masses and size is in kiloparsecs\n    # and using a conversion factor of 1000 m_sun / kpc^2 per unit\n    return gas_content / (size ** 2) * 1000"}
{"ground_truth": "def calculate_young_people_employed(city_job_seekers, young_job_seekers, city_newly_employed, total_job_seekers, young_employment_rate):\n    young_people_employed = round((city_newly_employed * young_job_seekers) / total_job_seekers * (young_employment_rate / 100))\n    return young_people_employed", "problem_description": "I want to calculate the number of people in a given age range (young people, 19-29 years old) who found work in a given city. The city's population and employment rates are similar to Susaki, the city in the article. Can you write a python function to calculate this?The signature of the function is: def calculate_young_people_employed(city_job_seekers, young_job_seekers, city_newly_employed, total_job_seekers, young_employment_rate)", "test_cases": {"test1": "calculate_young_people_employed(1000, 500, 25, 2000, 19)", "test2": "calculate_young_people_employed(800, 300, 20, 1500, 20)", "test3": "calculate_young_people_employed(1200, 600, 30, 2500, 18)", "test4": "calculate_young_people_employed(900, 350, 28, 2000, 20)", "test5": "calculate_young_people_employed(700, 280, 22, 1800, 19)", "test6": "calculate_young_people_employed(1100, 550, 32, 2400, 18)", "test7": "calculate_young_people_employed(1000, 400, 25, 2000, 20)", "test8": "calculate_young_people_employed(1300, 650, 35, 2800, 19)", "test9": "calculate_young_people_employed(800, 320, 24, 1600, 20)", "test10": "calculate_young_people_employed(900, 380, 28, 1900, 18)"}, "hidden_information": "def calculate_young_people_employed(city_job_seekers, young_job_seekers, city_newly_employed, total_job_seekers, young_employment_rate):\n    young_people_employed = round((city_newly_employed * young_job_seekers) / total_job_seekers * (young_employment_rate / 100))\n    return young_people_employed"}
{"ground_truth": "def rank_sextually_active_cities(city_rate_info): return sorted([city for city in city_rate_info.items()], key=lambda city: city[1], reverse=True)", "problem_description": "I want you to write a python function that can order cities from most to least in the context of certain metrics mentioned on that Seattle blog.The signature of the function is: def rank_sextually_active_cities(city_rate_info)", "test_cases": {"city_rank_check1": "rank_sextually_active_cities({\"Austin\": 98, \"Dallas\": 95, \"Seattle\": 85, \"Denver\": 86, \"Indianapolis\": 82})", "city_rank_check2": "rank_sextually_active_cities({\"Columbus\": 92, \"Durham\": 90, \"Arlington\": 87, \"Oklahoma City\": 88, \"Bakersfield\": 84})", "city_rank_check3": "rank_sextually_active_cities({\"Houston\": 96, \"Lubbock\": 89, \"Fort Worth\": 86, \"Charlotte\": 91, \"Fresno\": 83})", "city_rank_check4": "rank_sextually_active_cities({\"San Antonio\": 94, \"Richmond\": 87, \"Anchorage\": 85, \"Nashville\": 84, \"Memphis\": 86})", "city_rank_check5": "rank_sextually_active_cities({\"Kansas City\": 90, \"Atlanta\": 92, \"Omaha\": 83, \"Salt Lake City\": 89, \"Milwaukee\": 85})", "city_rank_check6": "rank_sextually_active_cities({\"Jackson\": 85, \"Washington DC\": 89, \"El Paso\": 84, \"Baltimore\": 83, \"Raleigh\": 86})", "city_rank_check7": "rank_sextually_active_cities({\"Wichita\": 84, \"Montgomery\": 88, \"Columbia\": 86, \"Philadelphia\": 87, \"Cincinnati\": 85})", "city_rank_check8": "rank_sextually_active_cities({\"St. Paul\": 88, \"Sacramento\": 85, \"Grand Rapids\": 84, \"Tulsa\": 82, \"Modesto\": 89})", "city_rank_check9": "rank_sextually_active_cities({\"Sioux Falls\": 87, \"Chicago\": 85, \"Fort Wayne\": 86, \"San Diego\": 88, \"Des Moines\": 84})", "city_rank_check10": "rank_sextually_active_cities({\"Phoenix\": 93, \"New Orleans\": 87, \"Lincoln\": 84, \"Little Rock\": 89, \"Birmingham\": 85})"}, "hidden_information": "def rank_sextually_active_cities(city_rate_info): return sorted([city for city in city_rate_info.items()], key=lambda city: city[1], reverse=True)"}
{"ground_truth": "def calculate_cartel_probability(immigration_status, crime_history): \n    if immigration_status == 'undocumented' and len(crime_history) > 2: \n        return 0.8 \n    elif immigration_status == 'documented' and len(crime_history) > 1: \n        return 0.3 \n    elif immigration_status == 'undocumented' and len(crime_history) == 0: \n        return 0.1 \n    else: \n        return 0.01", "problem_description": "Can you write a python function to help the police department to determine if a suspect is likely to be affiliated with a Mexican cartel based on their immigration status and crime history?The signature of the function is: def calculate_cartel_probability(immigration_status, crime_history)", "test_cases": {"test1": "calculate_cartel_probability('undocumented', ['theft', 'assault', 'murder'])", "test2": "calculate_cartel_probability('documented', ['theft', 'violence'])", "test3": "calculate_cartel_probability('undocumented', [])", "test4": "calculate_cartel_probability('documented', ['kidnapping'])", "test5": "calculate_cartel_probability('undocumented', ['theft', 'murder', 'extortion'])", "test6": "calculate_cartel_probability('documented', [])", "test7": "calculate_cartel_probability('undocumented', ['assault'])", "test8": "calculate_cartel_probability('documented', ['kidnapping', 'extortion'])", "test9": "calculate_cartel_probability('undocumented', ['theft', 'violence', 'extortion'])", "test10": "calculate_cartel_probability('documented', ['robbery'])"}, "hidden_information": "def calculate_cartel_probability(immigration_status, crime_history): \n    if immigration_status == 'undocumented' and len(crime_history) > 2: \n        return 0.8 \n    elif immigration_status == 'documented' and len(crime_history) > 1: \n        return 0.3 \n    elif immigration_status == 'undocumented' and len(crime_history) == 0: \n        return 0.1 \n    else: \n        return 0.01"}
{"ground_truth": "def is_likely_to_get_hired(candidate_score, top_three_scores): return sorted(top_three_scores)[-1] <= candidate_score", "problem_description": "Create a python function that figures out if a person can expect to get hired after taking a job test based on their score as compared to other test-takers. I believe there is some scoring system, if you can somehow incorporate it into your function that would be great.The signature of the function is: def is_likely_to_get_hired(candidate_score, top_three_scores)", "test_cases": {"test1": "is_likely_to_get_hired(90, [80, 85, 95])", "test2": "is_likely_to_get_hired(70, [99, 98, 97])", "test3": "is_likely_to_get_hired(92, [90, 92, 94])", "test4": "is_likely_to_get_hired(85, [80, 85, 89])", "test5": "is_likely_to_get_hired(96, [95, 96, 97])", "test6": "is_likely_to_get_hired(70, [99, 98, 97])", "test7": "is_likely_to_get_hired(80, [80, 85, 95])", "test8": "is_likely_to_get_hired(87, [85, 90, 95])", "test9": "is_likely_to_get_hired(95, [92, 94, 96])", "test10": "is_likely_to_get_hired(78, [80, 85, 90])"}, "hidden_information": "def is_likely_to_get_hired(candidate_score, top_three_scores): return sorted(top_three_scores)[-1] <= candidate_score"}
{"ground_truth": "def improve_sleep_quality(age, weight, diet, stress_level, lifestyle):\n    sleep_quality = 0\n    if 'choline' in diet:\n        sleep_quality += 10\n    else:\n        sleep_quality -= 5\n    if stress_level > 5:\n        sleep_quality -= 10\n    else:\n        sleep_quality += 5\n    if lifestyle == 'sedentary':\n        sleep_quality -= 10\n    else:\n        sleep_quality += 10\n    if age > 50 and weight > 70:\n        sleep_quality -= 5\n    elif age < 30 and weight < 50:\n        sleep_quality += 5\n    return sleep_quality", "problem_description": "I'm having trouble sleeping and I want to improve my sleep quality. I'm not sure what changes I can make to my lifestyle to achieve this. Can you write a python function that takes into account my age, weight, diet, stress level, and lifestyle to give me a sleep quality score and provide some recommendations to improve it?The signature of the function is: def improve_sleep_quality(age, weight, diet, stress_level, lifestyle)", "test_cases": {"test1": "improve_sleep_quality(35, 60, ['choline', 'junk food'], 6, 'sedentary')", "test2": "improve_sleep_quality(25, 40, ['fruits', 'vegetables'], 4, 'active')", "test3": "improve_sleep_quality(45, 80, ['choline', 'red meat'], 7, 'sedentary')", "test4": "improve_sleep_quality(60, 70, ['fish', 'nuts'], 5, 'active')", "test5": "improve_sleep_quality(30, 50, ['pizza', 'burgers'], 3, 'sedentary')", "test6": "improve_sleep_quality(20, 40, ['salad', 'grilled chicken'], 2, 'active')", "test7": "improve_sleep_quality(50, 60, ['eggs', 'yogurt'], 6, 'sedentary')", "test8": "improve_sleep_quality(40, 70, ['steak', 'fries'], 5, 'active')", "test9": "improve_sleep_quality(55, 65, ['tuna', 'avocado'], 4, 'sedentary')", "test10": "improve_sleep_quality(38, 58, ['vegetables', 'fruits'], 3, 'active')"}, "hidden_information": "def improve_sleep_quality(age, weight, diet, stress_level, lifestyle):\n    sleep_quality = 0\n    if 'choline' in diet:\n        sleep_quality += 10\n    else:\n        sleep_quality -= 5\n    if stress_level > 5:\n        sleep_quality -= 10\n    else:\n        sleep_quality += 5\n    if lifestyle == 'sedentary':\n        sleep_quality -= 10\n    else:\n        sleep_quality += 10\n    if age > 50 and weight > 70:\n        sleep_quality -= 5\n    elif age < 30 and weight < 50:\n        sleep_quality += 5\n    return sleep_quality"}
{"ground_truth": "def cook_brisket(onion_quantity, garlic_cloves, cooking_time, garlic_powder, cooking_method):\n    if cooking_method == 'stovetop':\n        cooking_time = cooking_time * 3\n        return f\"Simmer the brisket on stovetop with {onion_quantity} onions and {garlic_cloves} garlic cloves for {cooking_time} hours, then sprinkle with {garlic_powder} garlic powder.\"\n    elif cooking_method == 'oven':\n        return f\"Cook the brisket in the oven with {onion_quantity} onions and {garlic_cloves} garlic cloves at 325\u00b0F for {cooking_time} hours, then sprinkle with {garlic_powder} garlic powder.\"", "problem_description": "Can you write a Python function to help me cook the perfect brisket for my Grandma who loves latkes? I'm not sure about the exact cooking method, but it should involve onions, garlic, and some spices.The signature of the function is: def cook_brisket(onion_quantity, garlic_cloves, cooking_time, garlic_powder, cooking_method)", "test_cases": {"test1": "cook_brisket(2, 3, 3, '1 tsp', 'stovetop')", "test2": "cook_brisket(4, 2, 2, '2 tsp', 'oven')", "test3": "cook_brisket(3, 2, 2.5, '1 tsp', 'stovetop')", "test4": "cook_brisket(5, 4, 3.5, '2 tsp', 'oven')", "test5": "cook_brisket(1, 3, 2.5, '1 tsp', 'stovetop')", "test6": "cook_brisket(3, 4, 3, '2 tsp', 'oven')", "test7": "cook_brisket(5, 1, 2.5, '1 tsp', 'stovetop')", "test8": "cook_brisket(2, 2, 2, '2 tsp', 'oven')", "test9": "cook_brisket(4, 4, 3, '1 tsp', 'stovetop')", "test10": "cook_brisket(1, 1, 2.5, '2 tsp', 'oven')"}, "hidden_information": "def cook_brisket(onion_quantity, garlic_cloves, cooking_time, garlic_powder, cooking_method):\n    if cooking_method == 'stovetop':\n        cooking_time = cooking_time * 3\n        return f\"Simmer the brisket on stovetop with {onion_quantity} onions and {garlic_cloves} garlic cloves for {cooking_time} hours, then sprinkle with {garlic_powder} garlic powder.\"\n    elif cooking_method == 'oven':\n        return f\"Cook the brisket in the oven with {onion_quantity} onions and {garlic_cloves} garlic cloves at 325\u00b0F for {cooking_time} hours, then sprinkle with {garlic_powder} garlic powder.\""}
{"ground_truth": "def get_bakery(bun_type, location):\n    bakeries = {\n        'onion': {'Toronto': 'Silverstein''s', 'Scarborough': 'Toronto Bread Co.'},\n        'sesame': {'Toronto': 'Toronto Bread Co.', 'Scarborough': 'Toronto Bread Co.'},\n        'white': {'Toronto': 'Summerhill Market', 'Scarborough': 'Toronto Bread Co.'},\n        'olive': {'Toronto': 'Thuet'},\n        'yellow': {'Toronto': 'Bagel World'},\n    }\n    if location in bakeries.get(bun_type, {}):\n        return bakeries[bun_type][location]\n    else:\n        return 'Unknown bakery'", "problem_description": "Write a python function that takes the type of bun (e.g. onion, sesame, white, etc.) and a location as parameters and returns the name of a bakery that sells that type of bun in the given location.The signature of the function is: def get_bakery(bun_type, location)", "test_cases": {"test1": "get_bakery('onion', 'Toronto')", "test2": "get_bakery('sesame', 'Scarborough')", "test3": "get_bakery('white', 'Toronto')", "test4": "get_bakery('olive', 'Toronto')", "test5": "get_bakery('yellow', 'Toronto')", "test6": "get_bakery('onion', 'Scarborough')", "test7": "get_bakery('sesame', 'Toronto')", "test8": "get_bakery('white', 'Scarborough')", "test9": "get_bakery('unknown', 'Toronto')", "test10": "get_bakery('onion', 'Unknown location')"}, "hidden_information": "def get_bakery(bun_type, location):\n    bakeries = {\n        'onion': {'Toronto': 'Silverstein''s', 'Scarborough': 'Toronto Bread Co.'},\n        'sesame': {'Toronto': 'Toronto Bread Co.', 'Scarborough': 'Toronto Bread Co.'},\n        'white': {'Toronto': 'Summerhill Market', 'Scarborough': 'Toronto Bread Co.'},\n        'olive': {'Toronto': 'Thuet'},\n        'yellow': {'Toronto': 'Bagel World'},\n    }\n    if location in bakeries.get(bun_type, {}):\n        return bakeries[bun_type][location]\n    else:\n        return 'Unknown bakery'"}
{"ground_truth": "def generate_menu(course_price, premium_sake_pairing=False):\n    menu = []\n    if course_price == 55:\n        menu = [\n            {'name': 'Plum Sauce Marinated Snapper and Yamaimo', 'pairing': None},\n            {'name': 'Saba Oroshi Nimono', 'pairing': None},\n            {'name': 'Fried Scallop & Shiitake Spicy Ponzu', 'pairing': None},\n            {'name': 'Grilled Rolled Beef Asparagus', 'pairing': None},\n            {'name': 'Chef\u2019s Choice Sushi', 'pairing': None},\n            {'name': 'Asari & Enoki Miso Soup', 'pairing': None},\n            {'name': 'Dessert (Yuzu Special Version)', 'pairing': None}\n        ]\n    elif course_price == 76 and premium_sake_pairing:\n        menu = [\n            {'name': 'Plum Sauce Marinated Snapper and Yamaimo', 'pairing': 'Kamozuru'},\n            {'name': 'Saba Oroshi Nimono', 'pairing': 'Oyama'},\n            {'name': 'Fried Scallop & Shiitake Spicy Ponzu', 'pairing': 'Okuno Matsu'},\n            {'name': 'Grilled Rolled Beef Asparagus', 'pairing': 'Masumi'},\n            {'name': 'Chef\u2019s Choice Sushi', 'pairing': 'Kamosibito Kuheiji'},\n            {'name': 'Asari & Enoki Miso Soup', 'pairing': None},\n            {'name': 'Dessert (Yuzu Special Version)', 'pairing': 'Nigori Sake'}\n        ]\n    return menu", "problem_description": "I want a Python function that generates a menu plan based on the monthly omakase course at Yuzu, can you help me? I'm not sure about the specifics, but it should have two price options and include premium sake pairings.The signature of the function is: def generate_menu(course_price, premium_sake_pairing=False)", "test_cases": {"test1": "generate_menu(55)", "test2": "generate_menu(76)", "test3": "generate_menu(55, premium_sake_pairing=True)", "test4": "generate_menu(75)", "test5": "generate_menu(76, premium_sake_pairing=False)", "test6": "generate_menu(77, premium_sake_pairing=True)", "test7": "generate_menu(50)", "test8": "generate_menu(60)", "test9": "generate_menu(76, premium_sake_pairing=True)", "test10": "generate_menu(55, premium_sake_pairing=False)"}, "hidden_information": "def generate_menu(course_price, premium_sake_pairing=False):\n    menu = []\n    if course_price == 55:\n        menu = [\n            {'name': 'Plum Sauce Marinated Snapper and Yamaimo', 'pairing': None},\n            {'name': 'Saba Oroshi Nimono', 'pairing': None},\n            {'name': 'Fried Scallop & Shiitake Spicy Ponzu', 'pairing': None},\n            {'name': 'Grilled Rolled Beef Asparagus', 'pairing': None},\n            {'name': 'Chef\u2019s Choice Sushi', 'pairing': None},\n            {'name': 'Asari & Enoki Miso Soup', 'pairing': None},\n            {'name': 'Dessert (Yuzu Special Version)', 'pairing': None}\n        ]\n    elif course_price == 76 and premium_sake_pairing:\n        menu = [\n            {'name': 'Plum Sauce Marinated Snapper and Yamaimo', 'pairing': 'Kamozuru'},\n            {'name': 'Saba Oroshi Nimono', 'pairing': 'Oyama'},\n            {'name': 'Fried Scallop & Shiitake Spicy Ponzu', 'pairing': 'Okuno Matsu'},\n            {'name': 'Grilled Rolled Beef Asparagus', 'pairing': 'Masumi'},\n            {'name': 'Chef\u2019s Choice Sushi', 'pairing': 'Kamosibito Kuheiji'},\n            {'name': 'Asari & Enoki Miso Soup', 'pairing': None},\n            {'name': 'Dessert (Yuzu Special Version)', 'pairing': 'Nigori Sake'}\n        ]\n    return menu"}
